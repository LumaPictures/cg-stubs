
from typing import Any, Callable, Dict, ClassVar, Generic, IO, List, Literal, Optional, Tuple, TypeVar, Union, overload

from typing import overload
import _geo
import _nukemath

NodeT = TypeVar('NodeT', bound='Node')
KnobT = TypeVar('KnobT', bound='Knob')

ADD_VIEWS: int
AFTER_CONST: int
AFTER_LINEAR: int
ALL: int
ALWAYS_SAVE: int
BEFORE_CONST: int
BEFORE_LINEAR: int
BREAK: int
CATMULL_ROM: int
CONSTANT: int
CUBIC: int
DISABLED: int
DONT_CREATE_VIEWS: int
DONT_SAVE_TO_NODEPRESET: int
DO_NOT_WRITE: int
ENDLINE: int
EXE_PATH: str
EXPAND_TO_WIDTH: int
EXPRESSIONS: int
FLOAT: int
FONT: int
GEO: int
GUI: bool
HIDDEN_INPUTS: int
HORIZONTAL: int
IMAGE: int
INPUTS: int
INT16: int
INT8: int
INTERACTIVE: bool
INVALIDHINT: int
INVISIBLE: int
KNOB_CHANGED_RECURSIVE: int
LINEAR: int
LINKINPUTS: int
LIVEGROUP_CALLBACK_CAN_MAKE_EDITABLE: str
LIVEGROUP_CALLBACK_CAN_PUBLISH: str
LIVEGROUP_CALLBACK_MADE_EDITABLE: str
LIVEGROUP_CALLBACK_PUBLISHED: str
LIVEGROUP_CALLBACK_RELOADED: str
LOG: int
MATCH_CLASS: int
MATCH_COLOR: int
MATCH_LABEL: int
MONITOR: int
NODIR: int
NO_ANIMATION: int
NO_CHECKMARKS: int
NO_MULTIVIEW: int
NO_POSTAGESTAMPS: bool
NO_UNDO: int
NUKE_VERSION_DATE: str
NUKE_VERSION_MAJOR: int
NUKE_VERSION_MINOR: int
NUKE_VERSION_PHASE: str
NUKE_VERSION_PHASENUMBER: int
NUKE_VERSION_RELEASE: int
NUKE_VERSION_STRING: str
NUM_CPUS: int
NUM_INTERPOLATIONS: int
PLUGIN_EXT: str
PRECOMP_CALLBACK_OPENED: str
PREPEND: int
PROFILE_ENGINE: int
PROFILE_REQUEST: int
PROFILE_STORE: int
PROFILE_VALIDATE: int
PYTHON: int
READ_ONLY: int
REPLACE: int
REPLACE_VIEWS: int
SAVE_MENU: int
SCRIPT: int
SMOOTH: int
STARTLINE: int
STRIP_CASCADE_PREFIX: int
TABBEGINCLOSEDGROUP: int
TABBEGINGROUP: int
TABENDGROUP: int
TABKNOB: int
THREADS: int
TO_SCRIPT: int
TO_VALUE: int
USER_SET_SLOPE: int
VIEWER: int
VIEW_NAMES: str
WRITE_ALL: int
WRITE_NON_DEFAULT_ONLY: int
WRITE_USER_KNOB_DEFS: int
env: GlobalsEnvironment
nodes: Nodes
rawArgs: list
untitled: str


class Node:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def Class(self) -> str: ...
    def addCallback(self, name: str, callback: Callable) -> None: ...
    def addKnob(self, knob: KnobT) -> None: ...
    def allKnobs(self) -> List[KnobT]: ...
    def autoplace(self) -> None: ...
    def bbox(self) -> Info: ...
    def canSetInput(self, i: int, node: Node) -> bool: ...
    def channels(self) -> List[str]: ...
    def clearCallbacks(self, *args, **kwargs) -> Any: ...
    def clearCustomIcon(self, *args, **kwargs) -> Any: ...
    def clones(self) -> int: ...
    def connectInput(self, i: int, node: Optional[Node]) -> bool: ...
    def deepSample(self, *args, **kwargs) -> Any: ...
    def deepSampleCount(self, x: int, y: int) -> int: ...
    def dependencies(self, mask: int) -> List[Node]: ...
    def dependent(self, mask: int, forceEvaluate: bool = ...) -> List[Node]: ...
    def error(self) -> bool: ...
    def executePythonCallback(self, event: str) -> Any: ...
    def fileDependencies(self, start: int, end: int) -> List[List[Union[Node, List[str]]]]: ...
    def firstFrame(self) -> int: ...
    def forceUpdateLocalization(self) -> None: ...
    def forceValidate(self) -> None: ...
    def format(self) -> Format: ...
    def frameRange(self) -> FrameRange: ...
    def fullName(self) -> str: ...
    def getNumKnobs(self) -> int: ...
    def hasError(self) -> bool: ...
    def height(self) -> int: ...
    def help(self) -> str: ...
    def hideControlPanel(self) -> None: ...
    def input(self, index: int) -> Optional[Node]: ...
    def inputs(self) -> int: ...
    def isCloneable(self) -> bool: ...
    def isLocalizationOutdated(self) -> bool: ...
    def isLocalized(self) -> bool: ...
    def isSelected(self) -> bool: ...
    def knob(self, p: Union[str, int], follow_link: bool = ...) -> Optional[KnobT]:...
    def knobs(self) -> Dict[str, Knob]: ...
    def lastFrame(self) -> int: ...
    def linkableKnobs(self, knobType: int) -> Tuple[LinkableKnobInfo, ...]: ...
    def localizationProgress(self) -> float: ...
    def lock(self) -> None: ...
    def locked(self) -> bool: ...
    def maxInputs(self) -> int: ...
    def maxOutputs(self) -> int: ...
    def maximumInputs(self) -> int: ...
    def maximumOutputs(self) -> int: ...
    @overload
    def metadata(self, time: float = ..., view: str = ...) -> Dict[str, Any]: ...
    @overload
    def metadata(self, key: str, time: float = ..., view: str = ...) -> Any: ...
    def minInputs(self) -> int: ...
    def minimumInputs(self) -> int: ...
    def name(self) -> str: ...
    def numKnobs(self) -> int: ...
    def opHashes(self) -> List[int]: ...
    def optionalInput(self) -> int: ...
    def parent(self) -> Group: ...
    def performanceInfo(self, *args, **kwargs) -> Any: ...
    def pixelAspect(self) -> float: ...
    def proxy(self) -> bool: ...
    def readKnobs(self, s: str) -> None: ...
    def redraw(self) -> None: ...
    def removeCallback(self, *args, **kwargs) -> Any: ...
    def removeKnob(self, knob: KnobT) -> None: ...
    def resetKnobsToDefault(self) -> None: ...
    def rootNode(self) -> Group: ...
    @classmethod
    def running(self, *args, **kwargs) -> Any: ...
    @overload
    def sample(self, Xcoordinate) -> Any: ...
    @overload
    def sample(Ycoordinate) -> Any: ...
    @overload
    def sample(Xcoordinate) -> Any: ...
    @overload
    def sample(Ycoordinate) -> Any: ...
    def screenHeight(self) -> int: ...
    def screenWidth(self) -> int: ...
    def selectOnly(self) -> None: ...
    def setCustomIcon(self, *args, **kwargs) -> Any: ...
    def setInput(self, i: int, node: Optional[Node]) -> bool: ...
    def setName(self, name: str, uncollide: bool = ..., updateExpressions: bool = ...) -> None: ...
    def setSelected(self, selected: bool) -> None: ...
    def setTab(self, tabIndex: int) -> None: ...
    def setXYpos(self, x: int, y: int) -> None: ...
    def setXpos(self, x: int) -> None: ...
    def setYpos(self, y: int) -> None: ...
    def showControlPanel(self, forceFloat: bool = ...) -> None: ...
    def showInfo(self, *args, **kwargs) -> Any: ...
    def shown(self) -> bool: ...
    def treeHasError(self) -> bool: ...
    def unlock(self) -> None: ...
    def upstreamFrameRange(self, i: int) -> Optional[FrameRange]: ...
    def width(self) -> int: ...
    def writeKnobs(self, flags: int = ...) -> str: ...
    def xpos(self) -> int: ...
    def ypos(self) -> int: ...
    # this returns Knob, but doing so causes lots of errors because mypy does not
    # know what type of Knob.
    def __getitem__(self, name: str) -> KnobT: ...
    def __len__(self) -> int: ...
    def __reduce_ex__(self, protocol) -> Any: ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...

class Group(Node):
    def begin(self) -> Group: ...
    def connectSelectedNodes(self, *args, **kwargs) -> Any: ...
    def end(self) -> None: ...
    def expand(self, *args, **kwargs) -> Any: ...
    def node(self, s: str) -> Optional[Node]: ...
    def nodes(self) -> List[Node]: ...
    def numNodes(self) -> int: ...
    def output(self, *args, **kwargs) -> Any: ...
    def run(self, *args, **kwargs) -> Any: ...
    def selectedNode(self) -> Optional[Node]: ...
    def selectedNodes(self) -> List[Node]: ...
    def splaySelectedNodes(self, *args, **kwargs) -> Any: ...
    def subgraphLocked(self) -> bool: ...
    def __enter__(self) -> Group: ...
    def __exit__(self, type, value, traceback) -> Any: ...
    # def __getitem__(self, index) -> Any: ...
    # def __len__(self) -> Any: ...
    def __reduce_ex__(self, protocol) -> Any: ...

class Knob:
    def __init__(self, *args, **kwargs) -> None: ...
    def Class(self) -> str: ...
    def clearAnimated(self, channel: int = ...) -> bool: ...
    def clearFlag(self, flag: int) -> None: ...
    def critical(self, *args, **kwargs) -> Any: ...
    def debug(self, *args, **kwargs) -> Any: ...
    def enabled(self) -> bool: ...
    def error(self, *args, **kwargs) -> Any: ...
    def fromScript(self, script: str) -> None: ...
    def fullyQualifiedName(self, channel: int = ...) -> str: ...
    def getDerivative(self, *args, **kwargs) -> Any: ...
    def getFlag(self, flag: int) -> bool: ...
    def getIntegral(self, *args, **kwargs) -> Any: ...
    def getKeyIndex(self, *args, **kwargs) -> Any: ...
    def getKeyList(self) -> List[int]: ...
    def getKeyTime(self, *args, **kwargs) -> Any: ...
    def getNthDerivative(self, *args, **kwargs) -> Any: ...
    def getNumKeys(self, channel: int = ...) -> int: ...
    def getValue(self, channel: int = ...) -> Any: ...
    def getValueAt(self, frame: float, index: int = ..., view: Optional[str] = ...) -> Any: ...
    def hasExpression(self, index: int = ...) -> bool: ...
    def isAnimated(self, channel: int = ...) -> bool: ...
    def isKey(self, channel: int = ...) -> bool: ...
    def isKeyAt(self, frame: float, index: int = ..., view: Optional[str] = ...) -> bool: ...
    def label(self) -> str: ...
    def name(self) -> str: ...
    def node(self) -> Node: ...
    def removeKey(self, channel: int = ...) -> bool: ...
    def removeKeyAt(self, frame: float, index: int = ..., view: Optional[str] = ...) -> bool: ...
    def setAnimated(self, channel: int = ...) -> bool: ...
    def setEnabled(self, enabled: bool) -> None: ...
    def setExpression(self, expression: str, index: int = ..., view: Optional[str] = ...) -> bool: ...
    def setFlag(self, flag: int) -> None: ...
    def setLabel(self, label: str) -> None: ...
    def setName(self, name: str) -> None: ...
    def setTooltip(self, tooltip: str) -> None: ...
    def setValue(self, val: Any, chan: int = ...) -> bool: ...
    def setValueAt(self, val: Any, time: float, index: int = ..., view: Optional[str] = ...) -> bool: ...
    def setVisible(self, visible: bool) -> None: ...
    def toScript(self, quote: bool = ..., context: Optional[OutputContext] = ...) -> str: ...
    def tooltip(self) -> str: ...
    def value(self, index: int = ...) -> Any: ...
    def visible(self) -> bool: ...
    def warning(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Array_Knob(Knob):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def animation(self, *args, **kwargs) -> Any: ...
    def animations(self) -> Any: ...
    def array(self, *args, **kwargs) -> Any: ...
    def arraySize(self, *args, **kwargs) -> Any: ...
    def clearAnimated(self, *args, **kwargs) -> Any: ...
    def copyAnimation(self, *args, **kwargs) -> Any: ...
    def copyAnimations(self, *args, **kwargs) -> Any: ...
    def defaultValue(self, *args, **kwargs) -> Any: ...
    def deleteAnimation(self, *args, **kwargs) -> Any: ...
    def dimensions(self, *args, **kwargs) -> Any: ...
    def frame(self, *args, **kwargs) -> Any: ...
    def fromScript(self, *args, **kwargs) -> Any: ...
    def getDerivative(self, *args, **kwargs) -> Any: ...
    def getIntegral(self, *args, **kwargs) -> Any: ...
    def getKeyIndex(self, *args, **kwargs) -> Any: ...
    def getKeyTime(self, *args, **kwargs) -> Any: ...
    def getNthDerivative(self, *args, **kwargs) -> Any: ...
    def getNumKeys(self, *args, **kwargs) -> Any: ...
    def getValue(self, *args, **kwargs) -> Any: ...
    def getValueAt(self, *args, **kwargs) -> Any: ...
    def hasExpression(self, *args, **kwargs) -> Any: ...
    def height(self, *args, **kwargs) -> Any: ...
    def isAnimated(self, *args, **kwargs) -> Any: ...
    def isKey(self, *args, **kwargs) -> Any: ...
    def isKeyAt(self, *args, **kwargs) -> Any: ...
    def max(self, *args, **kwargs) -> Any: ...
    def maximum(self, *args, **kwargs) -> Any: ...
    def min(self, *args, **kwargs) -> Any: ...
    def minimum(self, *args, **kwargs) -> Any: ...
    def notDefault(self, *args, **kwargs) -> Any: ...
    def removeKey(self, *args, **kwargs) -> Any: ...
    def removeKeyAt(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def setAnimated(self, *args, **kwargs) -> Any: ...
    def setDefaultValue(self, *args, **kwargs) -> Any: ...
    def setExpression(self, expression, channel = ..., view = ...) -> bool: ...
    def setKeyAt(self, *args, **kwargs) -> Any: ...
    def setRange(self, *args, **kwargs) -> Any: ...
    def setSingleValue(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def setValueAt(self, *args, **kwargs) -> Any: ...
    def singleValue(self, *args, **kwargs) -> Any: ...
    def splitView(self, *args, **kwargs) -> Any: ...
    def toScript(self, *args, **kwargs) -> Any: ...
    def unsplitView(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def valueAt(self, *args, **kwargs) -> Any: ...
    def vect(self, *args, **kwargs) -> Any: ...
    def width(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Color_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def inputNumber(self) -> int: ...
    def names(self, n) -> str: ...
    def __hash__(self) -> Any: ...

class Unsigned_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, val) -> bool: ...
    def value(self) -> int: ...
    def __hash__(self) -> Any: ...

class Enumeration_Knob(Unsigned_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def enumName(self, n: int) -> str: ...
    def getDisplayStrFromID(self) -> Any: ...
    def numValues(self) -> int: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def setValues(self, *args, **kwargs) -> Any: ...
    def value(self) -> Any: ...
    def values(self) -> Any: ...
    def __hash__(self) -> Any: ...

class Channel_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def channelSelector(self) -> bool: ...
    def checkMarks(self) -> bool: ...
    def depth(self) -> int: ...
    def enableChannel(self, name, b) -> None: ...
    def inputKnob(self) -> bool: ...
    def inputNumber(self) -> int: ...
    def isChannelEnabled(self, name) -> bool: ...
    def layerSelector(self) -> bool: ...
    def setEnable(self, name) -> None: ...
    def setInput(self, num) -> None: ...
    def setValue(self, name) -> None: ...
    def value(self) -> str: ...
    def __hash__(self) -> Any: ...

class String_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def getText(self, oc = ...) -> str: ...
    def getValue(self, *args, **kwargs) -> Any: ...
    def setText(self, *args, **kwargs) -> Any: ...
    def setValue(self, val, view = ...) -> None: ...
    def splitView(self, *args, **kwargs) -> Any: ...
    def unsplitView(self, *args, **kwargs) -> Any: ...
    def value(self, oc = ...) -> str: ...
    def __hash__(self) -> Any: ...

class Script_Knob(String_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def command(self) -> str: ...
    def execute(self) -> None: ...
    def setCommand(self, cmd) -> None: ...
    def setValue(self, cmd) -> None: ...
    def value(self) -> str: ...
    def __hash__(self) -> Any: ...

class AColor_Knob(Color_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class AnimationCurve:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def addKey(self, *args, **kwargs) -> Any: ...
    def changeInterpolation(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def constant(self) -> bool: ...
    def derivative(self, *args, **kwargs) -> Any: ...
    def evaluate(self, t) -> float: ...
    def expression(self, *args, **kwargs) -> Any: ...
    def fixSlopes(self, *args, **kwargs) -> Any: ...
    def fromScript(self, *args, **kwargs) -> Any: ...
    def identity(self) -> bool: ...
    def integrate(self, *args, **kwargs) -> Any: ...
    def inverse(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def knob(self, *args, **kwargs) -> Any: ...
    def knobAndFieldName(self, *args, **kwargs) -> Any: ...
    def knobIndex(self, *args, **kwargs) -> Any: ...
    def noExpression(self) -> bool: ...
    def removeKey(self, *args, **kwargs) -> Any: ...
    def selected(self) -> bool: ...
    def setExpression(self, *args, **kwargs) -> Any: ...
    def setKey(self, *args, **kwargs) -> Any: ...
    def size(self, *args, **kwargs) -> Any: ...
    def toScript(self, selected) -> str: ...
    def view(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class AnimationKey:
    extrapolation: Any
    interpolation: Any
    la: Any
    lslope: Any
    ra: Any
    rslope: Any
    selected: Any
    x: Any
    y: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class Axis_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def pivot(self) -> XYZ_Knob: ...
    def rotate(self) -> XYZ_Knob: ...
    def scale(self) -> Scale_Knob: ...
    def skew(self) -> XYZ_Knob: ...
    def translate(self) -> XYZ_Knob: ...
    def uniformScale(self) -> Double_Knob: ...
    def value(self) -> _nukemath.Matrix4: ...
    def __hash__(self) -> Any: ...

class BBox_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def fromDict(self, box) -> None: ...
    def names(self, *args, **kwargs) -> Any: ...
    def r(self, *args, **kwargs) -> Any: ...
    def setR(self, *args, **kwargs) -> Any: ...
    def setT(self, *args, **kwargs) -> Any: ...
    def setX(self, *args, **kwargs) -> Any: ...
    def setY(self, *args, **kwargs) -> Any: ...
    def t(self, *args, **kwargs) -> Any: ...
    def toDict(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def x(self, *args, **kwargs) -> Any: ...
    def y(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class BackdropNode(Node):
    @overload
    def getNodes(self) -> alistofnodescontainedinsidethebackdrop: ...
    # @overload
    # def getNodes() -> Any: ...
    @overload
    def selectNodes(self, selectNodes) -> None: ...
    @overload
    def selectNodes(self) -> Any: ...
    # def __getitem__(self, index) -> Any: ...
    # def __len__(self) -> Any: ...

class BeginTabGroup_Knob(Knob):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class Bitmask_Knob(Enumeration_Knob):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class Boolean_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, b) -> bool: ...
    def value(self) -> bool: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Box:
    def __init__(self, *args, **kwargs) -> None: ...
    def centerX(self) -> float: ...
    def centerY(self) -> float: ...
    def clampX(self, *args, **kwargs) -> Any: ...
    def clampY(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def h(self) -> int: ...
    def intersect(self, *args, **kwargs) -> Any: ...
    def isConstant(self, *args, **kwargs) -> Any: ...
    def merge(self, *args, **kwargs) -> Any: ...
    def move(self, *args, **kwargs) -> Any: ...
    def pad(self, *args, **kwargs) -> Any: ...
    def r(self) -> int: ...
    def set(self, x, y, r, t) -> None: ...
    def setH(self, n) -> None: ...
    def setR(self, n) -> None: ...
    def setT(self, n) -> None: ...
    def setW(self, n) -> None: ...
    def setX(self, n) -> None: ...
    def setY(self, n) -> None: ...
    def t(self) -> int: ...
    def w(self) -> int: ...
    def x(self) -> int: ...
    def y(self) -> int: ...
    def __hash__(self) -> Any: ...

class Box3_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def f(self, *args, **kwargs) -> Any: ...
    def n(self, *args, **kwargs) -> Any: ...
    def names(self, *args, **kwargs) -> Any: ...
    def r(self, *args, **kwargs) -> Any: ...
    def setF(self, *args, **kwargs) -> Any: ...
    def setN(self, *args, **kwargs) -> Any: ...
    def setR(self, *args, **kwargs) -> Any: ...
    def setT(self, *args, **kwargs) -> Any: ...
    def setX(self, *args, **kwargs) -> Any: ...
    def setY(self, *args, **kwargs) -> Any: ...
    def t(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def x(self, *args, **kwargs) -> Any: ...
    def y(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class CancelledError(Exception): ...

class CascadingEnumeration_Knob(Enumeration_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class ChannelMask_Knob(Channel_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class ColorChip_Knob(Unsigned_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class Disable_Knob(Boolean_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, b) -> bool: ...
    def value(self) -> bool: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Double_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class EditableEnumeration_Knob(Enumeration_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def enumName(self, n) -> str: ...
    def getDisplayStrFromID(self) -> Any: ...
    def numValues(self) -> int: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self) -> Any: ...
    def values(self) -> Any: ...
    def __hash__(self) -> Any: ...

class EndTabGroup_Knob(Knob):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class EvalString_Knob(String_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def evaluate(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Eyedropper_Knob(AColor_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class File_Knob(EvalString_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def fromScript(self, *args, **kwargs) -> Any: ...
    def fromUserText(self, *args, **kwargs) -> Any: ...
    def getEvaluatedValue(self, *args, **kwargs) -> Any: ...
    def getValue(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Font_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Format:
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, name) -> None: ...
    def fromUV(self, *args, **kwargs) -> Any: ...
    def height(self) -> int: ...
    def name(self) -> str: ...
    def pixelAspect(self) -> float: ...
    def r(self) -> int: ...
    def scaled(self, sx, sy, tx, ty) -> Format: ...
    def setHeight(self, newHeight) -> None: ...
    def setName(self, name) -> None: ...
    def setPixelAspect(self, aspectRatio) -> None: ...
    def setR(self, newR) -> None: ...
    def setT(self, newT) -> None: ...
    def setWidth(self, newWidth) -> None: ...
    def setX(self, newX) -> None: ...
    def setY(self, newY) -> None: ...
    def t(self) -> int: ...
    def toUV(self, *args, **kwargs) -> Any: ...
    def width(self) -> int: ...
    def x(self) -> int: ...
    def y(self) -> int: ...
    def __hash__(self) -> Any: ...

class Format_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def actualValue(self, *args, **kwargs) -> Any: ...
    def fromScript(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def notDefault(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def toScript(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class FrameRange:
    def __init__(self, *args, **kwargs) -> None: ...
    def first(self) -> int: ...
    def frames(self) -> int: ...
    def getFrame(self, n) -> int: ...
    def increment(self) -> int: ...
    def isInRange(self, n) -> int: ...
    def last(self) -> int: ...
    def maxFrame(self) -> int: ...
    def minFrame(self) -> int: ...
    def setFirst(self, n) -> None: ...
    def setIncrement(self, n) -> None: ...
    def setLast(self, n) -> None: ...
    def stepFrame(self) -> int: ...
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class FrameRanges:
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, r) -> None: ...
    def clear(self) -> None: ...
    def compact(self) -> None: ...
    def getRange(self) -> FrameRange: ...
    def maxFrame(self) -> int: ...
    def minFrame(self) -> int: ...
    def size(self) -> int: ...
    def toFrameList(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class FreeType_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def getValue(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class GeoSelect_Knob(Knob):
    def getFaceWeights(self) -> List[List[float]]: ...
    def getGeometry(self) -> _geo.GeometryList: ...
    def getSelectedFaces(self) -> List[List[float]]: ...
    def getSelection(self) -> List[List[float]]: ...
    def getSelectionWeights(self) -> List[List[float]]: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Gizmo(Group):
    def command(self) -> str: ...
    def filename(self) -> str: ...
    def makeGroup(self) -> Group: ...
    # def __getitem__(self, index) -> Any: ...
    # def __len__(self) -> Any: ...
#
class GlobalsEnvironment:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, *args, **kwargs) -> Any: ...
    def has_key(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def values(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __hash__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class Hash:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def getHash(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def setHash(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Help_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class Histogram_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class IArray_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def dimensions(self, *args, **kwargs) -> Any: ...
    def height(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def width(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Info:
    def __init__(self, *args, **kwargs) -> None: ...
    def h(self) -> float: ...
    def w(self) -> float: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def __hash__(self) -> Any: ...

class Int_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, val) -> bool: ...
    def value(self) -> int: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Keyer_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def highSoft(self, *args, **kwargs) -> Any: ...
    def highTol(self, *args, **kwargs) -> Any: ...
    def lowSoft(self, *args, **kwargs) -> Any: ...
    def lowTol(self, *args, **kwargs) -> Any: ...
    def names(self, n) -> str: ...
    def value(self, outputCtx, n) -> float: ...
    def __hash__(self) -> Any: ...

class KnobType:
    eAColorKnob: ClassVar[int] = ...
    eArrayKnob: ClassVar[int] = ...
    eAxisKnob: ClassVar[int] = ...
    eBBoxKnob: ClassVar[int] = ...
    eBitMaskKnob: ClassVar[int] = ...
    eboolKnob: ClassVar[int] = ...
    eBox3Knob: ClassVar[int] = ...
    eCachedFileKnob: ClassVar[int] = ...
    eCancelExecutionKnob: ClassVar[int] = ...
    eCascadingEnumerationKnob: ClassVar[int] = ...
    eChannelKnob: ClassVar[int] = ...
    eChannelMaskKnob: ClassVar[int] = ...
    eColorChipKnob: ClassVar[int] = ...
    eColorKnob: ClassVar[int] = ...
    eColorspaceKnob: ClassVar[int] = ...
    eControlPointCollectionKnob: ClassVar[int] = ...
    eCpKnob: ClassVar[int] = ...
    eCustomKnob: ClassVar[int] = ...
    eDisableKnob: ClassVar[int] = ...
    eDoubleKnob: ClassVar[int] = ...
    eDynamicBitmaskKnob: ClassVar[int] = ...
    eEditableEnumerationKnob: ClassVar[int] = ...
    eEnumKnob: ClassVar[int] = ...
    eExoGroupKnob: ClassVar[int] = ...
    eEyeDropperKnob: ClassVar[int] = ...
    eFileKnob: ClassVar[int] = ...
    eFloatKnob: ClassVar[int] = ...
    eFormatKnob: ClassVar[int] = ...
    eFrameExtentKnob: ClassVar[int] = ...
    eFreeTypeKnob: ClassVar[int] = ...
    eGeoSelectKnob: ClassVar[int] = ...
    eHelpKnob: ClassVar[int] = ...
    eHistogramKnob: ClassVar[int] = ...
    eIconKnob: ClassVar[int] = ...
    eInputOnlyChannelKnob: ClassVar[int] = ...
    eInputOnlyChannelMaskKnob: ClassVar[int] = ...
    eIntKnob: ClassVar[int] = ...
    eKeyerKnob: ClassVar[int] = ...
    eLinkKnob: ClassVar[int] = ...
    eListKnob: ClassVar[int] = ...
    eLookupCurvesKnob: ClassVar[int] = ...
    eMenuKnob: ClassVar[int] = ...
    eMetaDataKnob: ClassVar[int] = ...
    eMetaKeyFrameKnob: ClassVar[int] = ...
    eMultiArrayKnob: ClassVar[int] = ...
    eMultiViewKnob: ClassVar[int] = ...
    eMultilineEvalStringKnob: ClassVar[int] = ...
    eMultilineStringKnob: ClassVar[int] = ...
    eObsoleteKnob: ClassVar[int] = ...
    eOneViewKnob: ClassVar[int] = ...
    eParticleChannelsKnob: ClassVar[int] = ...
    ePasswordKnob: ClassVar[int] = ...
    ePixelAspectKnob: ClassVar[int] = ...
    ePluginPythonKnob: ClassVar[int] = ...
    ePositionVectorKnob: ClassVar[int] = ...
    ePulldownKnob: ClassVar[int] = ...
    ePyPulldownKnob: ClassVar[int] = ...
    ePyScriptKnob: ClassVar[int] = ...
    ePythonKnob: ClassVar[int] = ...
    eRadioKnob: ClassVar[int] = ...
    eRangeKnob: ClassVar[int] = ...
    eResizableArrayKnob: ClassVar[int] = ...
    eRippleKnob: ClassVar[int] = ...
    eScaleKnob: ClassVar[int] = ...
    eSceneGraphKnob: ClassVar[int] = ...
    eSceneViewKnob: ClassVar[int] = ...
    eScriptKnob: ClassVar[int] = ...
    eSimpleArrayKnob: ClassVar[int] = ...
    eSizeKnob: ClassVar[int] = ...
    eSpacerKnob: ClassVar[int] = ...
    eStringKnob: ClassVar[int] = ...
    eTabGroupKnob: ClassVar[int] = ...
    eTabKnob: ClassVar[int] = ...
    eTableKnob: ClassVar[int] = ...
    eTextEditorKnob: ClassVar[int] = ...
    eTextKnob: ClassVar[int] = ...
    eToolbarKnob: ClassVar[int] = ...
    eToolboxKnob: ClassVar[int] = ...
    eTooltipKnob: ClassVar[int] = ...
    eTransform2DKnob: ClassVar[int] = ...
    eTransformJackKnob: ClassVar[int] = ...
    eUVKnob: ClassVar[int] = ...
    eVSpacerKnob: ClassVar[int] = ...
    eViewPairKnob: ClassVar[int] = ...
    eViewViewKnob: ClassVar[int] = ...
    eWHKnob: ClassVar[int] = ...
    eXYKnob: ClassVar[int] = ...
    eXYZKnob: ClassVar[int] = ...

class Layer:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def channels(self, *args, **kwargs) -> Any: ...
    def name(self) -> str: ...
    def setName(self, newName) -> None: ...
    def visible(self) -> bool: ...
    def __hash__(self) -> Any: ...

class Link_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def applyOverride(self) -> bool: ...
    def getLink(self) -> s: ...
    def getLinkedKnob(self) -> KnobT: ...
    def makeLink(self, s, t) -> None: ...
    def revertOverride(self) -> bool: ...
    def setLink(self, s) -> None: ...
    def setValue(self) -> None: ...
    def value(self) -> str: ...
    def __hash__(self) -> Any: ...

class LinkableKnobInfo:
    def absolute(self) -> bool: ...
    def displayName(self) -> str: ...
    def enabled(self) -> bool: ...
    def indices(self) -> List: ...
    def knob(self) -> KnobT: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class LiveGroup(Precomp):
    def anyOverrides(self) -> bool: ...
    def applyOverrides(self, *args, **kwargs) -> Any: ...
    def isLocal(self) -> bool: ...
    def makeEditable(self) -> None: ...
    def makeLocal(self) -> None: ...
    def modified(self) -> bool: ...
    def publish(self, *args, **kwargs) -> Any: ...
    def published(self) -> bool: ...
    def revertOverrides(self, *args, **kwargs) -> Any: ...
    # def __getitem__(self, index) -> Any: ...
    # def __len__(self) -> Any: ...

class LookupCurves_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def addCurve(self, curve, expr = ...) -> None: ...
    def delCurve(self, curve) -> None: ...
    def editCurve(self, curve, expr = ...) -> None: ...
    def __hash__(self) -> Any: ...

class Lut:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def fromByte(self, *args, **kwargs) -> Any: ...
    def fromByteSingle(self, *args, **kwargs) -> Any: ...
    def fromFloat(self, *args, **kwargs) -> Any: ...
    def isLinear(self, *args, **kwargs) -> Any: ...
    def isZero(self, *args, **kwargs) -> Any: ...
    def toByte(self, *args, **kwargs) -> Any: ...
    def toByteSingle(self, *args, **kwargs) -> Any: ...
    def toFloat(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Menu(MenuItem):
    def addAction(self, action) -> bool: ...
    def addCommand(self, *args, **kwargs) -> Any: ...
    def addMenu(self, *args, **kwargs) -> Any: ...
    def addSeparator(self, *args, **kwargs) -> Any: ...
    def clearMenu(self) -> Any: ...
    def findItem(self, name) -> Optional[Menu]: ...
    def items(self) -> None: ...
    def menu(self, name) -> Optional[Menu]: ...
    def name(self) -> str: ...
    def removeItem(self, name) -> None: ...
    def updateMenuItems(self) -> None: ...
    def __hash__(self) -> Any: ...

class MenuBar:
    def addAction(self, action) -> bool: ...
    def addCommand(self, *args, **kwargs) -> Any: ...
    def addMenu(self, *args, **kwargs) -> Any: ...
    def addSeparator(self, *args, **kwargs) -> Any: ...
    def clearMenu(self) -> Any: ...
    def findItem(self, name) -> Optional[Menu]: ...
    def items(self) -> None: ...
    def menu(self, name) -> Optional[Menu]: ...
    def name(self) -> str: ...
    def removeItem(self, name) -> None: ...
    def updateMenuItems(self) -> None: ...
    def __hash__(self) -> Any: ...

class MenuItem:
    def action(self) -> None: ...
    def icon(self) -> str: ...
    def invoke(self) -> None: ...
    def name(self) -> str: ...
    def script(self) -> str: ...
    def setEnabled(self, enabled, recursive) -> None: ...
    def setIcon(self, icon) -> None: ...
    def setScript(self, script) -> None: ...
    def setShortcut(self, keySequence) -> None: ...
    def setVisible(self, visible) -> None: ...
    def shortcut(self) -> str: ...
    def __hash__(self) -> Any: ...

class MultiView_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def fromScript(self, *args, **kwargs) -> Any: ...
    def notDefault(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def toScript(self, *args, **kwargs) -> Any: ...
    def toScriptPrefix(self, *args, **kwargs) -> Any: ...
    def toScriptPrefixUserKnob(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Multiline_Eval_String_Knob(EvalString_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class NodeConstructor(Generic[NodeT]):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> NodeT: ...
    def __hash__(self) -> Any: ...

class Nodes:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...
    def __getattr__(self, item) -> NodeConstructor[Node]: ...

    Group : NodeConstructor[Group]
    BackdropNode : NodeConstructor[BackdropNode]
    Gizmo : NodeConstructor[Gizmo]
    Viewer : NodeConstructor[Viewer]

class Obsolete_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class OneView_Knob(Enumeration_Knob):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class OutputContext:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def frame(self) -> float: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setView(self, *args, **kwargs) -> Any: ...
    def view(self) -> int: ...
    def viewFromName(self, name) -> int: ...
    def viewcount(self) -> int: ...
    def viewname(self, n) -> str: ...
    def viewshort(self, n) -> str: ...
    def __hash__(self) -> Any: ...

class Panel:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def addbooleanCheckBox(self, *args, **kwargs) -> Any: ...
    def addButton(self, *args, **kwargs) -> Any: ...
    def addClipnameSearch(self, *args, **kwargs) -> Any: ...
    def addEnumerationPulldown(self, *args, **kwargs) -> Any: ...
    def addExpressionInput(self, *args, **kwargs) -> Any: ...
    def addFilenameSearch(self, *args, **kwargs) -> Any: ...
    def addMultilineTextInput(self, *args, **kwargs) -> Any: ...
    def addNotepad(self, *args, **kwargs) -> Any: ...
    def addPasswordInput(self, *args, **kwargs) -> Any: ...
    def addRGBColorChip(self, *args, **kwargs) -> Any: ...
    def addScriptCommand(self, *args, **kwargs) -> Any: ...
    def addSingleLineInput(self, *args, **kwargs) -> Any: ...
    def addTextFontPulldown(self, *args, **kwargs) -> Any: ...
    def clear(self) -> None: ...
    def execute(self, *args, **kwargs) -> Any: ...
    def setTitle(self, *args, **kwargs) -> Any: ...
    def setWidth(self, *args, **kwargs) -> Any: ...
    def show(self, *args, **kwargs) -> Any: ...
    def title(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def width(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class PanelNode:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def addKnob(self, *args, **kwargs) -> Any: ...
    def createWidget(self, *args, **kwargs) -> Any: ...
    @overload
    def knobs(self) -> dict: ...
    @overload
    def knobs() -> Any: ...
    def readKnobs(self, *args, **kwargs) -> Any: ...
    def removeKnob(self, *args, **kwargs) -> Any: ...
    def writeKnobs(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class ParticleChannels_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, v) -> bool: ...
    def value(self) -> int: ...
    def __hash__(self) -> Any: ...

class Password_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def getText(self) -> str: ...
    def setValue(self, val, view = ...) -> None: ...
    def value(self) -> str: ...
    def __hash__(self) -> Any: ...

class Precomp(Group):
    @overload
    def reload(self) -> None: ...
    # @overload
    # def reload() -> Any: ...
    # def __getitem__(self, index) -> Any: ...
    # def __len__(self) -> Any: ...

class ProgressTask:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def isCancelled(self, *args, **kwargs) -> Any: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    def setProgress(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Pulldown_Knob(Enumeration_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def commands(self, n: int) -> str: ...
    def itemName(self, n: int) -> str: ...
    def numValues(self) -> int: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class PyCustom_Knob(Script_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def getObject(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class PyScript_Knob(Script_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class PythonCustomKnob(Script_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def getObject(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class PythonKnob(String_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class Radio_Knob(Enumeration_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def enumName(self, n) -> str: ...
    def getDisplayStrFromID(self) -> Any: ...
    def numValues(self) -> int: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self) -> Any: ...
    def values(self) -> Any: ...
    def __hash__(self) -> Any: ...

class Range_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class Root(Group):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def addView(self, *args, **kwargs) -> Any: ...
    def canSetInput(self, *args, **kwargs) -> Any: ...
    @classmethod
    def channels(self) -> List[str]: ...
    def clones(self, *args, **kwargs) -> Any: ...
    def connectInput(self, *args, **kwargs) -> Any: ...
    def deleteView(self, *args, **kwargs) -> Any: ...
    def firstFrame(self) -> int: ...
    def fps(self) -> int: ...
    def getOCIOColorspaceFamily(self, colorspace: str) -> str: ...
    def getOCIOColorspaceFromViewTransform(self, display: str, view: str) -> str: ...
    def input(self, *args, **kwargs) -> Any: ...
    def inputs(self, *args, **kwargs) -> Any: ...
    def lastFrame(self) -> int: ...
    @classmethod
    def layers(self, *args, **kwargs) -> Any: ...
    def maximumInputs(self, *args, **kwargs) -> Any: ...
    def maximumOutputs(self, *args, **kwargs) -> Any: ...
    def mergeFrameRange(self, *args, **kwargs) -> Any: ...
    def minimumInputs(self, *args, **kwargs) -> Any: ...
    def modified(self) -> bool: ...
    def optionalInput(self, *args, **kwargs) -> Any: ...
    def proxy(self, *args, **kwargs) -> Any: ...
    def realFps(self) -> float: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInput(self, *args, **kwargs) -> Any: ...
    def setModified(self, modified: bool) -> None: ...
    def setProxy(self, *args, **kwargs) -> Any: ...
    def setView(self, *args, **kwargs) -> Any: ...
    # def __getitem__(self, index) -> Any: ...
    # def __len__(self) -> Any: ...

class RunInMainThread:
    @classmethod
    def request(self, *args, **kwargs) -> Any: ...
    @classmethod
    def result(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Scale_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def names(self, n) -> str: ...
    def value(self, n, oc = ...) -> float: ...
    def x(self, oc = ...) -> float: ...
    def y(self, oc = ...) -> float: ...
    def z(self, oc = ...) -> float: ...
    def __hash__(self) -> Any: ...

class SceneGraph_Knob(Unsigned_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def addItems(self, items: List[Tuple[str, str]], autoSelect: bool = ...) -> None: ...
    def getItems(self) -> Tuple[Tuple[str, str], ...]: ...
    def getSelectedItems(self) -> List[str]: ...
    def removeItems(self, names: List[str]) -> None: ...
    def setItems(self, items: List[Tuple[str, str]], autoSelect: bool = ...) -> None: ...
    def setSelectedItems(self, names: List[str]) -> None: ...
    def __hash__(self) -> Any: ...

class SceneView_Knob(Unsigned_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def addItems(self, items: List[str]) -> None: ...
    def getAllItems(self) -> List[str]: ...
    def getHighlightedItem(self) -> Optional[str]: ...
    def getImportedItems(self) -> List[str]: ...
    def getSelectedItems(self) -> List[str]: ...
    def removeItems(self, items: List[str]) -> None: ...
    def setAllItems(self, items: List[str], autoSelect: bool = ...) -> None: ...
    def setImportedItems(self, items: List[str]) -> None: ...
    def setSelectedItems(self, items: List[str]) -> None: ...
    def __hash__(self) -> Any: ...

class Tab_Knob(Knob):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class Text_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class ToolBar:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def addAction(self, action) -> bool: ...
    def addCommand(self, *args, **kwargs) -> Any: ...
    def addMenu(self, *args, **kwargs) -> Any: ...
    def addSeparator(self, *args, **kwargs) -> Any: ...
    def clearMenu(self) -> Any: ...
    def findItem(self, name) -> Optional[Menu]: ...
    def items(self) -> None: ...
    def menu(self, name) -> Optional[Menu]: ...
    def name(self) -> str: ...
    def removeItem(self, name) -> None: ...
    def updateMenuItems(self) -> None: ...
    def __hash__(self) -> Any: ...

class Transform2d_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def value(self, oc = ...) -> matrix: ...
    def __hash__(self) -> Any: ...

class UV_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def names(self, n) -> str: ...
    def __hash__(self) -> Any: ...

class Undo:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def begin(self, *args, **kwargs) -> Any: ...
    @classmethod
    def cancel(self, *args, **kwargs) -> Any: ...
    @classmethod
    def disable(self, *args, **kwargs) -> Any: ...
    @classmethod
    def disabled(self, *args, **kwargs) -> Any: ...
    @classmethod
    def enable(self, *args, **kwargs) -> Any: ...
    @classmethod
    def end(self, *args, **kwargs) -> Any: ...
    @classmethod
    def name(self, *args, **kwargs) -> Any: ...
    @classmethod
    def new(self, *args, **kwargs) -> Any: ...
    @classmethod
    def redo(self, *args, **kwargs) -> Any: ...
    @classmethod
    def redoDescribe(self, *args, **kwargs) -> Any: ...
    @classmethod
    def redoDescribeFully(self, *args, **kwargs) -> Any: ...
    @classmethod
    def redoSize(self, *args, **kwargs) -> Any: ...
    @classmethod
    def redoTruncate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def undo(self, *args, **kwargs) -> Any: ...
    @classmethod
    def undoDescribe(self, *args, **kwargs) -> Any: ...
    @classmethod
    def undoDescribeFully(self, *args, **kwargs) -> Any: ...
    @classmethod
    def undoSize(self, *args, **kwargs) -> Any: ...
    @classmethod
    def undoTruncate(self, *args, **kwargs) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, type, value, traceback) -> Any: ...
    def __hash__(self) -> Any: ...

class View:
    def __init__(self, *args, **kwargs) -> None: ...
    def str(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class ViewView_Knob(Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> Any: ...

class Viewer(Node):
    def capture(self, file) -> None: ...
    def frameCached(self, f) -> bool: ...
    def isPlayingOrRecording(self) -> bool: ...
    def playbackRange(self, *args, **kwargs) -> Any: ...
    def recordMouse(self) -> bool: ...
    def recordMouseStop(self) -> Any: ...
    def replayMouseAsync(self, xmlRecordingFilename) -> bool: ...
    def replayMouseSync(self, xmlRescordingFilename) -> bool: ...
    def roi(self) -> dict: ...
    def roiEnabled(self) -> bool: ...
    def sendMouseEvent(self) -> bool: ...
    def setRoi(self, *args, **kwargs) -> Any: ...
    def toggleMouseTrails(self) -> bool: ...
    def toggleWaitOnReplayEvents(self, *args, **kwargs) -> Any: ...
    def visibleRange(self, *args, **kwargs) -> Any: ...
    # def __getitem__(self, index) -> Any: ...
    # def __len__(self) -> Any: ...

class ViewerProcess:
    @classmethod
    def node(self, *args, **kwargs) -> Any: ...
    @classmethod
    def register(self, *args, **kwargs) -> Any: ...
    @classmethod
    def registeredNames(self, *args, **kwargs) -> Any: ...
    @classmethod
    def restoreSelectionAfterReload(self, *args, **kwargs) -> Any: ...
    @classmethod
    def storeSelectionBeforeReload(self, *args, **kwargs) -> Any: ...
    @classmethod
    def unregister(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class ViewerWindow:
    def activateInput(self, input, secondary = ...) -> None: ...
    def activeInput(self, secondary = ...) -> int: ...
    def frameControl(self, *args, **kwargs) -> Any: ...
    def getGLCameraMatrix(self) -> Matrix4: ...
    def getGeometryNodes(self, *args, **kwargs) -> Any: ...
    def nextView(self, *args, **kwargs) -> Any: ...
    def node(self, *args, **kwargs) -> Any: ...
    def play(self, *args, **kwargs) -> Any: ...
    def previousView(self, *args, **kwargs) -> Any: ...
    def setView(self, *args, **kwargs) -> Any: ...
    def stop(self, *args, **kwargs) -> Any: ...
    def view(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class WH_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def names(self, *args, **kwargs) -> Any: ...
    def x(self, *args, **kwargs) -> Any: ...
    def x_at(self, *args, **kwargs) -> Any: ...
    def y(self, *args, **kwargs) -> Any: ...
    def y_at(self, *args, **kwargs) -> Any: ...
    def __hash__(self) -> Any: ...

class XYZ_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def names(self, n) -> str: ...
    def parent(self) -> XYZ_Knob: ...
    def value(self, n, oc = ...) -> float: ...
    def x(self, oc = ...) -> float: ...
    def y(self, oc = ...) -> float: ...
    def z(self, oc = ...) -> float: ...
    def __hash__(self) -> Any: ...

class XY_Knob(Array_Knob):
    def __init__(self, *args, **kwargs) -> None: ...
    def names(self, n) -> str: ...
    def value(self, n, oc = ...) -> float: ...
    def x(self, oc = ...) -> float: ...
    def y(self, oc = ...) -> float: ...
    def __hash__(self) -> Any: ...

def activeViewer() -> ViewerWindow: ...
def addFavoriteDir(*args, **kwargs) -> Any: ...
def addFormat(s : str) -> Format: ...
def addNodePresetExcludePaths(paths) -> None: ...
def addSequenceFileExtension(fileExtension: str) -> None: ...
def addToolsetExcludePaths(paths) -> None: ...
def addView(s: str) -> None: ...
def alert(prompt: str) -> None: ...
def allNodes(*args, **kwargs) -> List[NodeT]: ...
def animation(object, *commands) -> None: ...
def animationEnd(*args, **kwargs) -> Any: ...
def animationIncrement() -> float: ...
def animationStart() -> float: ...
def animations() -> tuple: ...
def applyPreset(nodeName, presetName) -> None: ...
def applyUserPreset(nodeName, presetName) -> None: ...
def ask(prompt: str) -> bool: ...
def askWithCancel(prompt: str) -> bool: ...
def autoplace(*args, **kwargs) -> Any: ...
def autoplaceSnap(n) -> None: ...
def autoplace_all(*args, **kwargs) -> Any: ...
def autoplace_snap_all(*args, **kwargs) -> Any: ...
def autoplace_snap_selected(*args, **kwargs) -> Any: ...
def cacheUsage() -> int: ...
def canCreateNode(*args, **kwargs) -> Any: ...
def cancel() -> None: ...
def center() -> List[int]: ...
def channels(node: Optional[NodeT] = ...) -> List[str]: ...
def choice(title, prompt, options, default = ...) -> index: ...
def clearBlinkCache() -> None: ...
def clearDiskCache() -> None: ...
def clearRAMCache() -> None: ...
def clearTabMenuFavorites() -> None: ...
def clearTabMenuWeighting() -> None: ...
def clone(n, args, inpanel) -> NodeT: ...
def cloneSelected(action) -> bool: ...
def collapseToGroup(show: bool = ...) -> Group: ...
def collapseToLiveGroup(show: bool = ...) -> Group: ...
def connectNodes() -> None: ...
def connectViewer(inputNum, node) -> None: ...
def createLiveInput() -> Node: ...
def createNode(typ: str, knobs: str = ..., inpanel: bool = ...) -> NodeT: ...
def createScenefileBrowser(fileName, nodeName) -> None: ...
def createToolset(filename = ..., overwrite = ..., rootPath = ...) -> None: ...
def critical(message: str) -> None: ...
def debug(message: str) -> None: ...
def defaultFontPathname() -> str: ...
def defaultNodeColor(s: str) -> int: ...
# N.B. Passing `None` does nothing
def delete(n: Optional[NodeT]) -> None: ...
def deletePreset(nodeClassName, presetName) -> None: ...
def deleteUserPreset(nodeClassName, presetName) -> None: ...
def deleteView(s: str) -> None: ...
def display(*args, **kwargs) -> Any: ...
def duplicateSelectedNodes(*args, **kwargs) -> Any: ...
def endGroup() -> None: ...
def error(message: str) -> None: ...
@overload
def execute(nameOrNode: Union[NodeT, str], start: int, end: int, incr: int = ..., views: List[str] = ..., continueOnError: bool = ...) -> None: ...
@overload
def execute(nameOrNode: Union[NodeT, str], frameRangeSet: FrameRanges, views: List[str] = ..., continueOnError: bool = ...) -> None: ...
def executeBackgroundNuke(exe_path, nodes, frameRange, views, limits, continueOnError = ..., flipbookToRun = ..., flipbookOptions = ...) -> None: ...
def executeMultiple(nodes, ranges, views, continueOnError = ...) -> None: ...
def executing(f: Optional[float] = ...) -> bool: ...
def exists(s: str) -> bool: ...
def expandSelectedGroup() -> None: ...
def expression(s: str) -> float: ...
def extractSelected() -> None: ...
def filename(node: NodeT = ..., replace: int = ...) -> Optional[str]: ...  # Doc incorrect
def forceClone() -> bool: ...
def forceLoad(n) -> None: ...
def fork(path: str = ...) -> None: ...
def formats() -> List[Format]: ...
def frame(f: int = ...) -> int: ...
def fromNode(*args, **kwargs) -> Any: ...
def getAllUserPresets() -> None: ...
@overload
def getClipname(prompt: str, pattern: str = ..., default: Optional[str] = ..., multiple: Literal[False] = ...) -> Optional[str]: ...
@overload
def getClipname(prompt: str, pattern: str = ..., default: Optional[str] = ..., multiple: Literal[True] = ...) -> Optional[List[str]]: ...
def getColor(initial: int = ...) -> int: ...
def getDeletedPresets() -> None: ...
def getFileNameList(dir: str, splitSequences: bool = ..., extraInformation: bool = ..., returnDirs: bool = ..., returnHidden: bool = ...) -> List[str]: ...
@overload
def getFilename(message: str, pattern: str = ..., default: str = ..., favorites: str = ..., type: str = ..., multiple: Literal[False] = ...) -> Optional[str]: ...
@overload
def getFilename(message: str, pattern: str = ..., default: str = ..., favorites: str = ..., type: str = ..., multiple: Literal[True] = ...) -> Optional[List[str]]: ...
def getFonts(*args, **kwargs) -> Any: ...
def getFramesAndViews(*args, **kwargs) -> Any: ...
def getInput(prompt: str, default: str = ...) -> str: ...
def getNodeClassName() -> None: ...
def getNodePresetExcludePaths() -> List[str]: ...
def getNodePresetID() -> None: ...
def getPaneFor(panelName) -> Dock: ...
def getPresetKnobValues() -> None: ...
def getPresets() -> None: ...
def getPresetsMenu(NodeT) -> Optional[Menu]: ...
def getReadFileKnob(nodeT) -> File_Knob: ...
def getRenderProgress(*args, **kwargs) -> Any: ...
def getToolsetExcludePaths() -> List[str]: ...
def getUserPresetKnobValues() -> None: ...
def getUserPresets(NodeT) -> None: ...
def hotkeys() -> str: ...
def inputs(n, i) -> int: ...
def invertSelection() -> None: ...
def knob(name, value, getType = ..., getClass = ...) -> None: ...
@overload
def knobDefault(classknob: str) -> Optional[str]: ...
@overload
def knobDefault(classknob: str, value: str) -> None: ...
def knobTooltip(classknob, value) -> None: ...
def layers(node: Optional[NodeT] = ...) -> List[str]: ...
def licenseInfo(*args, **kwargs) -> Any: ...
def load(s: str) -> None: ...
def loadToolset(filename: str) -> Optional[NodeT]: ...
def localisationEnabled(knob) -> bool: ...
def localiseFiles(*args, **kwargs) -> Any: ...
def localizationEnabled(knob) -> bool: ...
def makeGroup(show: bool = ...) -> Group: ...
def maxPerformanceInfo(*args, **kwargs) -> Any: ...
def memory(cmd, value) -> Union[str, int]: ...
# FIXME: I'm currently lying about the return type here for sanity
# def menu(name: str) -> Optional[Menu]: ...
def menu(name: str) -> Menu: ...
def message(prompt: str) -> None: ...
@overload
def modified() -> bool: ...
@overload
def modified(state: bool) -> bool: ...
def nodeCopy(s: str) -> None: ...
def nodeDelete(s: bool = ...) -> bool: ...
def nodePaste(s: str) -> Optional[NodeT]: ...
def nodeTypes(force_plugin_load = ...) -> List: ...
def nodesSelected() -> bool: ...
def numvalue(knob: str, default: float = ...) -> float: ...
def oculaPresent() -> bool: ...
def ofxAddPluginAliasExclusion(fullOfxEffectName) -> None: ...
def ofxMenu() -> bool: ...
def ofxPluginPath() -> List[str]: ...
def ofxRemovePluginAliasExclusion(fullOfxEffectName) -> None: ...
def openPanels() -> List[str]: ...
def pan() -> List[int]: ...
def performanceProfileFilename(*args, **kwargs) -> Any: ...
# from nuke_internal.overrides:
# def pluginAddPath(s) -> None: ...
# from nuke_internal.overrides:
# def pluginAppendPath(*args, **kwargs) -> Any: ...
def pluginExists(*args, **kwargs) -> Any: ...
def pluginInstallLocation() -> List[str]: ...
def pluginPath() -> List[str]: ...
def plugins(switches: int = ..., *pattern: str) -> List[str]: ...
def recentFile(index: int) -> str: ...
def redo() -> None: ...
def registerFlipbook(s) -> None: ...
def removeFavoriteDir(*args, **kwargs) -> Any: ...
def rescanFontFolders() -> None: ...
def resetPerformanceTimers() -> None: ...
def restoreWindowLayout(i: int) -> None: ...
def resumePathProcessing() -> None: ...
def root() -> Root: ...
def runIn(object: str, cmd: str) -> bool: ...
def sample(node: Node, channel: str, x: int, y: int, dx: int = ..., dy: int = ...) -> float: ...
def saveEventGraphTimers(filePath) -> None: ...
def saveToScript(filename, fileContent) -> None: ...
def saveUserPreset(node: NodeT, presetName: str) -> bool: ...
def saveWindowLayout(i: int = ...) -> None: ...
def scriptClear(*args, **kwargs) -> Any: ...
def scriptClose(*args, **kwargs) -> Any: ...
def scriptExit(*args, **kwargs) -> Any: ...
def scriptName() -> str: ...
def scriptNew(*args, **kwargs) -> Any: ...
def scriptOpen(filename: Optional[str] = ...) -> None: ...
def scriptReadFile(s: str) -> None: ...
def scriptReadText(s: str) -> None: ...
@overload
def scriptSave() -> bool: ...
@overload
def scriptSave(filename: Optional[str]) -> bool: ...
def scriptSaveAs(filename: Optional[str] = ..., overwrite: Union[int, bool] = ...) -> None: ...
def scriptSaveToTemp(str) -> str: ...
def scriptSource(*args, **kwargs) -> Any: ...
def selectAll() -> None: ...
def selectPattern() -> None: ...
def selectSimilar(matchType: int) -> None: ...
def selectedNode() -> NodeT: ...
@overload
def selectedNodes() -> List[NodeT]: ...
@overload
def selectedNodes(filter: str) -> List[NodeT]: ...
def setPreset(nodeClassName: str, presetName: str, knobValues: Dict[str, Any]) -> bool: ...
def setReadOnlyPresets(readOnly) -> None: ...
def setUserPreset(nodeClassName, presetName, knobValues) -> None: ...
def show(n: NodeT, forceFloat: bool = ...) -> None: ...
def showBookmarkChooser(n) -> None: ...
def showCreateViewsDialog(views: List[str]) -> int: ...
def showDag(n: Node) -> None: ...
def showInfo(n: Node) -> str: ...
def showSettings() -> None: ...
def splayNodes() -> None: ...
def startEventGraphTimers() -> None: ...
def startPerformanceTimers() -> None: ...
def stopEventGraphTimers() -> None: ...
def stopPerformanceTimers() -> None: ...
def stripFrameRange(clipname) -> str: ...
def suspendPathProcessing() -> None: ...
def tabClose(*args, **kwargs) -> Any: ...
def tabNext(*args, **kwargs) -> Any: ...
def tcl(cmd: str, *args: str) -> str: ...
def thisClass() -> str: ...
def thisGroup() -> Group: ...
def thisKnob() -> KnobT: ...
def thisNode() -> NodeT: ...
def thisPane() -> Dock: ...
def thisParent() -> Optional[Group]: ...
def thisRoot() -> Root: ...
def thisView() -> str: ...
def toNode(s: str) -> Optional[NodeT]: ...
def toggleFullscreen() -> None: ...
def toggleViewers() -> None: ...
def toolbar(name: str, create: bool = ...) -> Optional[ToolBar]: ...
def tprint(*args: Any, sep: str = ..., end: str = ..., file: IO = ...) -> None: ...
def undo() -> None: ...
def usingPerformanceTimers(*args, **kwargs) -> Any: ...
def value(knob: str, default: Optional[str] = ...) -> str: ...
def views() -> List[str]: ...
def waitForThreadsToFinish() -> str: ...
def warning(message: str) -> None: ...
def zoom(scale: float = ..., center: Union(Tuple[float, float], List[float]) = ..., group = ...) -> float: ...
def zoomToFitSelected() -> None: ...


expr = expression
render = execute
