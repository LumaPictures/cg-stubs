from _typeshed import Incomplete
from collections.abc import Generator

sourcepath: Incomplete
USE_PEP563: Incomplete
indent: Incomplete
is_py3: Incomplete
is_ci: Incomplete
is_debug: Incomplete
logger: Incomplete

class Writer:
    outfile: Incomplete
    history: Incomplete
    def __init__(self, outfile) -> None: ...
    def print(self, *args, **kw) -> None: ...

class Formatter(Writer):
    optional_replacer: Incomplete
    def __init__(self, *args) -> None: ...
    mod_name: Incomplete
    def module(self, mod_name) -> Generator[None, None, None]: ...
    def klass(self, class_name, class_str) -> Generator[None, None, None]: ...
    def function(self, func_name, signature) -> Generator[Incomplete, None, None]: ...
    def _function(self, func_name, signature, spaces) -> None: ...
    def enum(self, class_name, enum_name, value) -> Generator[None, None, None]: ...

def get_license_text(): ...
def find_imports(text): ...
def generate_pyi(import_name, outpath, options) -> None: ...
def generate_all_pyi(outpath, options) -> None: ...
