# mypy: disable-error-code="misc, override, no-redef"

import PySide6.QtCore
import PySide6.QtWidgets
import pxr.Sdf as Sdf
import pxr.Usd as Usd
import pxr.UsdGeom as UsdGeom
import pxr.UsdUtils.constantsGroup
from _typeshed import Incomplete
from pxr.UsdUtils.constantsGroup import ConstantsGroup as ConstantsGroup
from pxr.Usdviewq.common import KeyboardShortcuts as KeyboardShortcuts, PrintWarning as PrintWarning, Timer as Timer, UIPrimTreeColors as UIPrimTreeColors
from pxr.Usdviewq.primViewItem import PrimViewColumnIndex as PrimViewColumnIndex, PrimViewItem as PrimViewItem
from typing import ClassVar

class DrawModeComboBox(PySide6.QtWidgets.QComboBox):
    signalPopupHidden: ClassVar[PySide6.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    def __init__(self, parent: Incomplete | None = ...) -> None: ...
    def hidePopup(self): ...

class DrawModeItemDelegate(PySide6.QtWidgets.QStyledItemDelegate):
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    def __init__(self, makeTimer, parent: Incomplete | None = ...) -> None: ...
    def createEditor(self, parent, option, index): ...
    def paint(self, painter, option, index): ...

class DrawModeWidget(PySide6.QtWidgets.QWidget):
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    def __init__(self, primViewItem, refreshFunc, makeTimer, parent: Incomplete | None = ...) -> None: ...
    def RefreshDrawMode(self, currentDrawMode: Incomplete | None = ...): ...
    def _ClearDrawMode(self): ...
    def _CloseEditorIfNoEdit(self): ...
    def _PopupHidden(self): ...
    def _ShouldHideClearButton(self): ...
    def _UpdateDrawMode(self): ...
    def paintEvent(self, event): ...

class DrawModes(pxr.UsdUtils.constantsGroup.ConstantsGroup):
    BOUNDS: ClassVar[str] = ...
    CARDS: ClassVar[str] = ...
    DEFAULT: ClassVar[str] = ...
    ORIGIN: ClassVar[str] = ...
    _all: ClassVar[tuple] = ...

class PrimItemSelectionModel(PySide6.QtCore.QItemSelectionModel):
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    processSelections: Incomplete
    def __init__(self, model) -> None: ...
    def clear(self): ...
    def reset(self): ...
    def select(self, indexOrSelection, command): ...

class PrimTreeWidget(PySide6.QtWidgets.QTreeWidget):
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    def __init__(self, parent) -> None: ...
    def ColumnPressCausesSelection(self, col):
        """If this method returns True for column `col`, then we want a
                click in that column to cause the item to be selected."""
    def ExpandItemRecursively(self, item): ...
    def FrameSelection(self): ...
    def InitControllers(self, appController): ...
    def ShowDrawModeWidgetForItem(self, primViewItem): ...
    def UpdatePrimViewDrawMode(self, rootItem: Incomplete | None = ...):
        '''Updates browser\'s "Draw Mode" columns.'''
    def _refreshAncestorsOfSelected(self): ...
    def _resetAncestorsOfSelected(self): ...
    def clearSelection(self): ...
    def keyPressEvent(self, ev): ...
    def keyReleaseEvent(self, ev): ...
    def keyboardSearch(self, s):
        """Disable keyboardSearch in the prim view widget. This would interfere
                with F key used for framing the current selection by trying to change
                the selection to the first item starting with F. Since we're disabling
                this for F, it makes sense to disable it for all letters"""
    def leaveEvent(self, ev): ...
    def mousePressEvent(self, ev): ...
    def reset(self): ...
    def selectAll(self): ...
    def updateSelection(self, added, removed):
        """Mutate the widget's selected items, selecting items in `added`
                and deselecting items in `removed`.  Prefer this method for client
                use over calling setSelected directly on PrimViewItems."""

class SelectedAncestorItemDelegate(PySide6.QtWidgets.QStyledItemDelegate):
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    def __init__(self, parent: Incomplete | None = ...) -> None: ...
    def paint(self, painter, option, index): ...

class SelectionEnabler:
    def __init__(self, selectionModel) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...

def _GetBackgroundColor(item, option): ...
def _GetPropertySpecInSessionLayer(usdAttribute): ...
