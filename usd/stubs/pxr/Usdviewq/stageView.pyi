# mypy: disable-error-code="misc, override, no-redef"

import PySide6.QtCore
import PySide6.QtOpenGLWidgets
import pxr.CameraUtil as CameraUtil
import pxr.Gf as Gf
import pxr.Glf as Glf
import pxr.Sdf as Sdf
import pxr.Tf as Tf
import pxr.Usd as Usd
import pxr.UsdGeom as UsdGeom
import pxr.UsdImagingGL as UsdImagingGL
import pxr.Usdviewq.common
import pxr.Usdviewq.rootDataModel
from _typeshed import Incomplete
from pxr.Usdviewq.common import ColorCorrectionModes as ColorCorrectionModes, DefaultFontFamily as DefaultFontFamily, RenderModes as RenderModes, ReportMetricSize as ReportMetricSize, SelectionHighlightModes as SelectionHighlightModes, ShadedRenderModes as ShadedRenderModes, Timer as Timer
from pxr.Usdviewq.freeCamera import FreeCamera as FreeCamera
from pxr.Usdviewq.rootDataModel import RootDataModel as RootDataModel
from pxr.Usdviewq.selectionDataModel import SelectionDataModel as SelectionDataModel
from pxr.Usdviewq.viewSettingsDataModel import ViewSettingsDataModel as ViewSettingsDataModel
from typing import ClassVar

ALL_INSTANCES: int
DEBUG_CLIPPING: str

class FilledRect(Rect):
    _glslProgram: ClassVar[None] = ...
    _vao: ClassVar[int] = ...
    _vbo: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def compileProgram(self): ...
    def glDraw(self, color): ...

class GLSLProgram:
    def __init__(self, VS3, FS3, VS2, FS2, uniformDict) -> None: ...
    def uniform4f(self, param, x, y, z, w): ...

class HUD:
    class Group:
        def __init__(self, name, w, h) -> None: ...
    def __init__(self) -> None: ...
    def addGroup(self, name, w, h): ...
    def compileProgram(self): ...
    def draw(self, qglwidget): ...
    def updateGroup(self, name, x, y, col, dic, keys: Incomplete | None = ...): ...

class Mask(Prim2DDrawTask):
    def __init__(self) -> None: ...
    def updateColor(self, color): ...
    def updatePrims(self, croppedViewport, qglwidget): ...

class Outline(Prim2DDrawTask):
    def __init__(self) -> None: ...
    def updatePrims(self, croppedViewport, qglwidget): ...

class OutlineRect(Rect):
    _glslProgram: ClassVar[None] = ...
    _vao: ClassVar[int] = ...
    _vbo: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def compileProgram(self): ...
    def glDraw(self, color): ...

class Prim2DDrawTask:
    def __init__(self) -> None: ...
    def Execute(self, ctx): ...
    def Sync(self, ctx): ...

class Prim2DSetupTask:
    def __init__(self, viewport) -> None: ...
    def Execute(self, ctx): ...
    def Sync(self, ctx): ...

class Rect:
    def __init__(self) -> None: ...
    def _splitAlongX(self, x): ...
    def _splitAlongY(self, y): ...
    def difference(self, xywh): ...
    @classmethod
    def fromCorners(cls, c0, c1): ...
    @classmethod
    def fromXYWH(cls, xywh): ...
    def scaledAndBiased(self, sxy, txy): ...

class Reticles(Prim2DDrawTask):
    def __init__(self) -> None: ...
    def updateColor(self, color): ...
    def updatePrims(self, croppedViewport, qglwidget, inside, outside): ...

class StageView(PySide6.QtOpenGLWidgets.QOpenGLWidget):
    class DefaultDataModel(pxr.Usdviewq.rootDataModel.RootDataModel):
        staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
        def __init__(self) -> None: ...
        @property
        def selection(self): ...
        @property
        def viewSettings(self): ...
    signalBboxUpdateTimeChanged: ClassVar[PySide6.QtCore.Signal] = ...
    signalErrorMessage: ClassVar[PySide6.QtCore.Signal] = ...
    signalFrustumChanged: ClassVar[PySide6.QtCore.Signal] = ...
    signalMouseDrag: ClassVar[PySide6.QtCore.Signal] = ...
    signalPrimRollover: ClassVar[PySide6.QtCore.Signal] = ...
    signalPrimSelected: ClassVar[PySide6.QtCore.Signal] = ...
    signalSwitchedToFreeCam: ClassVar[PySide6.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    HUDStatKeys: Incomplete
    allowAsync: Incomplete
    cameraPrim: Incomplete
    camerasWithGuides: Incomplete
    fpsHUDInfo: Incomplete
    fpsHUDKeys: Incomplete
    renderParams: Incomplete
    rolloverPicking: Incomplete
    upperHUDInfo: Incomplete
    def __init__(self, parent: Incomplete | None = ..., dataModel: Incomplete | None = ..., makeTimer: type[pxr.Usdviewq.common.Timer] = ...) -> None: ...
    def DrawAxis(self, viewProjectionMatrix): ...
    def DrawCameraGuides(self, mvpMatrix): ...
    def ExportFreeCameraToStage(self, stage, defcamName: str = ..., imgWidth: Incomplete | None = ..., imgHeight: Incomplete | None = ...): ...
    def ExportSession(self, stagePath, defcamName: str = ..., imgWidth: Incomplete | None = ..., imgHeight: Incomplete | None = ...): ...
    def GetCurrentRendererId(self): ...
    def GetRendererAovs(self): ...
    def GetRendererCommands(self): ...
    def GetRendererDisplayName(self, plugId): ...
    def GetRendererPlugins(self): ...
    def GetRendererSetting(self, name): ...
    def GetRendererSettingsList(self): ...
    def GetSimpleGLSLProgram(self): ...
    def InvokeRendererCommand(self, command): ...
    def IsPauseRendererSupported(self): ...
    def IsRendererConverged(self): ...
    def IsStopRendererSupported(self): ...
    def PollForAsynchronousUpdates(self): ...
    def SetForceRefresh(self, val): ...
    def SetRendererAov(self, aov): ...
    def SetRendererPaused(self, paused): ...
    def SetRendererPlugin(self, plugId): ...
    def SetRendererSetting(self, name, value): ...
    def SetRendererStopped(self, stopped): ...
    def _createNewFreeCamera(self, viewSettings, isZUp): ...
    def _getDefaultBBox(self): ...
    def _getEmptyBBox(self): ...
    def _getRenderer(self): ...
    def _handleRendererChanged(self, rendererId): ...
    def _isInfiniteBBox(self, bbox): ...
    def _onAutoComputeClippingChanged(self): ...
    def _onFreeCameraSettingChanged(self): ...
    def _primSelectionChanged(self): ...
    def _processBBoxes(self): ...
    def _processSelection(self): ...
    def _scaleMouseCoords(self, point): ...
    def _stageReplaced(self): ...
    def closeRenderer(self): ...
    def computeAndSetClosestDistance(self): ...
    def computeCameraViewport(self, cameraAspectRatio): ...
    def computePickFrustum(self, x, y): ...
    def computeWindowPolicy(self, cameraAspectRatio): ...
    def computeWindowSize(self): ...
    def computeWindowViewport(self): ...
    def copyViewState(self): ...
    def drawHUD(self, renderer): ...
    def getActiveSceneCamera(self): ...
    def getSelectionBBox(self): ...
    def getStageBBox(self): ...
    def glDraw(self): ...
    def grabFrameBuffer(self, cropToAspectRatio: bool = ...): ...
    def hasLockedAspectRatio(self): ...
    def initializeGL(self): ...
    def mouseMoveEvent(self, event): ...
    def mousePressEvent(self, event): ...
    def mouseReleaseEvent(self, event): ...
    def paintGL(self): ...
    def pick(self, pickFrustum): ...
    def pickObject(self, x, y, button, modifiers): ...
    def recomputeBBox(self): ...
    def renderSinglePass(self, renderMode, renderSelHighlights): ...
    def resetCam(self, frameFit: float = ...): ...
    def resolveCamera(self): ...
    def restoreViewState(self, viewState): ...
    def sizeHint(self): ...
    def switchToFreeCamera(self, computeAndSetClosestDistance: bool = ...): ...
    def updateBboxPurposes(self): ...
    def updateForPlayback(self): ...
    def updateGL(self): ...
    def updateSelection(self): ...
    def updateView(self, resetCam: bool = ..., forceComputeBBox: bool = ..., frameFit: float = ...): ...
    def wheelEvent(self, event): ...
    @property
    def _cropImageToCameraViewport(self): ...
    @property
    def _fitCameraInViewport(self): ...
    @property
    def autoClip(self): ...
    @property
    def cameraFrustum(self): ...
    @property
    def gfCamera(self): ...
    @property
    def rendererAovName(self): ...
    @property
    def rendererDisplayName(self): ...
    @property
    def showReticles(self): ...

def ViewportMakeCenteredIntegral(viewport): ...
def _ComputeCameraFraming(viewport, renderBufferSize): ...
