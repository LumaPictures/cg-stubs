# mypy: disable-error-code="misc, override, no-redef"

import Boost.Python
import pxr.Ar
import pxr.Sdf
import pxr.Tf
import pxr.Tf as Tf
import pxr.Usd
import pxr.UsdAppUtils as UsdAppUtils
import typing_extensions
from . import adjustDefaultMaterial as adjustDefaultMaterial, adjustDefaultMaterialUI as adjustDefaultMaterialUI, adjustFreeCamera as adjustFreeCamera, adjustFreeCameraUI as adjustFreeCameraUI, appController as appController, attributeValueEditor as attributeValueEditor, attributeValueEditorUI as attributeValueEditorUI, attributeViewContextMenu as attributeViewContextMenu, common as common, configController as configController, customAttributes as customAttributes, frameSlider as frameSlider, freeCamera as freeCamera, headerContextMenu as headerContextMenu, layerStackContextMenu as layerStackContextMenu, legendUtil as legendUtil, mainWindowUI as mainWindowUI, plugin as plugin, preferences as preferences, preferencesUI as preferencesUI, prettyPrint as prettyPrint, primContextMenu as primContextMenu, primContextMenuItems as primContextMenuItems, primLegend as primLegend, primLegendUI as primLegendUI, primTreeWidget as primTreeWidget, primViewItem as primViewItem, propertyLegend as propertyLegend, propertyLegendUI as propertyLegendUI, pythonInterpreter as pythonInterpreter, qt as qt, rootDataModel as rootDataModel, scalarTypes as scalarTypes, selectionDataModel as selectionDataModel, settings as settings, stageView as stageView, usdviewApi as usdviewApi, usdviewContextMenuItem as usdviewContextMenuItem, variantComboBox as variantComboBox, viewSettingsDataModel as viewSettingsDataModel
from pxr.Usdviewq.appController import AppController as AppController
from pxr.Usdviewq.common import Timer as Timer
from pxr.Usdviewq.settings import ConfigManager as ConfigManager
from typing import Any, Callable, ClassVar, overload

__MFB_FULL_PACKAGE_NAME: str

class ContainerDataSource(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def Get(self, arg2: object) -> Any: ...
    @overload
    def Get(self, arg2: DataSourceLocator) -> Any: ...
    def GetNames(self) -> list: ...

class DataSourceBase(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...

class DataSourceLocator(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object, arg7: object) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: object, arg5: object, arg6: object) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: object, arg5: object) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object, arg4: object) -> None: ...
    @overload
    def __init__(self, arg2: object, arg3: object) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def Append(self, arg2: object) -> typing_extensions.Self: ...
    @overload
    def Append(self, arg2: DataSourceLocator) -> typing_extensions.Self: ...
    def GetCommonPrefix(self, arg2: DataSourceLocator) -> typing_extensions.Self: ...
    def GetElement(self, arg2: int) -> Any: ...
    def GetElementCount(self) -> int: ...
    def GetFirstElement(self) -> Any: ...
    def GetLastElement(self) -> Any: ...
    def GetString(self, arg2: str | pxr.Ar.ResolvedPath) -> str: ...
    def HasPrefix(self, arg2: DataSourceLocator) -> bool: ...
    def Intersects(self, arg2: DataSourceLocator) -> bool: ...
    def IsEmpty(self) -> bool: ...
    def RemoveFirstElement(self) -> typing_extensions.Self: ...
    def RemoveLastElement(self) -> typing_extensions.Self: ...
    def ReplaceLastElement(self, arg2: object) -> typing_extensions.Self: ...
    def ReplacePrefix(self, arg2: DataSourceLocator, arg3: DataSourceLocator) -> typing_extensions.Self: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...

class DataSourceLocatorSet(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def AsString(self) -> str: ...
    def Contains(self, arg2: DataSourceLocator) -> bool: ...
    @overload
    def Intersects(self, arg2: DataSourceLocator) -> bool: ...
    @overload
    def Intersects(self, arg2: DataSourceLocatorSet) -> bool: ...
    def IsEmpty(self) -> bool: ...
    @overload
    def insert(self, arg2: DataSourceLocator) -> None: ...
    @overload
    def insert(self, arg2: DataSourceLocatorSet) -> None: ...

class HydraObserver(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def ClearPendingNotices(self) -> None: ...
    def GetChildPrimPaths(self, arg2: pxr.Sdf.Path | str) -> list[pxr.Sdf.Path]: ...
    def GetDisplayName(self) -> str: ...
    def GetInputDisplayNames(self, arg2: IndexList) -> list[str]: ...
    def GetPendingNotices(self) -> list[NoticeEntry]: ...
    def GetPrim(self, arg2: pxr.Sdf.Path | str) -> HdSceneIndexPrim: ...
    @staticmethod
    def GetRegisteredSceneIndexNames() -> list[str]: ...
    def HasPendingNotices(self) -> bool: ...
    def TargetToInputSceneIndex(self, arg2: IndexList) -> bool: ...
    def TargetToNamedSceneIndex(self, arg2: str | pxr.Ar.ResolvedPath) -> bool: ...

class InvalidUsdviewOption(Exception): ...

class Launcher:
    __init__: ClassVar[Callable] = ...
    GetHelpDescription: ClassVar[Callable] = ...
    GetResolverContext: ClassVar[Callable] = ...
    LaunchPreamble: ClassVar[Callable] = ...
    ParseOptions: ClassVar[Callable] = ...
    RegisterOptions: ClassVar[Callable] = ...
    RegisterPositionals: ClassVar[Callable] = ...
    Run: ClassVar[Callable] = ...
    ValidateOptions: ClassVar[Callable] = ...
    _Launcher__LaunchProcess: ClassVar[Callable] = ...

class SampledDataSource(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetTypeString(self) -> str: ...
    def GetValue(self, arg2: float) -> Any: ...

class Utils(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    @staticmethod
    def GetPrimInfo(arg1: pxr.Usd.Prim, arg2: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> tuple: ...
    @staticmethod
    def _GetAllPrimsOfType(arg1: pxr.Usd.Stage, arg2: pxr.Tf.Type) -> list[pxr.Usd.Prim]: ...

class VectorDataSource(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetElement(self, arg2: int) -> Any: ...
    def GetNumElements(self) -> int: ...
