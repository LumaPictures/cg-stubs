# mypy: disable-error-code="misc, override, no-redef"

import Boost.Python
import pxr.Ar
import pxr.Ndr
import pxr.Sdf
import typing
from typing import Any, ClassVar

__MFB_FULL_PACKAGE_NAME: str

class NodeContext(Boost.Python.instance):
    Displacement: ClassVar[str] = ...  # read-only
    DisplayFilter: ClassVar[str] = ...  # read-only
    Light: ClassVar[str] = ...  # read-only
    LightFilter: ClassVar[str] = ...  # read-only
    Pattern: ClassVar[str] = ...  # read-only
    PixelFilter: ClassVar[str] = ...  # read-only
    SampleFilter: ClassVar[str] = ...  # read-only
    Surface: ClassVar[str] = ...  # read-only
    Volume: ClassVar[str] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class NodeMetadata(Boost.Python.instance):
    Category: ClassVar[str] = ...  # read-only
    Departments: ClassVar[str] = ...  # read-only
    Help: ClassVar[str] = ...  # read-only
    ImplementationName: ClassVar[str] = ...  # read-only
    Label: ClassVar[str] = ...  # read-only
    Pages: ClassVar[str] = ...  # read-only
    Primvars: ClassVar[str] = ...  # read-only
    Role: ClassVar[str] = ...  # read-only
    SdrDefinitionNameFallbackPrefix: ClassVar[str] = ...  # read-only
    SdrUsdEncodingVersion: ClassVar[str] = ...  # read-only
    Target: ClassVar[str] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class NodeRole(Boost.Python.instance):
    Field: ClassVar[str] = ...  # read-only
    Math: ClassVar[str] = ...  # read-only
    Primvar: ClassVar[str] = ...  # read-only
    Texture: ClassVar[str] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class PropertyMetadata(Boost.Python.instance):
    Colorspace: ClassVar[str] = ...  # read-only
    Connectable: ClassVar[str] = ...  # read-only
    DefaultInput: ClassVar[str] = ...  # read-only
    Help: ClassVar[str] = ...  # read-only
    Hints: ClassVar[str] = ...  # read-only
    ImplementationName: ClassVar[str] = ...  # read-only
    IsAssetIdentifier: ClassVar[str] = ...  # read-only
    IsDynamicArray: ClassVar[str] = ...  # read-only
    Label: ClassVar[str] = ...  # read-only
    Options: ClassVar[str] = ...  # read-only
    Page: ClassVar[str] = ...  # read-only
    RenderType: ClassVar[str] = ...  # read-only
    Role: ClassVar[str] = ...  # read-only
    SdrUsdDefinitionType: ClassVar[str] = ...  # read-only
    Tag: ClassVar[str] = ...  # read-only
    Target: ClassVar[str] = ...  # read-only
    ValidConnectionTypes: ClassVar[str] = ...  # read-only
    VstructConditionalExpr: ClassVar[str] = ...  # read-only
    VstructMemberName: ClassVar[str] = ...  # read-only
    VstructMemberOf: ClassVar[str] = ...  # read-only
    Widget: ClassVar[str] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class PropertyRole(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...

class PropertyTypes(Boost.Python.instance):
    Color: ClassVar[str] = ...  # read-only
    Color4: ClassVar[str] = ...  # read-only
    Float: ClassVar[str] = ...  # read-only
    Int: ClassVar[str] = ...  # read-only
    Matrix: ClassVar[str] = ...  # read-only
    Normal: ClassVar[str] = ...  # read-only
    Point: ClassVar[str] = ...  # read-only
    String: ClassVar[str] = ...  # read-only
    Struct: ClassVar[str] = ...  # read-only
    Terminal: ClassVar[str] = ...  # read-only
    Unknown: ClassVar[str] = ...  # read-only
    Vector: ClassVar[str] = ...  # read-only
    Vstruct: ClassVar[str] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Registry(pxr.Ndr.Registry):
    def __init__(self) -> None: ...
    def GetShaderNodeByIdentifier(self, identifier: str | pxr.Ar.ResolvedPath, typePriority: typing.Iterable[str | pxr.Ar.ResolvedPath] = ...) -> ShaderNode: ...
    def GetShaderNodeByIdentifierAndType(self, identifier: str | pxr.Ar.ResolvedPath, nodeType: str | pxr.Ar.ResolvedPath) -> ShaderNode: ...
    def GetShaderNodeByName(self, name: str | pxr.Ar.ResolvedPath, typePriority: typing.Iterable[str | pxr.Ar.ResolvedPath] = ..., filter: pxr.Ndr.VersionFilter = ...) -> ShaderNode: ...
    def GetShaderNodeByNameAndType(self, name: str | pxr.Ar.ResolvedPath, nodeType: str | pxr.Ar.ResolvedPath, filter: pxr.Ndr.VersionFilter = ...) -> ShaderNode: ...
    def GetShaderNodeFromAsset(self, shaderAsset: pxr.Sdf.AssetPath | str, metadata: dict[str | pxr.Ar.ResolvedPath, str | pxr.Ar.ResolvedPath] = ..., subIdentifier: str | pxr.Ar.ResolvedPath = ..., sourceType: str | pxr.Ar.ResolvedPath = ...) -> ShaderNode: ...
    def GetShaderNodeFromSourceCode(self, sourceCode: str | pxr.Ar.ResolvedPath, sourceType: str | pxr.Ar.ResolvedPath, metadata: dict[str | pxr.Ar.ResolvedPath, str | pxr.Ar.ResolvedPath] = ...) -> ShaderNode: ...
    def GetShaderNodesByFamily(self, family: str | pxr.Ar.ResolvedPath = ..., filter: pxr.Ndr.VersionFilter = ...) -> ShaderNodeList: ...
    def GetShaderNodesByIdentifier(self, identifier: str | pxr.Ar.ResolvedPath) -> ShaderNodeList: ...
    def GetShaderNodesByName(self, name: str | pxr.Ar.ResolvedPath, filter: pxr.Ndr.VersionFilter = ...) -> ShaderNodeList: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def expired(self): ...

class ShaderNode(pxr.Ndr.Node):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetAdditionalPrimvarProperties(self) -> list[str]: ...
    def GetAllVstructNames(self) -> list[str]: ...
    def GetAssetIdentifierInputNames(self) -> list[str]: ...
    def GetCategory(self) -> str: ...
    def GetDefaultInput(self) -> ShaderProperty: ...
    def GetDepartments(self) -> list[str]: ...
    def GetHelp(self) -> str: ...
    def GetImplementationName(self) -> str: ...
    def GetLabel(self) -> str: ...
    def GetPages(self) -> list[str]: ...
    def GetPrimvars(self) -> list[str]: ...
    def GetPropertyNamesForPage(self, arg2: str | pxr.Ar.ResolvedPath) -> list[str]: ...
    def GetRole(self) -> str: ...
    def GetShaderInput(self, arg2: str | pxr.Ar.ResolvedPath) -> ShaderProperty: ...
    def GetShaderOutput(self, arg2: str | pxr.Ar.ResolvedPath) -> ShaderProperty: ...

class ShaderNodeList(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def append(self, arg2: object) -> None: ...
    def extend(self, arg2: object) -> None: ...
    def __contains__(self, arg2: object) -> bool: ...
    def __delitem__(self, arg2: object) -> None: ...
    def __getitem__(self, arg2: object) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg2: object, arg3: object) -> None: ...

class ShaderProperty(pxr.Ndr.Property):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetDefaultValueAsSdfType(self) -> Any: ...
    def GetHelp(self) -> str: ...
    def GetHints(self) -> dict: ...
    def GetImplementationName(self) -> str: ...
    def GetLabel(self) -> str: ...
    def GetOptions(self) -> list[tuple[str, str]]: ...
    def GetPage(self) -> str: ...
    def GetVStructConditionalExpr(self) -> str: ...
    def GetVStructMemberName(self) -> str: ...
    def GetVStructMemberOf(self) -> str: ...
    def GetValidConnectionTypes(self) -> list[str]: ...
    def GetWidget(self) -> str: ...
    def IsAssetIdentifier(self) -> bool: ...
    def IsDefaultInput(self) -> bool: ...
    def IsVStruct(self) -> bool: ...
    def IsVStructMember(self) -> bool: ...
