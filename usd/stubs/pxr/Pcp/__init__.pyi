# mypy: disable-error-code="misc, override, no-redef"

import Boost.Python
import pxr.Ar
import pxr.Sdf
import pxr.Tf
import types
import typing
import typing_extensions
from _typeshed import Incomplete
from typing import Any, Callable, ClassVar, overload

ArcTypeInherit: ArcType
ArcTypePayload: ArcType
ArcTypeReference: ArcType
ArcTypeRelocate: ArcType
ArcTypeRoot: ArcType
ArcTypeSpecialize: ArcType
ArcTypeVariant: ArcType
DependencyTypeAncestral: DependencyType
DependencyTypeAnyIncludingVirtual: DependencyType
DependencyTypeAnyNonVirtual: DependencyType
DependencyTypeDirect: DependencyType
DependencyTypeNonVirtual: DependencyType
DependencyTypeNone: DependencyType
DependencyTypePartlyDirect: DependencyType
DependencyTypePurelyDirect: DependencyType
DependencyTypeRoot: DependencyType
DependencyTypeVirtual: DependencyType
ErrorType_ArcCapacityExceeded: ErrorType
ErrorType_ArcCycle: ErrorType
ErrorType_ArcNamespaceDepthCapacityExceeded: ErrorType
ErrorType_ArcPermissionDenied: ErrorType
ErrorType_InconsistentAttributeType: ErrorType
ErrorType_InconsistentAttributeVariability: ErrorType
ErrorType_InconsistentPropertyType: ErrorType
ErrorType_IndexCapacityExceeded: ErrorType
ErrorType_InternalAssetPath: ErrorType
ErrorType_InvalidAssetPath: ErrorType
ErrorType_InvalidAuthoredRelocation: ErrorType
ErrorType_InvalidConflictingRelocation: ErrorType
ErrorType_InvalidExternalTargetPath: ErrorType
ErrorType_InvalidInstanceTargetPath: ErrorType
ErrorType_InvalidPrimPath: ErrorType
ErrorType_InvalidReferenceOffset: ErrorType
ErrorType_InvalidSameTargetRelocations: ErrorType
ErrorType_InvalidSublayerOffset: ErrorType
ErrorType_InvalidSublayerOwnership: ErrorType
ErrorType_InvalidSublayerPath: ErrorType
ErrorType_InvalidTargetPath: ErrorType
ErrorType_InvalidVariantSelection: ErrorType
ErrorType_MutedAssetPath: ErrorType
ErrorType_OpinionAtRelocationSource: ErrorType
ErrorType_PrimPermissionDenied: ErrorType
ErrorType_PropertyPermissionDenied: ErrorType
ErrorType_SublayerCycle: ErrorType
ErrorType_TargetPermissionDenied: ErrorType
ErrorType_UnresolvedPrimPath: ErrorType
ErrorType_VariableExpressionError: ErrorType
_TestPrimIndex: Callable
__MFB_FULL_PACKAGE_NAME: str

class ArcType(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def GetValueFromName(name: object) -> Any: ...

class Cache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, layerStackIdentifier: LayerStackIdentifier, fileFormatTarget: str | pxr.Ar.ResolvedPath = ..., usd: bool = ...) -> None: ...
    def ComputeAttributeConnectionPaths(self, relPath: pxr.Sdf.Path | str, localOnly: bool = ..., stopProperty: pxr.Sdf.Spec = ..., includeStopProperty: bool = ...) -> tuple: ...
    def ComputeLayerStack(self, arg2: LayerStackIdentifier) -> tuple: ...
    def ComputePrimIndex(self, arg2: pxr.Sdf.Path | str) -> tuple: ...
    def ComputePropertyIndex(self, arg2: pxr.Sdf.Path | str) -> tuple: ...
    def ComputeRelationshipTargetPaths(self, relPath: pxr.Sdf.Path | str, localOnly: bool = ..., stopProperty: pxr.Sdf.Spec = ..., includeStopProperty: bool = ...) -> tuple: ...
    def FindAllLayerStacksUsingLayer(self, arg2: pxr.Sdf.Layer) -> list[LayerStack]: ...
    def FindPrimIndex(self, arg2: pxr.Sdf.Path | str) -> PrimIndex: ...
    def FindPropertyIndex(self, arg2: pxr.Sdf.Path | str) -> PropertyIndex: ...
    def FindSiteDependencies(self, siteLayerStack: LayerStack, sitePath: pxr.Sdf.Path | str, dependencyType: int = ..., recurseOnSite: bool = ..., recurseOnIndex: bool = ..., filterForExistingCachesOnly: bool = ...) -> list: ...
    def GetDynamicFileFormatArgumentDependencyData(self, arg2: pxr.Sdf.Path | str) -> DynamicFileFormatDependencyData: ...
    def GetExpressionVariablesFromLayerStackUsedByPrim(self, layerStack: pxr.Sdf.Path | str, primIndexPath: LayerStack) -> list[str]: ...
    def GetLayerStackIdentifier(self) -> LayerStackIdentifier: ...
    def GetMutedLayers(self) -> list[str]: ...
    def GetPrimsUsingExpressionVariablesFromLayerStack(self, layerStack: LayerStack) -> list[pxr.Sdf.Path]: ...
    def GetUsedLayers(self) -> list[pxr.Sdf.Layer]: ...
    def GetUsedLayersRevision(self) -> int: ...
    def GetVariantFallbacks(self) -> dict: ...
    def HasAnyDynamicFileFormatArgumentAttributeDependencies(self) -> bool: ...
    def HasAnyDynamicFileFormatArgumentFieldDependencies(self) -> bool: ...
    def HasRootLayerStack(self, arg2: LayerStack) -> bool: ...
    def IsInvalidAssetPath(self, arg2: str | pxr.Ar.ResolvedPath) -> bool: ...
    def IsInvalidSublayerIdentifier(self, arg2: str | pxr.Ar.ResolvedPath) -> bool: ...
    def IsLayerMuted(self, layerIdentifier: str | pxr.Ar.ResolvedPath) -> bool: ...
    def IsPayloadIncluded(self, arg2: pxr.Sdf.Path | str) -> bool: ...
    def IsPossibleDynamicFileFormatArgumentAttribute(self, arg2: str | pxr.Ar.ResolvedPath) -> bool: ...
    def IsPossibleDynamicFileFormatArgumentField(self, arg2: str | pxr.Ar.ResolvedPath) -> bool: ...
    def PrintStatistics(self) -> None: ...
    def Reload(self) -> None: ...
    def RequestLayerMuting(self, layersToMute: typing.Iterable[str | pxr.Ar.ResolvedPath], layersToUnmute: typing.Iterable[str | pxr.Ar.ResolvedPath]) -> None: ...
    def RequestPayloads(self, arg2: typing.Iterable[pxr.Sdf.Path | str], arg3: typing.Iterable[pxr.Sdf.Path | str]) -> None: ...
    def SetVariantFallbacks(self, arg2: dict) -> None: ...
    def UsesLayerStack(self, arg2: LayerStack) -> bool: ...
    @property
    def fileFormatTarget(self) -> str: ...
    @property
    def layerStack(self) -> LayerStack: ...

class Dependency(Boost.Python.instance):
    indexPath: Incomplete
    mapFunc: Incomplete
    sitePath: Incomplete
    def __init__(self, arg2: pxr.Sdf.Path | str, arg3: pxr.Sdf.Path | str, arg4: MapFunction) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class DependencyType(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def GetValueFromName(name: object) -> Any: ...

class DynamicFileFormatDependencyData(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def CanAttributeDefaultValueChangeAffectFileFormatArguments(self, arg2: str | pxr.Ar.ResolvedPath, arg3: Any, arg4: Any) -> bool: ...
    def CanFieldChangeAffectFileFormatArguments(self, arg2: str | pxr.Ar.ResolvedPath, arg3: Any, arg4: Any) -> bool: ...
    def GetRelevantAttributeNames(self) -> list: ...
    def GetRelevantFieldNames(self) -> list: ...
    def IsEmpty(self) -> bool: ...

class ErrorArcCycle(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorArcPermissionDenied(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorBase(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def errorType(self): ...

class ErrorCapacityExceeded(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInconsistentAttributeType(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInconsistentAttributeVariability(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInconsistentPropertyType(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidAssetPath(ErrorInvalidAssetPathBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidAssetPathBase(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidAuthoredRelocation(ErrorRelocationBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidConflictingRelocation(ErrorRelocationBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidExternalTargetPath(ErrorTargetPathBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidInstanceTargetPath(ErrorTargetPathBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidPrimPath(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidReferenceOffset(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidSameTargetRelocations(ErrorRelocationBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidSublayerOffset(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidSublayerOwnership(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidSublayerPath(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorInvalidTargetPath(ErrorTargetPathBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorMutedAssetPath(ErrorInvalidAssetPathBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorOpinionAtRelocationSource(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorPrimPermissionDenied(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorPropertyPermissionDenied(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorRelocationBase(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorSublayerCycle(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorTargetPathBase(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorTargetPermissionDenied(ErrorTargetPathBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorType(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def GetValueFromName(name: object) -> Any: ...

class ErrorUnresolvedPrimPath(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ErrorVariableExpressionError(ErrorBase):
    def __init__(self, *args, **kwargs) -> None: ...

class ExpressionVariables(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, arg2: ExpressionVariablesSource, arg3: dict) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def Compute(sourceLayerStackId: LayerStackIdentifier, rootLayerStackId: LayerStackIdentifier, overrideExpressionVars: ExpressionVariables) -> ExpressionVariables: ...
    @overload
    @staticmethod
    def Compute(sourceLayerStackId: LayerStackIdentifier, rootLayerStackId: LayerStackIdentifier) -> ExpressionVariables: ...
    def GetSource(self) -> ExpressionVariablesSource: ...
    def GetVariables(self) -> dict: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ExpressionVariablesSource(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, layerStackId: LayerStackIdentifier, rootLayerStackId: LayerStackIdentifier) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def GetLayerStackIdentifier(self) -> LayerStackIdentifier: ...
    def IsRootLayerStack(self) -> bool: ...
    @overload
    def ResolveLayerStackIdentifier(self, arg2: LayerStackIdentifier) -> LayerStackIdentifier: ...
    @overload
    def ResolveLayerStackIdentifier(self, arg2: Cache) -> LayerStackIdentifier: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class InstanceKey(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, primIndex: PrimIndex) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...

class LayerStack(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def expired(self): ...
    @property
    def expressionVariableDependencies(self) -> list[str]: ...
    @property
    def expressionVariables(self) -> ExpressionVariables: ...
    @property
    def identifier(self) -> LayerStackIdentifier: ...
    @property
    def incrementalRelocatesSourceToTarget(self) -> dict[pxr.Sdf.Path, pxr.Sdf.Path]: ...
    @property
    def incrementalRelocatesTargetToSource(self) -> dict[pxr.Sdf.Path, pxr.Sdf.Path]: ...
    @property
    def layerOffsets(self): ...
    @property
    def layerTree(self) -> pxr.Sdf.LayerTree: ...
    @property
    def layers(self) -> list[pxr.Sdf.Layer]: ...
    @property
    def localErrors(self) -> list[Error]: ...
    @property
    def mutedLayers(self) -> list[str]: ...
    @property
    def pathsToPrimsWithRelocates(self) -> list[pxr.Sdf.Path]: ...
    @property
    def relocatesSourceToTarget(self) -> dict[pxr.Sdf.Path, pxr.Sdf.Path]: ...
    @property
    def relocatesTargetToSource(self) -> dict[pxr.Sdf.Path, pxr.Sdf.Path]: ...
    @property
    def sessionLayerTree(self) -> pxr.Sdf.LayerTree: ...

class LayerStackIdentifier(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, rootLayer: pxr.Sdf.Layer, sessionLayer: pxr.Sdf.Layer = ..., pathResolverContext: pxr.Ar.ResolverContext = ..., expressionVariablesOverrideSource: ExpressionVariablesSource = ...) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def expressionVariablesOverrideSource(self): ...
    @property
    def pathResolverContext(self): ...
    @property
    def rootLayer(self): ...
    @property
    def sessionLayer(self): ...

class LayerStackSite(Boost.Python.instance):
    layerStack: Incomplete
    path: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MapExpression(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def AddRootIdentity(self) -> MapExpression: ...
    def Compose(self, arg2: MapExpression) -> MapExpression: ...
    @staticmethod
    def Constant(arg1: MapFunction) -> MapExpression: ...
    def Evaluate(self) -> MapFunction: ...
    @staticmethod
    def Identity() -> MapExpression: ...
    @staticmethod
    def Inverse() -> MapExpression: ...
    def MapSourceToTarget(self, path: pxr.Sdf.Path | str) -> pxr.Sdf.Path: ...
    def MapTargetToSource(self, path: pxr.Sdf.Path | str) -> pxr.Sdf.Path: ...
    @property
    def isIdentity(self) -> bool: ...
    @property
    def isNull(self) -> bool: ...
    @property
    def timeOffset(self) -> pxr.Sdf.LayerOffset: ...

class MapFunction(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, sourceToTargetMap: dict, timeOffset: pxr.Sdf.LayerOffset = ...) -> None: ...
    @overload
    def __init__(self, arg2: MapFunction) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Compose(self, arg2: MapFunction) -> MapFunction: ...
    def ComposeOffset(self, offset: pxr.Sdf.LayerOffset) -> MapFunction: ...
    def GetInverse(self) -> MapFunction: ...
    @staticmethod
    def Identity() -> MapFunction: ...
    @staticmethod
    def IdentityPathMap() -> dict: ...
    @overload
    def MapSourceToTarget(self, pathExpr: pxr.Sdf.PathExpression) -> pxr.Sdf.PathExpression: ...
    @overload
    def MapSourceToTarget(self, path: pxr.Sdf.Path | str) -> pxr.Sdf.Path: ...
    @overload
    def MapTargetToSource(self, pathExpr: pxr.Sdf.PathExpression) -> pxr.Sdf.PathExpression: ...
    @overload
    def MapTargetToSource(self, path: pxr.Sdf.Path | str) -> pxr.Sdf.Path: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def isIdentity(self) -> bool: ...
    @property
    def isIdentityPathMapping(self) -> bool: ...
    @property
    def isNull(self) -> bool: ...
    @property
    def sourceToTargetMap(self) -> PathMap: ...
    @property
    def timeOffset(self) -> pxr.Sdf.LayerOffset: ...

class NodeRef(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def CanContributeSpecs(self) -> bool: ...
    def GetDepthBelowIntroduction(self) -> int: ...
    def GetIntroPath(self) -> pxr.Sdf.Path: ...
    def GetOriginRootNode(self) -> NodeRef: ...
    def GetPathAtIntroduction(self) -> pxr.Sdf.Path: ...
    def GetRootNode(self) -> NodeRef: ...
    def GetSpecContributionRestrictedDepth(self) -> int: ...
    def IsDueToAncestor(self) -> bool: ...
    def IsRootNode(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def arcType(self) -> ArcType: ...
    @property
    def children(self): ...
    @property
    def hasSpecs(self): ...
    @property
    def hasSymmetry(self): ...
    @property
    def isCulled(self) -> bool: ...
    @property
    def isInert(self) -> bool: ...
    @property
    def isRestricted(self) -> bool: ...
    @property
    def layerStack(self) -> LayerStack: ...
    @property
    def mapToParent(self) -> MapExpression: ...
    @property
    def mapToRoot(self) -> MapExpression: ...
    @property
    def namespaceDepth(self) -> int: ...
    @property
    def origin(self): ...
    @property
    def parent(self): ...
    @property
    def path(self) -> pxr.Sdf.Path: ...
    @property
    def permission(self) -> pxr.Sdf.Permission: ...
    @property
    def siblingNumAtOrigin(self) -> int: ...
    @property
    def site(self) -> LayerStackSite: ...

class PrimIndex(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def ComposeAuthoredVariantSelections(self) -> dict: ...
    def ComputePrimChildNames(self) -> tuple: ...
    def ComputePrimPropertyNames(self) -> list: ...
    def DumpToDotGraph(self, filename: str | pxr.Ar.ResolvedPath, includeInheritOriginInfo: bool = ..., includeMaps: bool = ...) -> None: ...
    def DumpToString(self, includeInheritOriginInfo: bool = ..., includeMaps: bool = ...) -> str: ...
    @overload
    def GetNodeProvidingSpec(self, layer: pxr.Sdf.Layer, path: pxr.Sdf.Path | str) -> NodeRef: ...
    @overload
    def GetNodeProvidingSpec(self, primSpec: pxr.Sdf.PrimSpec) -> NodeRef: ...
    def GetSelectionAppliedForVariantSet(self, arg2: str | pxr.Ar.ResolvedPath) -> str: ...
    def IsInstanceable(self) -> bool: ...
    def IsValid(self) -> bool: ...
    def PrintStatistics(self) -> None: ...
    @property
    def hasAnyPayloads(self): ...
    @property
    def localErrors(self) -> list[Error]: ...
    @property
    def primStack(self): ...
    @property
    def rootNode(self) -> NodeRef: ...

class PropertyIndex(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def localErrors(self) -> list[Error]: ...
    @property
    def localPropertyStack(self): ...
    @property
    def propertyStack(self): ...

class Site(Boost.Python.instance):
    layerStack: Incomplete
    path: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class _TestChangeProcessor(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: Cache) -> None: ...
    def GetPrimChanges(self) -> list: ...
    def GetSignificantChanges(self) -> list: ...
    def GetSpecChanges(self) -> list: ...
    def __enter__(self) -> typing_extensions.Self: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def BuildPrimPropertyIndex(arg1: pxr.Sdf.Path | str, arg2: Cache, arg3: PrimIndex) -> tuple: ...
def TranslatePathFromNodeToRoot(arg1: NodeRef, sourceNode: pxr.Sdf.Path | str) -> pxr.Sdf.Path: ...
def TranslatePathFromRootToNode(arg1: NodeRef, destNode: pxr.Sdf.Path | str) -> pxr.Sdf.Path: ...
def _GetInvalidPcpNode() -> NodeRef: ...
