# mypy: disable-error-code="misc, override, no-redef"

import Boost.Python
import pxr.Ar
import pxr.Gf
import pxr.Sdf
import pxr.Tf
import pxr.Usd
import pxr.UsdShade
import pxr.Vt
import typing
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

__MFB_FULL_PACKAGE_NAME: str

class BBoxCache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, includedPurposes: list[str] | list[pxr.Ar.ResolvedPath], useExtentsHint: bool = ..., ignoreVisibility: bool = ...) -> None: ...
    def Clear(self) -> None: ...
    def ClearBaseTime(self) -> None: ...
    def ComputeLocalBound(self, prim: pxr.Usd.Prim) -> pxr.Gf.BBox3d: ...
    def ComputePointInstanceLocalBound(self, instancer: PointInstancer, instanceId: int) -> pxr.Gf.BBox3d: ...
    def ComputePointInstanceLocalBounds(self, instancer: PointInstancer, instanceIds: int) -> tuple[int, pxr.Gf.BBox3d]: ...
    def ComputePointInstanceRelativeBound(self, instancer: PointInstancer, instanceId: int, relativeToAncestorPrim: pxr.Usd.Prim) -> pxr.Gf.BBox3d: ...
    def ComputePointInstanceRelativeBounds(self, instancer: PointInstancer, instanceIds: int, relativeToAncestorPrim: pxr.Usd.Prim) -> tuple[int, pxr.Gf.BBox3d]: ...
    def ComputePointInstanceUntransformedBound(self, instancer: PointInstancer, instanceId: int) -> pxr.Gf.BBox3d: ...
    def ComputePointInstanceUntransformedBounds(self, instancer: PointInstancer, instanceIds: int) -> tuple[int, pxr.Gf.BBox3d]: ...
    def ComputePointInstanceWorldBound(self, instancer: PointInstancer, instanceId: int) -> pxr.Gf.BBox3d: ...
    def ComputePointInstanceWorldBounds(self, instancer: PointInstancer, instanceIds: int) -> tuple[int, pxr.Gf.BBox3d]: ...
    def ComputeRelativeBound(self, prim: pxr.Usd.Prim, relativeRootPrim: pxr.Usd.Prim) -> pxr.Gf.BBox3d: ...
    @overload
    def ComputeUntransformedBound(self, prim: pxr.Usd.Prim, pathsToSkip: typing.Iterable[pxr.Sdf.Path | str], ctmOverrides: pxr.Tf.HashMap[pxr.Sdf.Path | str, pxr.Gf.Matrix4d, pxr.Sdf.Path.Hash]) -> pxr.Gf.BBox3d: ...
    @overload
    def ComputeUntransformedBound(self, prim: pxr.Usd.Prim) -> pxr.Gf.BBox3d: ...
    def ComputeWorldBound(self, prim: pxr.Usd.Prim) -> pxr.Gf.BBox3d: ...
    def ComputeWorldBoundWithOverrides(self, prim: pxr.Usd.Prim, pathsToSkip: typing.Iterable[pxr.Sdf.Path | str], primOverride: pxr.Gf.Matrix4d, ctmOverrides: pxr.Tf.HashMap[pxr.Sdf.Path | str, pxr.Gf.Matrix4d, pxr.Sdf.Path.Hash]) -> pxr.Gf.BBox3d: ...
    def GetBaseTime(self) -> pxr.Usd.TimeCode: ...
    def GetIncludedPurposes(self) -> list[str]: ...
    def GetTime(self) -> pxr.Usd.TimeCode: ...
    def GetUseExtentsHint(self) -> bool: ...
    def HasBaseTime(self) -> bool: ...
    def SetBaseTime(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> None: ...
    def SetIncludedPurposes(self, includedPurposes: list[str] | list[pxr.Ar.ResolvedPath]) -> None: ...
    def SetTime(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> None: ...

class BasisCurves(Curves):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def ComputeInterpolationForSize(self, arg2: int, arg3: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> tuple[str, list[tuple[str, int]]]: ...
    def ComputeUniformDataSize(self, arg2: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> int: ...
    def ComputeVaryingDataSize(self, arg2: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> int: ...
    def ComputeVertexDataSize(self, arg2: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> int: ...
    def CreateBasisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTypeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateWrapAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> BasisCurves: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> BasisCurves: ...
    def GetBasisAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetTypeAttr(self) -> pxr.Usd.Attribute: ...
    def GetWrapAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Boundable(Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def ComputeExtent(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> pxr.Vt.Vec3fArray: ...
    @overload
    @staticmethod
    def ComputeExtentFromPlugins(boundable: Boundable, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, transform: pxr.Gf.Matrix4d) -> pxr.Vt.Vec3fArray: ...
    @overload
    @staticmethod
    def ComputeExtentFromPlugins(boundable: Boundable, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> pxr.Vt.Vec3fArray: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Boundable: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Camera(Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateClippingPlanesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateClippingRangeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExposureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFStopAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFocalLengthAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFocusDistanceAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateHorizontalApertureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateHorizontalApertureOffsetAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateProjectionAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShutterCloseAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateShutterOpenAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateStereoRoleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVerticalApertureAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVerticalApertureOffsetAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Camera: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Camera: ...
    def GetCamera(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Gf.Camera: ...
    def GetClippingPlanesAttr(self) -> pxr.Usd.Attribute: ...
    def GetClippingRangeAttr(self) -> pxr.Usd.Attribute: ...
    def GetExposureAttr(self) -> pxr.Usd.Attribute: ...
    def GetFStopAttr(self) -> pxr.Usd.Attribute: ...
    def GetFocalLengthAttr(self) -> pxr.Usd.Attribute: ...
    def GetFocusDistanceAttr(self) -> pxr.Usd.Attribute: ...
    def GetHorizontalApertureAttr(self) -> pxr.Usd.Attribute: ...
    def GetHorizontalApertureOffsetAttr(self) -> pxr.Usd.Attribute: ...
    def GetProjectionAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetShutterCloseAttr(self) -> pxr.Usd.Attribute: ...
    def GetShutterOpenAttr(self) -> pxr.Usd.Attribute: ...
    def GetStereoRoleAttr(self) -> pxr.Usd.Attribute: ...
    def GetVerticalApertureAttr(self) -> pxr.Usd.Attribute: ...
    def GetVerticalApertureOffsetAttr(self) -> pxr.Usd.Attribute: ...
    def SetFromCamera(self, camera: pxr.Gf.Camera, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> None: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Capsule(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateHeightAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Capsule: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Capsule: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    def GetHeightAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Capsule_1(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateHeightAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusBottomAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusTopAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Capsule_1: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Capsule_1: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    def GetHeightAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusBottomAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusTopAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Cone(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateHeightAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Cone: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Cone: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    def GetHeightAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class ConstraintTarget(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, attr: pxr.Usd.Attribute | ConstraintTarget | Primvar | XformOp | pxr.UsdShade.Input | pxr.UsdShade.Output) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def ComputeInWorldSpace(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Gf.Matrix4d: ...
    def Get(self, arg2: pxr.Gf.Matrix4d, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def GetAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetConstraintAttrName(arg1: str | pxr.Ar.ResolvedPath) -> str: ...
    def GetIdentifier(self) -> str: ...
    def IsDefined(self) -> bool: ...
    @classmethod
    def IsValid(cls, arg1: pxr.Usd.Attribute | ConstraintTarget | Primvar | XformOp | pxr.UsdShade.Input | pxr.UsdShade.Output) -> bool: ...
    def Set(self, value: pxr.Gf.Matrix4d, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def SetIdentifier(self, identifier: str | pxr.Ar.ResolvedPath) -> None: ...
    def __bool__(self) -> bool: ...

class Cube(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSizeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Cube: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Cube: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetSizeAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Curves(PointBased):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def ComputeExtent(points: object, widths: object) -> Any: ...
    def CreateCurveVertexCountsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateWidthsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Curves: ...
    def GetCurveCount(self, timeCode: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> int: ...
    def GetCurveVertexCountsAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetWidthsAttr(self) -> pxr.Usd.Attribute: ...
    def GetWidthsInterpolation(self) -> str: ...
    def SetWidthsInterpolation(self, interpolation: str | pxr.Ar.ResolvedPath) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Cylinder(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateHeightAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Cylinder: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Cylinder: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    def GetHeightAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Cylinder_1(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateHeightAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusBottomAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusTopAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Cylinder_1: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Cylinder_1: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    def GetHeightAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusBottomAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusTopAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Gprim(Boundable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateDisplayColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDisplayColorPrimvar(self, interpolation: str | pxr.Ar.ResolvedPath = ..., elementSize: int = ...) -> Primvar: ...
    def CreateDisplayOpacityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDisplayOpacityPrimvar(self, interpolation: str | pxr.Ar.ResolvedPath = ..., elementSize: int = ...) -> Primvar: ...
    def CreateDoubleSidedAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateOrientationAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Gprim: ...
    def GetDisplayColorAttr(self) -> pxr.Usd.Attribute: ...
    def GetDisplayColorPrimvar(self) -> Primvar: ...
    def GetDisplayOpacityAttr(self) -> pxr.Usd.Attribute: ...
    def GetDisplayOpacityPrimvar(self) -> Primvar: ...
    def GetDoubleSidedAttr(self) -> pxr.Usd.Attribute: ...
    def GetOrientationAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class HermiteCurves(Curves):
    class PointAndTangentArrays(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        @overload
        def __init__(self, arg2: pxr.Vt.Vec3fArray | typing.Iterable[pxr.Gf.Vec3f], arg3: pxr.Vt.Vec3fArray | typing.Iterable[pxr.Gf.Vec3f]) -> None: ...
        @overload
        def __init__(self) -> None: ...
        def GetPoints(self) -> pxr.Vt.Vec3fArray: ...
        def GetTangents(self) -> pxr.Vt.Vec3fArray: ...
        def Interleave(self) -> pxr.Vt.Vec3fArray: ...
        def IsEmpty(self) -> bool: ...
        @staticmethod
        def Separate(arg1: pxr.Vt.Vec3fArray | typing.Iterable[pxr.Gf.Vec3f]) -> HermiteCurves.PointAndTangentArrays: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateTangentsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> HermiteCurves: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> HermiteCurves: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetTangentsAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Imageable(pxr.Usd.Typed):
    class PurposeInfo(Boost.Python.instance):
        __instance_size__: ClassVar[int] = ...
        isInheritable: Incomplete
        purpose: Incomplete
        @overload
        def __init__(self, arg2: object, arg3: bool) -> None: ...
        @overload
        def __init__(self) -> None: ...
        def GetInheritablePurpose(self) -> str: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def ComputeEffectiveVisibility(self, purpose: str | pxr.Ar.ResolvedPath = ..., time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> str: ...
    def ComputeLocalBound(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, purpose1: str | pxr.Ar.ResolvedPath = ..., purpose2: str | pxr.Ar.ResolvedPath = ..., purpose3: str | pxr.Ar.ResolvedPath = ..., purpose4: str | pxr.Ar.ResolvedPath = ...) -> pxr.Gf.BBox3d: ...
    def ComputeLocalToWorldTransform(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> pxr.Gf.Matrix4d: ...
    def ComputeParentToWorldTransform(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> pxr.Gf.Matrix4d: ...
    def ComputeProxyPrim(self) -> tuple[pxr.Usd.Prim, pxr.Usd.Prim]: ...
    def ComputePurpose(self) -> str: ...
    @overload
    def ComputePurposeInfo(self, parentPurposeInfo: Imageable.PurposeInfo) -> Imageable.PurposeInfo: ...
    @overload
    def ComputePurposeInfo(self) -> Imageable.PurposeInfo: ...
    def ComputeUntransformedBound(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, purpose1: str | pxr.Ar.ResolvedPath = ..., purpose2: str | pxr.Ar.ResolvedPath = ..., purpose3: str | pxr.Ar.ResolvedPath = ..., purpose4: str | pxr.Ar.ResolvedPath = ...) -> pxr.Gf.BBox3d: ...
    def ComputeVisibility(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> str: ...
    def ComputeWorldBound(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, purpose1: str | pxr.Ar.ResolvedPath = ..., purpose2: str | pxr.Ar.ResolvedPath = ..., purpose3: str | pxr.Ar.ResolvedPath = ..., purpose4: str | pxr.Ar.ResolvedPath = ...) -> pxr.Gf.BBox3d: ...
    def CreateProxyPrimRel(self) -> pxr.Usd.Relationship: ...
    def CreatePurposeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVisibilityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Imageable: ...
    @staticmethod
    def GetOrderedPurposeTokens() -> list[str]: ...
    def GetProxyPrimRel(self) -> pxr.Usd.Relationship: ...
    def GetPurposeAttr(self) -> pxr.Usd.Attribute: ...
    def GetPurposeVisibilityAttr(self, purpose: str | pxr.Ar.ResolvedPath = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetVisibilityAttr(self) -> pxr.Usd.Attribute: ...
    def MakeInvisible(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> None: ...
    def MakeVisible(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> None: ...
    @overload
    def SetProxyPrim(self, proxy: pxr.Usd.Prim) -> bool: ...
    @overload
    def SetProxyPrim(self, proxy: pxr.Usd.SchemaBase) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class LinearUnits(Boost.Python.instance):
    centimeters: ClassVar[float] = ...  # read-only
    feet: ClassVar[float] = ...  # read-only
    inches: ClassVar[float] = ...  # read-only
    kilometers: ClassVar[float] = ...  # read-only
    lightYears: ClassVar[float] = ...  # read-only
    meters: ClassVar[float] = ...  # read-only
    micrometers: ClassVar[float] = ...  # read-only
    miles: ClassVar[float] = ...  # read-only
    millimeters: ClassVar[float] = ...  # read-only
    nanometers: ClassVar[float] = ...  # read-only
    yards: ClassVar[float] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Mesh(PointBased):
    SHARPNESS_INFINITE: ClassVar[float] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateCornerIndicesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateCornerSharpnessesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateCreaseIndicesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateCreaseLengthsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateCreaseSharpnessesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFaceVaryingLinearInterpolationAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFaceVertexCountsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFaceVertexIndicesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateHoleIndicesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateInterpolateBoundaryAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateSubdivisionSchemeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTriangleSubdivisionRuleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Mesh: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Mesh: ...
    def GetCornerIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def GetCornerSharpnessesAttr(self) -> pxr.Usd.Attribute: ...
    def GetCreaseIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def GetCreaseLengthsAttr(self) -> pxr.Usd.Attribute: ...
    def GetCreaseSharpnessesAttr(self) -> pxr.Usd.Attribute: ...
    def GetFaceCount(self, timeCode: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> int: ...
    def GetFaceVaryingLinearInterpolationAttr(self) -> pxr.Usd.Attribute: ...
    def GetFaceVertexCountsAttr(self) -> pxr.Usd.Attribute: ...
    def GetFaceVertexIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def GetHoleIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def GetInterpolateBoundaryAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetSubdivisionSchemeAttr(self) -> pxr.Usd.Attribute: ...
    def GetTriangleSubdivisionRuleAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def ValidateTopology(faceVertexIndices: pxr.Vt.IntArray | typing.Iterable[int], faceVertexCounts: pxr.Vt.IntArray | typing.Iterable[int], numPoints: int) -> tuple: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class ModelAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def Apply(prim: pxr.Usd.Prim) -> ModelAPI: ...
    @staticmethod
    def CanApply(prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ComputeExtentsHint(self, bboxCache: BBoxCache) -> pxr.Vt.Vec3fArray: ...
    def ComputeModelDrawMode(self, parentDrawMode: str | pxr.Ar.ResolvedPath = ...) -> str: ...
    def CreateConstraintTarget(self, arg2: str | pxr.Ar.ResolvedPath) -> ConstraintTarget: ...
    def CreateModelApplyDrawModeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelCardGeometryAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelCardTextureXNegAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelCardTextureXPosAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelCardTextureYNegAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelCardTextureYPosAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelCardTextureZNegAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelCardTextureZPosAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelDrawModeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateModelDrawModeColorAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> ModelAPI: ...
    def GetConstraintTarget(self, arg2: str | pxr.Ar.ResolvedPath) -> ConstraintTarget: ...
    def GetConstraintTargets(self) -> list[ConstraintTarget]: ...
    def GetExtentsHint(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Vt.Vec3fArray: ...
    def GetExtentsHintAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelApplyDrawModeAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelCardGeometryAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelCardTextureXNegAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelCardTextureXPosAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelCardTextureYNegAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelCardTextureYPosAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelCardTextureZNegAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelCardTextureZPosAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelDrawModeAttr(self) -> pxr.Usd.Attribute: ...
    def GetModelDrawModeColorAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def SetExtentsHint(self, extents: pxr.Vt.Vec3fArray | typing.Iterable[pxr.Gf.Vec3f], time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class MotionAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def Apply(prim: pxr.Usd.Prim) -> MotionAPI: ...
    @staticmethod
    def CanApply(prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def ComputeMotionBlurScale(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> float: ...
    def ComputeNonlinearSampleCount(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> int: ...
    def ComputeVelocityScale(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> float: ...
    def CreateMotionBlurScaleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateNonlinearSampleCountAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVelocityScaleAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> MotionAPI: ...
    def GetMotionBlurScaleAttr(self) -> pxr.Usd.Attribute: ...
    def GetNonlinearSampleCountAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetVelocityScaleAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class NurbsCurves(Curves):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateKnotsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateOrderAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreatePointWeightsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRangesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> NurbsCurves: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> NurbsCurves: ...
    def GetKnotsAttr(self) -> pxr.Usd.Attribute: ...
    def GetOrderAttr(self) -> pxr.Usd.Attribute: ...
    def GetPointWeightsAttr(self) -> pxr.Usd.Attribute: ...
    def GetRangesAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class NurbsPatch(PointBased):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreatePointWeightsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTrimCurveCountsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTrimCurveKnotsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTrimCurveOrdersAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTrimCurvePointsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTrimCurveRangesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTrimCurveVertexCountsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateUFormAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateUKnotsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateUOrderAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateURangeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateUVertexCountAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVFormAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVKnotsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVOrderAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVRangeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVVertexCountAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> NurbsPatch: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> NurbsPatch: ...
    def GetPointWeightsAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetTrimCurveCountsAttr(self) -> pxr.Usd.Attribute: ...
    def GetTrimCurveKnotsAttr(self) -> pxr.Usd.Attribute: ...
    def GetTrimCurveOrdersAttr(self) -> pxr.Usd.Attribute: ...
    def GetTrimCurvePointsAttr(self) -> pxr.Usd.Attribute: ...
    def GetTrimCurveRangesAttr(self) -> pxr.Usd.Attribute: ...
    def GetTrimCurveVertexCountsAttr(self) -> pxr.Usd.Attribute: ...
    def GetUFormAttr(self) -> pxr.Usd.Attribute: ...
    def GetUKnotsAttr(self) -> pxr.Usd.Attribute: ...
    def GetUOrderAttr(self) -> pxr.Usd.Attribute: ...
    def GetURangeAttr(self) -> pxr.Usd.Attribute: ...
    def GetUVertexCountAttr(self) -> pxr.Usd.Attribute: ...
    def GetVFormAttr(self) -> pxr.Usd.Attribute: ...
    def GetVKnotsAttr(self) -> pxr.Usd.Attribute: ...
    def GetVOrderAttr(self) -> pxr.Usd.Attribute: ...
    def GetVRangeAttr(self) -> pxr.Usd.Attribute: ...
    def GetVVertexCountAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Plane(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateAxisAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateDoubleSidedAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateLengthAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateWidthAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Plane: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Plane: ...
    def GetAxisAttr(self) -> pxr.Usd.Attribute: ...
    def GetDoubleSidedAttr(self) -> pxr.Usd.Attribute: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    def GetLengthAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetWidthAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class PointBased(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def ComputeExtent(points: object) -> Any: ...
    def ComputePointsAtTime(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, baseTime: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> pxr.Vt.Vec3fArray: ...
    def ComputePointsAtTimes(self, times: typing.Iterable[pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode], baseTime: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> list[pxr.Vt.Array[pxr.Gf.Vec3f]]: ...
    def CreateAccelerationsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateNormalsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreatePointsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVelocitiesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PointBased: ...
    def GetAccelerationsAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalsAttr(self) -> pxr.Usd.Attribute: ...
    def GetNormalsInterpolation(self) -> str: ...
    def GetPointsAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetVelocitiesAttr(self) -> pxr.Usd.Attribute: ...
    def SetNormalsInterpolation(self, interpolation: str | pxr.Ar.ResolvedPath) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class PointInstancer(Boundable):
    class MaskApplication(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def GetValueFromName(name: object) -> Any: ...

    class ProtoXformInclusion(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def GetValueFromName(name: object) -> Any: ...
    ApplyMask: ClassVar[PointInstancer.MaskApplication] = ...
    ExcludeProtoXform: ClassVar[PointInstancer.ProtoXformInclusion] = ...
    IgnoreMask: ClassVar[PointInstancer.MaskApplication] = ...
    IncludeProtoXform: ClassVar[PointInstancer.ProtoXformInclusion] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def ActivateAllIds(self) -> bool: ...
    def ActivateId(self, id: int) -> bool: ...
    def ActivateIds(self, ids: pxr.Vt.Int64Array | typing.Iterable[int]) -> bool: ...
    def ComputeExtentAtTime(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, baseTime: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> pxr.Vt.Vec3fArray: ...
    def ComputeExtentAtTimes(self, times: object, baseTime: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> Any: ...
    def ComputeInstanceTransformsAtTime(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, baseTime: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, doProtoXforms: PointInstancer.ProtoXformInclusion = ..., applyMask: PointInstancer.MaskApplication = ...) -> pxr.Vt.Matrix4dArray: ...
    def ComputeInstanceTransformsAtTimes(self, times: typing.Iterable[pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode], baseTime: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode, doProtoXforms: PointInstancer.ProtoXformInclusion = ..., applyMask: PointInstancer.MaskApplication = ...) -> list[pxr.Vt.Array[pxr.Gf.Matrix4d]]: ...
    def ComputeMaskAtTime(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> list: ...
    def CreateAccelerationsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateAngularVelocitiesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateIdsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateInvisibleIdsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateOrientationsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateOrientationsfAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreatePositionsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateProtoIndicesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreatePrototypesRel(self) -> pxr.Usd.Relationship: ...
    def CreateScalesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateVelocitiesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def DeactivateId(self, id: int) -> bool: ...
    def DeactivateIds(self, ids: pxr.Vt.Int64Array | typing.Iterable[int]) -> bool: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PointInstancer: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PointInstancer: ...
    def GetAccelerationsAttr(self) -> pxr.Usd.Attribute: ...
    def GetAngularVelocitiesAttr(self) -> pxr.Usd.Attribute: ...
    def GetIdsAttr(self) -> pxr.Usd.Attribute: ...
    def GetInstanceCount(self, timeCode: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> int: ...
    def GetInvisibleIdsAttr(self) -> pxr.Usd.Attribute: ...
    def GetOrientationsAttr(self) -> pxr.Usd.Attribute: ...
    def GetOrientationsfAttr(self) -> pxr.Usd.Attribute: ...
    def GetPositionsAttr(self) -> pxr.Usd.Attribute: ...
    def GetProtoIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def GetPrototypesRel(self) -> pxr.Usd.Relationship: ...
    def GetScalesAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetVelocitiesAttr(self) -> pxr.Usd.Attribute: ...
    def InvisId(self, id: int, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> bool: ...
    def InvisIds(self, ids: pxr.Vt.Int64Array | typing.Iterable[int], time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> bool: ...
    def VisAllIds(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> bool: ...
    def VisId(self, id: int, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> bool: ...
    def VisIds(self, ids: pxr.Vt.Int64Array | typing.Iterable[int], time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Points(PointBased):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def ComputeExtent(points: object, widths: object) -> Any: ...
    def CreateIdsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateWidthsAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Points: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Points: ...
    def GetIdsAttr(self) -> pxr.Usd.Attribute: ...
    def GetPointCount(self, timeCode: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> int: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetWidthsAttr(self) -> pxr.Usd.Attribute: ...
    def GetWidthsInterpolation(self) -> str: ...
    def SetWidthsInterpolation(self, interpolation: str | pxr.Ar.ResolvedPath) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Primvar(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, attr: pxr.Usd.Attribute | ConstraintTarget | Primvar | XformOp | pxr.UsdShade.Input | pxr.UsdShade.Output) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def BlockIndices(self) -> None: ...
    def ComputeFlattened(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> Any: ...
    def CreateIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def Get(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> Any: ...
    def GetAttr(self) -> pxr.Usd.Attribute: ...
    def GetBaseName(self) -> str: ...
    def GetDeclarationInfo(self) -> tuple: ...
    def GetElementSize(self) -> int: ...
    def GetIndices(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Vt.IntArray: ...
    def GetIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def GetInterpolation(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNamespace(self) -> str: ...
    def GetPrimvarName(self) -> str: ...
    def GetTimeSamples(self) -> list[float]: ...
    def GetTimeSamplesInInterval(self, arg2: pxr.Gf.Interval) -> list[float]: ...
    def GetTypeName(self) -> pxr.Sdf.ValueTypeName: ...
    def GetUnauthoredValuesIndex(self) -> int: ...
    def HasAuthoredElementSize(self) -> bool: ...
    def HasAuthoredInterpolation(self) -> bool: ...
    def HasAuthoredValue(self) -> bool: ...
    def HasValue(self) -> bool: ...
    def IsDefined(self) -> bool: ...
    def IsIdTarget(self) -> bool: ...
    def IsIndexed(self) -> bool: ...
    @staticmethod
    def IsPrimvar(attr: pxr.Usd.Attribute | ConstraintTarget | Primvar | XformOp | pxr.UsdShade.Input | pxr.UsdShade.Output) -> bool: ...
    @staticmethod
    def IsValidInterpolation(interpolation: str | pxr.Ar.ResolvedPath) -> bool: ...
    @staticmethod
    def IsValidPrimvarName(name: str | pxr.Ar.ResolvedPath) -> bool: ...
    def NameContainsNamespaces(self) -> bool: ...
    def Set(self, value: T, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def SetElementSize(self, eltSize: int) -> bool: ...
    def SetIdTarget(self, arg2: pxr.Sdf.Path | str) -> bool: ...
    def SetIndices(self, indices: pxr.Vt.IntArray | typing.Iterable[int], time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def SetInterpolation(self, interpolation: str | pxr.Ar.ResolvedPath) -> bool: ...
    def SetUnauthoredValuesIndex(self, unauthoredValuesIndex: int) -> bool: ...
    def SplitName(self) -> list[str]: ...
    @staticmethod
    def StripPrimvarsName(name: str | pxr.Ar.ResolvedPath) -> str: ...
    def ValueMightBeTimeVarying(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...

class PrimvarsAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def BlockPrimvar(self, name: str | pxr.Ar.ResolvedPath) -> None: ...
    @staticmethod
    def CanContainPropertyName(name: str | pxr.Ar.ResolvedPath) -> bool: ...
    def CreateIndexedPrimvar(self, name: str | pxr.Ar.ResolvedPath, typeName: pxr.Sdf.ValueTypeName, value: T, indices: pxr.Vt.IntArray | typing.Iterable[int], interpolation: str | pxr.Ar.ResolvedPath = ..., elementSize: int = ..., time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> Primvar: ...
    def CreateNonIndexedPrimvar(self, name: str | pxr.Ar.ResolvedPath, typeName: pxr.Sdf.ValueTypeName, value: T, interpolation: str | pxr.Ar.ResolvedPath = ..., elementSize: int = ..., time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> Primvar: ...
    def CreatePrimvar(self, name: str | pxr.Ar.ResolvedPath, typeName: pxr.Sdf.ValueTypeName, interpolation: str | pxr.Ar.ResolvedPath = ..., elementSize: int = ...) -> Primvar: ...
    def FindIncrementallyInheritablePrimvars(self, inheritedFromAncestors: typing.Iterable[Primvar]) -> list[Primvar]: ...
    def FindInheritablePrimvars(self) -> list[Primvar]: ...
    @overload
    def FindPrimvarWithInheritance(self, name: str | pxr.Ar.ResolvedPath, inheritedFromAncestors: typing.Iterable[Primvar]) -> Primvar: ...
    @overload
    def FindPrimvarWithInheritance(self, name: str | pxr.Ar.ResolvedPath) -> Primvar: ...
    @overload
    def FindPrimvarsWithInheritance(self, inheritedFromAncestors: typing.Iterable[Primvar]) -> list[Primvar]: ...
    @overload
    def FindPrimvarsWithInheritance(self) -> list[Primvar]: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> PrimvarsAPI: ...
    def GetAuthoredPrimvars(self) -> list[Primvar]: ...
    def GetPrimvar(self, name: str | pxr.Ar.ResolvedPath) -> Primvar: ...
    def GetPrimvars(self) -> list[Primvar]: ...
    def GetPrimvarsWithAuthoredValues(self) -> list[Primvar]: ...
    def GetPrimvarsWithValues(self) -> list[Primvar]: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def HasPossiblyInheritedPrimvar(self, name: str | pxr.Ar.ResolvedPath) -> bool: ...
    def HasPrimvar(self, name: str | pxr.Ar.ResolvedPath) -> bool: ...
    def RemovePrimvar(self, name: str | pxr.Ar.ResolvedPath) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Scope(Imageable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Scope: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Scope: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Sphere(Gprim):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateExtentAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRadiusAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Sphere: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Sphere: ...
    def GetExtentAttr(self) -> pxr.Usd.Attribute: ...
    def GetRadiusAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Subset(pxr.Usd.Typed):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def CreateElementTypeAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateFamilyNameAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def CreateGeomSubset(geom: Imageable, subsetName: str | pxr.Ar.ResolvedPath, elementType: str | pxr.Ar.ResolvedPath, indices: pxr.Vt.IntArray | typing.Iterable[int], familyName: str | pxr.Ar.ResolvedPath = ..., familyType: str | pxr.Ar.ResolvedPath = ...) -> Subset: ...
    def CreateIndicesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def CreateUniqueGeomSubset(geom: Imageable, subsetName: str | pxr.Ar.ResolvedPath, elementType: str | pxr.Ar.ResolvedPath, indices: pxr.Vt.IntArray | typing.Iterable[int], familyName: str | pxr.Ar.ResolvedPath = ..., familyType: str | pxr.Ar.ResolvedPath = ...) -> Subset: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Subset: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Subset: ...
    @staticmethod
    def GetAllGeomSubsetFamilyNames(geom: Imageable) -> list: ...
    @staticmethod
    def GetAllGeomSubsets(geom: Imageable) -> list[Subset]: ...
    def GetElementTypeAttr(self) -> pxr.Usd.Attribute: ...
    def GetFamilyNameAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetFamilyType(geom: Imageable, familyName: str | pxr.Ar.ResolvedPath) -> str: ...
    @staticmethod
    def GetGeomSubsets(geom: Imageable, elementType: str | pxr.Ar.ResolvedPath = ..., familyName: str | pxr.Ar.ResolvedPath = ...) -> list[Subset]: ...
    def GetIndicesAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @overload
    @staticmethod
    def GetUnassignedIndices(geom: Imageable, elementType: str | pxr.Ar.ResolvedPath, familyName: str | pxr.Ar.ResolvedPath, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Vt.IntArray: ...
    @overload
    @staticmethod
    def GetUnassignedIndices(subsets: typing.Iterable[Subset], elementCount: int, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Vt.IntArray: ...
    @staticmethod
    def SetFamilyType(geom: Imageable, familyName: str | pxr.Ar.ResolvedPath, familyType: str | pxr.Ar.ResolvedPath) -> bool: ...
    @staticmethod
    def ValidateFamily(geom: Imageable, elementType: str | pxr.Ar.ResolvedPath = ..., familyName: str | pxr.Ar.ResolvedPath = ...) -> str: ...
    @staticmethod
    def ValidateSubsets(subsets: typing.Iterable[Subset], elementCount: int, familyType: str | pxr.Ar.ResolvedPath) -> str: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class TetMesh(PointBased):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def ComputeSurfaceFaces(tetMesh: TetMesh, timeCode: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> Any: ...
    def CreateSurfaceFaceVertexIndicesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateTetVertexIndicesAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> TetMesh: ...
    @staticmethod
    def FindInvertedElements(tetMesh: TetMesh, timeCode: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Vt.IntArray: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> TetMesh: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetSurfaceFaceVertexIndicesAttr(self) -> pxr.Usd.Attribute: ...
    def GetTetVertexIndicesAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Tokens(Boost.Python.instance):
    BasisCurves: ClassVar[str] = ...  # read-only
    Boundable: ClassVar[str] = ...  # read-only
    Camera: ClassVar[str] = ...  # read-only
    Capsule: ClassVar[str] = ...  # read-only
    Capsule_1: ClassVar[str] = ...  # read-only
    Cone: ClassVar[str] = ...  # read-only
    Cube: ClassVar[str] = ...  # read-only
    Curves: ClassVar[str] = ...  # read-only
    Cylinder: ClassVar[str] = ...  # read-only
    Cylinder_1: ClassVar[str] = ...  # read-only
    GeomModelAPI: ClassVar[str] = ...  # read-only
    GeomSubset: ClassVar[str] = ...  # read-only
    Gprim: ClassVar[str] = ...  # read-only
    HermiteCurves: ClassVar[str] = ...  # read-only
    Imageable: ClassVar[str] = ...  # read-only
    Mesh: ClassVar[str] = ...  # read-only
    MotionAPI: ClassVar[str] = ...  # read-only
    NurbsCurves: ClassVar[str] = ...  # read-only
    NurbsPatch: ClassVar[str] = ...  # read-only
    Plane: ClassVar[str] = ...  # read-only
    PointBased: ClassVar[str] = ...  # read-only
    PointInstancer: ClassVar[str] = ...  # read-only
    Points: ClassVar[str] = ...  # read-only
    PrimvarsAPI: ClassVar[str] = ...  # read-only
    Scope: ClassVar[str] = ...  # read-only
    Sphere: ClassVar[str] = ...  # read-only
    TetMesh: ClassVar[str] = ...  # read-only
    VisibilityAPI: ClassVar[str] = ...  # read-only
    Xform: ClassVar[str] = ...  # read-only
    XformCommonAPI: ClassVar[str] = ...  # read-only
    Xformable: ClassVar[str] = ...  # read-only
    accelerations: ClassVar[str] = ...  # read-only
    all: ClassVar[str] = ...  # read-only
    angularVelocities: ClassVar[str] = ...  # read-only
    axis: ClassVar[str] = ...  # read-only
    basis: ClassVar[str] = ...  # read-only
    bezier: ClassVar[str] = ...  # read-only
    bilinear: ClassVar[str] = ...  # read-only
    boundaries: ClassVar[str] = ...  # read-only
    bounds: ClassVar[str] = ...  # read-only
    box: ClassVar[str] = ...  # read-only
    bspline: ClassVar[str] = ...  # read-only
    cards: ClassVar[str] = ...  # read-only
    catmullClark: ClassVar[str] = ...  # read-only
    catmullRom: ClassVar[str] = ...  # read-only
    clippingPlanes: ClassVar[str] = ...  # read-only
    clippingRange: ClassVar[str] = ...  # read-only
    closed: ClassVar[str] = ...  # read-only
    constant: ClassVar[str] = ...  # read-only
    cornerIndices: ClassVar[str] = ...  # read-only
    cornerSharpnesses: ClassVar[str] = ...  # read-only
    cornersOnly: ClassVar[str] = ...  # read-only
    cornersPlus1: ClassVar[str] = ...  # read-only
    cornersPlus2: ClassVar[str] = ...  # read-only
    creaseIndices: ClassVar[str] = ...  # read-only
    creaseLengths: ClassVar[str] = ...  # read-only
    creaseSharpnesses: ClassVar[str] = ...  # read-only
    cross: ClassVar[str] = ...  # read-only
    cubic: ClassVar[str] = ...  # read-only
    curveVertexCounts: ClassVar[str] = ...  # read-only
    default_: ClassVar[str] = ...  # read-only
    doubleSided: ClassVar[str] = ...  # read-only
    edge: ClassVar[str] = ...  # read-only
    edgeAndCorner: ClassVar[str] = ...  # read-only
    edgeOnly: ClassVar[str] = ...  # read-only
    elementSize: ClassVar[str] = ...  # read-only
    elementType: ClassVar[str] = ...  # read-only
    exposure: ClassVar[str] = ...  # read-only
    extent: ClassVar[str] = ...  # read-only
    extentsHint: ClassVar[str] = ...  # read-only
    fStop: ClassVar[str] = ...  # read-only
    face: ClassVar[str] = ...  # read-only
    faceVarying: ClassVar[str] = ...  # read-only
    faceVaryingLinearInterpolation: ClassVar[str] = ...  # read-only
    faceVertexCounts: ClassVar[str] = ...  # read-only
    faceVertexIndices: ClassVar[str] = ...  # read-only
    familyName: ClassVar[str] = ...  # read-only
    focalLength: ClassVar[str] = ...  # read-only
    focusDistance: ClassVar[str] = ...  # read-only
    fromTexture: ClassVar[str] = ...  # read-only
    guide: ClassVar[str] = ...  # read-only
    guideVisibility: ClassVar[str] = ...  # read-only
    height: ClassVar[str] = ...  # read-only
    hermite: ClassVar[str] = ...  # read-only
    holeIndices: ClassVar[str] = ...  # read-only
    horizontalAperture: ClassVar[str] = ...  # read-only
    horizontalApertureOffset: ClassVar[str] = ...  # read-only
    ids: ClassVar[str] = ...  # read-only
    inactiveIds: ClassVar[str] = ...  # read-only
    indices: ClassVar[str] = ...  # read-only
    inherited: ClassVar[str] = ...  # read-only
    interpolateBoundary: ClassVar[str] = ...  # read-only
    interpolation: ClassVar[str] = ...  # read-only
    invisible: ClassVar[str] = ...  # read-only
    invisibleIds: ClassVar[str] = ...  # read-only
    knots: ClassVar[str] = ...  # read-only
    left: ClassVar[str] = ...  # read-only
    leftHanded: ClassVar[str] = ...  # read-only
    length: ClassVar[str] = ...  # read-only
    linear: ClassVar[str] = ...  # read-only
    loop: ClassVar[str] = ...  # read-only
    metersPerUnit: ClassVar[str] = ...  # read-only
    modelApplyDrawMode: ClassVar[str] = ...  # read-only
    modelCardGeometry: ClassVar[str] = ...  # read-only
    modelCardTextureXNeg: ClassVar[str] = ...  # read-only
    modelCardTextureXPos: ClassVar[str] = ...  # read-only
    modelCardTextureYNeg: ClassVar[str] = ...  # read-only
    modelCardTextureYPos: ClassVar[str] = ...  # read-only
    modelCardTextureZNeg: ClassVar[str] = ...  # read-only
    modelCardTextureZPos: ClassVar[str] = ...  # read-only
    modelDrawMode: ClassVar[str] = ...  # read-only
    modelDrawModeColor: ClassVar[str] = ...  # read-only
    mono: ClassVar[str] = ...  # read-only
    motionBlurScale: ClassVar[str] = ...  # read-only
    motionNonlinearSampleCount: ClassVar[str] = ...  # read-only
    motionVelocityScale: ClassVar[str] = ...  # read-only
    nonOverlapping: ClassVar[str] = ...  # read-only
    none: ClassVar[str] = ...  # read-only
    nonperiodic: ClassVar[str] = ...  # read-only
    normals: ClassVar[str] = ...  # read-only
    open: ClassVar[str] = ...  # read-only
    order: ClassVar[str] = ...  # read-only
    orientation: ClassVar[str] = ...  # read-only
    orientations: ClassVar[str] = ...  # read-only
    orientationsf: ClassVar[str] = ...  # read-only
    origin: ClassVar[str] = ...  # read-only
    orthographic: ClassVar[str] = ...  # read-only
    partition: ClassVar[str] = ...  # read-only
    periodic: ClassVar[str] = ...  # read-only
    perspective: ClassVar[str] = ...  # read-only
    pinned: ClassVar[str] = ...  # read-only
    pivot: ClassVar[str] = ...  # read-only
    point: ClassVar[str] = ...  # read-only
    pointWeights: ClassVar[str] = ...  # read-only
    points: ClassVar[str] = ...  # read-only
    positions: ClassVar[str] = ...  # read-only
    power: ClassVar[str] = ...  # read-only
    primvarsDisplayColor: ClassVar[str] = ...  # read-only
    primvarsDisplayOpacity: ClassVar[str] = ...  # read-only
    projection: ClassVar[str] = ...  # read-only
    protoIndices: ClassVar[str] = ...  # read-only
    prototypes: ClassVar[str] = ...  # read-only
    proxy: ClassVar[str] = ...  # read-only
    proxyPrim: ClassVar[str] = ...  # read-only
    proxyVisibility: ClassVar[str] = ...  # read-only
    purpose: ClassVar[str] = ...  # read-only
    radius: ClassVar[str] = ...  # read-only
    radiusBottom: ClassVar[str] = ...  # read-only
    radiusTop: ClassVar[str] = ...  # read-only
    ranges: ClassVar[str] = ...  # read-only
    render: ClassVar[str] = ...  # read-only
    renderVisibility: ClassVar[str] = ...  # read-only
    right: ClassVar[str] = ...  # read-only
    rightHanded: ClassVar[str] = ...  # read-only
    scales: ClassVar[str] = ...  # read-only
    shutterClose: ClassVar[str] = ...  # read-only
    shutterOpen: ClassVar[str] = ...  # read-only
    size: ClassVar[str] = ...  # read-only
    smooth: ClassVar[str] = ...  # read-only
    stereoRole: ClassVar[str] = ...  # read-only
    subdivisionScheme: ClassVar[str] = ...  # read-only
    surfaceFaceVertexIndices: ClassVar[str] = ...  # read-only
    tangents: ClassVar[str] = ...  # read-only
    tetVertexIndices: ClassVar[str] = ...  # read-only
    tetrahedron: ClassVar[str] = ...  # read-only
    triangleSubdivisionRule: ClassVar[str] = ...  # read-only
    trimCurveCounts: ClassVar[str] = ...  # read-only
    trimCurveKnots: ClassVar[str] = ...  # read-only
    trimCurveOrders: ClassVar[str] = ...  # read-only
    trimCurvePoints: ClassVar[str] = ...  # read-only
    trimCurveRanges: ClassVar[str] = ...  # read-only
    trimCurveVertexCounts: ClassVar[str] = ...  # read-only
    type: ClassVar[str] = ...  # read-only
    uForm: ClassVar[str] = ...  # read-only
    uKnots: ClassVar[str] = ...  # read-only
    uOrder: ClassVar[str] = ...  # read-only
    uRange: ClassVar[str] = ...  # read-only
    uVertexCount: ClassVar[str] = ...  # read-only
    unauthoredValuesIndex: ClassVar[str] = ...  # read-only
    uniform: ClassVar[str] = ...  # read-only
    unrestricted: ClassVar[str] = ...  # read-only
    upAxis: ClassVar[str] = ...  # read-only
    vForm: ClassVar[str] = ...  # read-only
    vKnots: ClassVar[str] = ...  # read-only
    vOrder: ClassVar[str] = ...  # read-only
    vRange: ClassVar[str] = ...  # read-only
    vVertexCount: ClassVar[str] = ...  # read-only
    varying: ClassVar[str] = ...  # read-only
    velocities: ClassVar[str] = ...  # read-only
    vertex: ClassVar[str] = ...  # read-only
    verticalAperture: ClassVar[str] = ...  # read-only
    verticalApertureOffset: ClassVar[str] = ...  # read-only
    visibility: ClassVar[str] = ...  # read-only
    visible: ClassVar[str] = ...  # read-only
    width: ClassVar[str] = ...  # read-only
    widths: ClassVar[str] = ...  # read-only
    wrap: ClassVar[str] = ...  # read-only
    x: ClassVar[str] = ...  # read-only
    xformOpOrder: ClassVar[str] = ...  # read-only
    y: ClassVar[str] = ...  # read-only
    z: ClassVar[str] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class VisibilityAPI(pxr.Usd.APISchemaBase):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def Apply(prim: pxr.Usd.Prim) -> VisibilityAPI: ...
    @staticmethod
    def CanApply(prim: pxr.Usd.Prim) -> _CanApplyResult: ...
    def CreateGuideVisibilityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateProxyVisibilityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    def CreateRenderVisibilityAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> VisibilityAPI: ...
    def GetGuideVisibilityAttr(self) -> pxr.Usd.Attribute: ...
    def GetProxyVisibilityAttr(self) -> pxr.Usd.Attribute: ...
    def GetPurposeVisibilityAttr(self, purpose: str | pxr.Ar.ResolvedPath) -> pxr.Usd.Attribute: ...
    def GetRenderVisibilityAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class Xform(Xformable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def Define(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Xform: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Xform: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class XformCache(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clear(self) -> None: ...
    def ComputeRelativeTransform(self, prim: pxr.Usd.Prim, ancestor: pxr.Usd.Prim) -> tuple: ...
    def GetLocalToWorldTransform(self, prim: pxr.Usd.Prim) -> pxr.Gf.Matrix4d: ...
    def GetLocalTransformation(self, prim: pxr.Usd.Prim) -> tuple: ...
    def GetParentToWorldTransform(self, prim: pxr.Usd.Prim) -> pxr.Gf.Matrix4d: ...
    def GetTime(self) -> pxr.Usd.TimeCode: ...
    def SetTime(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> None: ...
    def Swap(self, other: XformCache) -> None: ...

class XformCommonAPI(pxr.Usd.APISchemaBase):
    class OpFlags(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def GetValueFromName(name: object) -> Any: ...

    class RotationOrder(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def GetValueFromName(name: object) -> Any: ...
    OpPivot: ClassVar[XformCommonAPI.OpFlags] = ...
    OpRotate: ClassVar[XformCommonAPI.OpFlags] = ...
    OpScale: ClassVar[XformCommonAPI.OpFlags] = ...
    OpTranslate: ClassVar[XformCommonAPI.OpFlags] = ...
    RotationOrderXYZ: ClassVar[XformCommonAPI.RotationOrder] = ...
    RotationOrderXZY: ClassVar[XformCommonAPI.RotationOrder] = ...
    RotationOrderYXZ: ClassVar[XformCommonAPI.RotationOrder] = ...
    RotationOrderYZX: ClassVar[XformCommonAPI.RotationOrder] = ...
    RotationOrderZXY: ClassVar[XformCommonAPI.RotationOrder] = ...
    RotationOrderZYX: ClassVar[XformCommonAPI.RotationOrder] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @staticmethod
    def CanConvertOpTypeToRotationOrder(opType: XformOp.Type) -> bool: ...
    @staticmethod
    def ConvertOpTypeToRotationOrder(opType: XformOp.Type) -> XformCommonAPI.RotationOrder: ...
    @staticmethod
    def ConvertRotationOrderToOpType(rotationOrder: XformCommonAPI.RotationOrder) -> XformOp.Type: ...
    @overload
    def CreateXformOps(self, rotationOrder: XformCommonAPI.RotationOrder, op1: XformCommonAPI.OpFlags = ..., op2: XformCommonAPI.OpFlags = ..., op3: XformCommonAPI.OpFlags = ..., op4: XformCommonAPI.OpFlags = ...) -> tuple: ...
    @overload
    def CreateXformOps(self, op1: XformCommonAPI.OpFlags = ..., op2: XformCommonAPI.OpFlags = ..., op3: XformCommonAPI.OpFlags = ..., op4: XformCommonAPI.OpFlags = ...) -> tuple: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> XformCommonAPI: ...
    def GetResetXformStack(self) -> bool: ...
    @staticmethod
    def GetRotationTransform(rotation: pxr.Gf.Vec3f | list[float] | tuple[float, float, float], rotationOrder: XformCommonAPI.RotationOrder) -> pxr.Gf.Matrix4d: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetXformVectors(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> tuple: ...
    def GetXformVectorsByAccumulation(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> tuple: ...
    def SetPivot(self, pivot: pxr.Gf.Vec3f | list[float] | tuple[float, float, float], time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def SetResetXformStack(self, resetXformStack: bool) -> bool: ...
    def SetRotate(self, rotation: pxr.Gf.Vec3f | list[float] | tuple[float, float, float], rotationOrder: XformCommonAPI.RotationOrder = ..., time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def SetScale(self, scale: pxr.Gf.Vec3f | list[float] | tuple[float, float, float], time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def SetTranslate(self, translation: pxr.Gf.Vec3d | list[float] | tuple[float, float, float], time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def SetXformVectors(self, translation: pxr.Gf.Vec3d | list[float] | tuple[float, float, float], rotation: pxr.Gf.Vec3f | list[float] | tuple[float, float, float], scale: pxr.Gf.Vec3f | list[float] | tuple[float, float, float], pivot: pxr.Gf.Vec3f | list[float] | tuple[float, float, float], rotationOrder: XformCommonAPI.RotationOrder, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class XformOp(Boost.Python.instance):
    class Precision(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def GetValueFromName(name: object) -> Any: ...

    class Type(pxr.Tf.Tf_PyEnumWrapper):
        _baseName: ClassVar[str] = ...
        allValues: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def GetValueFromName(name: object) -> Any: ...
    PrecisionDouble: ClassVar[XformOp.Precision] = ...
    PrecisionFloat: ClassVar[XformOp.Precision] = ...
    PrecisionHalf: ClassVar[XformOp.Precision] = ...
    TypeInvalid: ClassVar[pxr.Tf.Type] = ...
    TypeOrient: ClassVar[pxr.Tf.Type] = ...
    TypeRotateX: ClassVar[pxr.Tf.Type] = ...
    TypeRotateXYZ: ClassVar[pxr.Tf.Type] = ...
    TypeRotateXZY: ClassVar[pxr.Tf.Type] = ...
    TypeRotateY: ClassVar[pxr.Tf.Type] = ...
    TypeRotateYXZ: ClassVar[pxr.Tf.Type] = ...
    TypeRotateYZX: ClassVar[pxr.Tf.Type] = ...
    TypeRotateZ: ClassVar[pxr.Tf.Type] = ...
    TypeRotateZXY: ClassVar[pxr.Tf.Type] = ...
    TypeRotateZYX: ClassVar[pxr.Tf.Type] = ...
    TypeScale: ClassVar[pxr.Tf.Type] = ...
    TypeTransform: ClassVar[pxr.Tf.Type] = ...
    TypeTranslate: ClassVar[pxr.Tf.Type] = ...
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, attr: pxr.Usd.Attribute | ConstraintTarget | Primvar | XformOp | pxr.UsdShade.Input | pxr.UsdShade.Output, isInverseOp: bool = ...) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Get(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> T: ...
    def GetAttr(self) -> pxr.Usd.Attribute: ...
    def GetBaseName(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNamespace(self) -> str: ...
    def GetNumTimeSamples(self) -> int: ...
    def GetOpName(self) -> str: ...
    def GetOpTransform(self, arg2: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode) -> pxr.Gf.Matrix4d: ...
    def GetOpType(self) -> pxr.Tf.Type: ...
    @staticmethod
    def GetOpTypeEnum(arg1: str | pxr.Ar.ResolvedPath) -> pxr.Tf.Type: ...
    @staticmethod
    def GetOpTypeToken(arg1: pxr.Tf.Type) -> str: ...
    def GetPrecision(self) -> XformOp.Precision: ...
    def GetTimeSamples(self) -> list[float]: ...
    def GetTimeSamplesInInterval(self, arg2: pxr.Gf.Interval) -> list[float]: ...
    def GetTypeName(self) -> pxr.Sdf.ValueTypeName: ...
    def IsDefined(self) -> bool: ...
    def IsInverseOp(self) -> bool: ...
    def MightBeTimeVarying(self) -> bool: ...
    def Set(self, value: T, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> bool: ...
    def SplitName(self) -> list[str]: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class XformOpTypes(Boost.Python.instance):
    orient: ClassVar[str] = ...  # read-only
    resetXformStack: ClassVar[str] = ...  # read-only
    rotateX: ClassVar[str] = ...  # read-only
    rotateXYZ: ClassVar[str] = ...  # read-only
    rotateXZY: ClassVar[str] = ...  # read-only
    rotateY: ClassVar[str] = ...  # read-only
    rotateYXZ: ClassVar[str] = ...  # read-only
    rotateYZX: ClassVar[str] = ...  # read-only
    rotateZ: ClassVar[str] = ...  # read-only
    rotateZXY: ClassVar[str] = ...  # read-only
    rotateZYX: ClassVar[str] = ...  # read-only
    scale: ClassVar[str] = ...  # read-only
    transform: ClassVar[str] = ...  # read-only
    translate: ClassVar[str] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Xformable(Imageable):
    __instance_size__: ClassVar[int] = ...
    @overload
    def __init__(self, schemaObj: pxr.Usd.SchemaBase) -> None: ...
    @overload
    def __init__(self, prim: pxr.Usd.Prim) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def AddOrientOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateXOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateXYZOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateXZYOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateYOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateYXZOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateYZXOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateZOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateZXYOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddRotateZYXOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddScaleOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddTransformOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddTranslateOp(self, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def AddXformOp(self, opType: XformOp.Type, precision: XformOp.Precision = ..., opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def ClearXformOpOrder(self) -> bool: ...
    def CreateXformOpOrderAttr(self, defaultValue: Any = ..., writeSparsely: bool = ...) -> pxr.Usd.Attribute: ...
    @staticmethod
    def Get(stage: pxr.Usd.Stage, path: pxr.Sdf.Path | str) -> Xformable: ...
    @overload
    def GetLocalTransformation(self, ops: typing.Iterable[XformOp], time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Gf.Matrix4d: ...
    @overload
    def GetLocalTransformation(self, time: pxr.Usd.TimeCode | float | pxr.Sdf.TimeCode = ...) -> pxr.Gf.Matrix4d: ...
    def GetOrderedXformOps(self) -> list: ...
    def GetOrientOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetResetXformStack(self) -> bool: ...
    def GetRotateXOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetRotateXYZOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetRotateXZYOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetRotateYOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetRotateYXZOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetRotateYZXOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetRotateZOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetRotateZXYOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetRotateZYXOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetScaleOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    @staticmethod
    def GetSchemaAttributeNames(includeInherited: bool = ...) -> list[str]: ...
    def GetTimeSamples(self) -> list[float]: ...
    def GetTimeSamplesInInterval(self, arg2: pxr.Gf.Interval) -> list[float]: ...
    def GetTransformOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetTranslateOp(self, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetXformOp(self, opType: XformOp.Type, opSuffix: str | pxr.Ar.ResolvedPath = ..., isInverseOp: bool = ...) -> XformOp: ...
    def GetXformOpOrderAttr(self) -> pxr.Usd.Attribute: ...
    @staticmethod
    def IsTransformationAffectedByAttrNamed(arg1: str | pxr.Ar.ResolvedPath) -> bool: ...
    def MakeMatrixXform(self) -> XformOp: ...
    def SetResetXformStack(self, resetXform: bool) -> bool: ...
    def SetXformOpOrder(self, orderedXformOps: typing.Iterable[XformOp], resetXformStack: bool = ...) -> bool: ...
    @overload
    def TransformMightBeTimeVarying(self, arg2: typing.Iterable[XformOp]) -> bool: ...
    @overload
    def TransformMightBeTimeVarying(self) -> bool: ...
    @staticmethod
    def _GetStaticTfType() -> pxr.Tf.Type: ...
    def __bool__(self) -> bool: ...

class _CanApplyResult(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> typing.Iterator[Any]: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def whyNot(self): ...

def GetFallbackUpAxis() -> str: ...
def GetStageMetersPerUnit(stage: pxr.Usd.Stage) -> float: ...
def GetStageUpAxis(stage: pxr.Usd.Stage) -> str: ...
def LinearUnitsAre(authoredUnits: float, standardUnits: float, epsilon: float = ...) -> bool: ...
def SetStageMetersPerUnit(stage: pxr.Usd.Stage, metersPerUnit: float) -> bool: ...
def SetStageUpAxis(stage: pxr.Usd.Stage, upAxis: str | pxr.Ar.ResolvedPath) -> bool: ...
def StageHasAuthoredMetersPerUnit(stage: pxr.Usd.Stage) -> bool: ...
