# mypy: disable-error-code="misc, override, no-redef"

import Boost.Python
import pxr.Ar
import pxr.Sdf
import pxr.Tf
import typing
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

VersionFilterAllVersions: VersionFilter
VersionFilterDefaultOnly: VersionFilter
__MFB_FULL_PACKAGE_NAME: str

class DiscoveryPlugin(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def DiscoverNodes(self, arg2: DiscoveryPluginContext) -> Any: ...
    @overload
    def DiscoverNodes(self, arg2: DiscoveryPluginContext) -> None: ...
    @overload
    def GetSearchURIs(self) -> Any: ...
    @overload
    def GetSearchURIs(self) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def expired(self): ...

class DiscoveryPluginContext(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def GetSourceType(self, arg2: object) -> Any: ...
    @overload
    def GetSourceType(self, arg2: object) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def expired(self): ...

class DiscoveryPluginList(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def append(self, arg2: object) -> None: ...
    def extend(self, arg2: object) -> None: ...
    def __contains__(self, arg2: object) -> bool: ...
    def __delitem__(self, arg2: object) -> None: ...
    def __getitem__(self, arg2: object) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg2: object, arg3: object) -> None: ...

class DiscoveryUri(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    resolvedUri: Incomplete
    uri: Incomplete
    @overload
    def __init__(self, arg2: DiscoveryUri) -> None: ...
    @overload
    def __init__(self) -> None: ...

class Node(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetContext(self) -> str: ...
    def GetFamily(self) -> str: ...
    def GetIdentifier(self) -> str: ...
    def GetInfoString(self) -> str: ...
    def GetInput(self, arg2: str | pxr.Ar.ResolvedPath) -> Property: ...
    def GetInputNames(self) -> list[str]: ...
    def GetMetadata(self) -> dict: ...
    def GetName(self) -> str: ...
    def GetOutput(self, arg2: str | pxr.Ar.ResolvedPath) -> Property: ...
    def GetOutputNames(self) -> list[str]: ...
    def GetResolvedDefinitionURI(self) -> str: ...
    def GetResolvedImplementationURI(self) -> str: ...
    def GetSourceCode(self) -> str: ...
    def GetSourceType(self) -> str: ...
    def GetVersion(self) -> Version: ...
    def IsValid(self) -> bool: ...
    def __bool__(self) -> bool: ...

class NodeDiscoveryResult(Boost.Python.instance):
    def __init__(self, identifier: str | pxr.Ar.ResolvedPath, version: Version, name: str | pxr.Ar.ResolvedPath, family: str | pxr.Ar.ResolvedPath, discoveryType: str | pxr.Ar.ResolvedPath, sourceType: str | pxr.Ar.ResolvedPath, uri: str | pxr.Ar.ResolvedPath, resolvedUri: str | pxr.Ar.ResolvedPath, sourceCode: str | pxr.Ar.ResolvedPath = ..., metadata: dict[str | pxr.Ar.ResolvedPath, str | pxr.Ar.ResolvedPath] = ..., blindData: str | pxr.Ar.ResolvedPath = ..., subIdentifier: str | pxr.Ar.ResolvedPath = ...) -> None: ...
    @property
    def blindData(self): ...
    @property
    def discoveryType(self): ...
    @property
    def family(self): ...
    @property
    def identifier(self): ...
    @property
    def metadata(self): ...
    @property
    def name(self): ...
    @property
    def resolvedUri(self): ...
    @property
    def sourceCode(self): ...
    @property
    def sourceType(self): ...
    @property
    def subIdentifier(self): ...
    @property
    def uri(self): ...
    @property
    def version(self): ...

class NodeList(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self) -> None: ...
    def append(self, arg2: object) -> None: ...
    def extend(self, arg2: object) -> None: ...
    def __contains__(self, arg2: object) -> bool: ...
    def __delitem__(self, arg2: object) -> None: ...
    def __getitem__(self, arg2: object) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg2: object, arg3: object) -> None: ...

class Property(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def CanConnectTo(self, arg2: Property) -> bool: ...
    def GetArraySize(self) -> int: ...
    def GetDefaultValue(self) -> Any: ...
    def GetInfoString(self) -> str: ...
    def GetMetadata(self) -> dict: ...
    def GetName(self) -> str: ...
    def GetType(self) -> str: ...
    def GetTypeAsSdfType(self) -> tuple: ...
    def IsArray(self) -> bool: ...
    def IsConnectable(self) -> bool: ...
    def IsDynamicArray(self) -> bool: ...
    def IsOutput(self) -> bool: ...

class Registry(Boost.Python.instance):
    def __init__(self, *args, **kwargs) -> None: ...
    def GetAllNodeSourceTypes(self) -> list[str]: ...
    def GetNodeByIdentifier(self, identifier: str | pxr.Ar.ResolvedPath, typePriority: typing.Iterable[str | pxr.Ar.ResolvedPath] = ...) -> Node: ...
    def GetNodeByIdentifierAndType(self, identifier: str | pxr.Ar.ResolvedPath, nodeType: str | pxr.Ar.ResolvedPath) -> Node: ...
    def GetNodeByName(self, name: str | pxr.Ar.ResolvedPath, typePriority: typing.Iterable[str | pxr.Ar.ResolvedPath] = ..., filter: VersionFilter = ...) -> Node: ...
    def GetNodeByNameAndType(self, name: str | pxr.Ar.ResolvedPath, nodeType: str | pxr.Ar.ResolvedPath, filter: VersionFilter = ...) -> Node: ...
    def GetNodeFromAsset(self, asset: pxr.Sdf.AssetPath | str, metadata: dict[str | pxr.Ar.ResolvedPath, str | pxr.Ar.ResolvedPath] = ..., subIdentifier: str | pxr.Ar.ResolvedPath = ..., sourceType: str | pxr.Ar.ResolvedPath = ...) -> Node: ...
    def GetNodeFromSourceCode(self, sourceCode: str | pxr.Ar.ResolvedPath, sourceType: str | pxr.Ar.ResolvedPath, metadata: dict[str | pxr.Ar.ResolvedPath, str | pxr.Ar.ResolvedPath] = ...) -> Node: ...
    def GetNodeIdentifiers(self, family: str | pxr.Ar.ResolvedPath = ..., filter: VersionFilter = ...) -> list[str]: ...
    def GetNodeNames(self, family: str | pxr.Ar.ResolvedPath = ...) -> list[str]: ...
    def GetNodesByFamily(self, family: str | pxr.Ar.ResolvedPath = ..., filter: VersionFilter = ...) -> NodeList: ...
    def GetNodesByIdentifier(self, identifier: str | pxr.Ar.ResolvedPath) -> NodeList: ...
    def GetNodesByName(self, name: str | pxr.Ar.ResolvedPath, filter: VersionFilter = ...) -> NodeList: ...
    def GetSearchURIs(self) -> list[str]: ...
    def SetExtraDiscoveryPlugins(self, arg2: list) -> None: ...
    def SetExtraParserPlugins(self, arg2: typing.Iterable[pxr.Tf.Type]) -> None: ...

class Version(Boost.Python.instance):
    @overload
    def __init__(self, arg2: int, arg3: int) -> None: ...
    @overload
    def __init__(self, arg2: int) -> None: ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def GetAsDefault(self) -> Version: ...
    def GetMajor(self) -> int: ...
    def GetMinor(self) -> int: ...
    def GetStringSuffix(self) -> str: ...
    def IsDefault(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class VersionFilter(pxr.Tf.Tf_PyEnumWrapper):
    _baseName: ClassVar[str] = ...
    allValues: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def GetValueFromName(name: object) -> Any: ...

class _AnnotatedBool(Boost.Python.instance):
    __instance_size__: ClassVar[int] = ...
    def __init__(self, arg2: bool, arg3: object) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, arg2: int) -> Any: ...
    def __iter__(self) -> typing.Iterator[Any]: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def message(self): ...

class _FilesystemDiscoveryPlugin(DiscoveryPlugin):
    class Context(DiscoveryPluginContext):
        def __init__(self) -> None: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def expired(self): ...
    @overload
    def __init__(self, arg2: object) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def DiscoverNodes(self, arg2: DiscoveryPluginContext) -> list: ...
    def GetSearchURIs(self) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def expired(self): ...

def FsHelpersDiscoverFiles(searchPaths: typing.Iterable[str | pxr.Ar.ResolvedPath], allowedExtensions: typing.Iterable[str | pxr.Ar.ResolvedPath], followSymlinks: bool = ...) -> list: ...
def FsHelpersDiscoverNodes(searchPaths: typing.Iterable[str | pxr.Ar.ResolvedPath], allowedExtensions: typing.Iterable[str | pxr.Ar.ResolvedPath], followSymlinks: bool = ..., context: DiscoveryPluginContext = ...) -> tuple[NodeDiscoveryResultVec, DiscoveryPluginContext]: ...
def FsHelpersSplitShaderIdentifier(identifier: str | pxr.Ar.ResolvedPath) -> tuple[str, str, Version]: ...
def _ValidateProperty(arg1: Node, arg2: Property) -> _AnnotatedBool: ...
