from ._usdviewq import Utils as Utils  # type: ignore[import-not-found]
from .common import UIFonts as UIFonts, UIPrimTypeColors as UIPrimTypeColors
from .qt import QtCore as QtCore, QtGui as QtGui, QtWidgets as QtWidgets
from _typeshed import Incomplete
from pxr import Sdf as Sdf, Usd as Usd, UsdGeom as UsdGeom
from pxr.UsdUtils.constantsGroup import ConstantsGroup as ConstantsGroup

HALF_DARKER: int

def _GetPrimInfo(prim, time): ...

class PrimViewColumnIndex(ConstantsGroup):
    NAME: Incomplete
    TYPE: Incomplete
    VIS: Incomplete
    GUIDES: Incomplete
    DRAWMODE: Incomplete

class PrimViewItem(QtWidgets.QTreeWidgetItem):
    prim: Incomplete
    _appController: Incomplete
    _needsPull: bool
    _needsPush: bool
    _needsChildrenPopulated: Incomplete
    imageable: bool
    active: bool
    vis: bool
    ancestorOfSelected: bool
    drawModeWidget: Incomplete
    def __init__(self, prim, appController, primHasChildren) -> None: ...
    def push(self) -> None:
        """Pushes prim data to the UI."""
    def _pull(self) -> None:
        """Extracts and stores prim data."""
    @staticmethod
    def _HasAuthoredDrawMode(prim): ...
    def _isComputedDrawModeInherited(self, parentDrawModeIsInherited: Incomplete | None = None):
        '''Returns true if the computed draw mode for this item is inherited 
           from an authored "model:drawMode" value on an ancestor prim.
        '''
    computedVis: Incomplete
    computedDrawMode: str
    isDrawModeInherited: bool
    def _extractInfo(self, info) -> None: ...
    def addChildren(self, children) -> None:
        """Adds children to the end of this item.  This is the only
           method clients should call to manage an item's children."""
    def data(self, column, role): ...
    def _GetForegroundColor(self): ...
    def _nameData(self, role): ...
    def _drawModeData(self, role): ...
    def _typeData(self, role): ...
    def _isVisInherited(self): ...
    def _visData(self, role): ...
    def _guideData(self, role): ...
    def needsChildrenPopulated(self): ...
    def canChangeVis(self): ...
    visVaries: Incomplete
    def loadVis(self, inheritedVis, visHasBeenAuthored): ...
    @staticmethod
    def propagateDrawMode(item, primView, parentDrawMode: str = '', parentDrawModeIsInherited: Incomplete | None = None) -> None: ...
    @staticmethod
    def propagateVis(item, authoredVisHasChanged: bool = True) -> None: ...
    def _resetAncestorsRecursive(self, authoredVisHasChanged): ...
    def _pushVisRecursive(self, inheritedVis, authoredVisHasChanged) -> None: ...
    def setLoaded(self, loaded) -> None: ...
    def setVisible(self, visible) -> None: ...
    def makeVisible(self) -> None: ...
    def visChanged(self) -> None: ...
    def toggleVis(self):
        """Return True if the the prim's visibility state was toggled. """
    def toggleGuides(self):
        """Return True if the the prim's guide visibility state was toggled."""
