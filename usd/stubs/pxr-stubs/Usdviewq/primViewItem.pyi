# mypy: disable-error-code="misc, override, no-redef"

import PySide6.QtWidgets
import pxr.Sdf as Sdf
import pxr.Usd as Usd
import pxr.UsdGeom as UsdGeom
import pxr.UsdUtils.constantsGroup
from _typeshed import Incomplete
from pxr.UsdUtils.constantsGroup import ConstantsGroup as ConstantsGroup
from pxr.Usdviewq import Utils as Utils
from pxr.Usdviewq.common import UIFonts as UIFonts, UIPrimTypeColors as UIPrimTypeColors
from typing import ClassVar

HALF_DARKER: int

class PrimViewColumnIndex(pxr.UsdUtils.constantsGroup.ConstantsGroup):
    DRAWMODE: ClassVar[int] = ...
    GUIDES: ClassVar[int] = ...
    NAME: ClassVar[int] = ...
    TYPE: ClassVar[int] = ...
    VIS: ClassVar[int] = ...
    _all: ClassVar[tuple] = ...

class PrimViewItem(PySide6.QtWidgets.QTreeWidgetItem):
    def __init__(self, prim, appController, primHasChildren) -> None: ...
    def _GetForegroundColor(self): ...
    @staticmethod
    def _HasAuthoredDrawMode(prim): ...
    def _drawModeData(self, role): ...
    def _extractInfo(self, info): ...
    def _guideData(self, role): ...
    def _isComputedDrawModeInherited(self, parentDrawModeIsInherited: Incomplete | None = ...):
        '''Returns true if the computed draw mode for this item is inherited 
                   from an authored "model:drawMode" value on an ancestor prim.
        '''
    def _isVisInherited(self): ...
    def _nameData(self, role): ...
    def _pull(self):
        """Extracts and stores prim data."""
    def _pushVisRecursive(self, inheritedVis, authoredVisHasChanged): ...
    def _resetAncestorsRecursive(self, authoredVisHasChanged): ...
    def _typeData(self, role): ...
    def _visData(self, role): ...
    def addChildren(self, children):
        """Adds children to the end of this item.  This is the only
                   method clients should call to manage an item's children."""
    def canChangeVis(self): ...
    def data(self, column, role): ...
    def loadVis(self, inheritedVis, visHasBeenAuthored): ...
    def makeVisible(self): ...
    def needsChildrenPopulated(self): ...
    @staticmethod
    def propagateDrawMode(item, primView, parentDrawMode: str = ..., parentDrawModeIsInherited: Incomplete | None = ...): ...
    @staticmethod
    def propagateVis(item, authoredVisHasChanged: bool = ...): ...
    def push(self):
        """Pushes prim data to the UI."""
    def setLoaded(self, loaded): ...
    def setVisible(self, visible): ...
    def toggleGuides(self):
        """Return True if the the prim's guide visibility state was toggled."""
    def toggleVis(self):
        """Return True if the the prim's visibility state was toggled. """
    def visChanged(self): ...

def _GetPrimInfo(prim, time): ...
