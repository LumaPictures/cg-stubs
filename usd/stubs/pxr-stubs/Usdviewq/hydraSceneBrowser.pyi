from ._usdviewq import ContainerDataSource as ContainerDataSource, DataSourceLocator as DataSourceLocator, DataSourceLocatorSet as DataSourceLocatorSet, HydraObserver as HydraObserver, SampledDataSource as SampledDataSource, VectorDataSource as VectorDataSource  # type: ignore[import-not-found]
from .qt import QtCore as QtCore, QtGui as QtGui, QtWidgets as QtWidgets
from _typeshed import Incomplete
from pxr import Sdf as Sdf

class HydraSceneBrowser(QtWidgets.QWidget):
    __mainLayout: Incomplete
    __toolbarLayout: Incomplete
    __siChooser: Incomplete
    __goToInputButton: Incomplete
    __goToInputButtonMenu: Incomplete
    __nameLabel: Incomplete
    __loggerButton: Incomplete
    __loggerWidget: Incomplete
    __observer: Incomplete
    __splitter: Incomplete
    __siTreeWidget: Incomplete
    __dsTreeWidget: Incomplete
    __valueTreeView: Incomplete
    __noticePollingTimer: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def __PollForNotices(self) -> None: ...
    def __SceneIndexSelected(self, name) -> None: ...
    def __SceneIndexChanged(self) -> None: ...
    def __PrimSelected(self, primPath, dataSourceProxy) -> None: ...
    def __PrimDirtied(self, primPath, locators) -> None: ...
    def __DataSourceSelected(self, dataSourceProxy) -> None: ...
    def __FillGoToInputMenu(self) -> None: ...
    def __UpdateNameLabel(self, prefix: Incomplete | None = None) -> None: ...
    def __ShowLoggerWindow(self) -> None: ...

class _RegisteredSceneIndexChooser(QtWidgets.QPushButton):
    sceneIndexSelected: Incomplete
    __menu: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def __AboutToShow(self) -> None: ...
    def __Triggered(self, action) -> None: ...

class _DataSourceProxy:
    value: Incomplete
    def __init__(self, value: Incomplete | None = None) -> None: ...

class _SceneIndexTreeWidget(QtWidgets.QTreeWidget):
    primSelected: Incomplete
    primDirtied: Incomplete
    __observer: Incomplete
    __expandedSet: Incomplete
    __primItems: Incomplete
    def __init__(self, observer, parent: Incomplete | None = None) -> None: ...
    def contextMenuEvent(self, event) -> None: ...
    def PrimsAdded(self, entries) -> None: ...
    def PrimsRemoved(self, entries) -> None: ...
    def PrimsDirtied(self, entries) -> None: ...
    def _GetPrimItem(self, primPath, createIfNecessary: bool = True): ...
    def _AddPrimItem(self, primPath, item) -> None: ...
    def _RemoveSubtree(self, primPath) -> None: ...
    def _RemoveSubtreeEntries(self, primPath) -> None: ...
    def Requery(self, observer, lazy: bool = True) -> None: ...
    def PrimIsExpanded(self, primPath): ...
    def AddToExpandedSet(self, primPath) -> None: ...
    def RemoveFromExpandedSet(self, primPath) -> None: ...
    def __ItemSelectionChanged(self) -> None: ...
    def __ItemExpanded(self, item) -> None: ...
    def __ItemCollapsed(self, item) -> None: ...

class _SceneIndexPrimTreeWidgetItem(QtWidgets.QTreeWidgetItem):
    __primPath: Incomplete
    __queryOnExpansion: Incomplete
    def __init__(self, parent, primPath, queryOnExpansion: bool = False) -> None: ...
    def GetPrimPath(self): ...
    def WasExpanded(self, treeWidget, observer) -> None: ...

class _DataSourceTreeWidget(QtWidgets.QTreeWidget):
    dataSourceSelected: Incomplete
    __expandedSet: Incomplete
    def __init__(self, parent) -> None: ...
    def SetPrimDataSource(self, primPath, dataSource) -> None: ...
    def PrimDirtied(self, primPath, dataSource, locatorSet) -> None: ...
    def _GetExpandedSet(self): ...
    def __ItemExpanded(self, item) -> None: ...
    def __ItemCollapsed(self, item) -> None: ...
    def __ItemSelectionChanged(self) -> None: ...

class _DataSourceTreeWidgetItem(QtWidgets.QTreeWidgetItem):
    __locator: Incomplete
    __dataSource: Incomplete
    __childrenBuilt: bool
    def __init__(self, locator, parentItem, dataSource) -> None: ...
    def __IsInExpandedSet(self): ...
    def __SetIsInExpandedSet(self, state) -> None: ...
    def WasExpanded(self) -> None: ...
    def WasCollapsed(self) -> None: ...
    def SetDirty(self, dataSource) -> None: ...
    def GetDataSource(self): ...
    def GetLocator(self): ...
    def __RebuildChildren(self) -> None: ...
    def __BuildChildren(self) -> None: ...

class _ValueItemModel(QtCore.QAbstractItemModel):
    __value: Incomplete
    __isArray: Incomplete
    __typeStr: Incomplete
    def __init__(self, value, typeStr, parent: Incomplete | None = None) -> None: ...
    def data(self, modelIndex, role=...): ...
    def headerData(self, section, orientation, role=...): ...
    def parent(self, model): ...
    def columnCount(self, parent=...): ...
    def rowCount(self, parent=...): ...
    def index(self, row, column, parent: Incomplete | None = None): ...

class _DataSourceValueTreeView(QtWidgets.QTreeView):
    __dataSource: Incomplete
    def __init__(self, parent) -> None: ...
    def SetDataSource(self, dataSource) -> None: ...
    def Refresh(self) -> None: ...

class _NoticeLoggingWidget(QtWidgets.QWidget):
    __mainLayout: Incomplete
    __toolbarLayout: Incomplete
    __startStopButton: Incomplete
    __clearButton: Incomplete
    __label: Incomplete
    __recording: bool
    __treeView: Incomplete
    def __init__(self, parent) -> None: ...
    def AddNotices(self, entries) -> None: ...
    def SetText(self, value) -> None: ...
    def __Clear(self) -> None: ...
    def __ToggleRecordingState(self) -> None: ...

class _ObserverLoggingTreeView(QtWidgets.QTreeView):
    __model: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def GetModel(self): ...

class _ObserverLoggingItemModel(QtCore.QAbstractItemModel):
    __entries: Incomplete
    def __init__(self, parent) -> None: ...
    def AddEntries(self, newEntries) -> None: ...
    def Clear(self) -> None: ...
    def data(self, modelIndex, role=...): ...
    def headerData(self, section, orientation, role=...): ...
    def index(self, row, column, parent: Incomplete | None = None): ...
    def parent(self, modelIndex): ...
    def columnCount(self, parent=...): ...
    def rowCount(self, parent=...): ...
