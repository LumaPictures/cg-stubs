from . import adjustDefaultMaterial as adjustDefaultMaterial, adjustFreeCamera as adjustFreeCamera, plugin as plugin, preferences as preferences, prettyPrint as prettyPrint
from ._usdviewq import Utils as Utils  # type: ignore[import-not-found]
from .attributeViewContextMenu import AttributeViewContextMenu as AttributeViewContextMenu
from .common import BusyContext as BusyContext, CameraMaskModes as CameraMaskModes, ClearColors as ClearColors, ColorCorrectionModes as ColorCorrectionModes, Drange as Drange, DumpMallocTags as DumpMallocTags, GetAssetCreationTime as GetAssetCreationTime, GetEnclosingModelPrim as GetEnclosingModelPrim, GetPrimsLoadability as GetPrimsLoadability, GetPropertyColor as GetPropertyColor, GetPropertyTextFont as GetPropertyTextFont, GetRootLayerStackInfo as GetRootLayerStackInfo, GetValueAndDisplayString as GetValueAndDisplayString, HasSessionVis as HasSessionVis, HighlightColors as HighlightColors, InvisRootPrims as InvisRootPrims, KeyboardShortcuts as KeyboardShortcuts, LayerInfo as LayerInfo, PickModes as PickModes, PrimNotFoundException as PrimNotFoundException, PrintWarning as PrintWarning, PropTreeWidgetTypeIsRel as PropTreeWidgetTypeIsRel, PropertyViewDataRoles as PropertyViewDataRoles, PropertyViewIcons as PropertyViewIcons, PropertyViewIndex as PropertyViewIndex, RenderModes as RenderModes, ResetSessionVisibility as ResetSessionVisibility, SelectionHighlightModes as SelectionHighlightModes, ShadedRenderModes as ShadedRenderModes, Timer as Timer, UIBaseColors as UIBaseColors, UIFonts as UIFonts, UIPropertyValueSourceColors as UIPropertyValueSourceColors
from .configController import ConfigController as ConfigController
from .customAttributes import BoundingBoxAttribute as BoundingBoxAttribute, CustomAttribute as CustomAttribute, LocalToWorldXformAttribute as LocalToWorldXformAttribute, ResolvedBoundMaterial as ResolvedBoundMaterial, _GetCustomAttributes as _GetCustomAttributes
from .headerContextMenu import HeaderContextMenu as HeaderContextMenu
from .layerStackContextMenu import LayerStackContextMenu as LayerStackContextMenu
from .legendUtil import ToggleLegendWithBrowser as ToggleLegendWithBrowser
from .mainWindowUI import Ui_MainWindow as Ui_MainWindow
from .primContextMenu import PrimContextMenu as PrimContextMenu
from .primTreeWidget import PrimTreeWidget as PrimTreeWidget, PrimViewColumnIndex as PrimViewColumnIndex
from .primViewItem import PrimViewItem as PrimViewItem
from .pythonInterpreter import Myconsole as Myconsole
from .qt import QtActionWidgets as QtActionWidgets, QtCore as QtCore, QtGui as QtGui, QtWidgets as QtWidgets
from .rootDataModel import ChangeNotice as ChangeNotice, RootDataModel as RootDataModel
from .selectionDataModel import ALL_INSTANCES as ALL_INSTANCES, SelectionDataModel as SelectionDataModel
from .settings import ConfigManager as ConfigManager, StateSource as StateSource
from .stageView import StageView as StageView
from .usdviewApi import UsdviewApi as UsdviewApi
from .variantComboBox import VariantComboBox as VariantComboBox
from .viewSettingsDataModel import ViewSettingsDataModel as ViewSettingsDataModel
from _typeshed import Incomplete
from collections.abc import Generator
from pxr import Ar as Ar, Glf as Glf, Sdf as Sdf, Tf as Tf, Usd as Usd, UsdAppUtils as UsdAppUtils, UsdGeom as UsdGeom, UsdImagingGL as UsdImagingGL, UsdShade as UsdShade, UsdUtils as UsdUtils
from pxr.UsdAppUtils.complexityArgs import RefinementComplexities as RefinementComplexities
from pxr.UsdUtils.constantsGroup import ConstantsGroup as ConstantsGroup

SETTINGS_VERSION: str

class HUDEntries(ConstantsGroup):
    PRIM: str
    CV: str
    VERT: str
    FACE: str
    PLAYBACK: str
    RENDER: str
    GETBOUNDS: str
    NOTYPE: str

class PropertyIndex(ConstantsGroup):
    VALUE: Incomplete
    METADATA: Incomplete
    LAYERSTACK: Incomplete
    COMPOSITION: Incomplete

class UIDefaults(ConstantsGroup):
    STAGE_VIEW_WIDTH: int
    PRIM_VIEW_WIDTH: int
    ATTRIBUTE_VIEW_WIDTH: int
    ATTRIBUTE_INSPECTOR_WIDTH: int
    TOP_HEIGHT: int
    BOTTOM_HEIGHT: int

class LayerStackViewColumnIndex(ConstantsGroup):
    LAYER: Incomplete
    OFFSET: Incomplete
    PATH: Incomplete
    VALUE: Incomplete

QT_BINDING: Incomplete

class UsdviewDataModel(RootDataModel):
    _selectionDataModel: Incomplete
    _viewSettingsDataModel: Incomplete
    def __init__(self, makeTimer, settings) -> None: ...
    @property
    def selection(self): ...
    @property
    def viewSettings(self): ...
    def _emitPrimsChanged(self, primChange, propertyChange) -> None: ...

class UIStateProxySource(StateSource):
    """XXX Temporary class which allows AppController to serve as two state sources.
    All fields here will be moved back into AppController in the future.
    """
    _mainWindow: Incomplete
    def __init__(self, mainWindow, parent, name) -> None: ...
    def onSaveState(self, state) -> None: ...

class Blocker:
    """Object which can be used to temporarily block the execution of a body of
    code. This object is a context manager, and enters a 'blocked' state when
    used in a 'with' statement. The 'blocked()' method can be used to find if
    the Blocker is in this 'blocked' state.

    For example, this is used to prevent UI code from handling signals from the
    selection data model while the UI code itself modifies selection.
    """
    _count: int
    def __init__(self) -> None: ...
    def __enter__(self) -> None:
        """Enter the 'blocked' state until the context is exited."""
    def __exit__(self, *args) -> None:
        """Exit the 'blocked' state."""
    def blocked(self):
        """Returns True if in the 'blocked' state, and False otherwise."""

class MainWindow(QtWidgets.QMainWindow):
    """This class exists to simplify and streamline the shutdown process."""
    _closeFunc: Incomplete
    def __init__(self, closeFunc) -> None: ...
    def closeEvent(self, event) -> None: ...

class AppController(QtCore.QObject):
    @classmethod
    def clearSettings(cls) -> None: ...
    def _makeTimer(self, label, printTiming: bool = True): ...
    _plugRegistry: Incomplete
    def _configurePlugins(self) -> None: ...
    _configManager: Incomplete
    def _openSettings(self, defaultSettings, config) -> None: ...
    def _setupCustomFont(self) -> None: ...
    def _setStyleSheetUsingState(self) -> None: ...
    def __del__(self) -> None: ...
    _debug: Incomplete
    _printTiming: Incomplete
    _primToItemMap: Incomplete
    _allSceneCameras: Incomplete
    _itemsToPush: Incomplete
    _currentSpec: Incomplete
    _currentLayer: Incomplete
    _console: Incomplete
    _debugFlagsWindow: Incomplete
    _interpreter: Incomplete
    _hydraSceneBrowser: Incomplete
    _parserData: Incomplete
    _noRender: Incomplete
    _noPlugins: Incomplete
    _unloaded: Incomplete
    _resolverContextFn: Incomplete
    _lastViewContext: Incomplete
    _paused: bool
    _stopped: bool
    _statusFileName: Incomplete
    _deprecatedStatusFileNames: Incomplete
    _mallocTags: Incomplete
    _allowViewUpdates: bool
    _allowAsync: Incomplete
    _viewerModeEscapeSizes: Incomplete
    _dataModel: Incomplete
    _mainWindow: Incomplete
    _ui: Incomplete
    _statusBar: Incomplete
    _configController: Incomplete
    _filterObj: Incomplete
    _usdviewApi: Incomplete
    _primViewSelectionBlocker: Incomplete
    _propertyViewSelectionBlocker: Incomplete
    _initialSelectPrim: Incomplete
    _hasPrimResync: bool
    _timeSamples: Incomplete
    _stageView: Incomplete
    _startingPrimCamera: Incomplete
    _startingPrimCameraName: Incomplete
    _startingPrimCameraPath: Incomplete
    _qtimer: Incomplete
    _lastFrameTime: Incomplete
    _asyncTimer: Incomplete
    _upperHUDInfo: Incomplete
    _fpsHUDKeys: Incomplete
    _fpsHUDInfo: Incomplete
    _startTime: Incomplete
    _primViewResizeTimer: Incomplete
    _guiResetTimer: Incomplete
    _primViewUpdateTimer: Incomplete
    _clearColorActions: Incomplete
    _renderModeActions: Incomplete
    _colorCorrectionActions: Incomplete
    _pickModeActions: Incomplete
    _selHighlightActions: Incomplete
    _selHighlightColorActions: Incomplete
    _propertyLegendAnim: Incomplete
    _primLegendAnim: Incomplete
    _complexityActions: Incomplete
    def __init__(self, parserData, resolverContextFn) -> None: ...
    def _drawFirstImage(self) -> None: ...
    def statusMessage(self, msg, timeout: int = 0) -> None: ...
    def editComplete(self, msg) -> None: ...
    def _applyStageOpenLayerMutes(self, stage, muteLayersRe) -> None: ...
    def _openStage(self, usdFilePath, sessionFilePath, populationMaskPaths, muteLayersRe): ...
    def _closeStage(self) -> None: ...
    _qtShutdownTimer: Incomplete
    def _startQtShutdownTimer(self) -> None: ...
    def _stopQtShutdownTimer(self) -> None: ...
    def _setPlayShortcut(self) -> None: ...
    realStartTimeCode: Incomplete
    realEndTimeCode: Incomplete
    framesPerSecond: Incomplete
    step: Incomplete
    def _reloadFixedUI(self, resetStageDataOnly: bool = False) -> None: ...
    _geomCounts: Incomplete
    _hasTimeSamples: Incomplete
    def _UpdateTimeSamples(self, resetStageDataOnly: bool = False) -> None: ...
    def _clearCaches(self, preserveCamera: bool = False) -> None:
        """Clears value and computation caches maintained by the controller.
        Does NOT initiate any GUI updates"""
    def _rendererPluginChanged(self, plugin) -> None: ...
    def _configureRendererPlugins(self): ...
    def _rendererAovChanged(self, aov) -> None: ...
    def _configureRendererAovs(self): ...
    def _otherAov(self) -> None: ...
    def _rendererSettingsFlagChanged(self, action) -> None: ...
    def _configureRendererSettings(self): ...
    def _moreRendererSettings(self) -> None: ...
    def _applyMoreRendererSettings(self) -> None: ...
    def _resetMoreRendererSettings(self) -> None: ...
    def _invokeRendererCommand(self, cmd) -> None: ...
    def _configureRendererCommands(self): ...
    def _configurePauseAction(self) -> None: ...
    def _configureStopAction(self) -> None: ...
    def _disableOCIOAction(self) -> None: ...
    def _configureColorManagement(self): ...
    _primSearchResults: Incomplete
    _attrSearchResults: Incomplete
    _primSearchString: str
    _attrSearchString: str
    _lastPrimSearched: Incomplete
    def _reloadVaryingUI(self) -> None: ...
    def _scheduleResizePrimView(self) -> None:
        """ Schedules a resize of the primView widget.
            This will call _resizePrimView when the timer expires
            (uses timer coalescing to prevent redundant resizes from occurring).
        """
    def _resizePrimView(self) -> None:
        """ Used to coalesce excess calls to resizeColumnToContents.
        """
    def _getExpandedPrimViewPrims(self): ...
    def _resetPrimView(self, restoreSelection: bool = True) -> None: ...
    def _resetGUI(self) -> None:
        """Perform a full refresh/resync of all GUI contents. This should be
        called whenever the USD stage is modified, and assumes that all data
        previously fetched from the stage is invalid. In the future, more
        granular updates will be supported by listening to UsdNotice objects on
        the active stage.

        If a prim resync is needed then we fully update the prim view,
        otherwise can just do a simplified update to the prim view.
        """
    def updateGUI(self) -> None:
        """Will schedule a full refresh/resync of the GUI contents.
        Prefer this to calling _resetGUI() directly, since it will
        coalesce multiple calls to this method in to a single refresh.
        """
    def _resetPrimViewVis(self, selItemsOnly: bool = True, authoredVisHasChanged: bool = True) -> None:
        """Updates browser rows' Vis columns... can update just selected
        items (and their descendants and ancestors), or all items in the
        primView.  When authoredVisHasChanged is True, we force each item
        to discard any value caches it may be holding onto."""
    def _updatePrimView(self) -> None: ...
    def _setComplexity(self, complexity) -> None:
        """Set the complexity and update the UI."""
    def _incrementComplexity(self) -> None:
        """Jump up to the next level of complexity."""
    def _decrementComplexity(self) -> None:
        """Jump back to the previous level of complexity."""
    def _changeComplexity(self, action) -> None:
        """Update the complexity from a selected QAction."""
    _adjustFreeCameraDlg: Incomplete
    def _adjustFreeCamera(self, checked): ...
    _adjustDefaultMaterialDlg: Incomplete
    def _adjustDefaultMaterial(self, checked): ...
    _preferencesDlg: Incomplete
    def _togglePreferences(self, checked): ...
    def _redrawOptionToggled(self, checked) -> None: ...
    _playbackAvailable: Incomplete
    def _setPlaybackAvailability(self, enabled: bool = True) -> None: ...
    _playbackIndex: int
    def _playClicked(self) -> None: ...
    _endTime: Incomplete
    def _advanceFrameForPlayback(self) -> None: ...
    def _advanceFrame(self) -> None: ...
    def _retreatFrame(self) -> None: ...
    def _findClosestFrameIndex(self, timeSample):
        """Find the closest frame index for the given `timeSample`.

        Args:
            timeSample (float): A time sample value.

        Returns:
            int: The closest matching frame index or 0 if one cannot be
            found.
        """
    def _rangeBeginChanged(self) -> None: ...
    def _stepSizeChanged(self) -> None: ...
    def _rangeEndChanged(self) -> None: ...
    def _frameStringChanged(self) -> None: ...
    def _sliderMoved(self, frameIndex) -> None:
        """Slot called when the frame slider is moved by a user.

        Args:
            frameIndex (int): The new frame index value.
        """
    def setFrameField(self, frame) -> None:
        """Set the frame field to the given `frame`.

        Args:
            frame (str|int|float): The new frame value.
        """
    def _normalize_unicode(self, str: str, form: str = 'NFKC'): ...
    def _isMatch(self, pattern, isRegex, prim, useDisplayName):
        """
        Determines if the given prim has a name that matches the
        given pattern.  If useDisplayName is True, the match
        will be performed on the prim's display name (if authored)
        and on the prim's name (if not).  When useDisplayName is False,
        the match is always performed against the prim's name.

        Args:
            pattern (str): The pattern to use to match the name.  Pattern
                           is either a sequence of characters or a regex
                           expression.  If it is a regex expression, the
                           isRegex parameter should be set to True.
            isRegex (bool): True if the given pattern is a regex expression
                            or False if just a sequence of characters.
            prim (object): A python facing UsdPrim object on whose properties
                           should be matched by pattern.
            useDisplayName (bool): True if the pattern match should be against
                                   the displayName of the prim or False if
                                   against the name of the prim.  If this value is True
                                   displayName will only be matched if it is authored,
                                   otherwise the name of the prim will be used.

        Returns:
            True if the pattern matches the specified prim content, False otherwise. 
        """
    def _findPrims(self, pattern, useRegex: bool = True):
        """Search the Usd Stage for matching prims
        """
    def _primViewFindNext(self) -> None: ...
    def _comparePaths(self, path1, path2): ...
    def _primLegendToggleCollapse(self) -> None: ...
    def _propertyLegendToggleCollapse(self) -> None: ...
    def _attrViewFindNext(self) -> None: ...
    @classmethod
    def _outputBaseDirectory(cls): ...
    def _storeAndReturnViewState(self): ...
    def _frameSelection(self) -> None: ...
    def _toggleFramedView(self) -> None: ...
    def _resetSettings(self):
        """Reloads the UI and Sets up the initial settings for the
        _stageView object created in _reloadVaryingUI"""
    def _updateForStageChanges(self, hasPrimResync: bool = True) -> None:
        """Assuming there have been authoring changes to the already-loaded
        stage, make the minimal updates to the UI required to maintain a
        consistent state.  This may still be over-zealous until we know
        what actually changed, but we should be able to preserve camera and
        playback positions (unless viewing through a stage camera that no
        longer exists"""
    def _cacheViewerModeEscapeSizes(self, pos: Incomplete | None = None, index: Incomplete | None = None) -> None: ...
    def _toggleViewerMode(self) -> None: ...
    def isViewerMode(self):
        """Returns True if the extra UI around the stage view is collapsed."""
    def setViewerMode(self, viewerMode) -> None:
        """Sets whether the UI should be displayed in viewer mode, where the
        extra UI around the stage view is collapsed."""
    def _resetView(self, selectPrim: Incomplete | None = None) -> None:
        """ Reverts the GL frame to the initial camera view,
        and clears selection (sets to pseudoRoot), UNLESS 'selectPrim' is
        not None, in which case we'll select and frame it."""
    def _changeRenderMode(self, mode) -> None: ...
    def _changeColorCorrection(self, mode) -> None: ...
    def _changePickMode(self, mode) -> None: ...
    def _changeSelHighlightMode(self, mode) -> None: ...
    def _changeHighlightColor(self, color) -> None: ...
    def _changeInterpolationType(self, interpolationType) -> None: ...
    def _ambientOnlyClicked(self, checked: Incomplete | None = None) -> None: ...
    def _onDomeLightClicked(self, checked: Incomplete | None = None) -> None: ...
    def _onDomeLightTexturesVisibleClicked(self, checked: Incomplete | None = None) -> None: ...
    def _changeBgColor(self, mode) -> None: ...
    def _toggleShowBBoxPlayback(self) -> None:
        """Called when the menu item for showing BBoxes
        during playback is activated or deactivated."""
    def _toggleAutoComputeClippingPlanes(self) -> None: ...
    def _setUseExtentsHint(self) -> None: ...
    def _toggleShowBBoxes(self) -> None:
        """Called when the menu item for showing BBoxes
        is activated."""
    def _toggleShowAABBox(self) -> None:
        """Called when Axis-Aligned bounding boxes
        are activated/deactivated via menu item"""
    def _toggleShowOBBox(self) -> None:
        """Called when Oriented bounding boxes
        are activated/deactivated via menu item"""
    def _refreshBBox(self) -> None:
        """Recompute and hide/show Bounding Box."""
    def _toggleDisplayGuide(self) -> None: ...
    def _toggleDisplayProxy(self) -> None: ...
    def _toggleDisplayRender(self) -> None: ...
    def _toggleDisplayCameraOracles(self) -> None: ...
    def _toggleDisplayPrimId(self) -> None: ...
    def _toggleEnableSceneMaterials(self) -> None: ...
    def _toggleEnableSceneLights(self) -> None: ...
    def _toggleCullBackfaces(self) -> None: ...
    def _showInterpreter(self) -> None: ...
    def _showDebugFlags(self) -> None: ...
    def _showHydraSceneBrowser(self) -> None: ...
    def GrabWindowShot(self):
        """Returns a QImage of the full usdview window """
    def GrabViewportShot(self, cropToAspectRatio: bool = False):
        """Returns a QImage of the current stage view in usdview."""
    def _cleanAndClose(self) -> None: ...
    def _openFile(self): ...
    def _getSaveFileName(self, caption, recommendedFilename): ...
    def _saveOverridesAs(self) -> None: ...
    def _saveFlattenedAs(self) -> None: ...
    def _copyViewerImage(self) -> None: ...
    def _saveViewerImage(self) -> None: ...
    def _togglePause(self) -> None: ...
    def _toggleStop(self) -> None: ...
    def _reopenStage(self) -> None: ...
    def _reloadStage(self) -> None: ...
    def _cameraSelectionChanged(self, camera) -> None: ...
    def _refreshCameraListAndMenu(self, preserveCurrCamera): ...
    camera: Incomplete
    def _showMoreCamerasDialog(self):
        """Open dialog box containing all scene cameras."""
    def _onCameraSearchComplete(self) -> None: ...
    def _onCameraSearchTextChanged(self, text) -> None: ...
    def _updatePropertiesFromPropertyView(self) -> None:
        """Update the data model's property selection to match property view's
        current selection.
        """
    def _propertyViewSelectionChanged(self) -> None:
        """Called whenever property view's selection changes."""
    def _propertyViewCurrentItemChanged(self, currentItem, lastItem) -> None:
        """Called whenever property view's current item changes."""
    def _propSelectionChanged(self) -> None:
        """Called whenever the property selection in the data model changes.
        Updates any UI that relies on the selection state.
        """
    def _populatePropertyInspector(self) -> None: ...
    def _onCompositionSelectionChanged(self, curr: Incomplete | None = None, prev: Incomplete | None = None) -> None: ...
    def _updatePropertyInspector(self, index: Incomplete | None = None, obj: Incomplete | None = None) -> None: ...
    def _refreshAttributeValue(self) -> None: ...
    contextMenu: Incomplete
    def _propertyViewContextMenu(self, point) -> None: ...
    def _layerStackContextMenu(self, point) -> None: ...
    def _compositionTreeContextMenu(self, point) -> None: ...
    def _propertyViewHeaderContextMenu(self, point) -> None: ...
    def _primViewHeaderContextMenu(self, point) -> None: ...
    def _changePrimViewDepth(self, action) -> None:
        """Signal handler for view-depth menu items
        """
    def _expandToDepth(self, depth, suppressTiming: bool = False) -> None:
        """Expands treeview prims to the given depth
        """
    def _primViewExpanded(self, index) -> None:
        """Signal handler for expanded(index), facilitates lazy tree population
        """
    def _toggleShowInactivePrims(self) -> None: ...
    def _toggleShowPrototypePrims(self) -> None: ...
    def _toggleShowUndefinedPrims(self) -> None: ...
    def _toggleShowAbstractPrims(self) -> None: ...
    def _toggleShowPrimDisplayName(self) -> None: ...
    def _toggleRolloverPrimInfo(self) -> None: ...
    def _tallyPrimStats(self, prim): ...
    def _populateChildren(self, item, depth: int = 0, maxDepth: int = 1, childrenToAdd: Incomplete | None = None) -> None:
        """Populates the children of the given item in the prim viewer.
           If childrenToAdd is given its a list of prims to add as
           children."""
    def _populateItem(self, prim, depth: int = 0, maxDepth: int = 0):
        """Populates a prim viewer item."""
    def _populateRoots(self) -> None: ...
    def _getFilteredChildren(self, prim): ...
    _displayPredicate: Incomplete
    def _computeDisplayPredicate(self) -> None: ...
    def _getItemAtPath(self, path, ensureExpanded: bool = False): ...
    def selectPseudoroot(self) -> None:
        """Selects only the pseudoroot."""
    def selectEnclosingModel(self) -> None:
        """Iterates through all selected prims, selecting their containing model
        instead if they are not a model themselves.
        """
    def selectBoundMaterialForPurpose(self, materialPurpose) -> None:
        """Iterates through all selected prims, selecting their bound preview
           materials.
        """
    def selectBindingRelForPurpose(self, materialPurpose) -> None:
        """Iterates through all selected prims, selecting their bound preview
           materials.
        """
    def selectBoundPreviewMaterial(self) -> None:
        """Iterates through all selected prims, selecting their bound preview
           materials.
        """
    def selectBoundFullMaterial(self) -> None:
        """Iterates through all selected prims, selecting their bound preview
           materials.
        """
    def selectPreviewBindingRel(self) -> None:
        '''Iterates through all selected prims, computing their resolved 
        "preview" bindings and selecting the cooresponding binding relationship.
        '''
    def selectFullBindingRel(self) -> None:
        '''Iterates through all selected prims, computing their resolved 
        "full" bindings and selecting the cooresponding binding relationship.
        '''
    def _getCommonPrims(self, pathsList): ...
    def _primSelectionChanged(self, added, removed) -> None:
        """Called when the prim selection is updated in the data model. Updates
        any UI that depends on the state of the selection.
        """
    def _getPrimsFromPaths(self, paths):
        """Get all prims from a list of paths."""
    def _updatePrimPathText(self) -> None: ...
    def _currentPathChanged(self) -> None:
        """Called when the currentPathWidget text is changed"""
    def _expandPrims(self, prims, expand: bool = True) -> None: ...
    def _refreshPrimViewSelection(self, expandedPrims) -> None:
        """Refresh the selected prim view items to match the selection data
        model.
        """
    def _updatePrimViewSelection(self, added, removed) -> None:
        """Do an incremental update to primView's selection using the added and
        removed prim paths from the selectionDataModel.
        """
    def _primsFromSelectionRanges(self, ranges) -> Generator[Incomplete]:
        """Iterate over all prims in a QItemSelection from primView."""
    def _selectionChanged(self, added, removed) -> None:
        """Called when primView's selection is changed. If the selection was
        changed by a user, update the selection data model with the changes.
        """
    def _itemClicked(self, item, col) -> None: ...
    def _itemPressed(self, item, col) -> None: ...
    def _getPathsFromItems(self, items, prune: bool = False): ...
    def _primViewContextMenu(self, point) -> None: ...
    def _showPrimContextMenu(self, item) -> None: ...
    def setFrame(self, frame) -> None:
        """Set the `frame`.

        Args:
            frame (float): The new frame value.
        """
    def _setFrameIndex(self, frameIndex) -> None:
        """Set the `frameIndex`.

        Args:
            frameIndex (int): The new frame index value.
        """
    def _updateGUIForFrameChange(self) -> None:
        """Called when the frame changes have finished.
        e.g When the playback/scrubbing has stopped.
        """
    def _updateOnFrameChange(self) -> None:
        """Called when the frame changes, updates the renderer and such"""
    def saveFrame(self, fileName) -> None: ...
    def _getPropertiesDict(self): ...
    def _propertyViewDeselectItem(self, item) -> None: ...
    def _updatePropertyViewSelection(self) -> None:
        """Updates property view's selected items to match the data model."""
    _propertiesDict: Incomplete
    def _updatePropertyViewInternal(self) -> None: ...
    def _updatePropertyView(self) -> None:
        """ Sets the contents of the attribute value viewer """
    def _getSelectedObject(self): ...
    def _findIndentPos(self, s): ...
    def _maxToolTipWidth(self): ...
    def _maxToolTipHeight(self): ...
    def _trimWidth(self, s, isList: bool = False): ...
    def _limitToolTipSize(self, s, isList: bool = False): ...
    def _addRichTextIndicators(self, s): ...
    def _limitValueDisplaySize(self, s): ...
    def _cleanStr(self, s, repl): ...
    def _formatMetadataValueView(self, val): ...
    def _updateMetadataView(self, obj: Incomplete | None = None):
        """ Sets the contents of the metadata viewer"""
    def _updateCompositionView(self, obj: Incomplete | None = None):
        """ Sets the contents of the composition tree view"""
    def _updateLayerStackView(self, obj: Incomplete | None = None):
        """ Sets the contents of the layer stack viewer"""
    def _isHUDVisible(self):
        """Checks if the upper HUD is visible by looking at the global HUD
        visibility menu as well as the 'Subtree Info' menu"""
    def _updateCameraMaskMenu(self) -> None: ...
    def _updateCameraMaskOutlineMenu(self) -> None: ...
    def _pickCameraMaskColor(self) -> None: ...
    def _updateCameraReticlesInsideMenu(self) -> None: ...
    def _updateCameraReticlesOutsideMenu(self) -> None: ...
    def _pickCameraReticlesColor(self) -> None: ...
    def _showHUDChanged(self) -> None: ...
    def _showHUD_InfoChanged(self) -> None: ...
    def _showHUD_ComplexityChanged(self) -> None: ...
    def _showHUD_PerformanceChanged(self) -> None: ...
    def _showHUD_GPUstatsChanged(self) -> None: ...
    def _getHUDStatKeys(self):
        """ returns the keys of the HUD with PRIM and NOTYPE and the top and
         CV, VERT, and FACE at the bottom."""
    def _updateHUDPrimStats(self) -> None:
        """update the upper HUD with the proper prim information"""
    def _updateHUDGeomCounts(self) -> None:
        """updates the upper HUD with the right geom counts
        calls _getGeomCounts() to get the info, which means it could be cached"""
    def _clearGeomCountsForPrimPath(self, primPath) -> None: ...
    def _getGeomCounts(self, prim, frame):
        """returns cached geom counts if available, or calls _calculateGeomCounts()"""
    def _accountForFlattening(self, shape):
        """Helper function for computing geomCounts"""
    def _calculateGeomCounts(self, prim, frame) -> None:
        """Computes the number of CVs, Verts, and Faces for each prim and each
        frame in the stage (for use by the HUD)"""
    def _updateNavigationMenu(self) -> None:
        """Make the Navigation menu items enabled or disabled depending on the
        selected prim."""
    def _updateEditMenu(self) -> None:
        """Make the Edit Prim menu items enabled or disabled depending on the
        selected prim."""
    def getSelectedItems(self): ...
    def _getPrimFromPropString(self, p): ...
    def visSelectedPrims(self) -> None: ...
    def visOnlySelectedPrims(self) -> None: ...
    def invisSelectedPrims(self) -> None: ...
    def removeVisSelectedPrims(self) -> None: ...
    def resetSessionVisibility(self) -> None: ...
    def _setSelectedPrimsActivation(self, active) -> None:
        """Activate or deactivate all selected prims."""
    def activateSelectedPrims(self) -> None: ...
    def deactivateSelectedPrims(self) -> None: ...
    def loadSelectedPrims(self) -> None: ...
    def unloadSelectedPrims(self) -> None: ...
    def onStageViewMouseDrag(self) -> None: ...
    def onPrimSelected(self, path, instanceIndex, topLevelPath, topLevelInstanceIndex, point, button, modifiers) -> None: ...
    def onRollover(self, path, instanceIndex, topLevelPath, topLevelInstanceIndex, modifiers): ...
    def processNavKeyEvent(self, kpEvent): ...
    def _viewSettingChanged(self) -> None: ...
    def _refreshViewMenubar(self) -> None:
        """Refresh the menubar actions associated with a view setting. This
        includes updating checked/unchecked and enabled/disabled states for
        actions and submenus to match the values in the ViewSettingsDataModel.
        """
    def _refreshRenderModeMenu(self) -> None: ...
    def _refreshColorCorrectionModeMenu(self) -> None: ...
    def _refreshPickModeMenu(self) -> None: ...
    def _refreshComplexityMenu(self) -> None: ...
    def _refreshBBoxMenu(self) -> None: ...
    def _refreshLightsMenu(self) -> None: ...
    def _refreshClearColorsMenu(self) -> None: ...
    def getActiveCamera(self): ...
    def _refreshCameraMenu(self) -> None: ...
    def _refreshCameraGuidesMenu(self) -> None: ...
    def _refreshCameraMaskMenu(self) -> None: ...
    def _refreshCameraReticlesMenu(self) -> None: ...
    def _refreshDisplayPurposesMenu(self) -> None: ...
    def _refreshViewMenu(self) -> None: ...
    def _refreshHUDMenu(self) -> None: ...
    def _refreshShowPrimMenu(self) -> None: ...
    def _refreshRedrawOnScrub(self) -> None: ...
    def _refreshRolloverPrimInfoMenu(self) -> None: ...
    def _refreshSelectionHighlightingMenu(self) -> None: ...
    def _refreshSelectionHighlightColorMenu(self) -> None: ...
    def _displayPurposeChanged(self) -> None: ...
    def _HUDInfoChanged(self) -> None:
        """Called when a HUD setting that requires info refresh has changed."""
    def _onPrimsChanged(self, primsChange, propertiesChange) -> None:
        """Called when prims in the USD stage have changed."""
    def _updateAsyncTimer(self) -> None: ...
