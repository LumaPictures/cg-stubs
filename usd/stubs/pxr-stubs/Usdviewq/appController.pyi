# mypy: disable-error-code="misc, override, no-redef"

import PySide6.QtCore
import PySide6.QtWidgets
import pxr.Ar as Ar
import pxr.Glf as Glf
import pxr.Sdf as Sdf
import pxr.Tf as Tf
import pxr.Usd as Usd
import pxr.UsdAppUtils as UsdAppUtils
import pxr.UsdGeom as UsdGeom
import pxr.UsdImagingGL as UsdImagingGL
import pxr.UsdShade as UsdShade
import pxr.UsdUtils as UsdUtils
import pxr.UsdUtils.constantsGroup
import pxr.Usdviewq.adjustDefaultMaterial as adjustDefaultMaterial
import pxr.Usdviewq.adjustFreeCamera as adjustFreeCamera
import pxr.Usdviewq.plugin as plugin
import pxr.Usdviewq.preferences as preferences
import pxr.Usdviewq.prettyPrint as prettyPrint
import pxr.Usdviewq.rootDataModel
import pxr.Usdviewq.settings
from _typeshed import Incomplete
from pxr.UsdAppUtils.complexityArgs import RefinementComplexities as RefinementComplexities
from pxr.UsdUtils.constantsGroup import ConstantsGroup as ConstantsGroup
from pxr.Usdviewq import Utils as Utils
from pxr.Usdviewq.attributeViewContextMenu import AttributeViewContextMenu as AttributeViewContextMenu
from pxr.Usdviewq.common import BusyContext as BusyContext, CameraMaskModes as CameraMaskModes, ClearColors as ClearColors, ColorCorrectionModes as ColorCorrectionModes, Drange as Drange, DumpMallocTags as DumpMallocTags, GetAssetCreationTime as GetAssetCreationTime, GetEnclosingModelPrim as GetEnclosingModelPrim, GetPrimsLoadability as GetPrimsLoadability, GetPropertyColor as GetPropertyColor, GetPropertyTextFont as GetPropertyTextFont, GetRootLayerStackInfo as GetRootLayerStackInfo, GetValueAndDisplayString as GetValueAndDisplayString, HasSessionVis as HasSessionVis, HighlightColors as HighlightColors, InvisRootPrims as InvisRootPrims, KeyboardShortcuts as KeyboardShortcuts, LayerInfo as LayerInfo, PickModes as PickModes, PrimNotFoundException as PrimNotFoundException, PrintWarning as PrintWarning, PropTreeWidgetTypeIsRel as PropTreeWidgetTypeIsRel, PropertyViewDataRoles as PropertyViewDataRoles, PropertyViewIcons as PropertyViewIcons, PropertyViewIndex as PropertyViewIndex, RenderModes as RenderModes, ResetSessionVisibility as ResetSessionVisibility, SelectionHighlightModes as SelectionHighlightModes, ShadedRenderModes as ShadedRenderModes, Timer as Timer, UIBaseColors as UIBaseColors, UIFonts as UIFonts, UIPropertyValueSourceColors as UIPropertyValueSourceColors
from pxr.Usdviewq.configController import ConfigController as ConfigController
from pxr.Usdviewq.customAttributes import BoundingBoxAttribute as BoundingBoxAttribute, CustomAttribute as CustomAttribute, LocalToWorldXformAttribute as LocalToWorldXformAttribute, ResolvedBoundMaterial as ResolvedBoundMaterial, _GetCustomAttributes as _GetCustomAttributes
from pxr.Usdviewq.headerContextMenu import HeaderContextMenu as HeaderContextMenu
from pxr.Usdviewq.layerStackContextMenu import LayerStackContextMenu as LayerStackContextMenu
from pxr.Usdviewq.legendUtil import ToggleLegendWithBrowser as ToggleLegendWithBrowser
from pxr.Usdviewq.mainWindowUI import Ui_MainWindow as Ui_MainWindow
from pxr.Usdviewq.primContextMenu import PrimContextMenu as PrimContextMenu
from pxr.Usdviewq.primTreeWidget import PrimTreeWidget as PrimTreeWidget
from pxr.Usdviewq.primViewItem import PrimViewColumnIndex as PrimViewColumnIndex, PrimViewItem as PrimViewItem
from pxr.Usdviewq.pythonInterpreter import Myconsole as Myconsole
from pxr.Usdviewq.rootDataModel import ChangeNotice as ChangeNotice, RootDataModel as RootDataModel
from pxr.Usdviewq.selectionDataModel import SelectionDataModel as SelectionDataModel
from pxr.Usdviewq.settings import ConfigManager as ConfigManager, StateSource as StateSource
from pxr.Usdviewq.stageView import StageView as StageView
from pxr.Usdviewq.usdviewApi import UsdviewApi as UsdviewApi
from pxr.Usdviewq.variantComboBox import VariantComboBox as VariantComboBox
from pxr.Usdviewq.viewSettingsDataModel import ViewSettingsDataModel as ViewSettingsDataModel
from typing import ClassVar

ALL_INSTANCES: int
QT_BINDING: str
SETTINGS_VERSION: str

class AppController(PySide6.QtCore.QObject):
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    def __init__(self, parserData, resolverContextFn) -> None: ...
    def GrabViewportShot(self, cropToAspectRatio: bool = ...):
        """Returns a QImage of the current stage view in usdview."""
    def GrabWindowShot(self):
        """Returns a QImage of the full usdview window """
    def _HUDInfoChanged(self):
        """Called when a HUD setting that requires info refresh has changed."""
    def _UpdateTimeSamples(self, resetStageDataOnly: bool = ...): ...
    def _accountForFlattening(self, shape):
        """Helper function for computing geomCounts"""
    def _addRichTextIndicators(self, s): ...
    def _adjustDefaultMaterial(self, checked): ...
    def _adjustFreeCamera(self, checked): ...
    def _advanceFrame(self): ...
    def _advanceFrameForPlayback(self): ...
    def _ambientOnlyClicked(self, checked: Incomplete | None = ...): ...
    def _applyMoreRendererSettings(self): ...
    def _applyStageOpenLayerMutes(self, stage, muteLayersRe): ...
    def _attrViewFindNext(self): ...
    def _cacheViewerModeEscapeSizes(self, pos: Incomplete | None = ..., index: Incomplete | None = ...): ...
    def _calculateGeomCounts(self, prim, frame):
        """Computes the number of CVs, Verts, and Faces for each prim and each
                frame in the stage (for use by the HUD)"""
    def _cameraSelectionChanged(self, camera): ...
    def _changeBgColor(self, mode): ...
    def _changeColorCorrection(self, mode): ...
    def _changeComplexity(self, action):
        """Update the complexity from a selected QAction."""
    def _changeHighlightColor(self, color): ...
    def _changeInterpolationType(self, interpolationType): ...
    def _changePickMode(self, mode): ...
    def _changePrimViewDepth(self, action):
        """Signal handler for view-depth menu items
        """
    def _changeRenderMode(self, mode): ...
    def _changeSelHighlightMode(self, mode): ...
    def _cleanAndClose(self): ...
    def _cleanStr(self, s, repl): ...
    def _clearCaches(self, preserveCamera: bool = ...):
        """Clears value and computation caches maintained by the controller.
                Does NOT initiate any GUI updates"""
    def _clearGeomCountsForPrimPath(self, primPath): ...
    def _closeStage(self): ...
    def _comparePaths(self, path1, path2): ...
    def _compositionTreeContextMenu(self, point): ...
    def _computeDisplayPredicate(self): ...
    def _configureColorManagement(self): ...
    def _configurePauseAction(self): ...
    def _configurePlugins(self): ...
    def _configureRendererAovs(self): ...
    def _configureRendererCommands(self): ...
    def _configureRendererPlugins(self): ...
    def _configureRendererSettings(self): ...
    def _configureStopAction(self): ...
    def _copyViewerImage(self): ...
    def _currentPathChanged(self):
        """Called when the currentPathWidget text is changed"""
    def _decrementComplexity(self):
        """Jump back to the previous level of complexity."""
    def _disableOCIOAction(self): ...
    def _displayPurposeChanged(self): ...
    def _drawFirstImage(self): ...
    def _expandPrims(self, prims, expand: bool = ...): ...
    def _expandToDepth(self, depth, suppressTiming: bool = ...):
        """Expands treeview prims to the given depth
        """
    def _findClosestFrameIndex(self, timeSample):
        """Find the closest frame index for the given `timeSample`.

                Args:
                    timeSample (float): A time sample value.

                Returns:
                    int: The closest matching frame index or 0 if one cannot be
                    found.
        """
    def _findIndentPos(self, s): ...
    def _findPrims(self, pattern, useRegex: bool = ...):
        """Search the Usd Stage for matching prims
        """
    def _formatMetadataValueView(self, val): ...
    def _frameSelection(self): ...
    def _frameStringChanged(self): ...
    def _getCommonPrims(self, pathsList): ...
    def _getExpandedPrimViewPrims(self): ...
    def _getFilteredChildren(self, prim): ...
    def _getGeomCounts(self, prim, frame):
        """returns cached geom counts if available, or calls _calculateGeomCounts()"""
    def _getHUDStatKeys(self):
        """ returns the keys of the HUD with PRIM and NOTYPE and the top and
                 CV, VERT, and FACE at the bottom."""
    def _getItemAtPath(self, path, ensureExpanded: bool = ...): ...
    def _getPathsFromItems(self, items, prune: bool = ...): ...
    def _getPrimFromPropString(self, p): ...
    def _getPrimsFromPaths(self, paths):
        """Get all prims from a list of paths."""
    def _getPropertiesDict(self): ...
    def _getSaveFileName(self, caption, recommendedFilename): ...
    def _getSelectedObject(self): ...
    def _incrementComplexity(self):
        """Jump up to the next level of complexity."""
    def _invokeRendererCommand(self, cmd): ...
    def _isHUDVisible(self):
        """Checks if the upper HUD is visible by looking at the global HUD
                visibility menu as well as the 'Subtree Info' menu"""
    def _isMatch(self, pattern, isRegex, prim, useDisplayName):
        """
        Determines if the given prim has a name that matches the
        given pattern.  If useDisplayName is True, the match
        will be performed on the prim's display name (if authored)
        and on the prim's name (if not).  When useDisplayName is False,
        the match is always performed against the prim's name.

        Args:
            pattern (str): The pattern to use to match the name.  Pattern
                           is either a sequence of characters or a regex
                           expression.  If it is a regex expression, the
                           isRegex parameter should be set to True.
            isRegex (bool): True if the given pattern is a regex expression
                            or False if just a sequence of characters.
            prim (object): A python facing UsdPrim object on whose properties
                           should be matched by pattern.
            useDisplayName (bool): True if the pattern match should be against
                                   the displayName of the prim or False if
                                   against the name of the prim.  If this value is True
                                   displayName will only be matched if it is authored,
                                   otherwise the name of the prim will be used.

        Returns:
            True if the pattern matches the specified prim content, False otherwise. 
        """
    def _itemClicked(self, item, col): ...
    def _itemPressed(self, item, col): ...
    def _layerStackContextMenu(self, point): ...
    def _limitToolTipSize(self, s, isList: bool = ...): ...
    def _limitValueDisplaySize(self, s): ...
    def _makeTimer(self, label, printTiming: bool = ...): ...
    def _maxToolTipHeight(self): ...
    def _maxToolTipWidth(self): ...
    def _moreRendererSettings(self): ...
    def _normalize_unicode(self, str: str, form: str = ...): ...
    def _onCameraSearchComplete(self): ...
    def _onCameraSearchTextChanged(self, text): ...
    def _onCompositionSelectionChanged(self, curr: Incomplete | None = ..., prev: Incomplete | None = ...): ...
    def _onDomeLightClicked(self, checked: Incomplete | None = ...): ...
    def _onDomeLightTexturesVisibleClicked(self, checked: Incomplete | None = ...): ...
    def _onPrimsChanged(self, primsChange, propertiesChange):
        """Called when prims in the USD stage have changed."""
    def _openFile(self): ...
    def _openSettings(self, defaultSettings, config): ...
    def _openStage(self, usdFilePath, sessionFilePath, populationMaskPaths, muteLayersRe): ...
    def _otherAov(self): ...
    @classmethod
    def _outputBaseDirectory(cls): ...
    def _pickCameraMaskColor(self): ...
    def _pickCameraReticlesColor(self): ...
    def _playClicked(self): ...
    def _populateChildren(self, item, depth: int = ..., maxDepth: int = ..., childrenToAdd: Incomplete | None = ...):
        """Populates the children of the given item in the prim viewer.
                   If childrenToAdd is given its a list of prims to add as
                   children."""
    def _populateItem(self, prim, depth: int = ..., maxDepth: int = ...):
        """Populates a prim viewer item."""
    def _populatePropertyInspector(self): ...
    def _populateRoots(self): ...
    def _primLegendToggleCollapse(self): ...
    def _primSelectionChanged(self, added, removed):
        """Called when the prim selection is updated in the data model. Updates
                any UI that depends on the state of the selection.
        """
    def _primViewContextMenu(self, point): ...
    def _primViewExpanded(self, index):
        """Signal handler for expanded(index), facilitates lazy tree population
        """
    def _primViewFindNext(self): ...
    def _primViewHeaderContextMenu(self, point): ...
    def _primsFromSelectionRanges(self, ranges):
        """Iterate over all prims in a QItemSelection from primView."""
    def _propSelectionChanged(self):
        """Called whenever the property selection in the data model changes.
                Updates any UI that relies on the selection state.
        """
    def _propertyLegendToggleCollapse(self): ...
    def _propertyViewContextMenu(self, point): ...
    def _propertyViewCurrentItemChanged(self, currentItem, lastItem):
        """Called whenever property view's current item changes."""
    def _propertyViewDeselectItem(self, item): ...
    def _propertyViewHeaderContextMenu(self, point): ...
    def _propertyViewSelectionChanged(self):
        """Called whenever property view's selection changes."""
    def _rangeBeginChanged(self): ...
    def _rangeEndChanged(self): ...
    def _redrawOptionToggled(self, checked): ...
    def _refreshAttributeValue(self): ...
    def _refreshBBox(self):
        """Recompute and hide/show Bounding Box."""
    def _refreshBBoxMenu(self): ...
    def _refreshCameraGuidesMenu(self): ...
    def _refreshCameraListAndMenu(self, preserveCurrCamera): ...
    def _refreshCameraMaskMenu(self): ...
    def _refreshCameraMenu(self): ...
    def _refreshCameraReticlesMenu(self): ...
    def _refreshClearColorsMenu(self): ...
    def _refreshColorCorrectionModeMenu(self): ...
    def _refreshComplexityMenu(self): ...
    def _refreshDisplayPurposesMenu(self): ...
    def _refreshHUDMenu(self): ...
    def _refreshLightsMenu(self): ...
    def _refreshPickModeMenu(self): ...
    def _refreshPrimViewSelection(self, expandedPrims):
        """Refresh the selected prim view items to match the selection data
                model.
        """
    def _refreshRedrawOnScrub(self): ...
    def _refreshRenderModeMenu(self): ...
    def _refreshRolloverPrimInfoMenu(self): ...
    def _refreshSelectionHighlightColorMenu(self): ...
    def _refreshSelectionHighlightingMenu(self): ...
    def _refreshShowPrimMenu(self): ...
    def _refreshViewMenu(self): ...
    def _refreshViewMenubar(self):
        """Refresh the menubar actions associated with a view setting. This
                includes updating checked/unchecked and enabled/disabled states for
                actions and submenus to match the values in the ViewSettingsDataModel.
        """
    def _reloadFixedUI(self, resetStageDataOnly: bool = ...): ...
    def _reloadStage(self): ...
    def _reloadVaryingUI(self): ...
    def _rendererAovChanged(self, aov): ...
    def _rendererPluginChanged(self, plugin): ...
    def _rendererSettingsFlagChanged(self, action): ...
    def _reopenStage(self): ...
    def _resetGUI(self):
        """Perform a full refresh/resync of all GUI contents. This should be
                called whenever the USD stage is modified, and assumes that all data
                previously fetched from the stage is invalid. In the future, more
                granular updates will be supported by listening to UsdNotice objects on
                the active stage.

                If a prim resync is needed then we fully update the prim view,
                otherwise can just do a simplified update to the prim view.
        """
    def _resetMoreRendererSettings(self): ...
    def _resetPrimView(self, restoreSelection: bool = ...): ...
    def _resetPrimViewVis(self, selItemsOnly: bool = ..., authoredVisHasChanged: bool = ...):
        """Updates browser rows' Vis columns... can update just selected
                items (and their descendants and ancestors), or all items in the
                primView.  When authoredVisHasChanged is True, we force each item
                to discard any value caches it may be holding onto."""
    def _resetSettings(self):
        """Reloads the UI and Sets up the initial settings for the
                _stageView object created in _reloadVaryingUI"""
    def _resetView(self, selectPrim: Incomplete | None = ...):
        """ Reverts the GL frame to the initial camera view,
                and clears selection (sets to pseudoRoot), UNLESS 'selectPrim' is
                not None, in which case we'll select and frame it."""
    def _resizePrimView(self):
        """ Used to coalesce excess calls to resizeColumnToContents.
        """
    def _retreatFrame(self): ...
    def _saveFlattenedAs(self): ...
    def _saveOverridesAs(self): ...
    def _saveViewerImage(self): ...
    def _scheduleResizePrimView(self):
        """ Schedules a resize of the primView widget.
                    This will call _resizePrimView when the timer expires
                    (uses timer coalescing to prevent redundant resizes from occurring).
        """
    def _selectionChanged(self, added, removed):
        """Called when primView's selection is changed. If the selection was
                changed by a user, update the selection data model with the changes.
        """
    def _setComplexity(self, complexity):
        """Set the complexity and update the UI."""
    def _setFrameIndex(self, frameIndex):
        """Set the `frameIndex`.

                Args:
                    frameIndex (int): The new frame index value.
        """
    def _setPlayShortcut(self): ...
    def _setPlaybackAvailability(self, enabled: bool = ...): ...
    def _setSelectedPrimsActivation(self, active):
        """Activate or deactivate all selected prims."""
    def _setStyleSheetUsingState(self): ...
    def _setUseExtentsHint(self): ...
    def _setupCustomFont(self): ...
    def _showDebugFlags(self): ...
    def _showHUDChanged(self): ...
    def _showHUD_ComplexityChanged(self): ...
    def _showHUD_GPUstatsChanged(self): ...
    def _showHUD_InfoChanged(self): ...
    def _showHUD_PerformanceChanged(self): ...
    def _showHydraSceneBrowser(self): ...
    def _showInterpreter(self): ...
    def _showMoreCamerasDialog(self):
        """Open dialog box containing all scene cameras."""
    def _showPrimContextMenu(self, item): ...
    def _sliderMoved(self, frameIndex):
        """Slot called when the frame slider is moved by a user.

                Args:
                    frameIndex (int): The new frame index value.
        """
    def _startQtShutdownTimer(self): ...
    def _stepSizeChanged(self): ...
    def _stopQtShutdownTimer(self): ...
    def _storeAndReturnViewState(self): ...
    def _tallyPrimStats(self, prim): ...
    def _toggleAutoComputeClippingPlanes(self): ...
    def _toggleCullBackfaces(self): ...
    def _toggleDisplayCameraOracles(self): ...
    def _toggleDisplayGuide(self): ...
    def _toggleDisplayPrimId(self): ...
    def _toggleDisplayProxy(self): ...
    def _toggleDisplayRender(self): ...
    def _toggleEnableSceneLights(self): ...
    def _toggleEnableSceneMaterials(self): ...
    def _toggleFramedView(self): ...
    def _togglePause(self): ...
    def _togglePreferences(self, checked): ...
    def _toggleRolloverPrimInfo(self): ...
    def _toggleShowAABBox(self):
        """Called when Axis-Aligned bounding boxes
                are activated/deactivated via menu item"""
    def _toggleShowAbstractPrims(self): ...
    def _toggleShowBBoxPlayback(self):
        """Called when the menu item for showing BBoxes
                during playback is activated or deactivated."""
    def _toggleShowBBoxes(self):
        """Called when the menu item for showing BBoxes
                is activated."""
    def _toggleShowInactivePrims(self): ...
    def _toggleShowOBBox(self):
        """Called when Oriented bounding boxes
                are activated/deactivated via menu item"""
    def _toggleShowPrimDisplayName(self): ...
    def _toggleShowPrototypePrims(self): ...
    def _toggleShowUndefinedPrims(self): ...
    def _toggleStop(self): ...
    def _toggleViewerMode(self): ...
    def _trimWidth(self, s, isList: bool = ...): ...
    def _updateAsyncTimer(self): ...
    def _updateCameraMaskMenu(self): ...
    def _updateCameraMaskOutlineMenu(self): ...
    def _updateCameraReticlesInsideMenu(self): ...
    def _updateCameraReticlesOutsideMenu(self): ...
    def _updateCompositionView(self, obj: Incomplete | None = ...):
        """ Sets the contents of the composition tree view"""
    def _updateEditMenu(self):
        """Make the Edit Prim menu items enabled or disabled depending on the
                selected prim."""
    def _updateForStageChanges(self, hasPrimResync: bool = ...):
        """Assuming there have been authoring changes to the already-loaded
                stage, make the minimal updates to the UI required to maintain a
                consistent state.  This may still be over-zealous until we know
                what actually changed, but we should be able to preserve camera and
                playback positions (unless viewing through a stage camera that no
                longer exists"""
    def _updateGUIForFrameChange(self):
        """Called when the frame changes have finished.
                e.g When the playback/scrubbing has stopped.
        """
    def _updateHUDGeomCounts(self):
        """updates the upper HUD with the right geom counts
                calls _getGeomCounts() to get the info, which means it could be cached"""
    def _updateHUDPrimStats(self):
        """update the upper HUD with the proper prim information"""
    def _updateLayerStackView(self, obj: Incomplete | None = ...):
        """ Sets the contents of the layer stack viewer"""
    def _updateMetadataView(self, obj: Incomplete | None = ...):
        """ Sets the contents of the metadata viewer"""
    def _updateNavigationMenu(self):
        """Make the Navigation menu items enabled or disabled depending on the
                selected prim."""
    def _updateOnFrameChange(self):
        """Called when the frame changes, updates the renderer and such"""
    def _updatePrimPathText(self): ...
    def _updatePrimView(self): ...
    def _updatePrimViewSelection(self, added, removed):
        """Do an incremental update to primView's selection using the added and
                removed prim paths from the selectionDataModel.
        """
    def _updatePropertiesFromPropertyView(self):
        """Update the data model's property selection to match property view's
                current selection.
        """
    def _updatePropertyInspector(self, index: Incomplete | None = ..., obj: Incomplete | None = ...): ...
    def _updatePropertyView(self):
        """ Sets the contents of the attribute value viewer """
    def _updatePropertyViewInternal(self): ...
    def _updatePropertyViewSelection(self):
        """Updates property view's selected items to match the data model."""
    def _viewSettingChanged(self): ...
    def activateSelectedPrims(self): ...
    @classmethod
    def clearSettings(cls): ...
    def deactivateSelectedPrims(self): ...
    def editComplete(self, msg): ...
    def getActiveCamera(self): ...
    def getSelectedItems(self): ...
    def invisSelectedPrims(self): ...
    def isViewerMode(self):
        """Returns True if the extra UI around the stage view is collapsed."""
    def loadSelectedPrims(self): ...
    def onPrimSelected(self, path, instanceIndex, topLevelPath, topLevelInstanceIndex, point, button, modifiers): ...
    def onRollover(self, path, instanceIndex, topLevelPath, topLevelInstanceIndex, modifiers): ...
    def onStageViewMouseDrag(self): ...
    def processNavKeyEvent(self, kpEvent): ...
    def removeVisSelectedPrims(self): ...
    def resetSessionVisibility(self): ...
    def saveFrame(self, fileName): ...
    def selectBindingRelForPurpose(self, materialPurpose):
        """Iterates through all selected prims, selecting their bound preview
                   materials.
        """
    def selectBoundFullMaterial(self):
        """Iterates through all selected prims, selecting their bound preview
                   materials.
        """
    def selectBoundMaterialForPurpose(self, materialPurpose):
        """Iterates through all selected prims, selecting their bound preview
                   materials.
        """
    def selectBoundPreviewMaterial(self):
        """Iterates through all selected prims, selecting their bound preview
                   materials.
        """
    def selectEnclosingModel(self):
        """Iterates through all selected prims, selecting their containing model
                instead if they are not a model themselves.
        """
    def selectFullBindingRel(self):
        '''Iterates through all selected prims, computing their resolved 
                "full" bindings and selecting the cooresponding binding relationship.
        '''
    def selectPreviewBindingRel(self):
        '''Iterates through all selected prims, computing their resolved 
                "preview" bindings and selecting the cooresponding binding relationship.
        '''
    def selectPseudoroot(self):
        """Selects only the pseudoroot."""
    def setFrame(self, frame):
        """Set the `frame`.

                Args:
                    frame (float): The new frame value.
        """
    def setFrameField(self, frame):
        """Set the frame field to the given `frame`.

                Args:
                    frame (str|int|float): The new frame value.
        """
    def setViewerMode(self, viewerMode):
        """Sets whether the UI should be displayed in viewer mode, where the
                extra UI around the stage view is collapsed."""
    def statusMessage(self, msg, timeout: int = ...): ...
    def unloadSelectedPrims(self): ...
    def updateGUI(self):
        """Will schedule a full refresh/resync of the GUI contents.
                Prefer this to calling _resetGUI() directly, since it will
                coalesce multiple calls to this method in to a single refresh.
        """
    def visOnlySelectedPrims(self): ...
    def visSelectedPrims(self): ...
    def __del__(self) -> None: ...

class Blocker:
    """Object which can be used to temporarily block the execution of a body of
    code. This object is a context manager, and enters a 'blocked' state when
    used in a 'with' statement. The 'blocked()' method can be used to find if
    the Blocker is in this 'blocked' state.

    For example, this is used to prevent UI code from handling signals from the
    selection data model while the UI code itself modifies selection.
    """
    def __init__(self) -> None: ...
    def blocked(self):
        """Returns True if in the 'blocked' state, and False otherwise."""
    def __enter__(self):
        """Enter the 'blocked' state until the context is exited."""
    def __exit__(self, *args):
        """Exit the 'blocked' state."""

class HUDEntries(pxr.UsdUtils.constantsGroup.ConstantsGroup):
    CV: ClassVar[str] = ...
    FACE: ClassVar[str] = ...
    GETBOUNDS: ClassVar[str] = ...
    NOTYPE: ClassVar[str] = ...
    PLAYBACK: ClassVar[str] = ...
    PRIM: ClassVar[str] = ...
    RENDER: ClassVar[str] = ...
    VERT: ClassVar[str] = ...
    _all: ClassVar[tuple] = ...

class LayerStackViewColumnIndex(pxr.UsdUtils.constantsGroup.ConstantsGroup):
    LAYER: ClassVar[int] = ...
    OFFSET: ClassVar[int] = ...
    PATH: ClassVar[int] = ...
    VALUE: ClassVar[int] = ...
    _all: ClassVar[tuple] = ...

class MainWindow(PySide6.QtWidgets.QMainWindow):
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    def __init__(self, closeFunc) -> None: ...
    def closeEvent(self, event): ...

class PropertyIndex(pxr.UsdUtils.constantsGroup.ConstantsGroup):
    COMPOSITION: ClassVar[int] = ...
    LAYERSTACK: ClassVar[int] = ...
    METADATA: ClassVar[int] = ...
    VALUE: ClassVar[int] = ...
    _all: ClassVar[tuple] = ...

class UIDefaults(pxr.UsdUtils.constantsGroup.ConstantsGroup):
    ATTRIBUTE_INSPECTOR_WIDTH: ClassVar[int] = ...
    ATTRIBUTE_VIEW_WIDTH: ClassVar[int] = ...
    BOTTOM_HEIGHT: ClassVar[int] = ...
    PRIM_VIEW_WIDTH: ClassVar[int] = ...
    STAGE_VIEW_WIDTH: ClassVar[int] = ...
    TOP_HEIGHT: ClassVar[int] = ...
    _all: ClassVar[tuple] = ...

class UIStateProxySource(pxr.Usdviewq.settings.StateSource):
    """XXX Temporary class which allows AppController to serve as two state sources.
    All fields here will be moved back into AppController in the future.
    """
    def __init__(self, mainWindow, parent, name) -> None: ...
    def onSaveState(self, state): ...

class UsdviewDataModel(pxr.Usdviewq.rootDataModel.RootDataModel):
    staticMetaObject: ClassVar[PySide6.QtCore.QMetaObject] = ...
    def __init__(self, makeTimer, settings) -> None: ...
    def _emitPrimsChanged(self, primChange, propertyChange): ...
    @property
    def selection(self): ...
    @property
    def viewSettings(self): ...
