from .common import KeyboardShortcuts as KeyboardShortcuts, PrintWarning as PrintWarning, Timer as Timer, UIPrimTreeColors as UIPrimTreeColors
from .primViewItem import PrimViewColumnIndex as PrimViewColumnIndex, PrimViewItem as PrimViewItem
from .qt import QtCore as QtCore, QtGui as QtGui, QtWidgets as QtWidgets
from _typeshed import Incomplete
from pxr import Sdf as Sdf, Usd as Usd, UsdGeom as UsdGeom
from pxr.UsdUtils.constantsGroup import ConstantsGroup as ConstantsGroup

def _GetPropertySpecInSessionLayer(usdAttribute): ...
def _GetBackgroundColor(item, option): ...

class DrawModes(ConstantsGroup):
    DEFAULT: str
    CARDS: str
    BOUNDS: str
    ORIGIN: str

class DrawModeComboBox(QtWidgets.QComboBox):
    """ Specialize from QComboBox, so that we can send a signal when the pop-up
        is hidden.
    """
    signalPopupHidden: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def hidePopup(self) -> None: ...

class DrawModeWidget(QtWidgets.QWidget):
    """ This widget contains a combobox for selecting the draw mode and a 
        clear ('x') button for clearing an authored drawMode override in the 
        session layer. 
    """
    _primViewItem: Incomplete
    _layout: Incomplete
    _comboBox: Incomplete
    _modelAPI: Incomplete
    _clearButton: Incomplete
    _currentDrawMode: Incomplete
    _firstPaint: bool
    _refreshFunc: Incomplete
    _makeTimer: Incomplete
    def __init__(self, primViewItem, refreshFunc, makeTimer, parent: Incomplete | None = None) -> None: ...
    def paintEvent(self, event) -> None: ...
    def _ShouldHideClearButton(self): ...
    def RefreshDrawMode(self, currentDrawMode: Incomplete | None = None) -> None: ...
    def _UpdateDrawMode(self) -> None: ...
    def _ClearDrawMode(self) -> None: ...
    def _CloseEditorIfNoEdit(self) -> None: ...
    def _PopupHidden(self) -> None: ...

class DrawModeItemDelegate(QtWidgets.QStyledItemDelegate):
    _treeWidget: Incomplete
    _makeTimer: Incomplete
    def __init__(self, makeTimer, parent: Incomplete | None = None) -> None: ...
    def paint(self, painter, option, index) -> None: ...
    def createEditor(self, parent, option, index): ...

class SelectedAncestorItemDelegate(QtWidgets.QStyledItemDelegate):
    _treeWidget: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def paint(self, painter, option, index) -> None: ...

class PrimItemSelectionModel(QtCore.QItemSelectionModel):
    """Standard QItemSelectionModel does not allow one to have full-item
    selection while exlcuding some columns in the view from activating
    selection.  Since that's exactly the behavior we want, we derive our
    own class that we can force to ignore selection requests except when we
    really want it to."""
    _processSelections: bool
    def __init__(self, model) -> None: ...
    @property
    def processSelections(self):
        """If True, calls to clear(), reset(), and select() will function
        as normal.  If False, such calls will be ignored."""
    @processSelections.setter
    def processSelections(self, doProcess) -> None: ...
    def clear(self) -> None: ...
    def reset(self) -> None: ...
    def select(self, indexOrSelection, command) -> None: ...

class SelectionEnabler:
    _selectionModel: Incomplete
    _selectionWasEnabled: bool
    def __init__(self, selectionModel) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...

class PrimTreeWidget(QtWidgets.QTreeWidget):
    _appController: Incomplete
    _selectionModel: Incomplete
    _ancestorsOfSelected: Incomplete
    def __init__(self, parent) -> None: ...
    def InitControllers(self, appController) -> None: ...
    def ShowDrawModeWidgetForItem(self, primViewItem) -> None: ...
    def UpdatePrimViewDrawMode(self, rootItem: Incomplete | None = None) -> None:
        '''Updates browser\'s "Draw Mode" columns.'''
    def ColumnPressCausesSelection(self, col):
        """If this method returns True for column `col`, then we want a
        click in that column to cause the item to be selected."""
    def ExpandItemRecursively(self, item) -> None: ...
    def FrameSelection(self) -> None: ...
    def mousePressEvent(self, ev) -> None: ...
    def leaveEvent(self, ev) -> None: ...
    def clearSelection(self) -> None: ...
    def reset(self) -> None: ...
    def selectAll(self) -> None: ...
    def keyPressEvent(self, ev) -> None: ...
    def keyReleaseEvent(self, ev) -> None: ...
    def keyboardSearch(self, s) -> None:
        """Disable keyboardSearch in the prim view widget. This would interfere
        with F key used for framing the current selection by trying to change
        the selection to the first item starting with F. Since we're disabling
        this for F, it makes sense to disable it for all letters"""
    def updateSelection(self, added, removed) -> None:
        """Mutate the widget's selected items, selecting items in `added`
        and deselecting items in `removed`.  Prefer this method for client
        use over calling setSelected directly on PrimViewItems."""
    def _resetAncestorsOfSelected(self) -> None: ...
    def _refreshAncestorsOfSelected(self) -> None: ...
