# mypy: disable-error-code="misc, override, no-redef"

import pxr.Ar as Ar
import pxr.UsdUtils.constantsGroup
from pxr.UsdUtils.constantsGroup import ConstantsGroup as ConstantsGroup
from typing import ClassVar

class ARKitFileExtensionChecker(BaseRuleChecker):
    _allowedFileExtensions: ClassVar[tuple] = ...
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckZipFile(self, zipFile, packagePath): ...
    @staticmethod
    def GetDescription(): ...

class ARKitLayerChecker(BaseRuleChecker):
    _allowedLayerFormatIds: ClassVar[tuple] = ...
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckLayer(self, layer): ...
    @staticmethod
    def GetDescription(): ...

class ARKitMaterialBindingChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    @staticmethod
    def GetDescription(): ...

class ARKitPackageEncapsulationChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckDependencies(self, usdStage, layerDeps, assetDeps): ...
    @staticmethod
    def GetDescription(): ...

class ARKitPrimTypeChecker(BaseRuleChecker):
    _allowedPrimTypeNames: ClassVar[tuple] = ...
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    @staticmethod
    def GetDescription(): ...

class ARKitShaderChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    @staticmethod
    def GetDescription(): ...

class BaseRuleChecker:
    """This is Base class for all the rule-checkers."""
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckDependencies(self, usdStage, layerDeps, assetDeps):
        """ Check usdStage's layer and asset dependencies that were gathered 
                    using UsdUtils.ComputeAllDependencies().
        """
    def CheckDiagnostics(self, diagnostics):
        """ Check the diagnostic messages that were generated when opening the 
                    USD stage. The diagnostic messages are collected using a 
                    UsdUtilsCoalescingDiagnosticDelegate.
        """
    def CheckLayer(self, layer):
        """ Check the given SdfLayer. """
    def CheckPrim(self, prim):
        """ Check the given prim, which may only exist is a specific combination
                    of variant selections on the UsdStage.
        """
    def CheckStage(self, usdStage):
        """ Check the given usdStage. """
    def CheckUnresolvedPaths(self, unresolvedPaths):
        """ Check or process any unresolved asset paths that were found when 
                    analysing the dependencies.
        """
    def CheckZipFile(self, zipFile, packagePath):
        """ Check the zipFile object created by opening the package at path 
                    packagePath.
        """
    def GetErrors(self): ...
    def GetFailedChecks(self): ...
    def GetWarnings(self): ...
    def ResetCaches(self):
        """ Reset any caches the rule owns.  Called whenever stage authoring
                occurs, such as when we iterate through VariantSet combinations.
        """
    def _AddError(self, msg): ...
    def _AddFailedCheck(self, msg): ...
    def _AddWarning(self, msg): ...
    def _Msg(self, msg): ...

class ByteAlignmentChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckZipFile(self, zipFile, packagePath): ...
    @staticmethod
    def GetDescription(): ...

class ComplianceChecker:
    ''' A utility class for checking compliance of a given USD asset or a USDZ 
    package.

    Since usdz files are zip files, someone could use generic zip tools to 
    create an archive and just change the extension, producing a .usdz file that 
    does not honor the additional constraints that usdz files require.  Even if 
    someone does use our official archive creation tools, though, we 
    intentionally allow creation of usdz files that can be very "permissive" in 
    their contents for internal studio uses, where portability outside the 
    studio is not a concern.  For content meant to be delivered over the web 
    (eg. ARKit assets), however, we must be much more restrictive.

    This class provides two levels of compliance checking: 
    * "structural" validation that is represented by a set of base rules. 
    * "ARKit" compatibility validation, which includes many more restrictions.
    
    Calling ComplianceChecker.DumpAllRules() will print an enumeration of the 
    various rules in the two categories of compliance checking.
    '''
    def __init__(self, arkit: bool = ..., skipARKitRootLayerCheck: bool = ..., rootPackageOnly: bool = ..., skipVariants: bool = ..., verbose: bool = ..., assetLevelChecks: bool = ...) -> None: ...
    def CheckCompliance(self, inputFile): ...
    @staticmethod
    def DumpAllRules(): ...
    def DumpRules(self): ...
    @staticmethod
    def GetARKitRules(skipARKitRootLayerCheck: bool = ...): ...
    @staticmethod
    def GetBaseRules(): ...
    def GetErrors(self): ...
    def GetFailedChecks(self): ...
    @staticmethod
    def GetRules(arkit: bool = ..., skipARKitRootLayerCheck: bool = ...): ...
    def GetWarnings(self): ...
    def _AddError(self, errMsg): ...
    def _AddWarning(self, errMsg): ...
    def _CheckLayer(self, layer): ...
    def _CheckPackage(self, packagePath): ...
    def _CheckPrim(self, prim): ...
    def _Msg(self, msg): ...
    def _TraverseRange(self, primRangeIt, isStageRoot): ...
    def _TraverseVariants(self, prim): ...

class CompressionChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckZipFile(self, zipFile, packagePath): ...
    @staticmethod
    def GetDescription(): ...

class MaterialBindingAPIAppliedChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    @staticmethod
    def GetDescription(): ...

class MissingReferenceChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckDiagnostics(self, diagnostics): ...
    def CheckUnresolvedPaths(self, unresolvedPaths): ...
    @staticmethod
    def GetDescription(): ...

class NodeTypes(pxr.UsdUtils.constantsGroup.ConstantsGroup):
    UsdPreviewSurface: ClassVar[str] = ...
    UsdPrimvarReader: ClassVar[str] = ...
    UsdTransform2d: ClassVar[str] = ...
    UsdUVTexture: ClassVar[str] = ...
    _all: ClassVar[tuple] = ...

class NormalMapTextureChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    @staticmethod
    def GetDescription(): ...
    def _GetInputValue(self, shader, inputName): ...
    def _GetShaderId(self, shader): ...
    def _TextureIs8Bit(self, asset): ...

class PrimEncapsulationChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    @staticmethod
    def GetDescription(): ...
    def ResetCaches(self): ...
    def _FindConnectableAncestor(self, prim): ...
    def _HasGprimAncestor(self, prim): ...

class ShaderPropertyTypeConformanceChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    @staticmethod
    def GetDescription(): ...
    def _FillSdrNameToTypeMap(self, shadeNode, mapping): ...

class ShaderProps(pxr.UsdUtils.constantsGroup.ConstantsGroup):
    Bias: ClassVar[str] = ...
    File: ClassVar[str] = ...
    Normal: ClassVar[str] = ...
    Scale: ClassVar[str] = ...
    SourceColorSpace: ClassVar[str] = ...
    _all: ClassVar[tuple] = ...

class SkelBindingAPIAppliedChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    @staticmethod
    def GetDescription(): ...

class StageMetadataChecker(BaseRuleChecker):
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckStage(self, usdStage): ...
    @staticmethod
    def GetDescription(): ...

class TextureChecker(BaseRuleChecker):
    _basicUSDZImageFormats: ClassVar[tuple] = ...
    _unsupportedImageFormats: ClassVar[list] = ...
    def __init__(self, verbose, consumerLevelChecks, assetLevelChecks) -> None: ...
    def CheckPrim(self, prim): ...
    def CheckStage(self, usdStage): ...
    @staticmethod
    def GetDescription(): ...
    def _CheckTexture(self, texAssetPath, inputPath): ...

def _IsPackageOrPackagedLayer(layer): ...
