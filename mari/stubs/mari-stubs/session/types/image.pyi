from .metadata import Metadata as Metadata
from _typeshed import Incomplete
from collections.abc import Generator

class Image(Metadata):
    fileName: Incomplete
    hash: Incomplete
    originalPath: Incomplete
    format: Incomplete
    uvIndex: Incomplete
    prefsFolder: Incomplete
    def __init__(self, name, parent) -> None: ...
    @property
    def filePath(self): ...
    def asDict(self, includeDict: Incomplete | None = ...): ...
    def export(self, exportDir, exported) -> None: ...
    @classmethod
    def fromDict(cls, dataDict, parent, sourceFilePath): ...
    @classmethod
    def fromMariObject(cls, mariObject, parent, uvIndex): ...
    mariObject: Incomplete
    def load(self, finishedCallback=...) -> None: ...
    def walk(self, depth: int = ...) -> Generator[Incomplete, None, None]: ...
