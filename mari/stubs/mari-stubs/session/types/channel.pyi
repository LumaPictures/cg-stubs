from .layer_stack import LayerStack as LayerStack
from _typeshed import Incomplete

class Channel(LayerStack):
    colorSpace: Incomplete
    depth: Incomplete
    fileSpace: Incomplete
    height: Incomplete
    isLocked: Incomplete
    isPtex: Incomplete
    isShaderStack: Incomplete
    patches: Incomplete
    width: Incomplete
    nodes: Incomplete
    nodeUuidRemap: Incomplete
    uvIndexMap: Incomplete
    makeDone: bool
    def __init__(self, name, parent) -> None: ...
    def asDict(self, includeDict: Incomplete | None = ...): ...
    def renameShaderLayers(self, sourceLayers, geoEntity): ...
    @classmethod
    def fromDict(cls, dataDict, parent, sourceFilePath, skipChildren: bool = ...): ...
    @classmethod
    def fromMariObject(cls, mariObject, parent, skipChildren: bool = ...): ...
    mariObject: Incomplete
    def make(self, makeLayers: bool = ..., finishedCallback=..., skipFinishedCallback: bool = ..., selectedLayers: bool = ...) -> None: ...
    def patchResolutions(self, uvIndexes, mariObject): ...
    def remapPatchUvIndexes(self, uvIndexesMap) -> None: ...
    def instantiateChildren(self) -> None: ...
    def isNewFormat(self): ...
    def setNodeUuidRemap(self, nodeUuidRemap) -> None: ...
