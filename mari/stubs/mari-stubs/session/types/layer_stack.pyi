from .metadata import Metadata as Metadata
from _typeshed import Incomplete
from collections.abc import Generator

class LayerStack(Metadata):
    def __init__(self, name, parent) -> None: ...
    @property
    def layers(self): ...
    def addLayer(self, layer) -> None: ...
    def asDict(self, includeDict: Incomplete | None = ...): ...
    @classmethod
    def fromDict(cls, dataDict, parent, sourceFilePath, skipChildren: bool = ...): ...
    @classmethod
    def fromMariObject(cls, mariObject, parent, skipChildren: bool = ...): ...
    def instantiateChildren(self) -> None: ...
    def makeLayers(self, selectedLayers: bool = ..., finishedCallback=...) -> None: ...
    def walk(self, depth: int = ...) -> Generator[Incomplete, None, None]: ...
