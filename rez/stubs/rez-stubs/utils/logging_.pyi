from _typeshed import Incomplete
from collections.abc import Generator
from contextlib import contextmanager
from typing import Any

logger: Incomplete

def print_debug(msg, *nargs) -> None: ...
def print_info(msg, *nargs) -> None: ...
def print_warning(msg, *nargs) -> None: ...
def print_error(msg, *nargs) -> None: ...
def print_critical(msg, *nargs) -> None: ...
def get_debug_printer(enabled: bool = True): ...
def get_info_printer(enabled: bool = True): ...
def get_warning_printer(enabled: bool = True): ...
def get_error_printer(enabled: bool = True): ...
def get_critical_printer(enabled: bool = True): ...

class _Printer:
    printer_function: Any | None
    def __init__(self, enabled: bool = True, printer_function: Incomplete | None = None) -> None: ...
    def __call__(self, msg, *nargs) -> None: ...
    def __bool__(self) -> bool: ...

@contextmanager
def log_duration(printer, msg) -> Generator[None]: ...
def view_file_logs(globbed_path, loglevel_index: Incomplete | None = None) -> None:
    """View logs from one or more logfiles.

    Prints to stdout.

    Args:
        globbed_path (str): Logfiles, eg ``/foo/logs/*.log``
        loglevel_index (int): Position on each log line where log level
            (INFO etc) is expected. This is used for colorisation only, and if
            None, no colors are applied.
    """
