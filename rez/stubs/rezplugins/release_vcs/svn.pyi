from _typeshed import Incomplete
from rez.exceptions import ReleaseVCSError
from rez.release_vcs import ReleaseVCS

class SvnReleaseVCSError(ReleaseVCSError): ...

def svn_get_client(): ...
def get_last_changed_revision(client, url):
    """
    util func, get last revision of url
    """
def get_svn_login(realm, username, may_save):
    """
    provide svn with permissions. @TODO this will have to be updated to take
    into account automated releases etc.
    """

class SvnReleaseVCS(ReleaseVCS):
    @classmethod
    def name(cls) -> str: ...
    svnc: Incomplete
    this_url: str
    def __init__(self, pkg_root, vcs_root: Incomplete | None = None) -> None: ...
    @classmethod
    def is_valid_root(cls, path): ...
    @classmethod
    def search_parents_for_root(cls) -> bool: ...
    def validate_repostate(self) -> None: ...
    def _create_tag_impl(self, tag_name, message: Incomplete | None = None) -> None: ...
    def get_changelog(self, previous_revision: Incomplete | None = None, max_revisions: Incomplete | None = None) -> str: ...
    def get_tag_url(self, tag_name: Incomplete | None = None): ...
    def svn_url_exists(self, url): ...
    def get_current_revision(self): ...
    def create_release_tag(self, tag_name, message: Incomplete | None = None) -> None: ...

def register_plugin(): ...
