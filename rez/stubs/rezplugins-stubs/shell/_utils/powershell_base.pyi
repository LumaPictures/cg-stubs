from .windows import get_syspaths_from_registry as get_syspaths_from_registry, to_windows_path as to_windows_path
from _typeshed import Incomplete
from rez.shells import Shell

class PowerShellBase(Shell):
    """
    Abstract base class for PowerShell-like shells.
    """
    expand_env_vars: bool
    syspaths: Incomplete
    ENV_VAR_REGEX: Incomplete
    @staticmethod
    def _escape_quotes(s): ...
    @staticmethod
    def _escape_vars(s): ...
    @classmethod
    def startup_capabilities(cls, rcfile: bool = False, norc: bool = False, stdin: bool = False, command: bool = False): ...
    @classmethod
    def get_startup_sequence(cls, rcfile, norc, stdin, command): ...
    @classmethod
    def get_syspaths(cls): ...
    def _bind_interactive_rez(self) -> None: ...
    def _additional_commands(self, executor) -> None: ...
    def spawn_shell(self, context_file, tmpdir, rcfile: Incomplete | None = None, norc: bool = False, stdin: bool = False, command: Incomplete | None = None, env: Incomplete | None = None, quiet: bool = False, pre_command: Incomplete | None = None, add_rez: bool = True, **Popen_args): ...  # type: ignore[override]
    def get_output(self, style=...): ...
    def escape_string(self, value, is_path: bool = False): ...
    def normalize_path(self, path): ...
    def _saferefenv(self, key) -> None: ...
    def shebang(self) -> None: ...
    def setenv(self, key, value) -> None: ...
    def prependenv(self, key, value) -> None: ...
    def appendenv(self, key, value) -> None: ...
    def unsetenv(self, key) -> None: ...
    def resetenv(self, key, value, friends: Incomplete | None = None) -> None: ...
    def alias(self, key, value) -> None: ...
    def comment(self, value) -> None: ...
    def info(self, value) -> None: ...
    def error(self, value) -> None: ...
    def source(self, value) -> None: ...
    def command(self, value) -> None: ...
    @classmethod
    def get_all_key_tokens(cls, key): ...
    @classmethod
    def line_terminator(cls) -> str: ...
    @classmethod
    def join(cls, command): ...
