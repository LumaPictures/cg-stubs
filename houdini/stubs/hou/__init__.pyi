from houcppportion import *
from _typeshed import Incomplete

import typing
from typing import Any, Iterator, Optional, Sequence, Self, Tuple

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

class _NodeConnectionTupleOfTuplesGenerator:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __getitem__(self, key: int) -> Any: ...
    def __len__(self) -> int: ...

class EnumValue:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def name(self) -> str: ...
    def __lt__(self, value: EnumValue) -> bool: ...

class numericData:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

cvar: Incomplete

class attribData:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class attribType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class attribScope:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class groupScope:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class primType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmData:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmTemplateType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmLook:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmNamingScheme:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmCondType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmExtrapolate:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmBakeChop:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class segmentType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class animBarToolSize:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class slopeMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class stringParmType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class labelParmType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class dataParmType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class exprLanguage:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class scriptLanguage:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class keyHalf:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class fileType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class fileChooserMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class folderType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class menuType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class paneTabType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class stateViewerType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class paneLinkType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class networkItemType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class colorItemType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class geometryViewportType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class glShadingType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportStereoMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportHomeClipMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class geometryViewportLayout:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class geometryViewportBackgroundImageFitMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class snappingMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class snapSelectionMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class selectionMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class pickStyle:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class pickModifier:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class pickFacing:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class displaySetType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class topCookState:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class markerVisibility:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportGuide:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportGeometryInfo:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportDefaultMaterial:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportHandleHighlight:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportClosureSelection:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportGuideFont:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportVolumeQuality:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportVolumeBSplines:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportBGImageView:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportColorScheme:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportParticleDisplay:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportStandInGeometry:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportLighting:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportTransparency:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportShadowQuality:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportDOFBokeh:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportFogHeightMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportFogQuality:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportMaterialUpdate:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportAgentBoneDeform:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportAgentWireframe:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportPackedBoxMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportGridRuler:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportTextureDepth:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class boundaryDisplay:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class flipbookObjectType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class groupListType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class geometryType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class connectivityType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class severityType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class confirmType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class positionType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class componentLoopType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class flipbookAntialias:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class flipbookMotionBlurBias:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parameterInterfaceTabType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class shaderType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class rampBasis:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class rampParmType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class colorType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class nodeTypeSource:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class fieldType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class renderMethod:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class updateMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class licenseCategoryType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class hdaLicenseType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class orientUpAxis:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class handleOrientToNormalAxis:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class nodeEventType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class hdaEventType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class hipFileEventType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class appearanceChangeType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class ropRenderEventType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class imageDepth:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class playMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class playbarEvent:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class channelListChangedReason:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class bookmarkEvent:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class perfMonTimeFormat:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class perfMonTimeUnit:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class perfMonObjectView:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class compressionType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class nodeTypeFilter:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class vdbData:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class lopViewportOverridesLayer:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class channelEditorMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class vopParmGenType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class stateGenerateMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class scenePrimMask:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportVisualizerCategory:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportVisualizerScope:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class viewportVisualizerEventType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class nodeFlag:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class nodeFootprint:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class fbxCompatibilityMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class fbxMaterialMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class saveMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class radialItemType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class radialItemLocation:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class valueLadderType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class valueLadderDataType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class promptMessageType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawableDisplayMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class scaleInheritanceMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class uiEventValueType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class uiEventReason:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawablePrimitive:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class resourceEventMessage:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class snappingPriority:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class triggerSelectorAction:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawableGeometryType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawableTextOrigin:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawableGeometryFaceStyle:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawableGeometryLineStyle:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawableGeometryPointStyle:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawableRampClamp:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class drawableHighlightMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class secureSelectionOption:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class resourceType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class geometryViewportEvent:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class sceneViewerEvent:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class hudInfoState:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class hudPanel:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class scrollPosition:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmFilterMode:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class parmFilterCriteria:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class _ik_targetType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class agentShapeDeformerType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class optionalBool:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class videoDriver:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class SystemExit(Exception):
    thisown: Incomplete
    def __init__(self, exit_code: int) -> None: ...
    def code(self) -> int: ...
    __swig_destroy__: Incomplete

class Error(Exception):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    def instanceMessage(self) -> str: ...

class NotAvailable(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class ObjectWasDeleted(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class InvalidInput(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class InvalidOutput(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class InvalidSize(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class OperationFailed(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class InvalidNodeType(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class InitScriptFailed(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class MatchDefinitionError(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class PermissionError(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    def instanceMessage(self) -> str: ...
    __swig_destroy__: Incomplete

class GeometryPermissionError(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class KeyframeValueNotSet(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class OperationInterrupted(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class LoadWarning(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class NodeError(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class NodeWarning(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class NameConflict(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class TypeConflict(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class StateNotRegistered(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class HandleNotRegistered(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class LicenseError(Error):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class InvalidGeometry(OperationFailed):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def exceptionTypeName(self) -> str: ...
    def description(self) -> str: ...
    __swig_destroy__: Incomplete

class NetworkItem:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def networkItemType(self) -> EnumValue: ...

class NetworkMovableItem(NetworkItem):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def name(self) -> str: ...
    def setName(self, name: str, unique_name: bool = False) -> None: ...
    def digitsInName(self) -> int: ...
    def path(self) -> str: ...
    def relativePathTo(self, base_item: NetworkMovableItem) -> str: ...
    def isSelected(self) -> bool: ...
    def setSelected(self, on: bool, clear_all_selected: bool = False, show_asset_if_selected: bool = False) -> None: ...
    def color(self) -> Color: ...
    def setColor(self, color: Color) -> None: ...
    def size(self) -> Vector2: ...
    def position(self) -> Vector2: ...
    def setPosition(self, position: Sequence[float]) -> None: ...
    def move(self, amount: Sequence[float]) -> None: ...
    def parent(self) -> Node: ...
    def parentNetworkBox(self) -> NetworkBox: ...
    def sessionId(self) -> int: ...

class NetworkBox(NetworkMovableItem):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def comment(self) -> str: ...
    def setComment(self, comment: str) -> None: ...
    def autoFit(self) -> bool: ...
    def setAutoFit(self, auto_fit: bool) -> None: ...
    def setBounds(self, bounds: BoundingRect) -> None: ...
    def setSize(self, size: Sequence[float]) -> None: ...
    def resize(self, amount: Sequence[float]) -> None: ...
    def fitAroundContents(self) -> None: ...
    def minimizedSize(self) -> Vector2: ...
    def restoredSize(self) -> Vector2: ...
    def isMinimized(self) -> bool: ...
    def setMinimized(self, on: bool) -> None: ...
    def alpha(self) -> float: ...
    def setAlpha(self, alpha: float) -> None: ...
    def nodes(self, recurse: bool = True) -> Tuple[Node, ...]: ...
    def addNode(self, node: Node) -> None: ...
    def removeNode(self, node: Node) -> None: ...
    def removeAllNodes(self) -> None: ...
    def networkBoxes(self, recurse: bool = True) -> Tuple[NetworkBox, ...]: ...
    def addNetworkBox(self, networkbox: NetworkBox) -> None: ...
    def removeNetworkBox(self, networkbox: NetworkBox) -> None: ...
    def stickyNotes(self, recurse: bool = True) -> Tuple[StickyNote, ...]: ...
    def addStickyNote(self, stickynote: StickyNote) -> None: ...
    def removeStickyNote(self, stickynote: StickyNote) -> None: ...
    def subnetIndirectInputs(self, recurse: bool = True) -> Tuple[SubnetIndirectInput, ...]: ...
    def addSubnetIndirectInput(self, indirect: SubnetIndirectInput) -> None: ...
    def removeSubnetIndirectInput(self, indirect: SubnetIndirectInput) -> None: ...
    def items(self, recurse: bool = True) -> Tuple[NetworkMovableItem, ...]: ...
    def addItem(self, item: NetworkMovableItem) -> None: ...
    def removeItem(self, item: NetworkMovableItem) -> None: ...
    def removeAllItems(self) -> None: ...
    def destroy(self, destroy_contents: bool = False) -> None: ...
    def asCode(self, brief: bool = False, recurse: bool = False, save_box_contents: bool = False, save_channels_only: bool = False, save_creation_commands: bool = True, save_keys_in_frames: bool = False, save_parm_values_only: bool = False, save_spare_parms: bool = False, save_netbox_membership: bool = True, function_name: Optional[str] = None) -> str: ...

class OpNetworkBox(NetworkBox):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...

class StickyNote(NetworkMovableItem):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def text(self) -> str: ...
    def setText(self, new_text: str) -> None: ...
    def textSize(self) -> float: ...
    def setTextSize(self, size: float) -> None: ...
    def textColor(self) -> Color: ...
    def setTextColor(self, color: Color) -> None: ...
    def drawBackground(self) -> bool: ...
    def setDrawBackground(self, on: bool) -> None: ...
    def setBounds(self, bounds: BoundingRect) -> None: ...
    def setSize(self, size: Sequence[float]) -> None: ...
    def resize(self, amount: Sequence[float]) -> None: ...
    def minimizedSize(self) -> Vector2: ...
    def restoredSize(self) -> Vector2: ...
    def isMinimized(self) -> bool: ...
    def setMinimized(self, on: bool) -> None: ...
    def destroy(self) -> None: ...

class ApexStickyNote(StickyNote):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...

class OpStickyNote(StickyNote):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def asCode(self, brief: bool = False, recurse: bool = False, save_box_contents: bool = False, save_channels_only: bool = False, save_creation_commands: bool = True, save_keys_in_frames: bool = False, save_parm_values_only: bool = False, save_spare_parms: bool = False, save_box_membership: bool = True, function_name: Optional[str] = None) -> str: ...

class Node(NetworkMovableItem):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def isNetwork(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def type(self) -> NodeType: ...
    def childTypeCategory(self) -> NodeTypeCategory: ...
    def isFlagReadable(self, flag: EnumValue) -> bool: ...
    def isFlagWritable(self, flag: EnumValue) -> bool: ...
    def isGenericFlagSet(self, flag: EnumValue) -> bool: ...
    def setGenericFlag(self, flag: EnumValue, value: bool) -> None: ...
    def isDisplayDescriptiveNameFlagSet(self) -> bool: ...
    def setDisplayDescriptiveNameFlag(self, on: bool) -> None: ...
    def errors(self) -> Tuple[str, ...]: ...
    def warnings(self) -> Tuple[str, ...]: ...
    def messages(self) -> Tuple[str, ...]: ...
    def node(self, node_path: str) -> Node: ...
    def nodes(self, node_paths: Sequence[str]) -> Tuple[Node, ...]: ...
    def item(self, item_path: str) -> NetworkMovableItem: ...
    def items(self, item_paths: Sequence[str]) -> Tuple[NetworkMovableItem, ...]: ...
    def glob(self, pattern: str, ignore_case: bool = False) -> Tuple[Node, ...]: ...
    def recursiveGlob(self, *args, **kwargs) -> Tuple[Node, ...]: ...
    def createNode(self, node_type_name: str, node_name: Optional[str] = None, run_init_scripts: bool = True, load_contents: bool = True, exact_type_name: bool = False, force_valid_node_name: bool = False) -> Node: ...
    def inputIndex(self, input_name: str) -> int: ...
    def outputIndex(self, output_name: str) -> int: ...
    def setInput(self, input_index: int, item_to_become_input: NetworkMovableItem, output_index: int = 0) -> None: ...
    def setNamedInput(self, *args) -> None: ...
    def setFirstInput(self, item_to_become_input: NetworkMovableItem, output_index: int = 0) -> None: ...
    def setNextInput(self, item_to_become_input: NetworkMovableItem, output_index: int = 0, unordered_only: bool = False) -> None: ...
    def insertInput(self, input_index: int, item_to_become_input: NetworkMovableItem, output_index: int = 0) -> None: ...
    def numOrderedInputs(self) -> int: ...
    def inputs(self) -> Tuple[Node, ...]: ...
    def input(self, input_index: int) -> Node: ...
    def inputFollowingOutputs(self, input_index: int) -> Node: ...
    def inputConnections(self) -> Tuple[NodeConnection, ...]: ...
    def inputConnectors(self) -> Iterator[Tuple[NodeConnection, ...]]: ...
    def inputAncestors(self, include_ref_inputs: bool = True, follow_subnets: bool = False, only_used_inputs: bool = False) -> Tuple[Node, ...]: ...
    def inputNames(self) -> Tuple[str, ...]: ...
    def inputLabels(self) -> Tuple[str, ...]: ...
    def editableInputStrings(self, input_index: int) -> dict[str, str]: ...
    def editableInputString(self, input_index: int, key: str) -> str: ...
    def setEditableInputString(self, input_index: int, key: str, value: str) -> None: ...
    def outputNames(self) -> Tuple[str, ...]: ...
    def outputLabels(self) -> Tuple[str, ...]: ...
    def outputs(self) -> Tuple[Node, ...]: ...
    def outputConnections(self) -> Tuple[NodeConnection, ...]: ...
    def outputConnectors(self) -> Iterator[Tuple[NodeConnection, ...]]: ...
    def children(self) -> Tuple[Node, ...]: ...
    def allSubChildren(self, top_down: bool = True, recurse_in_locked_nodes: bool = True, sync_delayed_definition: bool = False) -> Tuple[Node, ...]: ...
    def selectedChildren(self, include_hidden: bool = False, include_hidden_support_nodes: bool = False) -> Tuple[Node, ...]: ...
    def allItems(self) -> Tuple[NetworkMovableItem, ...]: ...
    def allSubItems(self, top_down: bool = True, recurse_in_locked_nodes: bool = True, sync_delayed_definition: bool = False) -> Tuple[NetworkMovableItem, ...]: ...
    def selectedItems(self, include_hidden: bool = False, include_hidden_support_nodes: bool = False) -> Tuple[NetworkMovableItem, ...]: ...
    def numItems(self, item_type: Optional[EnumValue] = None, selected_only: bool = False, include_hidden: bool = False) -> int: ...
    def deleteItems(self, *args, **kwargs) -> None: ...
    def copyItemsToClipboard(self, *args) -> None: ...
    def pasteItemsFromClipboard(self, position: Optional[Vector2] = None) -> None: ...
    def copyItems(self, items: Sequence[NetworkMovableItem], channel_reference_originals: bool = False, relative_references: bool = True, connect_outputs_to_multi_inputs: bool = False) -> Tuple[NetworkMovableItem, ...]: ...
    def creator(self) -> Node: ...
    def moveToGoodPosition(self, relative_to_inputs: bool = True, move_inputs: bool = True, move_outputs: bool = True, move_unconnected: bool = True) -> Vector2: ...
    def layoutChildren(self, *args, **kwargs) -> None: ...
    def isCurrent(self) -> bool: ...
    def setCurrent(self, on: bool, clear_all_selected: bool = False) -> None: ...
    def isHidden(self) -> bool: ...
    def hide(self, on: bool) -> None: ...
    def comment(self) -> str: ...
    def setComment(self, comment: str) -> None: ...
    def appendComment(self, comment: str) -> None: ...
    def destroy(self, disable_safety_checks: bool = False) -> None: ...
    def networkBoxes(self) -> Tuple[NetworkBox, ...]: ...
    def iterNetworkBoxes(self) -> Iterator[NetworkBox]: ...
    def createNetworkBox(self, name: Optional[str] = None) -> NetworkBox: ...
    def copyNetworkBox(self, network_box_to_copy: NetworkBox, new_name: Optional[str] = None, channel_reference_original: bool = False) -> NetworkBox: ...
    def findNetworkBox(self, name: str) -> NetworkBox: ...
    def findNetworkBoxes(self, pattern: str) -> Tuple[NetworkBox, ...]: ...
    def networkDots(self) -> Tuple[NetworkDot, ...]: ...
    def createNetworkDot(self) -> NetworkDot: ...
    def canCreateDigitalAsset(self) -> bool: ...
    def collapseIntoSubnet(self, child_items: Sequence[NetworkMovableItem], subnet_name: Optional[str] = None, subnet_type: Optional[str] = None) -> Node: ...
    def extractAndDelete(self) -> Tuple[NetworkMovableItem, ...]: ...
    def indirectInputs(self) -> Tuple[SubnetIndirectInput, ...]: ...
    def subnetOutputs(self) -> Tuple[Node, ...]: ...
    def isSubNetwork(self) -> bool: ...
    def setUserData(self, name: str, value: str) -> None: ...
    def destroyUserData(self, name: str, must_exist: bool = True) -> None: ...
    def clearUserDataDict(self) -> None: ...
    def userDataDict(self) -> dict[str, str]: ...
    def userData(self, name: str) -> Any: ...
    def createStickyNote(self, name: Optional[str] = None) -> StickyNote: ...
    def stickyNotes(self) -> Tuple[StickyNote, ...]: ...
    def iterStickyNotes(self) -> Iterator[StickyNote]: ...
    def copyStickyNote(self, sticky_note_to_copy: StickyNote, new_name: Optional[str] = None) -> StickyNote: ...
    def findStickyNote(self, name: str) -> StickyNote: ...
    def findStickyNotes(self, pattern: str) -> Tuple[StickyNote, ...]: ...

class ApexNode(Node):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def inputName(self, input_index: int) -> str: ...
    def setInputName(self, input_index: int, name: str) -> None: ...
    def outputName(self, output_index: int) -> str: ...
    def setOutputName(self, output_index: int, name: str) -> None: ...
    def inputDataTypes(self) -> Tuple[str, ...]: ...
    def outputDataTypes(self) -> Tuple[str, ...]: ...
    def tags(self) -> Tuple[str, ...]: ...
    def setTags(self, tags: Sequence[str]) -> None: ...
    def isSubgraphAsset(self) -> bool: ...

class OpNode(Node):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def creatorState(self) -> str: ...
    def setCreatorState(self, state: str) -> None: ...
    def isBuiltExplicitly(self) -> bool: ...
    def setBuiltExplicitly(self, built_explicitly: bool) -> None: ...
    def expressionLanguage(self) -> EnumValue: ...
    def setExpressionLanguage(self, language: EnumValue) -> None: ...
    def parm(self, parm_path: str) -> Parm: ...
    def parmTuple(self, parm_path: str) -> ParmTuple: ...
    def globParms(self, pattern: str, ignore_case: bool = False, search_label: bool = False, single_pattern: bool = False) -> Tuple[Parm, ...]: ...
    def parms(self) -> Tuple[Parm, ...]: ...
    def parmsReferencingThis(self) -> Tuple[Parm, ...]: ...
    def parmTuples(self) -> Tuple[ParmTuple, ...]: ...
    def spareParms(self) -> Tuple[Parm, ...]: ...
    def removeSpareParms(self) -> None: ...
    def syncNodeVersionIfNeeded(self, from_version: str) -> None: ...
    def setParmTemplateGroup(self, parm_template_group: ParmTemplateGroup, rename_conflicting_parms: bool = False) -> None: ...
    def parmTuplesInFolder(self, folder_names: Sequence[str]) -> Tuple[ParmTuple, ...]: ...
    def parmsInFolder(self, folder_names: Sequence[str]) -> Tuple[Parm, ...]: ...
    def parmTemplateGroup(self) -> ParmTemplateGroup: ...
    def localVariables(self) -> Tuple[str, ...]: ...
    def localAttributes(self) -> Tuple[str, ...]: ...
    def references(self, include_children: bool = True) -> Tuple[Node, ...]: ...
    def dependents(self, include_children: bool = True) -> Tuple[Node, ...]: ...
    def fileReferences(self, *args, **kwargs) -> Tuple[tuple[Parm, str], ...]: ...
    def isTimeDependent(self) -> bool: ...
    def allowEditingOfContents(self, propagate: bool = False) -> None: ...
    def matchCurrentDefinition(self) -> None: ...
    def matchesCurrentDefinition(self) -> bool: ...
    def syncDelayedDefinition(self) -> None: ...
    def isDelayedDefinition(self) -> bool: ...
    def parmAliases(self, recurse: bool = False) -> dict[Parm, str]: ...
    def clearParmAliases(self) -> None: ...
    def createCompiledDigitalAsset(self, name: Optional[str] = None, hda_file_name: Optional[str] = None, description: Optional[str] = None) -> None: ...
    def isInsideLockedHDA(self) -> bool: ...
    def isEditableInsideLockedHDA(self) -> bool: ...
    def isLockedHDA(self) -> bool: ...
    def isCompiled(self) -> bool: ...
    def isMaterialManager(self) -> bool: ...
    def outputForViewFlag(self) -> int: ...
    def setOutputForViewFlag(self, output: int) -> None: ...
    def hdaModule(self) -> HDAModule: ...
    def hdaViewerStateModule(self) -> HDAViewerStateModule: ...
    def hdaViewerHandleModule(self) -> HDAViewerHandleModule: ...
    def hm(self) -> HDAModule: ...
    def createDigitalAsset(self, name: Optional[str] = None, hda_file_name: Optional[str] = None, description: Optional[str] = None, min_num_inputs: int = 0, max_num_inputs: int = 0, compress_contents: bool = False, comment: Optional[str] = None, version: Optional[str] = None, save_as_embedded: bool = False, ignore_external_references: bool = False, compile_asset: bool = False, change_node_type: bool = True, create_backup: bool = True, install_path: Optional[str] = None) -> Node: ...
    def changeNodeType(self, new_node_type: str, keep_name: bool = True, keep_parms: bool = True, keep_network_contents: bool = True, force_change_on_node_type_match: bool = False) -> Node: ...
    def selectNextVisibleWorkItem(self) -> None: ...
    def selectPreviousVisibleWorkItem(self) -> None: ...
    def deselectWorkItem(self) -> None: ...
    def setCurrentTOPPage(self, page: int) -> None: ...
    def canGenerateCookCode(self, check_parent: bool = False, check_auto_shader: bool = True) -> bool: ...
    def cookCodeGeneratorNode(self) -> Node: ...
    def cookCodeLanguage(self) -> str: ...
    def supportsMultiCookCodeContexts(self) -> bool: ...
    def saveCookCodeToFile(self, file_name: str, skip_header: bool = False, context_name: Optional[str] = None) -> None: ...
    def saveCodeToFile(self, file_name: str, skip_header: bool = False, context_name: Optional[str] = None) -> None: ...
    def saveCompiledCookCodeToFile(self, file_name: str, context_name: Optional[str] = None) -> None: ...
    def saveToCompiledVexFile(self, file_name: str, context_name: Optional[str] = None) -> None: ...
    def cook(self, *args, **kwargs) -> None: ...
    def needsToCook(self, *args) -> bool: ...
    def cookCount(self) -> int: ...
    def cookPathNodes(self) -> Tuple[Node, ...]: ...
    def infoTree(self, verbose: bool = False, debug: bool = False, output_index: int = 0, force_cook: bool = False) -> NodeInfoTree: ...
    def updateParmStates(self) -> None: ...
    def runInitScripts(self) -> None: ...
    def deleteScript(self) -> str: ...
    def setDeleteScript(self, *args) -> None: ...
    def addNodeGroup(self, name: Optional[str] = None) -> NodeGroup: ...
    def nodeGroups(self) -> Tuple[NodeGroup, ...]: ...
    def nodeGroup(self, name: str) -> NodeGroup: ...
    def motionEffectsNetworkPath(self) -> str: ...
    def findOrCreateMotionEffectsNetwork(self, create: bool = True) -> Node: ...
    def createOrMoveVisualizer(self, output_index: int) -> None: ...
    def saveItemsToFile(self, items: Sequence[NetworkMovableItem], file_name: str, save_hda_fallbacks: bool = False) -> None: ...
    def loadItemsFromFile(self, file_name: str, ignore_load_warnings: bool = False) -> None: ...
    def removeAllEventCallbacks(self) -> None: ...
    def stampValue(self, *args) -> str: ...
    def asCode(self, brief: bool = False, recurse: bool = False, save_channels_only: bool = False, save_creation_commands: bool = True, save_keys_in_frames: bool = False, save_outgoing_wires: bool = False, save_parm_values_only: bool = False, save_spare_parms: bool = True, save_box_membership: bool = True, function_name: Optional[str] = None) -> str: ...
    def dataBlockKeys(self, blocktype: Optional[str] = None) -> Tuple[str, ...]: ...
    def dataBlockType(self, key: str) -> str: ...
    def dataBlock(self, key: str) -> bytes: ...
    def setDataBlock(self, key: str, data: bytes, block_type: Optional[str] = None) -> None: ...
    def removeDataBlock(self, key: str) -> None: ...
    def destroyCachedUserData(self, name: str, must_exist: bool = True) -> None: ...
    def clearCachedUserDataDict(self) -> None: ...
    def cachedUserDataDict(self) -> dict[str, PY_OpaqueObject]: ...
    def setCachedUserData(self, name: str, value: Any) -> None: ...
    def cachedUserData(self, name: str) -> Any: ...
    def simulation(self) -> DopSimulation: ...
    def findNodesThatProcessedObject(self, dop_object: DopObject) -> Tuple[Node, ...]: ...
    def addError(self, *args, **kwargs) -> None: ...
    def addWarning(self, message: Optional[str] = None) -> None: ...
    def addMessage(self, message: Optional[str] = None) -> None: ...
    def lastCookTime(self) -> float: ...
    def evalParm(self, parm_path: str) -> Any: ...
    def evalParmTuple(self, parm_path: str) -> Any: ...
    def addEventCallback(self, event_types: Sequence[EnumValue], callback: Any) -> None: ...
    def addParmCallback(self, callback: Any, names: Sequence[str]) -> None: ...
    def removeEventCallback(self, event_types: Sequence[EnumValue], callback: Any) -> None: ...
    def eventCallbacks(self) -> Tuple[tuple[Tuple[EnumValue, ...], Any], ...]: ...

class NodeGroup:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def name(self) -> str: ...
    def nodes(self) -> Tuple[Node, ...]: ...
    def parent(self) -> Node: ...
    def addNode(self, node: Node) -> None: ...
    def removeNode(self, node: Node) -> None: ...
    def clear(self) -> None: ...
    def destroy(self) -> None: ...
    def asCode(self, save_creation_commands: bool = True, save_node_memberships: bool = True, function_name: Optional[str] = None) -> str: ...

class ObjNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def origin(self) -> Vector3: ...
    def localTransform(self) -> Matrix4: ...
    def localTransformAtTime(self, time: float) -> Matrix4: ...
    def worldTransform(self) -> Matrix4: ...
    def worldTransformAtTime(self, time: float) -> Matrix4: ...
    def setWorldTransform(self, matrix: Matrix4, fail_on_locked_parms: bool = False) -> None: ...
    def setCookTransform(self, matrix: Matrix4) -> None: ...
    def parmTransform(self) -> Matrix4: ...
    def setParmTransform(self, matrix: Matrix4, fail_on_locked_parms: bool = False) -> None: ...
    def parmPivotTransform(self) -> Matrix4: ...
    def setParmPivotTransform(self, matrix: Matrix4, fail_on_locked_parms: bool = False) -> None: ...
    def preTransform(self) -> Matrix4: ...
    def setPreTransform(self, matrix: Matrix4) -> None: ...
    def movePreTransformIntoParmTransform(self) -> None: ...
    def moveParmTransformIntoPreTransform(self) -> None: ...
    def moveParmTranslateIntoPreTransform(self) -> None: ...
    def moveParmRotateIntoPreTransform(self) -> None: ...
    def moveParmScaleIntoPreTransform(self) -> None: ...
    def parentAndSubnetTransform(self) -> Matrix4: ...
    def getTransformToNode(self, obj_node: ObjNode) -> Matrix4: ...
    def getTransformFromPointToPoint(self, pos3: Vector3, other_node: ObjNode, other_pos3: Vector3) -> Matrix4: ...
    def buildLookatRotation(self, to_node: ObjNode, up_vector: Optional[Vector3] = None) -> Matrix4: ...
    def isObjectDisplayed(self) -> bool: ...
    def isObjectDisplayedAtFrame(self, frame: float) -> bool: ...
    def isDisplayFlagSet(self) -> bool: ...
    def setDisplayFlag(self, on: bool) -> None: ...
    def isSelectableInViewport(self) -> bool: ...
    def setSelectableInViewport(self, on: bool) -> None: ...
    def isShowingOrigin(self) -> bool: ...
    def showOrigin(self, on: bool) -> None: ...
    def isUsingXray(self) -> bool: ...
    def useXray(self, on: bool) -> None: ...
    def displayNode(self) -> Node: ...
    def renderNode(self) -> Node: ...
    def combine(self, nodes: Sequence[Node]) -> None: ...
    def material(self, *args, **kwargs) -> None: ...

class Prim:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def number(self) -> int: ...
    def type(self) -> EnumValue: ...
    def attribType(self) -> EnumValue: ...
    def vertices(self) -> Iterator[Vertex]: ...
    def numVertices(self) -> int: ...
    def edges(self) -> Tuple[Edge, ...]: ...
    def numEdges(self) -> int: ...
    def floatAttribValue(self, *args) -> float: ...
    def floatListAttribValue(self, *args) -> Tuple[float, ...]: ...
    def intAttribValue(self, *args) -> int: ...
    def intListAttribValue(self, *args) -> Tuple[int, ...]: ...
    def stringAttribValue(self, *args) -> str: ...
    def stringListAttribValue(self, *args) -> Tuple[str, ...]: ...
    def dictAttribValue(self, *args) -> dict[str, Any]: ...
    def dictListAttribValue(self, *args) -> Tuple[dict[str, Any], ...]: ...
    def setAttribValue(self, *args) -> None: ...
    def intrinsicNames(self) -> Tuple[str, ...]: ...
    def intrinsicValue(self, intrinsic_name: str) -> Any: ...
    def intrinsicSize(self, intrinsic_name: str) -> int: ...
    def intrinsicReadOnly(self, intrinsic_name: str) -> bool: ...
    def setIntrinsicValue(self, *args) -> None: ...
    def attribValue(self, *args) -> Any: ...
    def positionAtInterior(self, u: float, v: float, w: float = 0.0) -> Vector3: ...
    def attribValueAtInterior(self, *args) -> Any: ...
    def boundingBox(self) -> BoundingBox: ...
    def nearestToPosition(self, position: Sequence[float]) -> Tuple[float, float, float]: ...
    def groups(self) -> Tuple[PrimGroup, ...]: ...
    def primuvConvert(self, *args) -> Vector2: ...
    def primuConvert(self, *args) -> float: ...

class Face(Prim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isClosed(self) -> bool: ...
    def closed(self) -> bool: ...
    def setIsClosed(self, on: bool) -> None: ...
    def normal(self) -> Vector3: ...
    def positionAt(self, u: float) -> Vector3: ...
    def attribValueAt(self, *args) -> Any: ...
    def vertex(self, index: int) -> Vertex: ...
    def addVertex(self, point: Point) -> Vertex: ...
    def arcLength(self, u_start: float, u_stop: float, divs: int = 10) -> float: ...

class PackedPrim(Prim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def transform(self) -> Matrix3: ...
    def fullTransform(self) -> Matrix4: ...
    def setTransform(self, transform: Matrix4) -> None: ...
    def vertex(self, index: int) -> Vertex: ...

class BaseKeyframe:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def evaluatedType(self) -> EnumValue: ...
    def setExpression(self, expression: str, language: Optional[EnumValue] = None) -> None: ...
    def expression(self) -> str: ...
    def isExpressionSet(self) -> bool: ...
    def expressionLanguage(self) -> EnumValue: ...
    def isExpressionLanguageSet(self) -> bool: ...
    def setTime(self, time: float) -> None: ...
    def isTimeSet(self) -> bool: ...
    def time(self) -> float: ...
    def setFrame(self, frame: float) -> None: ...
    def frame(self) -> float: ...
    def asCode(self, brief: bool = False, save_keys_in_frames: bool = False, function_name: Optional[str] = None) -> str: ...

class ChannelGraphSelection:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def parm(self) -> Parm: ...
    def path(self) -> str: ...
    def keyframes(self) -> Tuple[BaseKeyframe, ...]: ...
    def flags(self) -> Tuple[int, ...]: ...
    def setFlags(self, flags: Sequence[int]) -> None: ...
    def values(self) -> Tuple[int, ...]: ...
    def timeMarks(self) -> Tuple[int, ...]: ...
    def slopes(self) -> Tuple[int, ...]: ...
    def accelerations(self) -> Tuple[int, ...]: ...
    def segments(self) -> Tuple[int, ...]: ...
    def inValues(self) -> Tuple[int, ...]: ...
    def inSlopes(self) -> Tuple[int, ...]: ...
    def inAccelerations(self) -> Tuple[int, ...]: ...
    def outValues(self) -> Tuple[int, ...]: ...
    def outSlopes(self) -> Tuple[int, ...]: ...
    def outAccelerations(self) -> Tuple[int, ...]: ...
    def selectValues(self, sel: Sequence[int], _in: bool = True, out: bool = True) -> None: ...
    def selectTimeMarks(self, sel: Sequence[int]) -> None: ...
    def selectSlopes(self, sel: Sequence[int], _in: bool = True, out: bool = True) -> None: ...
    def selectAccelerations(self, sel: Sequence[int], _in: bool = True, out: bool = True) -> None: ...
    def selectSegments(self, sel: Sequence[int]) -> None: ...
    def deselectValues(self, sel: Sequence[int], _in: bool = True, out: bool = True) -> None: ...
    def deselectTimeMarks(self, sel: Sequence[int]) -> None: ...
    def deselectSlopes(self, sel: Sequence[int], _in: bool = True, out: bool = True) -> None: ...
    def deselectAccelerations(self, sel: Sequence[int], _in: bool = True, out: bool = True) -> None: ...
    def deselectSegments(self, sel: Sequence[int]) -> None: ...

class NodeType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def category(self) -> NodeTypeCategory: ...
    def name(self) -> str: ...
    def nameComponents(self) -> Tuple[str, ...]: ...
    def description(self) -> str: ...
    def nameWithCategory(self) -> str: ...
    def namespaceOrder(self) -> Tuple[str, ...]: ...
    def icon(self) -> str: ...
    def minNumInputs(self) -> int: ...
    def maxNumInputs(self) -> int: ...
    def maxNumOutputs(self) -> int: ...
    def isGenerator(self) -> bool: ...
    def isManager(self, include_management_types: bool = True) -> bool: ...
    def hasUnorderedInputs(self) -> bool: ...
    def hasEditableInputData(self) -> bool: ...
    def parmTemplates(self) -> Tuple[ParmTemplate, ...]: ...
    def parmTemplateGroup(self) -> ParmTemplateGroup: ...
    def hasPermanentUserDefaults(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def areContentsViewable(self) -> bool: ...
    def containedNodeTypes(self) -> Tuple[str, ...]: ...
    def childTypeCategory(self) -> NodeTypeCategory: ...
    def helpUrl(self) -> str: ...
    def defaultHelpUrl(self) -> str: ...
    def embeddedHelp(self) -> str: ...
    def defaultShape(self) -> str: ...
    def setDefaultShape(self, shape: str) -> None: ...
    def defaultColor(self) -> Color: ...
    def setDefaultColor(self, color: Color) -> None: ...

class ApexNodeType(NodeType):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def hidden(self) -> bool: ...
    def deprecated(self) -> bool: ...
    def definition(self) -> HDADefinition: ...

class OpNodeType(NodeType):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def sectionData(self, name: str) -> str: ...
    def binarySectionData(self, name: str) -> bytes: ...
    def hasSectionData(self, name: str) -> bool: ...
    def source(self) -> EnumValue: ...
    def sourcePath(self) -> str: ...
    def sourceNetwork(self) -> Node: ...
    def definition(self) -> HDADefinition: ...
    def allInstalledDefinitions(self) -> Tuple[HDADefinition, ...]: ...
    def uninstallFromPath(self, path: str) -> None: ...
    def hdaModule(self) -> HDAModule: ...
    def hdaViewerStateModule(self) -> HDAViewerStateModule: ...
    def hdaViewerHandleModule(self) -> HDAViewerHandleModule: ...
    def aliases(self) -> Tuple[str, ...]: ...
    def addAlias(self, alias: str) -> None: ...
    def removeAlias(self, alias: str) -> None: ...
    def hidden(self) -> bool: ...
    def setHidden(self, hidden: bool) -> None: ...
    def deprecated(self) -> bool: ...
    def deprecationInfo(self) -> dict[str, Any]: ...
    def instances(self) -> Tuple[Node, ...]: ...
    def defaultState(self) -> str: ...
    def generatorFlag(self) -> bool: ...
    def managerFlag(self) -> bool: ...
    def unorderedInputsFlag(self) -> bool: ...

class NodeTypeCategory:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def name(self) -> str: ...
    def typeName(self) -> str: ...
    def label(self) -> str: ...
    def nodeTypes(self) -> dict[str, NodeType]: ...
    def nodeType(self, type_name: str) -> NodeType: ...
    def hasSubNetworkType(self) -> bool: ...
    def defaultShape(self) -> str: ...
    def clearDefaultShapes(self) -> None: ...
    def setDefaultShape(self, shape: str) -> None: ...
    def defaultColor(self) -> Color: ...
    def clearDefaultColors(self) -> None: ...
    def setDefaultColor(self, color: Color) -> None: ...
    def defaultWireStyle(self) -> str: ...
    def setDefaultWireStyle(self, wirestyle: str) -> None: ...

class ApexNodeTypeCategory(NodeTypeCategory):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...

class OpNodeTypeCategory(NodeTypeCategory):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def createDigitalAsset(self, name: Optional[str] = None, hda_file_name: Optional[str] = None, description: Optional[str] = None) -> NodeType: ...
    def nodeVerbs(self) -> dict[str, SopVerb]: ...
    def nodeVerb(self, verb_name: str) -> SopVerb: ...
    def viewerStates(self, viewer_type: EnumValue) -> Tuple[ViewerState, ...]: ...
    def loadDSO(self, dso_path: str) -> None: ...

class ParmTemplate:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def clone(self) -> ParmTemplate: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def label(self) -> str: ...
    def setLabel(self, label: str) -> None: ...
    def type(self) -> EnumValue: ...
    def dataType(self) -> EnumValue: ...
    def look(self) -> EnumValue: ...
    def setLook(self, look: EnumValue) -> None: ...
    def namingScheme(self) -> EnumValue: ...
    def setNamingScheme(self, naming_scheme: EnumValue) -> None: ...
    def numComponents(self) -> int: ...
    def setNumComponents(self, num_components: int) -> None: ...
    def disableWhen(self) -> str: ...
    def setDisableWhen(self, disable_when: str) -> None: ...
    def conditionals(self) -> dict[EnumValue, str]: ...
    def setConditional(self, cond_type: EnumValue, conditional: str) -> None: ...
    def isHidden(self) -> bool: ...
    def hide(self, on: bool) -> None: ...
    def isLabelHidden(self) -> bool: ...
    def hideLabel(self, on: bool) -> None: ...
    def joinsWithNext(self) -> bool: ...
    def setJoinWithNext(self, on: bool) -> None: ...
    def joinWithNext(self) -> bool: ...
    def help(self) -> str: ...
    def setHelp(self, help: str) -> None: ...
    def scriptCallback(self) -> str: ...
    def setScriptCallback(self, script_callback: str) -> None: ...
    def scriptCallbackLanguage(self) -> EnumValue: ...
    def setScriptCallbackLanguage(self, script_callback_language: EnumValue) -> None: ...
    def tags(self) -> dict[str, str]: ...
    def setTags(self, tags: dict[str, str]) -> None: ...
    def asCode(self, function_name: Optional[str] = None, variable_name: Optional[str] = None) -> str: ...

class ParmTemplateGroup:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def find(self, name: str) -> ParmTemplate: ...
    def findIndices(self, *args) -> Tuple[int, ...]: ...
    def findFolder(self, *args) -> ParmTemplate: ...
    def findIndicesForFolder(self, *args) -> Tuple[int, ...]: ...
    def entryAtIndices(self, indices: Sequence[int]) -> ParmTemplate: ...
    def containingFolderIndices(self, *args) -> Tuple[int, ...]: ...
    def containingFolder(self, *args) -> ParmTemplate: ...
    def entries(self) -> Tuple[ParmTemplate, ...]: ...
    def parmTemplates(self) -> Tuple[ParmTemplate, ...]: ...
    def entriesWithoutFolders(self) -> Tuple[ParmTemplate, ...]: ...
    def replace(self, *args) -> None: ...
    def insertBefore(self, *args) -> None: ...
    def insertAfter(self, *args) -> None: ...
    def append(self, parm_template: ParmTemplate) -> None: ...
    def appendToFolder(self, *args) -> None: ...
    def addParmTemplate(self, parm_template: ParmTemplate) -> None: ...
    def remove(self, *args) -> None: ...
    def hide(self, *args) -> None: ...
    def hideFolder(self, *args) -> None: ...
    def isHidden(self, *args) -> bool: ...
    def isFolderHidden(self, *args) -> bool: ...
    def clear(self) -> None: ...
    def asDialogScript(self, *args, **kwargs) -> str: ...
    def setToDialogScript(self, dialog_script: str) -> None: ...
    def asCode(self, function_name: Optional[str] = None, variable_name: Optional[str] = None) -> str: ...
    def sourceNode(self) -> Node: ...
    def sourceNodeType(self) -> NodeType: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def label(self) -> str: ...
    def setLabel(self, label: str) -> None: ...
    __swig_destroy__: Incomplete

class Pane:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def desktop(self) -> Desktop: ...
    def id(self) -> int: ...
    def isMaximized(self) -> bool: ...
    def floatingPanel(self) -> FloatingPanel: ...
    def setIsMaximized(self, on: bool) -> None: ...
    def tabs(self) -> Tuple[PaneTab, ...]: ...
    def createTab(self, type: EnumValue) -> PaneTab: ...
    def currentTab(self) -> PaneTab: ...
    def tabOfType(self, type: EnumValue, index: int = 0) -> PaneTab: ...
    def splitHorizontally(self) -> Pane: ...
    def splitVertically(self) -> Pane: ...
    def getSplitParent(self) -> Pane: ...
    def getSplitChild(self, child: int) -> Pane: ...
    def splitSwap(self) -> None: ...
    def splitRotate(self) -> None: ...
    def isSplitMaximized(self) -> bool: ...
    def isSplitMinimized(self) -> bool: ...
    def setIsSplitMaximized(self, on: bool) -> None: ...
    def isSplit(self) -> bool: ...
    def setSplitFraction(self, value: float) -> None: ...
    def getSplitFraction(self) -> float: ...
    def setSplitDirection(self, dir: int) -> None: ...
    def getSplitDirection(self) -> int: ...
    def setShowPaneTabs(self, value: bool) -> None: ...
    def showPaneTabs(self, value: bool) -> None: ...
    def isShowingPaneTabs(self) -> bool: ...
    def showPaneTabsStow(self, value: bool) -> None: ...
    def isShowingPaneTabsStow(self) -> bool: ...

class PaneTab:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def pane(self) -> Pane: ...
    def floatingPanel(self) -> FloatingPanel: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def isCurrentTab(self) -> bool: ...
    def setIsCurrentTab(self) -> None: ...
    def isFloating(self) -> bool: ...
    def clone(self) -> PaneTab: ...
    def close(self) -> None: ...
    def type(self) -> EnumValue: ...
    def setType(self, type: EnumValue) -> PaneTab: ...
    def linkGroup(self) -> EnumValue: ...
    def setLinkGroup(self, group: EnumValue) -> None: ...
    def isPin(self) -> bool: ...
    def setPin(self, pin: bool) -> None: ...
    def tools(self) -> Tuple[Tool, ...]: ...
    def size(self) -> Tuple[int, ...]: ...
    def contentSize(self) -> Tuple[int, ...]: ...
    def hasNetworkControls(self) -> bool: ...
    def isShowingNetworkControls(self) -> bool: ...
    def setShowNetworkControls(self, value: bool) -> None: ...
    def showNetworkControls(self, value: bool) -> None: ...
    def displayRadialMenu(self, *args) -> None: ...

class PathBasedPaneTab(PaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def pwd(self) -> Node: ...
    def setPwd(self, node: Node) -> None: ...
    def cd(self, path: str) -> None: ...
    def currentNode(self) -> Node: ...
    def setCurrentNode(self, node: Node, pick_node: bool = True) -> None: ...

class DopData:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def freeze(self) -> DopData: ...
    def isFrozen(self) -> bool: ...
    def path(self) -> str: ...
    def selectionPath(self) -> str: ...
    def __hash__(self) -> int: ...
    def dopNetNode(self) -> Node: ...
    def simulation(self) -> DopSimulation: ...
    def creator(self) -> Node: ...
    def id(self) -> str: ...
    def dataType(self) -> str: ...
    def recordTypes(self) -> Tuple[str, ...]: ...
    def record(self, record_type: str, record_index: int = 0) -> DopRecord: ...
    def records(self, record_type: str) -> Iterator[DopRecord]: ...
    def options(self) -> DopRecord: ...
    def subData(self) -> dict[str, DopData]: ...
    def findSubData(self, data_spec: str) -> DopData: ...
    def findAllSubData(self, data_spec: str, recurse: bool = False) -> dict[str, DopData]: ...
    def createSubData(self, *args, **kwargs) -> DopData: ...
    def attachSubData(self, hom_new_subdata: DopData, new_data_name: str, avoid_name_collisions: bool = False) -> None: ...
    def removeSubData(self, data_spec: str) -> None: ...
    def copyContentsFrom(self, hom_data: DopData) -> None: ...
    def fieldGeometry(self, data_name: str) -> Geometry: ...
    def geometry(self, data_name: Optional[str] = None) -> Geometry: ...
    def editableGeometry(self, data_name: Optional[str] = None) -> EditableDopGeometryGuard: ...

class ShelfElement:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def filePath(self) -> str: ...
    def setFilePath(self, file_path: str) -> None: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def label(self) -> str: ...
    def setLabel(self, label: str) -> None: ...
    def fileLocation(self) -> str: ...
    def isReadOnly(self) -> bool: ...
    def setReadOnly(self, on: bool) -> None: ...

class _logging_Sink:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def connectedSources(self) -> Tuple[str, ...]: ...
    def connect(self, source_name: str) -> None: ...
    def disconnect(self, source_name: str) -> None: ...
    def setFilterCallback(self, callback: Any) -> None: ...

class Agent(PackedPrim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def definition(self) -> AgentDefinition: ...
    def setDefinition(self, definition: AgentDefinition) -> None: ...
    def currentLayer(self) -> AgentLayer: ...
    def setCurrentLayer(self, layer: AgentLayer) -> None: ...
    def collisionLayer(self) -> AgentLayer: ...
    def setCollisionLayer(self, layer: AgentLayer) -> None: ...
    def currentLayers(self) -> Tuple[AgentLayer, ...]: ...
    def setCurrentLayers(self, layers: Sequence[AgentLayer]) -> None: ...
    def collisionLayers(self) -> Tuple[AgentLayer, ...]: ...
    def setCollisionLayers(self, layers: Sequence[AgentLayer]) -> None: ...
    def clips(self) -> Tuple[AgentClip, ...]: ...
    def setClips(self, clips: Sequence[AgentClip]) -> None: ...
    def clipTimes(self) -> Tuple[float, ...]: ...
    def setClipTimes(self, times: Sequence[float]) -> None: ...
    def clipWeights(self) -> Tuple[float, ...]: ...
    def setClipWeights(self, weights: Sequence[float]) -> None: ...
    def localTransform(self, i: int) -> Matrix4: ...
    def setLocalTransform(self, xform: Matrix4, i: int) -> None: ...
    def worldTransform(self, i: int) -> Matrix4: ...
    def setWorldTransform(self, xform: Matrix4, i: int) -> None: ...
    def channelValue(self, i: int) -> float: ...
    def setChannelValue(self, value: float, i: int) -> None: ...

class AgentClip:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def freeze(self) -> AgentClip: ...
    def name(self) -> str: ...
    def fileName(self, expanded: bool = False) -> str: ...
    def isLoaded(self) -> bool: ...
    def loadFromFile(self) -> None: ...
    def length(self) -> float: ...
    def startTime(self) -> float: ...
    def sampleCount(self) -> int: ...
    def sampleRate(self) -> float: ...
    def addChannel(self, name: str, samples: Sequence[float]) -> None: ...
    def sampleLocal(self, time: float, transform: int) -> Matrix4: ...
    def sampleWorld(self, time: float, transform: int) -> Matrix4: ...
    def localTransforms(self, sample: int) -> Tuple[Matrix4, ...]: ...
    def worldTransforms(self, sample: int) -> Tuple[Matrix4, ...]: ...
    def setLocalTransforms(self, sample: int, xforms: typing.Iterable[Matrix4]) -> None: ...
    def sample(self, time: float, channel: str) -> float: ...
    def channelNames(self) -> Tuple[str, ...]: ...
    def data(self, binary: bool, worldspace: bool = False) -> bytes: ...
    def extractLocomotion(self, cog_transform: int, cog_lookat_transform: int = -1, convert_inplace: bool = True, project_on_dominant_axis: bool = False) -> None: ...

class AgentDefinition:
    thisown: Incomplete
    def __init__(self, rig: AgentRig, shapelib: AgentShapeLibrary) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def freeze(self, new_shapelib: Optional[AgentShapeLibrary] = None, new_rig: Optional[AgentRig] = None) -> AgentDefinition: ...
    def rig(self) -> AgentRig: ...
    def shapeLibrary(self) -> AgentShapeLibrary: ...
    def layers(self) -> Iterator[AgentLayer]: ...
    def findLayer(self, name: str) -> AgentLayer: ...
    def clips(self) -> Iterator[AgentClip]: ...
    def findClip(self, name: str) -> AgentClip: ...
    def transformGroups(self) -> Iterator[AgentTransformGroup]: ...
    def findTransformGroup(self, name: str) -> AgentTransformGroup: ...
    def addClip(self, clip: AgentClip) -> None: ...
    def removeClip(self, name: str) -> None: ...
    def addLayer(self, layer: AgentLayer) -> None: ...
    def removeLayer(self, name: str) -> None: ...
    def addTransformGroup(self, group: AgentTransformGroup) -> None: ...
    def removeTransformGroup(self, name: str) -> None: ...
    def metadata(self) -> AgentMetadata: ...
    def setMetadata(self, metadata: AgentMetadata) -> None: ...

class AgentLayer:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def asJSON(self) -> str: ...
    def name(self) -> str: ...
    def fileName(self, expanded: bool = False) -> str: ...
    def bindings(self, *args) -> Tuple[AgentShapeBinding, ...]: ...
    def staticBindings(self) -> Tuple[AgentShapeBinding, ...]: ...
    def deformingBindings(self) -> Tuple[AgentShapeBinding, ...]: ...

class AgentMetadata:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def freeze(self) -> AgentMetadata: ...
    def isReadOnly(self) -> bool: ...
    def asJSON(self) -> str: ...
    def fileName(self, expanded: bool = False) -> str: ...
    def data(self) -> dict[str, Any]: ...
    def setData(self, data: dict[str, Any]) -> None: ...

class AgentRig:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def freeze(self) -> AgentRig: ...
    def asJSON(self) -> str: ...
    def name(self) -> str: ...
    def fileName(self, expanded: bool = False) -> str: ...
    def transformCount(self) -> int: ...
    def transformName(self, i: int) -> str: ...
    def findTransform(self, transform_name: str) -> int: ...
    def parentIndex(self, transform: int) -> int: ...
    def childIndices(self, transform: int) -> Tuple[int, ...]: ...
    def setRestLocalTransforms(self, xforms: typing.Iterable[Matrix4]) -> None: ...
    def restLocalTransform(self, i: int) -> Matrix4: ...
    def restWorldTransform(self, i: int) -> Matrix4: ...
    def channelCount(self) -> int: ...
    def channelName(self, i: int) -> str: ...
    def channelDefaultValue(self, i: int) -> float: ...
    def channelTransform(self, i: int) -> int: ...
    def findChannel(self, channel_name: str) -> int: ...
    def addChannel(self, name: str, default_value: float = 0.0, transform: int = -1) -> None: ...

class AgentShape:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def name(self) -> str: ...
    def uniqueId(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def freeze(self) -> AgentShape: ...
    def setGeometry(self, geometry: Geometry) -> None: ...

class AgentShapeBinding:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def shapeName(self) -> str: ...
    def shapeId(self) -> int: ...
    def transformId(self) -> int: ...
    def isDeforming(self) -> bool: ...
    def boundsScale(self) -> Vector3: ...
    def shape(self) -> AgentShape: ...
    def deformer(self) -> AgentShapeDeformer: ...

class AgentShapeDeformer:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def name(self) -> str: ...

class AgentShapeLibrary:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def freeze(self, keep_external_ref: bool = False) -> AgentShapeLibrary: ...
    def name(self) -> str: ...
    def fileName(self, expanded: bool = False) -> str: ...
    def findShape(self, name: str) -> AgentShape: ...
    def shapes(self) -> Tuple[AgentShape, ...]: ...
    def data(self) -> Geometry: ...
    def addShape(self, name: str, geometry: Geometry) -> AgentShape: ...

class AgentTransformGroup:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def asJSON(self) -> str: ...
    def name(self) -> str: ...
    def fileName(self, expanded: bool = False) -> str: ...
    def transformIndices(self) -> Tuple[int, ...]: ...
    def weights(self) -> Tuple[float, ...]: ...
    def channelIndices(self) -> Tuple[int, ...]: ...

class anim:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def bookmarks(self) -> Tuple[Bookmark, ...]: ...
    def saveBookmarks(self, *args, **kwargs) -> bool: ...
    def loadBookmarks(self, filename: str, remove_existing: bool = True) -> bool: ...
    def saveBookmarksToString(self, *args, **kwargs) -> bytes: ...
    def loadBookmarksFromString(self, data: bytes, remove_existing: bool = True) -> bool: ...
    def clearBookmarks(self) -> None: ...
    def newBookmark(self, name: str, start: int, end: int) -> Bookmark: ...
    def bookmark(self, bookmark_id: int) -> Bookmark: ...
    def getBookmark(self, bookmark_id: int) -> Bookmark: ...
    def removeBookmarks(self, bm: Sequence[Bookmark]) -> None: ...
    def mergeGeometryChannels(self, *args) -> None: ...
    def getGeometryChannels(self, *args) -> None: ...
    def setGeometryChannels(self, collection_name: str, geometry: Geometry, channel_names: Sequence[str]) -> None: ...
    def setGeometryChannelsFromPattern(self, *args) -> None: ...
    def setGeometryChannelPending(self, collection_name: str, channel_name: str, value: Optional[float]) -> None: ...
    def isGeometryChannelPending(self, collection_name: str, channel_name: str) -> bool: ...
    def isGeometryChannelPinned(self, *args) -> bool: ...
    def pinnedGeometryChannels(self, collection_name: str) -> Tuple[str, ...]: ...
    def getPinnedGeometryChannels(self, collection_name: str) -> Tuple[str, ...]: ...
    def lockGeometryChannelCollection(self, collection_name: str, lock: bool) -> None: ...
    def addBookmarksChangedCallback(self, callback: Any) -> None: ...
    def removeBookmarksChangedCallback(self, callback: Any) -> None: ...
    def addGeometryChannelsChangedCallback(self, collection_name: str, callback: Any, on_mouse_up: bool = True) -> bool: ...
    def removeGeometryChannelsChangedCallback(self, collection_name: str, callback: Any, on_mouse_up: bool = True) -> bool: ...
    def slopeMode(self) -> EnumValue: ...
    def setSlopeMode(self, mode: EnumValue) -> None: ...

class AnimBar:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def tools(self, shown_only: bool = True) -> Tuple[str, ...]: ...
    def hiddenTools(self) -> Tuple[str, ...]: ...
    def setTools(self, tool_ids: Sequence[str]) -> None: ...
    def removeTool(self, id: str) -> None: ...
    def addTool(self, id: str, index: int = -1) -> None: ...
    def reset(self) -> None: ...
    def showLabels(self, show: bool) -> None: ...
    def labelsShown(self) -> bool: ...
    def setToolSize(self, tool_size: EnumValue) -> None: ...
    def toolSize(self) -> EnumValue: ...

class anonstats:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def recordOccurrence(self, key: str) -> None: ...
    def recordString(self, key: str, value: str) -> None: ...
    def hasString(self, key: str) -> bool: ...
    def getString(self, key: str) -> str: ...
    def incrementCount(self, key: str, count: int = 1) -> None: ...
    def logEvent(self, key: str, message: str) -> None: ...
    def addSum(self, key: str, stat_value: float, count: int = 1) -> None: ...

class AssetBrowser(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def reload(self) -> None: ...
    def installRequiredDefinitionsForNodeTypeName(self, node_type_name: str) -> None: ...
    def storeUpdateSessionKey(self, session_key: str) -> None: ...
    def updateAssetDownloadFraction(self, node_type_name: str, downloaded_bytes: int, total_bytes: int) -> None: ...
    def storeSyncSessionKey(self, session_key: str) -> None: ...

class AssetGalleryDataSource:
    thisown: Incomplete
    def __init__(self, source_identifier: str, args: Optional[str] = None) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def isValid(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def sourceIdentifier(self) -> str: ...
    def sourceArgs(self) -> str: ...
    def infoHtml(self) -> str: ...
    def startTransaction(self) -> None: ...
    def endTransaction(self, commit: bool = True) -> None: ...
    def itemIds(self) -> Tuple[str, ...]: ...
    def updatedItemIds(self) -> Tuple[str, ...]: ...
    def childItemIds(self, parent: str) -> Tuple[str, ...]: ...
    def sourceTypeName(self, item_id: Optional[str] = None) -> str: ...
    def typeName(self, item_id: str) -> str: ...
    def label(self, item_id: str) -> str: ...
    def thumbnail(self, item_id: str) -> bytes: ...
    def creationDate(self, item_id: str) -> int: ...
    def modificationDate(self, item_id: str) -> int: ...
    def isStarred(self, item_id: str) -> bool: ...
    def colorTag(self, item_id: str) -> str: ...
    def tags(self, item_id: str) -> Tuple[str, ...]: ...
    def filePath(self, item_id: str) -> str: ...
    def ownsFile(self, item_id: str) -> bool: ...
    def blindData(self, item_id: str) -> bytes: ...
    def status(self, item_id: str) -> str: ...
    def parentId(self, item_id: str) -> str: ...
    def prepareItemForUse(self, item_id: str) -> str: ...
    def setLabel(self, item_id: str, label: str) -> bool: ...
    def setThumbnail(self, item_id: str, thumbnail: bytes) -> bool: ...
    def setModificationDate(self, item_id: str, timestamp: int) -> bool: ...
    def setIsStarred(self, item_id: str, isstarred: bool) -> bool: ...
    def setColorTag(self, item_id: str, color_tag: str) -> bool: ...
    def setMetadata(self, item_id: str, metadata: dict[str, Any]) -> bool: ...
    def setFilePath(self, item_id: str, file_path: str) -> bool: ...
    def setOwnsFile(self, item_id: str, owns_file: bool) -> bool: ...
    def setBlindData(self, item_id: str, data: bytes) -> bool: ...
    def setParentId(self, item_id: str, parent_item_id: str) -> bool: ...
    def createTag(self, tag: str) -> bool: ...
    def deleteTag(self, tag: str, delete_if_assigned: bool) -> bool: ...
    def addTag(self, item_id: str, tag: str) -> bool: ...
    def removeTag(self, item_id: str, tag: str) -> bool: ...
    def generateItemFilePath(self, item_id: str, file_ext: str) -> str: ...
    def addItem(self, *args, **kwargs) -> str: ...
    def markItemsForDeletion(self, item_ids: Sequence[str]) -> bool: ...
    def unmarkItemsForDeletion(self, item_ids: Sequence[str]) -> bool: ...
    def saveAs(self, source_identifier: str) -> bool: ...
    def metadata(self, item_id: str) -> Any: ...

class Attrib:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def destroy(self) -> None: ...
    def geometry(self) -> Geometry: ...
    def name(self) -> str: ...
    def dataType(self) -> EnumValue: ...
    def type(self) -> EnumValue: ...
    def isArrayType(self) -> bool: ...
    def numericDataType(self) -> EnumValue: ...
    def qualifier(self) -> str: ...
    def size(self) -> int: ...
    def setSize(self, size: int) -> None: ...
    def isTransformedAsVector(self) -> bool: ...
    def isTransformedAsNormal(self) -> bool: ...
    def boostAnyDefaultValue(self) -> Any: ...
    def strings(self) -> Tuple[str, ...]: ...
    def replaceString(self, before: str, after: str) -> bool: ...
    def dicts(self) -> Tuple[dict[str, Any], ...]: ...
    def indexPairPropertyTables(self) -> Tuple[IndexPairPropertyTable, ...]: ...
    def optionType(self, option_name: str) -> EnumValue: ...
    def setOption(self, *args) -> None: ...
    def removeOption(self, name: str) -> None: ...
    def dataId(self) -> AttribDataId: ...
    def incrementDataId(self) -> None: ...
    def defaultValue(self) -> Any: ...
    def options(self) -> Any: ...
    def option(self, option_name: str) -> Any: ...

class AttribDataId:
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def isValid(self) -> bool: ...
    def vexAttribDataId(self) -> Tuple[int, ...]: ...

class audio:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def turnOffAudio(self) -> None: ...
    def useTimeLineMode(self) -> None: ...
    def useTimeSliceMode(self) -> None: ...
    def useTestMode(self) -> None: ...
    def setMono(self, on: bool) -> None: ...
    def setVolumeTied(self, on: bool) -> None: ...
    def setMeter(self, on: bool) -> None: ...
    def setLeftVolume(self, volume: float) -> None: ...
    def setRightVolume(self, volume: float) -> None: ...
    def useChops(self) -> None: ...
    def useAudioFile(self) -> None: ...
    def setChopPath(self, node_path: str) -> None: ...
    def setAudioFileName(self, file_name: str) -> None: ...
    def setAudioOffset(self, time_offset: float) -> None: ...
    def setAudioFrame(self, frame: float) -> None: ...
    def setScrubRepeat(self, on: bool) -> None: ...
    def setScrubSustain(self, sustain: float) -> None: ...
    def setScrubRate(self, scrub_rate: float) -> None: ...
    def reverse(self) -> None: ...
    def stop(self) -> None: ...
    def play(self) -> None: ...
    def setLooping(self, on: bool) -> None: ...
    def setRewind(self, on: bool) -> None: ...

class Bookmark:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def startFrame(self) -> int: ...
    def setStartFrame(self, start: int) -> None: ...
    def endFrame(self) -> int: ...
    def setEndFrame(self, end: int) -> None: ...
    def comment(self) -> str: ...
    def setComment(self, comment: str) -> None: ...
    def color(self) -> Color: ...
    def setColor(self, color: Color) -> None: ...
    def visible(self) -> bool: ...
    def setVisible(self, visible: bool) -> None: ...
    def sessionId(self) -> int: ...
    def isTemporary(self) -> bool: ...
    def setTemporary(self, temporary: bool) -> None: ...
    def isEnabled(self) -> bool: ...
    def enable(self, enabled: bool) -> None: ...
    def setMetadata(self, *args) -> None: ...
    def metadata(self, *args) -> UTOptionAny: ...

class BoundingBox:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, bbox: BoundingBox, tolerance: float = 1e-05) -> bool: ...
    def almostEqual(self, bbox: BoundingBox, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def __mul__(self, matrix4: Matrix4) -> BoundingBox: ...
    def isValid(self) -> bool: ...
    def setTo(self, tuple: Sequence[float]) -> None: ...
    def minvec(self) -> Vector3: ...
    def maxvec(self) -> Vector3: ...
    def sizevec(self) -> Vector3: ...
    def center(self) -> Vector3: ...
    def enlargeToContain(self, *args) -> None: ...
    def contains(self, point: Sequence[float]) -> bool: ...

class BoundingRect:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, rect: BoundingRect, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def isValid(self) -> bool: ...
    def setTo(self, tuple: Sequence[float]) -> None: ...
    def translate(self, tuple: Sequence[float]) -> None: ...
    def scale(self, tuple: Sequence[float]) -> None: ...
    def expand(self, tuple: Sequence[float]) -> None: ...
    def min(self) -> Vector2: ...
    def max(self) -> Vector2: ...
    def size(self) -> Vector2: ...
    def center(self) -> Vector2: ...
    def getOffsetToAvoid(self, bounds: BoundingRect, direction: Optional[Vector2] = None) -> Vector2: ...
    def enlargeToContain(self, *args) -> None: ...
    def intersect(self, rect: BoundingRect) -> None: ...
    def intersects(self, *args) -> bool: ...
    def contains(self, *args) -> bool: ...
    def closestPoint(self, point: Sequence[float]) -> Vector2: ...

class ButtonParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class ChannelEditorPane(PaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def graph(self) -> ChannelGraph: ...
    def channelListSplitFraction(self) -> float: ...
    def setChannelListSplitFraction(self, split_fraction: float) -> None: ...
    def displayFilter(self) -> str: ...
    def setDisplayFilter(self, filter: str) -> None: ...
    def editorMode(self) -> EnumValue: ...
    def setEditorMode(self, mode: EnumValue) -> None: ...
    def templateFilter(self) -> str: ...
    def setTemplateFilter(self, filter: str) -> None: ...
    def colorsCallback(self) -> str: ...
    def setColorsCallback(self, cb: str) -> bool: ...
    def unregisterColorsCallback(self, cb_class: str) -> bool: ...
    def colorsCallbacks(self) -> Tuple[str, ...]: ...
    def registerColorsCallback(self, cb_class: str, callback: Any) -> bool: ...
    def channelList(self) -> ChannelList: ...
    def setChannelList(self, l: ChannelList) -> None: ...
    def channelListPinned(self) -> bool: ...
    def setChannelListPinned(self, pinned: bool) -> None: ...
    def isAnimBarShown(self) -> bool: ...
    def showAnimBar(self, show: bool) -> None: ...
    def animBar(self) -> AnimBar: ...

class ChannelGraph:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def selectedKeyframes(self) -> dict[Parm, Tuple[BaseKeyframe, ...]]: ...
    def selection(self) -> Tuple[ChannelGraphSelection, ...]: ...
    def setSelection(self, s: Tuple[ChannelGraphSelection, ...]) -> None: ...

class ChannelList:
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def clear(self) -> None: ...
    def parms(self) -> Tuple[Parm, ...]: ...
    def selected(self) -> Tuple[Parm, ...]: ...
    def deselected(self) -> Tuple[Parm, ...]: ...
    def pinned(self) -> Tuple[Parm, ...]: ...
    def unpinned(self) -> Tuple[Parm, ...]: ...
    def selectedValue(self) -> Tuple[Parm, ...]: ...
    def deselectedValue(self) -> Tuple[Parm, ...]: ...
    def addParm(self, parm: Parm, selected: bool = True, pinned: bool = False, valueselected: bool = False) -> None: ...
    def addPath(self, path: str, selected: bool = True, pinned: bool = False, valueselected: bool = False) -> None: ...
    def addParms(self, parms: Tuple[Parm, ...], selected: bool = True, pinned: bool = False, valueselected: bool = False) -> None: ...
    def addPaths(self, paths: Sequence[str], selected: bool = True, pinned: bool = False, valueselected: bool = False) -> None: ...
    def remove(self, *args) -> None: ...
    def select(self, *args) -> None: ...
    def deselect(self, *args) -> None: ...
    def pin(self, *args) -> None: ...
    def unpin(self, *args) -> None: ...
    def selectValue(self, *args) -> None: ...
    def deselectValue(self, *args) -> None: ...
    def contains(self, parm: Parm) -> bool: ...
    def isSelected(self, parm: Parm) -> bool: ...
    def isPinned(self, parm: Parm) -> bool: ...
    def isValueSelected(self, parm: Parm) -> bool: ...
    def addNodeGeometryChannels(self, *args, **kwargs) -> str: ...
    def addGeometryChannels(self, *args, **kwargs) -> str: ...
    def geometryChannels(self, collection_name: str) -> Tuple[ChannelPrim, ...]: ...
    def geometryChannelCollectionNames(self) -> Tuple[str, ...]: ...
    def removeGeometryChannels(self, collection_name: str) -> None: ...
    def selectGeometryChannel(self, *args) -> None: ...
    def deselectGeometryChannel(self, *args) -> None: ...
    def pinGeometryChannel(self, *args) -> None: ...
    def unpinGeometryChannel(self, *args) -> None: ...
    def selectGeometryChannelValue(self, *args) -> None: ...
    def deselectGeometryChannelValue(self, *args) -> None: ...
    def containsGeometryChannel(self, *args) -> bool: ...
    def isGeometryChannelSelected(self, collection_name: str, channel: str) -> bool: ...
    def isGeometryChannelPinned(self, collection_name: str, channel: str) -> bool: ...
    def isGeometryChannelValueSelected(self, collection_name: str, channel: str) -> bool: ...
    def filter(self) -> str: ...
    def keepSelection(self) -> bool: ...
    def enableFilter(self) -> bool: ...
    def filterTranslates(self) -> bool: ...
    def filterRotates(self) -> bool: ...
    def filterScales(self) -> bool: ...
    def setFilter(self, pattern: str) -> None: ...
    def setKeepSelection(self, value: bool) -> None: ...
    def setEnableFilter(self, value: bool) -> None: ...
    def setFilterTranslates(self, value: bool) -> None: ...
    def setFilterRotates(self, value: bool) -> None: ...
    def setFilterScales(self, value: bool) -> None: ...
    def asCode(self, *args, **kwargs) -> str: ...

class ChannelPrim(Prim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def vertex(self, index: int) -> Vertex: ...
    def addVertex(self, point: Point) -> Vertex: ...
    def start(self) -> float: ...
    def end(self) -> float: ...
    def length(self) -> float: ...
    def defaultValue(self) -> float: ...
    def setDefaultValue(self, value: float) -> None: ...
    def eval(self, frame: float) -> float: ...
    def hasKeyAtFrame(self, frame: float) -> bool: ...
    def insertKey(self, frame: float, auto_slope: bool = True) -> None: ...
    def destroyKey(self, frame: float) -> None: ...
    def clear(self) -> None: ...
    def keyIndex(self, frame: float) -> int: ...
    def setKeyValue(self, frame: float, value: float, key_half: Optional[EnumValue] = None) -> bool: ...
    def setKeySlope(self, frame: float, slope: float, key_half: Optional[EnumValue] = None) -> bool: ...
    def setKeyAccel(self, frame: float, accel: float, key_half: Optional[EnumValue] = None) -> bool: ...
    def setKeyAutoSlope(self, frame: float, auto_slope: bool, key_half: Optional[EnumValue] = None) -> bool: ...
    def segmentType(self, frame: float) -> EnumValue: ...
    def setSegmentType(self, frame: float, type: EnumValue) -> None: ...
    def keyFrames(self) -> Tuple[float, ...]: ...
    def keyValues(self) -> Tuple[float, ...]: ...
    def moveKeyframes(self, key_indices: Sequence[int], frame_offsets: Sequence[float]) -> None: ...
    def smoothAutoSlopes(self, force: bool = False) -> None: ...
    def smoothAutoSlopesForKeys(self, start_index: int, end_index: int = -1, force: bool = False) -> None: ...

class ChopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isLocked(self) -> bool: ...
    def setLocked(self, on: bool) -> None: ...
    def isDisplayFlagSet(self) -> bool: ...
    def setDisplayFlag(self, on: bool) -> None: ...
    def isAudioFlagSet(self) -> bool: ...
    def setAudioFlag(self, on: bool) -> None: ...
    def isExportFlagSet(self) -> bool: ...
    def setExportFlag(self, on: bool) -> None: ...
    def isUnloadFlagSet(self) -> bool: ...
    def setUnloadFlag(self, on: bool) -> None: ...
    def isCurrentFlagSet(self) -> bool: ...
    def setCurrentFlag(self, on: bool) -> None: ...
    def tracks(self, output_index: int = 0, cook: bool = True) -> Tuple[Track, ...]: ...
    def track(self, track_name: str, output_index: int = 0, cook: bool = True) -> Track: ...
    def clip(self, output_index: int = 0) -> Clip: ...
    def sampleRate(self) -> float: ...
    def sampleRange(self) -> tuple[float, float]: ...
    def frameToSamples(self, frame: float) -> float: ...
    def samplesToFrame(self, samples: float) -> float: ...
    def timeToSamples(self, time: float) -> float: ...
    def samplesToTime(self, samples: float) -> float: ...
    def clipData(self, *args) -> bytes: ...
    def setClipData(self, source: bytes, binary: bool, offset: float = 0, rename: Optional[str] = None) -> None: ...
    def saveClip(self, *args) -> bool: ...

class Clip:
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def chopNode(self) -> ChopNode: ...
    def chopNodeOutputIndex(self) -> int: ...
    def tracks(self) -> Tuple[Track, ...]: ...
    def track(self, track_name: str) -> Track: ...
    def sampleRate(self) -> float: ...
    def sampleRange(self) -> tuple[float, float]: ...
    def numSamples(self) -> int: ...
    def frameToSamples(self, frame: float) -> float: ...
    def samplesToFrame(self, samples: float) -> float: ...
    def timeToSamples(self, time: float) -> float: ...
    def samplesToTime(self, samples: float) -> float: ...
    def loadFromFile(self, filename: str) -> None: ...
    def saveToFile(self, filename: str) -> None: ...

class clone:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def runAsClone(self, start_port: int = 0, end_port: int = -1, debug: bool = False, block: bool = False, print_port: bool = False, connection_timeout_seconds: int = -1) -> None: ...
    def isRunningAsClone(self) -> bool: ...
    def createClone(self, id: Optional[str] = None) -> clone_Connection: ...
    def clones(self) -> Tuple[clone_Connection, ...]: ...
    def clone(self, id: str) -> clone_Connection: ...
    def deleteClone(self, id: str) -> None: ...
    def deleteDisconnectedClones(self) -> None: ...
    def removeAllConnectionChangeCallbacks(self) -> None: ...
    def removeAllImageChangeCallbacks(self) -> None: ...
    def addConnectionChangeCallback(self, callback: Any) -> None: ...
    def removeConnectionChangeCallback(self, callback: Any) -> None: ...
    def connectionChangeCallbacks(self) -> Tuple[Any, ...]: ...
    def addImageChangeCallback(self, callback: Any) -> None: ...
    def removeImageChangeCallback(self, callback: Any) -> None: ...
    def imageChangeCallbacks(self) -> Tuple[Any, ...]: ...

class _clone_Connection:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isValid(self) -> bool: ...
    def sessionId(self) -> str: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def lopNode(self) -> Node: ...
    def setLopNode(self, lop: Node) -> None: ...
    def cameraPath(self) -> str: ...
    def setCameraPath(self, camerapath: str) -> None: ...
    def renderer(self) -> str: ...
    def setRenderer(self, renderer: str) -> None: ...
    def renderSettings(self) -> str: ...
    def setRenderSettings(self, rendersettings: str) -> None: ...
    def availableAovs(self) -> Tuple[str, ...]: ...
    def displayAov(self) -> str: ...
    def setDisplayAov(self, displayaov: str) -> None: ...
    def resolutionScale(self) -> float: ...
    def setResolutionScale(self, resolution_scale: float) -> None: ...
    def resolution(self) -> tuple[int, int]: ...
    def setResolution(self, width: int, height: int) -> None: ...
    def frameExpression(self) -> str: ...
    def setFrameExpression(self, expression: str) -> None: ...
    def contextOptionExpression(self, opt: str) -> Any: ...
    def setContextOptionExpression(self, opt: str, expression: str) -> None: ...
    def contextOptionsWithExpressions(self) -> Tuple[str, ...]: ...
    def processUpdates(self) -> bool: ...
    def setProcessUpdates(self, process_updates: bool) -> None: ...
    def launcherConfig(self) -> dict[str, Any]: ...
    def setLauncherConfig(self, config: dict[str, Any]) -> None: ...
    def connect(self, host: str, port: int) -> bool: ...
    def disconnect(self) -> None: ...
    def isConnected(self) -> bool: ...
    def isWaitingToConnect(self) -> bool: ...
    def setWaitingToConnect(self, waiting_to_connect: bool) -> None: ...
    def host(self) -> str: ...
    def port(self) -> int: ...
    def imagePath(self) -> str: ...
    def imageVersion(self) -> int: ...
    def imageSize(self) -> Tuple[int, ...]: ...
    def percentComplete(self) -> float: ...
    def renderGalleryDataSource(self) -> AssetGalleryDataSource: ...
    def renderGalleryItemId(self) -> str: ...
    def createSnapshot(self) -> str: ...
    def duplicate(self) -> clone_Connection: ...

class Color:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def rgb(self) -> Tuple[float, ...]: ...
    def hsv(self) -> Tuple[float, ...]: ...
    def hsl(self) -> Tuple[float, ...]: ...
    def xyz(self) -> Tuple[float, ...]: ...
    def lab(self) -> Tuple[float, ...]: ...
    def tmi(self) -> Tuple[float, ...]: ...
    def setRGB(self, tuple: Sequence[float]) -> None: ...
    def setHSV(self, tuple: Sequence[float]) -> None: ...
    def setHSL(self, tuple: Sequence[float]) -> None: ...
    def setXYZ(self, tuple: Sequence[float]) -> None: ...
    def setLAB(self, tuple: Sequence[float]) -> None: ...
    def setTMI(self, tuple: Sequence[float]) -> None: ...
    @staticmethod
    def ocio_configPath() -> str: ...
    @staticmethod
    def ocio_spaces() -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_activeDisplays() -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_activeViews() -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_looks() -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_roles() -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_views(display: str) -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_defaultDisplay() -> str: ...
    @staticmethod
    def ocio_defaultView() -> str: ...
    def ocio_transform(self, src_colorspace: str, dest_colorspace: str, looks: str) -> Color: ...
    def ocio_viewTransform(self, src_colorspace: str, display: str, view: str) -> Color: ...
    @staticmethod
    def reloadOCIO() -> None: ...

class CompositorViewer(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def currentState(self) -> str: ...
    def enterViewState(self, wait_for_exit: bool = False) -> None: ...
    def setCurrentState(self, state: str, wait_for_exit: bool = False) -> None: ...
    def usingOCIO(self) -> bool: ...
    def setUsingOCIO(self, enable: bool) -> None: ...
    def setOCIODisplayView(self, display: Optional[str] = None, view: Optional[str] = None) -> None: ...
    def getOCIODisplay(self) -> str: ...
    def getOCIOView(self) -> str: ...

class ConstructionPlane:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def sceneViewer(self) -> SceneViewer: ...
    def isVisible(self) -> bool: ...
    def setIsVisible(self, on: bool) -> None: ...
    def transform(self) -> Matrix4: ...
    def setTransform(self, matrix: Matrix4) -> None: ...
    def cellSize(self) -> Tuple[float, ...]: ...
    def setCellSize(self, size: Sequence[float]) -> None: ...
    def numberOfCells(self) -> Tuple[int, ...]: ...
    def setNumberOfCells(self, number: Sequence[int]) -> None: ...
    def numberOfCellsPerRulerLine(self) -> Tuple[int, ...]: ...
    def setNumberOfCellsPerRulerLine(self, number: Sequence[int]) -> None: ...

class ContextViewer(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def sceneViewer(self) -> SceneViewer: ...
    def compositorViewer(self) -> CompositorViewer: ...
    def findViewport(self, name: str) -> GeometryViewport: ...

class Cop2Node(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isDisplayFlagSet(self) -> bool: ...
    def setDisplayFlag(self, on: bool) -> None: ...
    def isRenderFlagSet(self) -> bool: ...
    def setRenderFlag(self, on: bool) -> None: ...
    def isTemplateFlagSet(self) -> bool: ...
    def setTemplateFlag(self, on: bool) -> None: ...
    def isCompressFlagSet(self) -> bool: ...
    def setCompressFlag(self, on: bool) -> None: ...
    def planes(self) -> Tuple[str, ...]: ...
    def components(self, plane: str) -> Tuple[str, ...]: ...
    def depth(self, plane: str) -> EnumValue: ...
    def maskInputIndex(self) -> int: ...
    def getPixelByUV(self, plane: str, u: float, v: float, component: Optional[str] = None, interpolate: bool = True) -> Tuple[float, ...]: ...
    def getPixelHSVByUV(self, u: float, v: float, interpolate: bool = True) -> Tuple[float, ...]: ...
    def getPixelLuminanceByUV(self, u: float, v: float, interpolate: bool = True) -> float: ...
    def allPixels(self, *args, **kwargs) -> Tuple[float, ...]: ...
    def allPixelsAsString(self, *args, **kwargs) -> bytes: ...
    def setPixelsOfCookingPlane(self, values: Sequence[float], component: Optional[str] = None, interleaved: bool = True, flip_vertically: bool = False) -> None: ...
    def imageBounds(self, *args, **kwargs) -> Tuple[int, ...]: ...
    def xRes(self) -> int: ...
    def yRes(self) -> int: ...
    def sequenceStartFrame(self) -> float: ...
    def sequenceEndFrame(self) -> float: ...
    def sequenceFrameLength(self) -> float: ...
    def isSingleImage(self) -> bool: ...
    def saveImage(self, *args) -> None: ...
    def hasMetaData(self, metadata_name: str) -> bool: ...
    def getMetaDataInt(self, metadata_name: str, index: int = 0) -> int: ...
    def getMetaDataFloat(self, metadata_name: str, index: int = 0) -> float: ...
    def getMetaDataString(self, metadata_name: str) -> str: ...
    def getMetaDataIntArray(self, metadata_name: str) -> Tuple[int, ...]: ...
    def getMetaDataFloatArray(self, metadata_name: str) -> Tuple[float, ...]: ...
    def setPixelsOfCookingPlaneFromString(self, values: Any, component: Optional[str] = None, interleaved: bool = True, depth: Optional[EnumValue] = None, flip_vertically: bool = False) -> None: ...

class crowds:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def addBlendshapeInputs(self, base_shape_geo: Geometry, shapes: Sequence[AgentShape], channel_names: Sequence[str]) -> None: ...
    def addInBetweenShapes(self, primary_shape_geo: Geometry, shapes: Sequence[AgentShape], weights: Sequence[float]) -> None: ...
    def setBlendshapeDeformerParms(self, *args, **kwargs) -> None: ...
    def findAgentDefinitions(self, *args, **kwargs) -> Tuple[AgentDefinition, ...]: ...
    def replaceAgentDefinitions(self, *args, **kwargs) -> None: ...
    def computeLocalTransforms(self, rig: AgentRig, world_xforms: typing.Iterable[Matrix4]) -> Tuple[Matrix4, ...]: ...
    def computeWorldTransforms(self, rig: AgentRig, local_xforms: typing.Iterable[Matrix4]) -> Tuple[Matrix4, ...]: ...
    def computeRotationLimits(self, rig: AgentRig, clips: Sequence[AgentClip], xform_idx: int, parent_xform_idx: int) -> dict[str, Any]: ...
    def shapeDeformers(self) -> Tuple[AgentShapeDeformer, ...]: ...
    def findShapeDeformer(self, name: str) -> AgentShapeDeformer: ...
    def applyUsdProcedural(self, stage: Any, selection_rule: LopSelectionRule, camera_path: str, resolution: tuple[int, int], lod_threshold: float, optimize_identical_poses: bool, frame: float, prototype_material: str, instance_material: str, default_material: str) -> None: ...

class DataParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def dataParmType(self) -> EnumValue: ...
    def setDataParmType(self, data_type: EnumValue) -> None: ...
    def defaultExpression(self) -> Tuple[str, ...]: ...
    def setDefaultExpression(self, default_expression: Sequence[str]) -> None: ...
    def defaultExpressionLanguage(self) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self, default_expression_language: Sequence[EnumValue]) -> None: ...

class DataTree(PaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def treeTypes(self) -> Tuple[str, ...]: ...
    def treeType(self) -> str: ...
    def setTreeType(self, tree_type: str) -> bool: ...
    def currentPath(self) -> str: ...
    def clearCurrentPath(self) -> None: ...
    def setCurrentPath(self, path: str, multi_select: bool = False, index: int = -1) -> None: ...
    def setCurrentPaths(self, paths: Sequence[str], expanded: bool) -> None: ...
    def setTreeExpanded(self, expanded: bool) -> None: ...
    def setCurrentNodeExpanded(self, expanded: bool) -> None: ...

class Desktop:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def panes(self) -> Tuple[Pane, ...]: ...
    def paneTabs(self) -> Tuple[PaneTab, ...]: ...
    def currentPaneTabs(self) -> Tuple[PaneTab, ...]: ...
    def floatingPaneTabs(self) -> Tuple[PaneTab, ...]: ...
    def paneTabOfType(self, type: EnumValue, index: int = 0) -> PaneTab: ...
    def findPane(self, pane_id: int) -> Pane: ...
    def findPaneTab(self, name: str) -> PaneTab: ...
    def createFloatingPaneTab(self, *args, **kwargs) -> PaneTab: ...
    def createFloatingPane(self, *args) -> PaneTab: ...
    def floatingPanels(self) -> Tuple[FloatingPanel, ...]: ...
    def createFloatingPanel(self, *args, **kwargs) -> FloatingPanel: ...
    def paneUnderCursor(self) -> Pane: ...
    def paneTabUnderCursor(self) -> PaneTab: ...
    def name(self) -> str: ...
    def shelfDock(self) -> ShelfDock: ...
    def displaySideHelp(self, show: bool = True) -> PaneTab: ...
    def displayHelp(self, node_type: NodeType) -> None: ...
    def displayHelpPath(self, help_path: str) -> None: ...
    def displayHelpPyPanel(self, interface_name: str) -> None: ...
    def setAsCurrent(self) -> None: ...

class Dialog:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def destroy(self) -> None: ...
    def setValue(self, *args) -> None: ...
    def enableValue(self, name: str, onoff: bool) -> None: ...
    def waitForValueToChangeTo(self, *args) -> None: ...
    def menuItems(self, name: str) -> Tuple[str, ...]: ...
    def setMenuItems(self, name: str, items: Sequence[str]) -> None: ...
    def value(self, name: str) -> Any: ...
    def addCallback(self, name: str, callback: Any) -> None: ...
    def removeCallback(self, name: str, callback: Any) -> None: ...
    def callbacks(self, name: str) -> Tuple[Any, ...]: ...

class dop:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isScriptSolverRunning(self) -> bool: ...
    def scriptSolverData(self) -> DopData: ...
    def scriptSolverNetwork(self) -> Node: ...
    def scriptSolverSimulation(self) -> DopSimulation: ...
    def scriptSolverObjects(self) -> Tuple[DopData, ...]: ...
    def scriptSolverNewObjects(self) -> Tuple[DopData, ...]: ...
    def scriptSolverTimestepSize(self) -> float: ...
    def scriptSolverTime(self) -> float: ...

class DopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def dopNetNode(self) -> Node: ...
    def simulation(self) -> DopSimulation: ...
    def processedObjects(self) -> Tuple[DopData, ...]: ...
    def createdObjects(self) -> Tuple[DopData, ...]: ...
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isDisplayFlagSet(self) -> bool: ...
    def setDisplayFlag(self, on: bool) -> None: ...
    def isTemplateFlagSet(self) -> bool: ...
    def setTemplateFlag(self, on: bool) -> None: ...
    def displayNode(self) -> Node: ...
    def renderNode(self) -> Node: ...
    def objectsToProcess(self) -> Tuple[DopData, ...]: ...
    def pythonSolverData(self) -> DopData: ...

class DopObject(DopData):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def objid(self) -> int: ...
    def matches(self, pattern: str) -> bool: ...
    def transform(self, include_geometry_transform: bool = True) -> Matrix4: ...

class DopRecord:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def recordType(self) -> str: ...
    def recordIndex(self) -> int: ...
    def fieldNames(self) -> Tuple[str, ...]: ...
    def fieldType(self, field_name: str) -> EnumValue: ...
    def field(self, field_name: str) -> Any: ...
    def setFieldBool(self, field_name: str, value: bool) -> None: ...
    def setField(self, *args) -> None: ...

class DopRelationship(DopData):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def matches(self, pattern: str) -> bool: ...
    def setGroup(self, objects: Sequence[DopObject]) -> None: ...
    def setAffectorGroup(self, objects: Sequence[DopObject]) -> None: ...
    def relationshipTypeData(self) -> DopData: ...

class DopSimulation:
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def createObject(self, name: str, solve_on_creation_frame: bool) -> DopData: ...
    def removeObject(self, obj: DopObject) -> None: ...
    def createRelationship(self, name: str) -> DopData: ...
    def removeRelationship(self, rel: DopRelationship) -> None: ...
    def dopNetNode(self) -> Node: ...
    def objects(self) -> Tuple[DopData, ...]: ...
    def relationships(self) -> Tuple[DopData, ...]: ...
    def findObject(self, obj_spec: str) -> DopData: ...
    def findRelationship(self, rel_spec: str) -> DopData: ...
    def findData(self, data_spec: str) -> DopData: ...
    def findAllObjects(self, obj_spec: str) -> Tuple[DopData, ...]: ...
    def findAllRelationships(self, rel_spec: str) -> Tuple[DopData, ...]: ...
    def findAllData(self, data_spec: str) -> Tuple[DopData, ...]: ...
    def time(self) -> float: ...
    def setTime(self, t: float, resim_last_timestep: bool = False, force_reset_sim: bool = False, allow_simulation: bool = True) -> None: ...
    def timestep(self) -> float: ...
    def setTimestep(self, t: float) -> None: ...
    def memoryUsage(self) -> int: ...

class Drawable:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def label(self) -> str: ...
    def show(self, value: bool) -> None: ...
    def visible(self) -> bool: ...
    def transform(self) -> Matrix4: ...
    def setTransform(self, xform: Matrix4) -> None: ...
    def setLabel(self, label: str) -> None: ...

class AdvancedDrawable(Drawable):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def setParams(self, params: AdvancedDrawable.Params) -> None: ...
    def draw(self, *args, **kwargs) -> None: ...

class SimpleDrawable(Drawable):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def enable(self, value: bool) -> None: ...
    def enabled(self) -> bool: ...
    def setDisplayMode(self, value: EnumValue) -> None: ...
    def displayMode(self) -> EnumValue: ...
    def setWireframeColor(self, color: Color) -> None: ...
    def wireframeColor(self) -> Color: ...
    def setUseWireframeColor(self, value: bool) -> None: ...
    def useWireframeColor(self) -> bool: ...
    def setXray(self, value: bool) -> None: ...
    def isXray(self) -> bool: ...
    def setShowMaterials(self, value: bool) -> None: ...
    def isShowMaterials(self) -> bool: ...
    def setCastShadows(self, value: bool) -> None: ...
    def isCastShadows(self) -> bool: ...
    def setDrawOutline(self, value: bool) -> None: ...
    def isDrawOutline(self) -> bool: ...
    def setOutlineColor(self, *args) -> None: ...
    def outlineColor(self) -> Vector4: ...
    def setSeparateOutline(self, value: bool) -> None: ...
    def isSeparateOutline(self) -> bool: ...
    def setOutlineOnly(self, value: bool) -> None: ...
    def isOutlineOnly(self) -> bool: ...
    def geometry(self) -> Geometry: ...
    def setGeometry(self, geometry: Geometry) -> None: ...
    def setVisibleInViewport(self, viewport: GeometryViewport) -> None: ...
    def setVisibleInAllViewports(self) -> None: ...
    def isVisibleInViewport(self, viewport: GeometryViewport) -> bool: ...
    def setIsControl(self, control: bool) -> None: ...
    def isControl(self) -> bool: ...

class Edge:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def points(self) -> Tuple[Point, ...]: ...
    def edgeId(self) -> str: ...
    def length(self) -> float: ...
    def prims(self) -> Tuple[Prim, ...]: ...

class EdgeGroup:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def name(self) -> str: ...
    def iterEdges(self) -> Iterator[Edge]: ...
    def edges(self) -> Tuple[Edge, ...]: ...
    def contains(self, edge: Edge) -> bool: ...
    def add(self, *args) -> None: ...
    def remove(self, *args) -> None: ...
    def clear(self) -> None: ...
    def destroy(self) -> None: ...
    def edgeCount(self) -> int: ...
    def dataId(self) -> AttribDataId: ...
    def incrementDataId(self) -> None: ...

class EditableDopGeometryGuard:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __enter__(self) -> Geometry: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class FlipbookSettings:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def stash(self) -> FlipbookSettings: ...
    def copy(self, from_settings: FlipbookSettings) -> None: ...
    def outputToMPlay(self, *args) -> bool: ...
    def leaveFrameAtEnd(self, *args) -> bool: ...
    def output(self, *args) -> str: ...
    def sessionLabel(self, *args) -> str: ...
    def visibleObjects(self, *args) -> str: ...
    def visibleTypes(self, *args) -> EnumValue: ...
    def frameRange(self, *args) -> Tuple[float, ...]: ...
    def frameIncrement(self, *args) -> int: ...
    def beautyPassOnly(self, *args) -> bool: ...
    def renderAllViewports(self, *args) -> bool: ...
    def appendFramesToCurrent(self, *args) -> bool: ...
    def scopeChannelKeyframesOnly(self, *args) -> bool: ...
    def blockEditing(self, *args) -> bool: ...
    def initializeSimulations(self, *args) -> bool: ...
    def audioFilename(self, *args) -> None: ...
    def audioFrameStart(self, *args) -> float: ...
    def audioTimeOffset(self, *args) -> float: ...
    def backgroundImage(self, *args) -> str: ...
    def overrideGamma(self, *args) -> bool: ...
    def gamma(self, *args) -> float: ...
    def overrideLUT(self, *args) -> bool: ...
    def LUT(self, *args) -> str: ...
    def setUseFrameTimeLimit(self, limit: bool) -> None: ...
    def useFrameTimeLimit(self) -> bool: ...
    def setFrameTimeLimit(self, t: float) -> None: ...
    def frameTimeLimit(self) -> float: ...
    def setUseFrameProgressLimit(self, limit: bool) -> None: ...
    def useFrameProgressLimit(self) -> bool: ...
    def setFrameProgessLimit(self, t: float) -> None: ...
    def frameProgressLimit(self) -> float: ...
    def antialias(self, *args) -> EnumValue: ...
    def useMotionBlur(self, *args) -> bool: ...
    def motionBlurSegments(self, *args) -> int: ...
    def motionBlurFrameRange(self, *args) -> EnumValue: ...
    def shutterFromCamera(self, *args) -> bool: ...
    def shutter(self, *args) -> float: ...
    def useDepthOfField(self, *args) -> bool: ...
    def depthOfFieldFromCamera(self, *args) -> bool: ...
    def depthOfFieldQuality(self, *args) -> float: ...
    def focusDistance(self, *args) -> float: ...
    def aperture(self, *args) -> float: ...
    def fStop(self, *args) -> float: ...
    def outputZoom(self, *args) -> int: ...
    def useResolution(self, *args) -> bool: ...
    def resolution(self, *args) -> Tuple[int, ...]: ...
    def useSheetSize(self, *args) -> bool: ...
    def sheetSize(self, *args) -> Tuple[int, ...]: ...
    def cropOutMaskOverlay(self, *args) -> bool: ...
    def fromAudioPanel(self, *args) -> None: ...

class FloatingPanel:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def panes(self) -> Tuple[Pane, ...]: ...
    def paneTabs(self) -> Tuple[PaneTab, ...]: ...
    def paneTabOfType(self, type: EnumValue, index: int = 0) -> PaneTab: ...
    def findPaneTab(self, name: str) -> PaneTab: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def containsPlaybar(self) -> bool: ...
    def setContainsPlaybar(self, on: bool) -> None: ...
    def containsShelf(self) -> bool: ...
    def setContainsShelf(self, on: bool) -> None: ...
    def containsStatusBar(self) -> bool: ...
    def setContainsStatusBar(self, on: bool) -> None: ...
    def containsMenuBar(self) -> bool: ...
    def setContainsMenuBar(self, on: bool) -> None: ...
    def isAttachedToDesktop(self) -> bool: ...
    def attachToDesktop(self, on: bool) -> None: ...
    def isFullscreen(self) -> bool: ...
    def setIsFullscreen(self, on: bool) -> None: ...
    def position(self) -> Vector2: ...
    def setPosition(self, position: Sequence[int]) -> None: ...
    def size(self) -> Vector2: ...
    def setSize(self, size: Sequence[int]) -> None: ...
    def close(self) -> None: ...

class FloatParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def minValue(self) -> float: ...
    def setMinValue(self, min_value: float) -> None: ...
    def maxValue(self) -> float: ...
    def setMaxValue(self, max_value: float) -> None: ...
    def minIsStrict(self) -> bool: ...
    def setMinIsStrict(self, on: bool) -> None: ...
    def maxIsStrict(self) -> bool: ...
    def setMaxIsStrict(self, on: bool) -> None: ...
    def defaultValue(self) -> Tuple[float, ...]: ...
    def setDefaultValue(self, default_value: Sequence[float]) -> None: ...
    def defaultExpression(self) -> Tuple[str, ...]: ...
    def setDefaultExpression(self, default_expression: Sequence[str]) -> None: ...
    def defaultExpressionLanguage(self) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self, default_expression_language: Sequence[EnumValue]) -> None: ...

class FolderParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def folderStyle(self) -> EnumValue: ...
    def folderType(self) -> EnumValue: ...
    def setFolderType(self, folder_type: EnumValue) -> None: ...
    def isActualFolder(self) -> bool: ...
    def defaultValue(self) -> int: ...
    def setDefaultValue(self, default_value: int) -> None: ...
    def tabConditionals(self) -> dict[EnumValue, str]: ...
    def setTabConditional(self, cond_type: EnumValue, conditional: str) -> None: ...
    def endsTabGroup(self) -> bool: ...
    def setEndsTabGroup(self, on: bool) -> None: ...
    def parmTemplates(self) -> Tuple[ParmTemplate, ...]: ...
    def setParmTemplates(self, parm_templates: Sequence[ParmTemplate]) -> None: ...
    def addParmTemplate(self, parm_template: ParmTemplate) -> None: ...

class FolderSetParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def folderNames(self) -> Tuple[str, ...]: ...
    def setFolderNames(self, folder_names: Sequence[str]) -> None: ...
    def folderType(self) -> EnumValue: ...
    def setFolderType(self, folder_type: EnumValue) -> None: ...
    def folderStyle(self) -> EnumValue: ...

class GadgetContext:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def gadget(self) -> str: ...
    def gadgetLabel(self) -> str: ...
    def component1(self) -> int: ...
    def component2(self) -> int: ...
    def isLocating(self) -> bool: ...
    def isPicking(self) -> bool: ...
    def isDrawing(self) -> bool: ...
    def isLocated(self, gadget_name: str) -> bool: ...
    def isPicked(self, gadget_name: str) -> bool: ...

class galleries:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def galleries(self) -> Tuple[Gallery, ...]: ...
    def galleryEntries(self, name_pattern: Optional[str] = None, label_pattern: Optional[str] = None, keyword_pattern: Optional[str] = None, category: Optional[str] = None, node_type: Optional[NodeType] = None) -> Tuple[GalleryEntry, ...]: ...
    def installGallery(self, gallery_path: str) -> Gallery: ...
    def removeGallery(self, gallery_path: str) -> bool: ...
    def createGalleryEntry(self, gallery_path: str, entry_name: str, node: Optional[Node] = None) -> GalleryEntry: ...

class Gallery:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def galleryEntries(self, name_pattern: Optional[str] = None, label_pattern: Optional[str] = None, keyword_pattern: Optional[str] = None, category: Optional[str] = None, node_type: Optional[NodeType] = None) -> Tuple[GalleryEntry, ...]: ...
    def createEntry(self, entry_name: str, node: Optional[Node] = None) -> GalleryEntry: ...
    def deleteEntry(self, entry_name: str) -> None: ...

class GalleryEntry:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def canApplyToNode(self, node: Node) -> bool: ...
    def applyToNode(self, node: Node) -> None: ...
    def canCreateChildNode(self, parent: Node) -> bool: ...
    def createChildNode(self, parent: Node) -> Node: ...
    def setEqual(self, entry: GalleryEntry) -> None: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def label(self) -> str: ...
    def setLabel(self, label: str) -> None: ...
    def description(self) -> str: ...
    def setDescription(self, description: str) -> None: ...
    def helpURL(self) -> str: ...
    def setHelpURL(self, helpurl: str) -> None: ...
    def requiredHDAFile(self) -> str: ...
    def setRequiredHDAFile(self, hda_file: str) -> None: ...
    def icon(self) -> str: ...
    def setIcon(self, icon: str) -> None: ...
    def allowIconRegeneration(self) -> bool: ...
    def setAllowIconRegeneration(self, on: bool) -> None: ...
    def isHidden(self) -> bool: ...
    def setHidden(self, hide: bool) -> None: ...
    def bestNodeType(self) -> NodeType: ...
    def nodeTypeNames(self) -> Tuple[str, ...]: ...
    def setNodeTypeNames(self, nodetypes: Sequence[str]) -> None: ...
    def categories(self) -> Tuple[str, ...]: ...
    def setCategories(self, categories: Sequence[str]) -> None: ...
    def keywords(self) -> Tuple[str, ...]: ...
    def setKeywords(self, keywords: Sequence[str]) -> None: ...
    def nodeTypeCategory(self) -> NodeTypeCategory: ...
    def setNodeTypeCategory(self, category: NodeTypeCategory) -> None: ...
    def script(self) -> str: ...
    def setScript(self, script: str) -> None: ...
    def setScriptFromNode(self, node: Node) -> None: ...
    def setContentsFromNode(self, node: Node) -> None: ...

class Geometry:
    thisown: Incomplete
    def __init__(self, geo: Optional[Geometry] = None, clone_data_ids: bool = False) -> None: ...
    __swig_destroy__: Incomplete
    def sopNode(self) -> SopNode: ...
    def sopNodeOutputIndex(self) -> int: ...
    def isValid(self) -> bool: ...
    def freeze(self, read_only: bool = False, clone_data_ids: bool = False) -> Geometry: ...
    def iterPoints(self) -> Iterator[Point]: ...
    def points(self) -> Tuple[Point, ...]: ...
    def point(self, index: int) -> Point: ...
    def iterPrims(self) -> Iterator[Prim]: ...
    def prims(self) -> Tuple[Prim, ...]: ...
    def prim(self, index: int) -> Prim: ...
    def containsPrimType(self, *args) -> bool: ...
    def countPrimType(self, *args) -> int: ...
    def countUnusedPoints(self) -> int: ...
    def primsOfType(self, prim_type: EnumValue) -> Tuple[Prim, ...]: ...
    def iterPrimsOfType(self, prim_type: EnumValue) -> Iterator[Prim]: ...
    def preferredPrecision(self) -> int: ...
    def setPreferredPrecision(self, prec: int) -> None: ...
    def averageMinDistance(self, local_transform: Matrix4, geometry: Geometry, geometry_transform: Matrix4) -> float: ...
    def averageEdgeLength(self) -> float: ...
    def globPoints(self, pattern: str, ordered: bool = False) -> Tuple[Point, ...]: ...
    def globPrims(self, pattern: str) -> Tuple[Prim, ...]: ...
    def globVertices(self, pattern: str) -> Tuple[Vertex, ...]: ...
    def globEdges(self, pattern: str) -> Tuple[Edge, ...]: ...
    def findPointAttrib(self, *args) -> Attrib: ...
    def findPrimAttrib(self, *args) -> Attrib: ...
    def findVertexAttrib(self, *args) -> Attrib: ...
    def findGlobalAttrib(self, *args) -> Attrib: ...
    def attribType(self) -> EnumValue: ...
    def floatAttribValue(self, *args) -> float: ...
    def floatListAttribValue(self, *args) -> Tuple[float, ...]: ...
    def intAttribValue(self, *args) -> int: ...
    def intListAttribValue(self, *args) -> Tuple[int, ...]: ...
    def stringAttribValue(self, *args) -> str: ...
    def stringListAttribValue(self, *args) -> Tuple[str, ...]: ...
    def dictAttribValue(self, *args) -> dict[str, Any]: ...
    def dictListAttribValue(self, *args) -> Tuple[dict[str, Any], ...]: ...
    def pointFloatAttribValues(self, name: str) -> Tuple[float, ...]: ...
    def pointFloatAttribValuesAsString(self, *args, **kwargs) -> bytes: ...
    def primFloatAttribValues(self, name: str) -> Tuple[float, ...]: ...
    def primFloatAttribValuesAsString(self, *args, **kwargs) -> bytes: ...
    def vertexFloatAttribValues(self, name: str) -> Tuple[float, ...]: ...
    def vertexFloatAttribValuesAsString(self, *args, **kwargs) -> bytes: ...
    def pointIntAttribValues(self, name: str) -> Tuple[int, ...]: ...
    def pointIntAttribValuesAsString(self, *args, **kwargs) -> bytes: ...
    def primIntAttribValues(self, name: str) -> Tuple[int, ...]: ...
    def primIntAttribValuesAsString(self, *args, **kwargs) -> bytes: ...
    def vertexIntAttribValues(self, name: str) -> Tuple[int, ...]: ...
    def vertexIntAttribValuesAsString(self, *args, **kwargs) -> bytes: ...
    def pointStringAttribValues(self, name: str) -> Tuple[str, ...]: ...
    def primStringAttribValues(self, name: str) -> Tuple[str, ...]: ...
    def vertexStringAttribValues(self, name: str) -> Tuple[str, ...]: ...
    def setPointFloatAttribValues(self, name: str, values: Sequence[float]) -> None: ...
    def setPrimFloatAttribValues(self, name: str, values: Sequence[float]) -> None: ...
    def setVertexFloatAttribValues(self, name: str, values: Sequence[float]) -> None: ...
    def setPointFloatAttribValuesFromString(self, *args, **kwargs) -> None: ...
    def setPrimFloatAttribValuesFromString(self, *args, **kwargs) -> None: ...
    def setVertexFloatAttribValuesFromString(self, *args, **kwargs) -> None: ...
    def setPointIntAttribValues(self, name: str, values: Sequence[int]) -> None: ...
    def setPrimIntAttribValues(self, name: str, values: Sequence[int]) -> None: ...
    def setVertexIntAttribValues(self, name: str, values: Sequence[int]) -> None: ...
    def setPointIntAttribValuesFromString(self, *args, **kwargs) -> None: ...
    def setPrimIntAttribValuesFromString(self, *args, **kwargs) -> None: ...
    def setVertexIntAttribValuesFromString(self, *args, **kwargs) -> None: ...
    def setPointStringAttribValues(self, name: str, values: Sequence[str]) -> None: ...
    def setPrimStringAttribValues(self, name: str, values: Sequence[str]) -> None: ...
    def setVertexStringAttribValues(self, name: str, values: Sequence[str]) -> None: ...
    def renamePointAttrib(self, old_name: str, new_name: str) -> None: ...
    def renamePrimAttrib(self, old_name: str, new_name: str) -> None: ...
    def renameVertexAttrib(self, old_name: str, new_name: str) -> None: ...
    def renameGlobalAttrib(self, old_name: str, new_name: str) -> None: ...
    def createPoint(self) -> Point: ...
    def createPoints(self, *args) -> Tuple[Point, ...]: ...
    def createPolygon(self, is_closed: bool = True) -> Polygon: ...
    def createPolygons(self, *args) -> Tuple[Polygon, ...]: ...
    def createPacked(self, packed_type: str, point: Optional[Point] = None) -> PackedPrim: ...
    def createTetrahedron(self) -> Prim: ...
    def createTetrahedronInPlace(self, p0: Point, p1: Point, p2: Point, p3: Point) -> Prim: ...
    def createHexahedron(self) -> Prim: ...
    def createHexahedronInPlace(self, p0: Point, p1: Point, p2: Point, p3: Point, p4: Point, p5: Point, p6: Point, p7: Point) -> Prim: ...
    def createNURBSCurve(self, num_points: int = 4, is_closed: bool = False, order: int = 4) -> Face: ...
    def createBezierCurve(self, num_points: int = 4, is_closed: bool = False, order: int = 4) -> Face: ...
    def createNURBSSurface(self, rows: int, cols: int, is_closed_in_u: bool = False, is_closed_in_v: bool = False, order_u: int = 4, order_v: int = 4) -> Surface: ...
    def createBezierSurface(self, rows: int, cols: int, is_closed_in_u: bool = False, is_closed_in_v: bool = False, order_u: int = 4, order_v: int = 4) -> Surface: ...
    def createMeshSurface(self, rows: int, cols: int, is_closed_in_u: bool = False, is_closed_in_v: bool = False) -> Surface: ...
    def createVolume(self, xres: int, yres: int, zres: int, bounding_box: Optional[BoundingBox] = None) -> Volume: ...
    def createChannelPrim(self) -> ChannelPrim: ...
    def transform(self, matrix: Matrix4) -> None: ...
    def transformPrims(self, *args) -> None: ...
    def deletePrims(self, *args) -> None: ...
    def deletePrimsOutsideBoundingBox(self, bbox: BoundingBox) -> None: ...
    def deletePoints(self, *args) -> None: ...
    def addAttrib(self, *args) -> Attrib: ...
    def addArrayAttrib(self, type: EnumValue, name: str, data_type: EnumValue, tuple_size: int = 1) -> Attrib: ...
    def setGlobalAttribValue(self, *args) -> None: ...
    def copyAttrib(self, attrib: Attrib) -> None: ...
    def copyAttribs(self, attribs: Tuple[Attrib, ...]) -> None: ...
    def copy(self, geometry: Geometry, clone_data_ids: bool = False, prims: Optional[Selection] = None) -> None: ...
    def copyPoints(self, geometry: Geometry, points: Optional[PointGroup] = None) -> None: ...
    def copyPrims(self, geometry: Geometry, prims: Optional[PrimGroup] = None) -> None: ...
    def copyEdges(self, geometry: Geometry, edges: Optional[EdgeGroup] = None) -> None: ...
    def attribValue(self, *args) -> Any: ...
    def attributeCaptureRegions(self) -> Tuple[str, ...]: ...
    def attributeCaptureObjectPaths(self) -> Tuple[str, ...]: ...
    def intrinsicNames(self) -> Tuple[str, ...]: ...
    def intrinsicValue(self, intrinsic_name: str) -> Any: ...
    def intrinsicSize(self, intrinsic_name: str) -> int: ...
    def intrinsicReadOnly(self, intrinsic_name: str) -> bool: ...
    def setIntrinsicValue(self, *args) -> None: ...
    def data(self) -> bytes: ...
    def load(self, data: bytes) -> None: ...
    def saveToFile(self, file_name: str) -> None: ...
    def loadFromFile(self, file_name: str) -> None: ...
    def merge(self, geometry: Geometry, clone_data_ids: bool = False, prims: Optional[Selection] = None) -> None: ...
    def mergePoints(self, geometry: Geometry, points: Optional[PointGroup] = None) -> None: ...
    def mergePrims(self, geometry: Geometry, prims: Optional[PrimGroup] = None) -> None: ...
    def mergeEdges(self, geometry: Geometry, edges: Optional[EdgeGroup] = None) -> None: ...
    def clear(self) -> None: ...
    def intersect(self, rayorig: Vector3, dir: Vector3, p: Vector3, n: Vector3, uvw: Vector3, pattern: Optional[str] = None, min_hit: float = 0.01, max_hit: float = 1e+18, tolerance: float = 0.01) -> int: ...
    def pointGroups(self, *args) -> Tuple[PointGroup, ...]: ...
    def findPointGroup(self, *args) -> PointGroup: ...
    def createPointGroup(self, name: str, is_ordered: bool = False, unique_name: bool = False) -> PointGroup: ...
    def primGroups(self, *args) -> Tuple[PrimGroup, ...]: ...
    def findPrimGroup(self, *args) -> PrimGroup: ...
    def createPrimGroup(self, name: str, is_ordered: bool = False, unique_name: bool = False) -> PrimGroup: ...
    def edgeGroups(self, *args) -> Tuple[EdgeGroup, ...]: ...
    def findEdgeGroup(self, *args) -> EdgeGroup: ...
    def createEdgeGroup(self, name: str) -> EdgeGroup: ...
    def vertexGroups(self, *args) -> Tuple[VertexGroup, ...]: ...
    def findVertexGroup(self, *args) -> VertexGroup: ...
    def createVertexGroup(self, name: str, is_ordered: bool = False) -> VertexGroup: ...
    def findEdge(self, p0: Point, p1: Point) -> Edge: ...
    def boundingBox(self, transform: Optional[Matrix4] = None) -> BoundingBox: ...
    def pointBoundingBox(self, ptgroup: str) -> BoundingBox: ...
    def primBoundingBox(self, primgroup: str) -> BoundingBox: ...
    def orientedBoundingBox(self) -> OrientedBoundingBox: ...
    def orientedPointBoundingBox(self, ptgroup: str) -> OrientedBoundingBox: ...
    def orientedPrimBoundingBox(self, primgroup: str) -> OrientedBoundingBox: ...
    def nearestPrim(self, position: Sequence[float]) -> Tuple[Prim, float, float, float]: ...
    def nearestPoint(self, position: Sequence[float], ptgroup: Optional[str] = None, max_radius: float = 1e+18) -> Point: ...
    def nearestPoints(self, position: Sequence[float], max_points: int, ptgroup: Optional[str] = None, max_radius: float = 1e+18) -> Tuple[Point, ...]: ...
    def primLoop(self, *args, **kwargs) -> Tuple[Prim, ...]: ...
    def pointLoop(self, *args, **kwargs) -> Tuple[Point, ...]: ...
    def edgeLoop(self, *args, **kwargs) -> Tuple[Edge, ...]: ...
    def pointNormals(self, *args) -> Tuple[Vector3, ...]: ...
    def importLop(self, *args, **kwargs) -> LopLockedStage: ...
    def importUsdStage(self, *args, **kwargs) -> None: ...
    def selection(self) -> Selection: ...
    def vexAttribDataId(self) -> Tuple[int, ...]: ...
    def modificationCounter(self) -> int: ...
    def incrementModificationCounter(self) -> None: ...
    def incrementAllDataIds(self) -> None: ...
    def incrementDataIdsForAddOrRemove(self, for_points: bool = True, for_prims: bool = True) -> None: ...
    def primitiveIntrinsicsDataId(self) -> AttribDataId: ...
    def incrementPrimitiveIntrinsicsDataId(self) -> None: ...
    def topologyDataId(self) -> AttribDataId: ...
    def incrementTopologyDataId(self) -> None: ...
    def generateAttribMenu(self, *args, **kwargs) -> Tuple[str, ...]: ...
    def isReadOnly(self) -> bool: ...
    def extractPackedPaths(self, pattern: str) -> Tuple[str, ...]: ...
    def unpackFromFolder(self, path: str) -> Geometry: ...
    def packedFolderProperties(self, path: str) -> dict[str, Any]: ...
    def packToFolder(self, path: str, geometry: Geometry, is_folder: bool = False) -> bool: ...

class GeometryDelta:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def setPointPositionsFromString(self, *args) -> None: ...

class GeometryDrawable(AdvancedDrawable):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def geometry(self) -> Geometry: ...
    def setGeometry(self, geometry: Geometry) -> None: ...
    def type(self) -> EnumValue: ...
    def useClipPlane(self, value: bool) -> None: ...

class GeometryDrawableGroup(AdvancedDrawable):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def addDrawable(self, drawable: GeometryDrawable) -> None: ...
    def drawable(self, drawable_name: str) -> GeometryDrawable: ...
    def drawables(self) -> Tuple[GeometryDrawable, ...]: ...
    def geometry(self) -> Geometry: ...
    def setGeometry(self, geometry: Geometry) -> None: ...
    def useClipPlane(self, value: bool) -> None: ...

class GadgetDrawable(GeometryDrawable):
    thisown: Incomplete
    def __init__(self, widget: int, gadget_context: int) -> None: ...
    __swig_destroy__: Incomplete

class GeometryRayCache:
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def intersect(self, geo: Geometry, rayorig: Vector3, dir: Vector3, p: Vector3, n: Vector3, uvw: Vector3, min_hit: float = 0.01, max_hit: float = 1e+18, tolerance: float = 0.01) -> int: ...
    def findAllInTube(self, geo: Geometry, rayorig: Vector3, dir: Vector3, radius: float, min_hit: float = 0.0, max_hit: float = 1e+18, tolerance: float = 0.005) -> Tuple[Point, ...]: ...

class GeometrySelection:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def ordered(self) -> bool: ...
    def geometryType(self) -> EnumValue: ...
    def setGeometryType(self, type: EnumValue) -> None: ...
    def connectivity(self) -> EnumValue: ...
    def setConnectivity(self, connectivity: EnumValue) -> None: ...
    def primitiveTypes(self) -> Tuple[EnumValue, ...]: ...
    def setPrimitiveTypes(self, primitive_types: Sequence[EnumValue]) -> None: ...
    def nodes(self) -> Tuple[Node, ...]: ...
    def selectionStrings(self, empty_string_selects_all: bool = True, force_numeric: bool = False) -> Tuple[str, ...]: ...
    def selections(self) -> Tuple[Selection, ...]: ...
    def needsMergedNode(self, parent: Node) -> bool: ...
    def mergedNode(self, parent: Node, creator_name: str, force_keep_original_objects: bool = False, display_original_objects: bool = False) -> Node: ...
    def mergedSelectionString(self, empty_string_selects_all: bool = True, force_numeric: bool = False) -> str: ...
    def shrinkSelection(self, check_uv: bool = True) -> None: ...
    def growSelection(self) -> None: ...
    def boundingBox(self) -> BoundingBox: ...
    def orientedBoundingBox(self) -> OrientedBoundingBox: ...

class GeometrySpreadsheet(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def numRows(self) -> int: ...
    def numColumns(self) -> int: ...
    def cellText(self, row: int, col: int) -> str: ...
    def attribType(self) -> EnumValue: ...
    def setAttribType(self, attrib_type: EnumValue) -> None: ...
    def groupFilter(self) -> str: ...
    def setGroupFilter(self, group: str) -> None: ...
    def groupFilterEnabled(self) -> bool: ...
    def setGroupFilterEnabled(self, enable: bool) -> None: ...
    def attribFilter(self) -> str: ...
    def setAttribFilter(self, filter: str) -> None: ...
    def attribFilterEnabled(self) -> bool: ...
    def setAttribFilterEnabled(self, enable: bool) -> None: ...
    def viewOnlySelected(self) -> bool: ...
    def setViewOnlySelected(self, enable: bool) -> None: ...
    def viewDecomposedMatrices(self) -> bool: ...
    def setViewDecomposedMatrices(self, enable: bool) -> None: ...
    def sceneGraphTree(self) -> SceneGraphTree: ...

class GeometryViewport:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def type(self) -> EnumValue: ...
    def changeType(self, type: EnumValue) -> None: ...
    def settings(self) -> GeometryViewportSettings: ...
    def name(self) -> str: ...
    def changeName(self, name: str) -> None: ...
    def home(self) -> None: ...
    def homeAll(self) -> None: ...
    def homeSelected(self) -> None: ...
    def homeGrid(self) -> None: ...
    def homeNonTemplated(self) -> None: ...
    def homeBoundingBox(self, bbox: BoundingBox, center_to_origin: bool = False) -> None: ...
    def frameAll(self) -> None: ...
    def frameBoundingBox(self, bbox: Optional[BoundingBox] = None) -> None: ...
    def frameSelected(self) -> None: ...
    def frameGrid(self) -> None: ...
    def frameNonTemplated(self) -> None: ...
    def draw(self) -> None: ...
    def viewTransform(self) -> Matrix4: ...
    def modelToGeometryTransform(self) -> Matrix4: ...
    def cameraToModelTransform(self) -> Matrix4: ...
    def ndcToCameraTransform(self) -> Matrix4: ...
    def viewportToNDCTransform(self) -> Matrix4: ...
    def windowToViewportTransform(self) -> Matrix4: ...
    def viewPivot(self) -> Vector3: ...
    def resolutionInPixels(self) -> Tuple[int, ...]: ...
    def camera(self) -> ObjNode: ...
    def cameraPath(self) -> str: ...
    def setCamera(self, *args) -> None: ...
    def saveViewToCamera(self, camera_node: ObjNode) -> None: ...
    def defaultCamera(self) -> GeometryViewportCamera: ...
    def setDefaultCamera(self, cam_settings: GeometryViewportCamera) -> None: ...
    def useDefaultCamera(self) -> None: ...
    def isCameraLockedToView(self) -> bool: ...
    def lockCameraToView(self, arg2: bool) -> None: ...
    def isViewExportedToCameraContinuously(self) -> bool: ...
    def exportViewToCameraContinuously(self, arg2: bool) -> None: ...
    def isActive2D(self) -> bool: ...
    def isActive3D(self) -> bool: ...
    def usesConstructionPlane(self) -> bool: ...
    def queryNodeAtPixel(self, x: int, y: int, pick_templates: bool = False) -> Node: ...
    def queryPrimAtPixel(self, node: Node, x: int, y: int) -> Prim: ...
    def queryInspectedGeometry(self) -> Geometry: ...
    def queryInspectedPrim(self) -> Prim: ...
    def mapToWorld(self, x: float, y: float) -> tuple[Vector3, Vector3]: ...
    def mapToScreen(self, pos: Vector3) -> Vector2: ...
    def mapFromMouseChop(self, x: float, y: float) -> tuple[int, int]: ...
    def queryWorldPositionAndNormal(self, *args) -> Tuple[Vector3, Vector3, bool]: ...
    def size(self) -> Tuple[int, ...]: ...
    def geometry(self) -> Tuple[int, ...]: ...
    def addEventCallback(self, callback: Any) -> None: ...
    def removeEventCallback(self, callback: Any) -> None: ...
    def clearEventCallbacks(self) -> None: ...
    def eventCallbacks(self) -> Tuple[Any, ...]: ...

class GeometryViewportCamera:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def stash(self) -> GeometryViewportCamera: ...
    def setPerspective(self, perspective: bool) -> None: ...
    def isPerspective(self) -> bool: ...
    def isOrthographic(self) -> bool: ...
    def setAperture(self, ap: float) -> None: ...
    def aperture(self) -> float: ...
    def setFocalLength(self, fl: float) -> None: ...
    def focalLength(self) -> float: ...
    def focalUnitScale(self) -> float: ...
    def setAspectRatio(self, ar: float) -> None: ...
    def aspectRatio(self) -> float: ...
    def setOrthoWidth(self, ow: float) -> None: ...
    def orthoWidth(self) -> float: ...
    def setRotation(self, mat: Matrix3) -> None: ...
    def rotation(self) -> Matrix3: ...
    def setTranslation(self, xyz: Sequence[float]) -> None: ...
    def translation(self) -> Tuple[float, ...]: ...
    def setPivot(self, xyz: Sequence[float]) -> None: ...
    def pivot(self) -> Tuple[float, ...]: ...
    def setClipPlanes(self, near_far: Sequence[float]) -> None: ...
    def clipPlanes(self) -> Tuple[float, ...]: ...
    def setWindowOffset(self, xy: Sequence[float]) -> None: ...
    def windowOffset(self) -> Tuple[float, ...]: ...
    def setWindowSize(self, size: Sequence[float]) -> None: ...
    def windowSize(self) -> Tuple[float, ...]: ...

class GeometryViewportDisplaySet:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def displaySetType(self) -> EnumValue: ...
    def showPointMarkers(self, b: bool) -> None: ...
    def isShowingPointMarkers(self) -> bool: ...
    def showPointNumbers(self, b: bool) -> None: ...
    def isShowingPointNumbers(self) -> bool: ...
    def showPointNormals(self, b: bool) -> None: ...
    def isShowingPointNormals(self) -> bool: ...
    def showPointPositions(self, b: bool) -> None: ...
    def isShowingPointPositions(self) -> bool: ...
    def showPointUVs(self, b: bool) -> None: ...
    def isShowingPointUVs(self) -> bool: ...
    def showPointTrails(self, b: bool) -> None: ...
    def isShowingPointTrails(self) -> bool: ...
    def showCoincidentPoints(self, b: bool) -> None: ...
    def isShowingCoincidentPoints(self) -> bool: ...
    def showPrimHulls(self, b: bool) -> None: ...
    def isShowingPrimHulls(self) -> bool: ...
    def showPrimNumbers(self, b: bool) -> None: ...
    def isShowingPrimNumbers(self) -> bool: ...
    def showPrimNormals(self, b: bool) -> None: ...
    def isShowingPrimNormals(self) -> bool: ...
    def showPrimProfiles(self, b: bool) -> None: ...
    def isShowingPrimProfiles(self) -> bool: ...
    def showPrimBreakpoints(self, b: bool) -> None: ...
    def isShowingPrimBreakpoints(self) -> bool: ...
    def showPrimProfileNumbers(self, b: bool) -> None: ...
    def isShowingPrimProfileNumbers(self) -> bool: ...
    def showPrimBackfaces(self, b: bool) -> None: ...
    def isShowingPrimBackfaces(self) -> bool: ...
    def showVertexMarkers(self, b: bool) -> None: ...
    def isShowingVertexMarkers(self) -> bool: ...
    def showVertexNumbers(self, b: bool) -> None: ...
    def isShowingVertexNumbers(self) -> bool: ...
    def showVertexNormals(self, b: bool) -> None: ...
    def isShowingVertexNormals(self) -> bool: ...
    def showVertexUVs(self, b: bool) -> None: ...
    def isShowingVertexUVs(self) -> bool: ...
    def showUVBackfaces(self, b: bool) -> None: ...
    def isShowingUVBackfaces(self) -> bool: ...
    def showUVOverlap(self, b: bool) -> None: ...
    def isShowingUVOverlap(self) -> bool: ...
    def setPointMarkerVisibility(self, v: EnumValue) -> None: ...
    def pointMarkerVisibility(self) -> EnumValue: ...
    def setPointNumberVisibility(self, v: EnumValue) -> None: ...
    def pointNumberVisibility(self) -> EnumValue: ...
    def setPointNormalVisibility(self, v: EnumValue) -> None: ...
    def pointNormalVisibility(self) -> EnumValue: ...
    def setPointPositionVisibility(self, v: EnumValue) -> None: ...
    def pointPositionVisibility(self) -> EnumValue: ...
    def setPointUVVisibility(self, v: EnumValue) -> None: ...
    def pointUVVisibility(self) -> EnumValue: ...
    def setPointTrailVisibility(self, v: EnumValue) -> None: ...
    def pointTrailVisibility(self) -> EnumValue: ...
    def setPrimNumberVisibility(self, v: EnumValue) -> None: ...
    def primNumberVisibility(self) -> EnumValue: ...
    def setPrimNormalVisibility(self, v: EnumValue) -> None: ...
    def primNormalVisibility(self) -> EnumValue: ...
    def setPrimBreakpointVisibility(self, v: EnumValue) -> None: ...
    def primBreakpointVisibility(self) -> EnumValue: ...
    def setVertexMarkerVisibility(self, v: EnumValue) -> None: ...
    def vertexMarkerVisibility(self) -> EnumValue: ...
    def setVertexNormalVisibility(self, v: EnumValue) -> None: ...
    def vertexNormalVisibility(self) -> EnumValue: ...
    def setVertexNumberVisibility(self, v: EnumValue) -> None: ...
    def vertexNumberVisibility(self) -> EnumValue: ...
    def setVertexUVVisibility(self, v: EnumValue) -> None: ...
    def vertexUVVisibility(self) -> EnumValue: ...
    def useGhostedLook(self, b: bool) -> None: ...
    def isUsingGhostedLook(self) -> bool: ...
    def useFadedLook(self, b: bool) -> None: ...
    def isUsingFadedLook(self) -> bool: ...
    def useXRay(self, b: bool) -> None: ...
    def isUsingXRay(self) -> bool: ...
    def useLighting(self, b: bool) -> None: ...
    def isUsingLighting(self) -> bool: ...
    def useUVMap(self, b: bool) -> None: ...
    def isUsingUVMap(self) -> bool: ...
    def setShadingModeLocked(self, b: bool) -> None: ...
    def isShadingModeLocked(self) -> bool: ...
    def setToolbarLinked(self, b: bool) -> None: ...
    def isToolbarLinked(self) -> bool: ...
    def setUniqueDisplaySet(self, b: bool) -> None: ...
    def isUniqueDisplaySet(self) -> bool: ...
    def setShadedMode(self, arg2: EnumValue) -> None: ...
    def shadedMode(self) -> EnumValue: ...
    def setBoundaryMode(self, arg2: EnumValue) -> None: ...
    def boundaryMode(self) -> EnumValue: ...
    def setUVBoundaryMode(self, arg2: EnumValue) -> None: ...
    def uvBoundaryMode(self) -> EnumValue: ...
    def setLinkToDisplaySet(self, arg2: EnumValue) -> None: ...
    def linkedToDisplaySet(self) -> EnumValue: ...

class GeometryViewportSettings:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def viewportType(self) -> EnumValue: ...
    def displaySet(self, settype: EnumValue) -> GeometryViewportDisplaySet: ...
    def viewAspectRatio(self, masked: bool = True) -> float: ...
    def normalScale(self) -> float: ...
    def setNormalScale(self, normal_scale: float) -> None: ...
    def vectorScale(self) -> float: ...
    def setVectorScale(self, vec_scale: float) -> None: ...
    def pointMarkerSize(self) -> float: ...
    def setPointMarkerSize(self, psize: float) -> None: ...
    def originGnomonSize(self) -> float: ...
    def setOriginGnomonSize(self, size: float) -> None: ...
    def floatingGnomonSize(self) -> float: ...
    def setFloatingGnomonSize(self, size: float) -> None: ...
    def camera(self) -> ObjNode: ...
    def setCamera(self, *args) -> None: ...
    def saveViewToCamera(self, camera_node: ObjNode) -> None: ...
    def geometryInfo(self, *args) -> EnumValue: ...
    def handleHighlight(self, *args) -> EnumValue: ...
    def closureSelection(self, *args) -> EnumValue: ...
    def guideFontSize(self, *args) -> EnumValue: ...
    def setOffsetVertexMarkers(self, enable: bool) -> None: ...
    def offsetVertexMarkers(self) -> bool: ...
    def enableGuide(self, guide: EnumValue, enabled: bool) -> None: ...
    def guideEnabled(self, guide: EnumValue) -> bool: ...
    def levelOfDetail(self, *args) -> float: ...
    def volumeQuality(self, *args) -> EnumValue: ...
    def volumeAmbientShadows(self, *args) -> float: ...
    def volumeBSplines(self, *args) -> EnumValue: ...
    def volumeWireAsPoints(self, *args) -> bool: ...
    def polygonConvexQuality(self, *args) -> bool: ...
    def subdivsionLimit(self, *args) -> int: ...
    def wireWidth(self, *args) -> float: ...
    def wireBlend(self, *args) -> float: ...
    def interiorWireAlpha(self, *args) -> float: ...
    def shadeOpenCurves(self, *args) -> bool: ...
    def selectWireframeAsSolid(self, *args) -> bool: ...
    def setWireOverPackedGeo(self, wire_over_packed: bool) -> None: ...
    def wireOverPackedGeo(self) -> bool: ...
    def particleDisplayType(self, *args) -> EnumValue: ...
    def allowParticleSprites(self, *args) -> bool: ...
    def particlePointSize(self, *args) -> float: ...
    def particleDiscSize(self, *args) -> float: ...
    def orientDiscToNormal(self, *args) -> bool: ...
    def spriteTextureLimit(self, *args) -> Tuple[int, ...]: ...
    def pointInstancing(self, *args) -> bool: ...
    def pointInstancingPercent(self, *args) -> float: ...
    def pointInstancingLimit(self, *args) -> int: ...
    def instanceStandInGeometry(self, *args) -> EnumValue: ...
    def autoGenerateVertexNormals(self, *args) -> bool: ...
    def vertexNormalCuspAngle(self, *args) -> float: ...
    def vertexNormalLimit(self, *args) -> int: ...
    def setSceneAntialias(self, aa: int) -> None: ...
    def sceneAntialias(self) -> int: ...
    def setHdrRendering(self, hdr: bool) -> None: ...
    def hdrRendering(self) -> bool: ...
    def setXrayDrawing(self, global_enable: bool) -> None: ...
    def xrayDrawing(self) -> bool: ...
    def setXrayQuality(self, quality: bool) -> None: ...
    def xrayQuality(self) -> bool: ...
    def setXrayStrength(self, strength: float) -> None: ...
    def xrayStrength(self) -> float: ...
    def setObjectOrigins(self, globel_enable: bool) -> None: ...
    def objectOrigins(self) -> bool: ...
    def setOnionSkinning(self, global_enable: bool) -> None: ...
    def onionSkinning(self) -> bool: ...
    def setOnionSkinFramesBeforeCount(self, num_frames: int) -> None: ...
    def onionSkinFramesBeforeCount(self) -> int: ...
    def setOnionSkinFramesBeforeTint(self, tint: Color) -> None: ...
    def onionSkinFramesBeforeTint(self) -> Color: ...
    def setOnionSkinFramesAfterCount(self, num_frames: int) -> None: ...
    def onionSkinFramesAfterCount(self) -> int: ...
    def setOnionSkinFramesAfterTint(self, tint: Color) -> None: ...
    def onionSkinFramesAfterTint(self) -> Color: ...
    def setOnionSkinFrameIncrement(self, frame_increment: int) -> None: ...
    def onionSkinFrameIncrement(self) -> int: ...
    def setOnionSkinOpacity(self, opacity: float) -> None: ...
    def onionSkinOpacity(self) -> float: ...
    def setSceneGamma(self, gamma: float) -> None: ...
    def sceneGamma(self) -> float: ...
    def setUseSceneLUT(self, enable: bool) -> None: ...
    def useSceneLUT(self) -> bool: ...
    def setSceneLUT(self, lut_file: str) -> None: ...
    def sceneLUT(self) -> str: ...
    def setBackgroundImageGammaLUT(self, apply_to_bg: bool) -> None: ...
    def backgroundImageGammaLUT(self) -> bool: ...
    def setDepthOfField(self, enable: bool) -> None: ...
    def getDepthOfField(self) -> bool: ...
    def setDepthOfFieldBokeh(self, viewportDOFBokeh: EnumValue) -> None: ...
    def getDepthOfFieldBokeh(self) -> EnumValue: ...
    def setDepthOfFieldBokehTexture(self, file_or_node: str) -> None: ...
    def getDepthOfFieldBokehTexture(self) -> str: ...
    def setDepthOfFieldBokehBoost(self, boost: float) -> None: ...
    def getDepthOfFieldBokehBoost(self) -> float: ...
    def setDepthOfFieldBokehAspect(self, aspect: float) -> None: ...
    def getDepthOfFieldBokehAspect(self) -> float: ...
    def showsName(self, show: bool) -> None: ...
    def showName(self) -> bool: ...
    def showsCameraName(self, show: bool) -> None: ...
    def showCameraName(self) -> bool: ...
    def showsStateStatus(self, show: bool) -> None: ...
    def showStateStatus(self) -> bool: ...
    def showsBadges(self, show: bool) -> None: ...
    def showBadges(self) -> bool: ...
    def useAspectRatio(self, enable: bool) -> None: ...
    def usingAspectRatio(self) -> bool: ...
    def setAspectRatio(self, aspect: float) -> None: ...
    def aspectRatio(self) -> float: ...
    def setViewMaskOpacity(self, opacity: float) -> None: ...
    def viewMaskOpacity(self) -> float: ...
    def setStereoMode(self, viewportStereoMode: EnumValue) -> None: ...
    def stereoMode(self) -> EnumValue: ...
    def setHomeAutoAdjustsClip(self, viewportHomeClipMode: EnumValue) -> None: ...
    def homeAutoAdjustClip(self) -> EnumValue: ...
    def setClipPlanes(self, clip: Sequence[float]) -> None: ...
    def clipPlanes(self) -> Tuple[float, ...]: ...
    def setMinHomeSize(self, min_size: float) -> None: ...
    def minHomeSize(self) -> float: ...
    def setUVDisplayAttribute(self, uv: str) -> None: ...
    def uvDisplayAttribute(self) -> str: ...
    def setUVAutoAttribute(self, detect: bool) -> None: ...
    def uvAutoAttribute(self) -> bool: ...
    def setUVVertexType(self, is_vertex_uv: bool) -> None: ...
    def uvVertexType(self) -> bool: ...
    def setUVMapTexture(self, uv_file: str) -> None: ...
    def uvMapTexture(self) -> str: ...
    def setUVMapScale(self, uv_scale: float) -> None: ...
    def uvMapScale(self) -> float: ...
    def setLighting(self, viewportLighting: EnumValue) -> None: ...
    def lighting(self) -> EnumValue: ...
    def showDiffuse(self, enable: bool) -> None: ...
    def showingDiffuse(self) -> bool: ...
    def showSpecular(self, enable: bool) -> None: ...
    def showingSpecular(self) -> bool: ...
    def showAmbient(self, enable: bool) -> None: ...
    def showingAmbient(self) -> bool: ...
    def showEmission(self, enable: bool) -> None: ...
    def showingEmission(self) -> bool: ...
    def setLightSampling(self, num_samples: int) -> None: ...
    def lightSampling(self) -> int: ...
    def setMaxLightSamples(self, samples: int) -> None: ...
    def maxLightSamples(self) -> int: ...
    def setLightLimit(self, limit: int) -> None: ...
    def getLightLimit(self) -> int: ...
    def setHeadlightIntensity(self, intensity: float) -> None: ...
    def headlightIntensity(self) -> float: ...
    def setHeadlightDirection(self, dir: Sequence[float]) -> None: ...
    def headlightDirection(self) -> Tuple[float, ...]: ...
    def setHeadlightSpecular(self, enable: bool) -> None: ...
    def headlightSpecular(self) -> bool: ...
    def setHeadlightOcclusion(self, enable: bool) -> None: ...
    def headlightOcclusion(self) -> bool: ...
    def setAmbientOcclusion(self, enable: bool) -> None: ...
    def ambientOcclusion(self) -> bool: ...
    def setAmbientOcclusionLevel(self, level: int) -> None: ...
    def ambientOcclusionLevel(self) -> int: ...
    def setShadowQuality(self, viewportShadowQuality: EnumValue) -> None: ...
    def shadowQuality(self) -> EnumValue: ...
    def setShadowSensitivity(self, offset: Sequence[int]) -> None: ...
    def shadowSensitivity(self) -> Tuple[int, ...]: ...
    def setShadowMapSize(self, size: int) -> None: ...
    def shadowMapSize(self) -> int: ...
    def setShadowMapSizeFromLight(self, enable: bool) -> None: ...
    def shadowMapSizeFromLight(self) -> bool: ...
    def setShadowMapMem(self, mem_in_mb: int) -> None: ...
    def getShadowMapMem(self) -> int: ...
    def setShadowMapTime(self, time_in_sec: float) -> None: ...
    def getShadowMapTime(self) -> float: ...
    def useReflections(self, enable: bool) -> None: ...
    def usingReflections(self) -> bool: ...
    def setHdrReflections(self, hdr_reflect: bool) -> None: ...
    def hdrReflections(self) -> bool: ...
    def setReflectMapSize(self, size: int) -> None: ...
    def reflectMapSize(self) -> int: ...
    def setMinReflectAmount(self, min_reflect: float) -> None: ...
    def minReflectAmount(self) -> float: ...
    def setFastInteractiveSampling(self, fast: bool) -> None: ...
    def fastInteractiveSampling(self) -> bool: ...
    def showMaterials(self, enable: bool) -> None: ...
    def showingMaterials(self) -> bool: ...
    def showGeometryColor(self, enable: bool) -> None: ...
    def showingGeometryColor(self) -> bool: ...
    def useTransparency(self, enable: bool) -> None: ...
    def usingTransparency(self) -> bool: ...
    def setTransparencyQuality(self, viewportTransparency: EnumValue) -> None: ...
    def transparencyQuality(self) -> EnumValue: ...
    def useDisplacement(self, enable: bool) -> None: ...
    def usingDisplacement(self) -> bool: ...
    def setDisplacementLevel(self, level: float) -> None: ...
    def displacementLevel(self) -> float: ...
    def setDefaultMaterialDiffuse(self, tint: Color) -> None: ...
    def defaultMaterialDiffuse(self) -> Color: ...
    def setDefaultMaterialSpecular(self, tint: Color) -> None: ...
    def defaultMaterialSpecular(self) -> Color: ...
    def setDefaultMaterialAmbient(self, tint: Color) -> None: ...
    def defaultMaterialAmbient(self) -> Color: ...
    def setDefaultMaterialEmission(self, tint: Color) -> None: ...
    def defaultMaterialEmission(self) -> Color: ...
    def setDefaultMaterialMatCapFile(self, filepath: str) -> None: ...
    def getDefaultMaterialMatCapFile(self) -> str: ...
    def setDefaultMaterialMatCapIntensity(self, i: float) -> None: ...
    def getDefaultMaterialMatCapIntensity(self) -> float: ...
    def setDefaultMaterialType(self, viewportDefaultMaterial: EnumValue) -> None: ...
    def getDefaultMaterialType(self) -> EnumValue: ...
    def setUniformFog(self, enable: bool) -> None: ...
    def getUniformFog(self) -> bool: ...
    def setUniformFogColor(self, color: Sequence[float]) -> None: ...
    def getUniformFogColor(self) -> Tuple[float, ...]: ...
    def setUniformFogDensity(self, density: float) -> None: ...
    def getUniformFogDensity(self) -> float: ...
    def setUniformFogOpacity(self, opacity: float) -> None: ...
    def getUniformFogOpacity(self) -> float: ...
    def setUniformFogDepthRange(self, range: Sequence[float]) -> None: ...
    def getUniformFogDepthRange(self) -> Tuple[float, ...]: ...
    def setUniformFogHeightMode(self, viewportFogHeightMode: EnumValue) -> None: ...
    def getUniformFogHeightMode(self) -> EnumValue: ...
    def setUniformFogHeight(self, h: float) -> None: ...
    def getUniformFogHeight(self) -> float: ...
    def setUniformFogHeightFalloff(self, h: float) -> None: ...
    def getUniformFogHeightFalloff(self) -> float: ...
    def setUniformFogDepthClip(self, depth: float) -> None: ...
    def getUniformFogDepthClip(self) -> float: ...
    def setUniformFogUseSun(self, enable: bool) -> None: ...
    def getUniformFogUseSun(self) -> bool: ...
    def setUniformFogSunBloom(self, bloom: float) -> None: ...
    def getUniformFogSunBloom(self) -> float: ...
    def setUniformFogSunIntensity(self, intensity: float) -> None: ...
    def getUniformFogSunIntensity(self) -> float: ...
    def setVolumeFog(self, enable: bool) -> None: ...
    def getVolumeFog(self) -> bool: ...
    def setVolumeFogColor(self, color: Sequence[float]) -> None: ...
    def getVolumeFogColor(self) -> Tuple[float, ...]: ...
    def setVolumeFogDensity(self, density: float) -> None: ...
    def getVolumeFogDensity(self) -> float: ...
    def setVolumeFogOpacity(self, opacity: float) -> None: ...
    def getVolumeFogOpacity(self) -> float: ...
    def setVolumeFogDepthRange(self, range: Sequence[float]) -> None: ...
    def getVolumeFogDepthRange(self) -> Tuple[float, ...]: ...
    def setVolumeFogHeightMode(self, viewportFogHeightMode: EnumValue) -> None: ...
    def getVolumeFogHeightMode(self) -> EnumValue: ...
    def setVolumeFogHeight(self, h: float) -> None: ...
    def getVolumeFogHeight(self) -> float: ...
    def setVolumeFogHeightFalloff(self, h: float) -> None: ...
    def getVolumeFogHeightFalloff(self) -> float: ...
    def setVolumeFogQuality(self, viewportFogQuality: EnumValue) -> None: ...
    def getVolumeFogQuality(self) -> EnumValue: ...
    def setVolumeFogLightIntensity(self, h: float) -> None: ...
    def getVolumeFogLightIntensity(self) -> float: ...
    def setVolumeFogLightScattering(self, scatter: Sequence[float]) -> None: ...
    def getVolumeFogLightScattering(self) -> Tuple[float, ...]: ...
    def setBloom(self, enable: bool) -> None: ...
    def getBloom(self) -> bool: ...
    def setBloomScale(self, scale: float) -> None: ...
    def getBloomScale(self) -> float: ...
    def setBloomIntensity(self, i: float) -> None: ...
    def getBloomIntensity(self) -> float: ...
    def setBloomThreshold(self, i: float) -> None: ...
    def getBloomThreshold(self) -> float: ...
    def setFogNode(self, node: Node) -> None: ...
    def getFogNode(self) -> Node: ...
    def setDisplayOrthoGrid(self, enable: bool) -> None: ...
    def displayOrthoGrid(self) -> bool: ...
    def setOrthoGridOffset(self, offset: Sequence[float]) -> None: ...
    def orthoGridOffset(self) -> Tuple[float, ...]: ...
    def setOrthoGridSpacing(self, offset: Sequence[float]) -> None: ...
    def orthoGridSpacing(self) -> Tuple[float, ...]: ...
    def setOrthoGridRuler(self, offset: Sequence[int]) -> None: ...
    def orthoGridRuler(self) -> Tuple[int, ...]: ...
    def setOrthoRuler(self, viewportGridRuler: EnumValue) -> None: ...
    def orthoRuler(self) -> EnumValue: ...
    def setUVReferenceGrid(self, enable: bool) -> None: ...
    def uvReferenceGrid(self) -> bool: ...
    def setUVDisplayGridOverImage(self, enable: bool) -> None: ...
    def uvReferenceGridOverImage(self) -> bool: ...
    def setUVGridPixelSpacing(self, offset: Sequence[int]) -> None: ...
    def uvGridPixelSpacing(self) -> Tuple[int, ...]: ...
    def setUVGridPixelOffset(self, offset: Sequence[float]) -> None: ...
    def uvGridPixelOffset(self) -> Tuple[float, ...]: ...
    def setClampUVGridToBackground(self, enable: bool) -> None: ...
    def clampUVGridToBackground(self) -> bool: ...
    def setDisplayUVTileBoundaries(self, enable: bool) -> None: ...
    def displayUVTileBoundaries(self) -> bool: ...
    def setColorScheme(self, viewportColorScheme: EnumValue) -> None: ...
    def colorScheme(self) -> EnumValue: ...
    def colorFromName(self, name: str) -> Color: ...
    def alphaFromName(self, name: str) -> float: ...
    def backgroundImage(self, viewportBackgroundView: EnumValue, layer: int = 1) -> GeometryViewportBackground: ...
    def setDisplayBackgroundImage(self, enable: bool) -> None: ...
    def displayBackgroundImage(self) -> bool: ...
    def setDisplayEnvironmentBackgroundImage(self, enable: bool) -> None: ...
    def displayEnvironmentBackgroundImage(self) -> bool: ...
    def setFilterBackgroundImage(self, enable: bool) -> None: ...
    def filterBackgroundImage(self) -> bool: ...
    def setApplyZoomToBackgroundImage(self, enable: bool) -> None: ...
    def applyZoomToBackgroundImage(self) -> bool: ...
    def setBackgroundImageQuality(self, quality: int) -> None: ...
    def backgroundImageQuality(self) -> int: ...
    def setDisplayTextures(self, enable: bool) -> None: ...
    def displayTextures(self) -> bool: ...
    def setDisplayTextureLayers(self, enable: bool) -> None: ...
    def displayTextureLayers(self) -> bool: ...
    def setDisplayProjectedTextures(self, enable: bool) -> None: ...
    def displayProjectedTextures(self) -> bool: ...
    def setTextureMipmapping(self, enable: bool) -> None: ...
    def textureMipmapping(self) -> bool: ...
    def setTextureAnisotropicFilter(self, num_samples: int) -> None: ...
    def textureAnisotropicFilter(self) -> int: ...
    def setTextureCacheSize(self, size_in_mb: int) -> None: ...
    def textureCacheSize(self) -> int: ...
    def setTextureMaxMemory(self, size_in_mb: int) -> None: ...
    def textureMaxMemory(self) -> int: ...
    def setTextureAutoReduce(self, enable: bool) -> None: ...
    def textureAutoReduce(self) -> bool: ...
    def setTextureAutoReduce2D(self, enable: bool) -> None: ...
    def textureAutoReduce2D(self) -> bool: ...
    def setTextureAutoReduce3D(self, enable: bool) -> None: ...
    def textureAutoReduce3D(self) -> bool: ...
    def setTextureResLimit2D(self, enable: bool) -> None: ...
    def textureResLimit2D(self) -> bool: ...
    def setTextureMaxRes2D(self, res: Sequence[int]) -> None: ...
    def textureMaxRes2D(self) -> Tuple[int, ...]: ...
    def setTextureBitDepthLimit2D(self, viewportTextureDepth: EnumValue) -> None: ...
    def textureBitDepthLimit2D(self) -> EnumValue: ...
    def setTextureScale2D(self, scale: float) -> None: ...
    def textureScale2D(self) -> float: ...
    def setTextureResLimit3D(self, enable: bool) -> None: ...
    def textureResLimit3D(self) -> bool: ...
    def setTexture2DSettingsFor3D(self, enable: bool) -> None: ...
    def texture2DSettingsFor3D(self) -> bool: ...
    def setTextureMaxRes3D(self, res: Sequence[int]) -> None: ...
    def textureMaxRes3D(self) -> Tuple[int, ...]: ...
    def setTextureBitDepthLimit3D(self, viewportTextureDepth: EnumValue) -> None: ...
    def textureBitDepthLimit3D(self) -> EnumValue: ...
    def setTextureScale3D(self, scale: float) -> None: ...
    def textureScale3D(self) -> float: ...
    def useMaterialStylesheets(self, enable: bool) -> None: ...
    def usingMaterialStylesheets(self) -> bool: ...
    def usePerPrimStylesheets(self, enable: bool) -> None: ...
    def usingPerPrimStylesheets(self) -> bool: ...
    def usePackedStylesheets(self, enable: bool) -> None: ...
    def usingPackedStylesheets(self) -> bool: ...
    def useMaterialOverrides(self, enable: bool) -> None: ...
    def usingMaterialOverrides(self) -> bool: ...
    def setSingleObjectMaterialLimit(self, num_materials: int) -> None: ...
    def singleObjectMaterialLimit(self) -> int: ...
    def setMaterialUpdate(self, viewportMaterialUpdate: EnumValue) -> None: ...
    def materialUpdate(self) -> EnumValue: ...
    def setInteractiveMaterialUpdate(self, enable: bool) -> None: ...
    def interactiveMaterialUpdate(self) -> bool: ...
    def updateMaterials(self) -> None: ...
    def setVisibleObjects(self, uv: str) -> None: ...
    def visibleObjects(self) -> str: ...
    def setRemoveBackfaces(self, enable: bool) -> None: ...
    def removeBackfaces(self) -> bool: ...
    def setHullsOnly(self, enable: bool) -> None: ...
    def hullsOnly(self) -> bool: ...
    def setDistanceBasedPackedCulling(self, enable: bool) -> None: ...
    def distanceBasedPackedCulling(self) -> bool: ...
    def setScenePolygonLimit(self, millions_of_polygons: int) -> None: ...
    def scenePolygonLimit(self) -> int: ...
    def setPackedBoundingBoxMode(self, viewportPackedBoxMode: EnumValue) -> None: ...
    def packedBoundingBoxMode(self) -> EnumValue: ...
    def setOptimizeGeometry(self, enable: bool) -> None: ...
    def optimizeGeometry(self) -> bool: ...
    def setAgentLODReduction(self, enable: bool) -> None: ...
    def agentLODReduction(self) -> bool: ...
    def setAgentLODReductionBias(self, reduce_bias: int) -> None: ...
    def agentLODReductionBias(self) -> int: ...
    def setAgentShapePointCutoff(self, num_points: int) -> None: ...
    def agentShapePointCutoff(self) -> int: ...
    def setMaxLODLevels(self, num_levels: int) -> None: ...
    def maxLODLevels(self) -> int: ...
    def setBaseLODLevel(self, base_level: int) -> None: ...
    def baseLODLevel(self) -> int: ...
    def setSingleBoneDeform(self, viewportAgentBoneDeform: EnumValue) -> None: ...
    def singleBoneDeform(self) -> EnumValue: ...
    def setAgentWireframe(self, viewportAgentWireframe: EnumValue) -> None: ...
    def agentWireframe(self) -> EnumValue: ...
    def setAgentBlendShapes(self, enable: bool) -> None: ...
    def agentBlendShapes(self) -> bool: ...

class GeometryViewportBackground:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def setImageFile(self, file_path: str) -> None: ...
    def imageFile(self) -> str: ...
    def setImageCOP(self, op_path: str) -> None: ...
    def imageCOP(self) -> str: ...
    def sourceFromCOP(self, use_cop: bool) -> None: ...
    def isCOPSource(self) -> bool: ...
    def isFileSource(self) -> bool: ...
    def setImageSource(self, file_or_op_path: str) -> None: ...
    def imageSource(self) -> str: ...
    def setEnvironmentMap(self, enable: bool) -> None: ...
    def isEnvironmentMap(self) -> bool: ...
    def setAutoPlace(self, enable: bool) -> None: ...
    def autoPlace(self) -> bool: ...
    def setImageFitMode(self, mode: EnumValue) -> None: ...
    def imageFitMode(self) -> EnumValue: ...
    def setImageOffset(self, offset: Sequence[float]) -> None: ...
    def imageOffset(self) -> Tuple[float, ...]: ...
    def setImageScale(self, scale: Sequence[float]) -> None: ...
    def imageScale(self) -> Tuple[float, ...]: ...
    def setOpacity(self, opacity: float) -> None: ...
    def opacity(self) -> float: ...
    def setBrightness(self, intensity: float) -> None: ...
    def brightness(self) -> float: ...

class _GUDetailHandle:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isFrozen(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def destroy(self) -> None: ...

class Handle:
    thisown: Incomplete
    def __init__(self, scene_viewer: SceneViewer, name: str) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def label(self) -> str: ...
    def type(self) -> str: ...
    def show(self, value: bool) -> None: ...
    def update(self, immediate: bool = False, node_update: bool = False, force_update: bool = False) -> None: ...
    def visible(self) -> bool: ...
    def enableParms(self, *args) -> None: ...
    def disableParms(self, *args) -> None: ...
    def applySettings(self, settings: str) -> None: ...
    def makePersistent(self, value: bool) -> None: ...
    def isPersistent(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isActive(self) -> bool: ...
    def parmPaths(self) -> Tuple[str, ...]: ...
    def isDynamic(self) -> bool: ...
    def info(self) -> str: ...
    def nodePath(self, index: int = 0) -> str: ...
    def makeAsDefault(self) -> None: ...
    def revertToDefault(self) -> None: ...
    def revertToFactoryDefault(self) -> None: ...
    def exportToHDA(self) -> None: ...
    def exportParmsToHDA(self) -> None: ...
    def beginUndo(self) -> None: ...
    def endUndo(self) -> None: ...

class hda:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def installFile(self, file_path: str, oplibraries_file: Optional[str] = None, change_oplibraries_file: bool = True, force_use_assets: bool = False) -> None: ...
    def uninstallFile(self, file_path: str, oplibraries_file: Optional[str] = None, change_oplibraries_file: bool = True) -> None: ...
    def reloadFile(self, file_path: str) -> None: ...
    def reloadAllFiles(self, rescan: bool = True) -> None: ...
    def reloadNamespaceOrder(self) -> None: ...
    def expandToDirectory(self, file_path: str, directory_path: str) -> None: ...
    def collapseFromDirectory(self, file_path: str, directory_path: str) -> None: ...
    def loadedFiles(self) -> Tuple[str, ...]: ...
    def renameSource(self, oplibraries_file: str, source_name: Optional[str] = None) -> None: ...
    def definitionsInFile(self, file_path: str) -> Tuple[HDADefinition, ...]: ...
    def componentsFromFullNodeTypeName(self, node_type_name: str) -> Tuple[str, ...]: ...
    def fullNodeTypeNameFromComponents(self, scope_node_type: str, name_space: str, name: str, version: str) -> str: ...
    def changeCurrentStoreUser(self, new_user: str) -> None: ...
    def safeguardHDAs(self) -> bool: ...
    def setSafeguardHDAs(self, on: bool) -> None: ...
    def removeAllEventCallbacks(self) -> None: ...
    def defaultFileExtension(self) -> str: ...
    def addEventCallback(self, event_types: Sequence[EnumValue], callback: Any) -> None: ...
    def removeEventCallback(self, event_types: Sequence[EnumValue], callback: Any) -> None: ...
    def eventCallbacks(self) -> Tuple[tuple[Tuple[EnumValue, ...], Any], ...]: ...

class HDADefinition:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def nodeType(self) -> NodeType: ...
    def nodeTypeCategory(self) -> NodeTypeCategory: ...
    def nodeTypeName(self) -> str: ...
    def libraryFilePath(self) -> str: ...
    def embeddedHelp(self) -> str: ...
    def isInstalled(self) -> bool: ...
    def installed(self) -> bool: ...
    def isCurrent(self) -> bool: ...
    def current(self) -> bool: ...
    def isPreferred(self) -> bool: ...
    def preferred(self) -> bool: ...
    def setIsPreferred(self, preferred: bool) -> None: ...
    def setPreferred(self, preferred: bool) -> None: ...
    def enableCreateBackups(self, create_backups: bool) -> None: ...
    def isCreateBackupsEnabled(self) -> bool: ...
    def sections(self) -> dict[str, HDASection]: ...
    def hasSection(self, name: str) -> bool: ...
    def addSection(self, *args) -> HDASection: ...
    def removeSection(self, name: str) -> None: ...
    def description(self) -> str: ...
    def setDescription(self, label: str) -> None: ...
    def icon(self) -> str: ...
    def setIcon(self, icon: str) -> None: ...
    def minNumInputs(self) -> int: ...
    def setMinNumInputs(self, min_num_inputs: int) -> None: ...
    def maxNumInputs(self) -> int: ...
    def setMaxNumInputs(self, max_num_inputs: int) -> None: ...
    def maxNumOutputs(self) -> int: ...
    def setMaxNumOutputs(self, max_num_outputs: int) -> None: ...
    def extraInfo(self) -> str: ...
    def setExtraInfo(self, extra_info: str) -> None: ...
    def extraInfoValue(self, key: str) -> str: ...
    def userInfo(self) -> str: ...
    def setUserInfo(self, extra_info: str) -> None: ...
    def hideDefaultParameters(self) -> bool: ...
    def representativeNodePath(self) -> str: ...
    def comment(self) -> str: ...
    def setComment(self, comment: str) -> None: ...
    def version(self) -> str: ...
    def setVersion(self, version: str) -> None: ...
    def modificationTime(self) -> int: ...
    def setModificationTime(self, time: int = -1) -> None: ...
    def options(self) -> HDAOptions: ...
    def setOptions(self, options: HDAOptions) -> None: ...
    def updateFromNode(self, node: Node) -> None: ...
    def save(self, file_name: str, template_node: Optional[Node] = None, options: Optional[HDAOptions] = None, black_box: bool = False, create_backup: bool = True) -> None: ...
    def copyToHDAFile(self, file_name: str, new_name: Optional[str] = None, new_menu_name: Optional[str] = None) -> None: ...
    def destroy(self) -> None: ...
    def parmTemplateGroup(self) -> ParmTemplateGroup: ...
    def setParmTemplateGroup(self, parm_template_group: ParmTemplateGroup, rename_conflicting_parms: bool = False, create_backup: bool = True) -> None: ...
    def setExtraFileOption(self, *args) -> None: ...
    def removeExtraFileOption(self, name: str) -> None: ...
    def compileCodeSection(self, source_section: str, destination_section: str) -> None: ...
    def tools(self) -> dict[str, Tool]: ...
    def extraFileOptions(self) -> Any: ...

class HDAModule:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __getattr__(self, name: str) -> Any: ...

class HDAOptions:
    thisown: Incomplete
    def __init__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def checkForExternalLinks(self) -> bool: ...
    def setCheckForExternalLinks(self, on: bool) -> None: ...
    def compressContents(self) -> bool: ...
    def setCompressContents(self, on: bool) -> None: ...
    def compressionType(self) -> int: ...
    def setCompressionType(self, type: int) -> None: ...
    def forbidOutsideParms(self) -> bool: ...
    def setForbidOutsideParms(self, on: bool) -> None: ...
    def lockContents(self) -> bool: ...
    def setLockContents(self, on: bool) -> None: ...
    def makeInitialParmsDefaults(self) -> bool: ...
    def setMakeInitialParmsDefaults(self, on: bool) -> None: ...
    def parametersFromVexCode(self) -> bool: ...
    def setParametersFromVexCode(self, on: bool) -> None: ...
    def prefixDroppedParmLabels(self) -> bool: ...
    def setPrefixDroppedParmLabels(self, on: bool) -> None: ...
    def prefixDroppedParmNames(self) -> bool: ...
    def setPrefixDroppedParmNames(self, on: bool) -> None: ...
    def saveInitialParmsAndContents(self) -> bool: ...
    def setSaveInitialParmsAndContents(self, on: bool) -> None: ...
    def unlockNewInstances(self) -> bool: ...
    def setUnlockNewInstances(self, on: bool) -> None: ...
    def saveSpareParms(self) -> bool: ...
    def setSaveSpareParms(self, on: bool) -> None: ...
    def saveCachedCode(self) -> bool: ...
    def setSaveCachedCode(self, on: bool) -> None: ...
    __swig_destroy__: Incomplete

class HDASection:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def definition(self) -> HDADefinition: ...
    def name(self) -> str: ...
    def contents(self, *args, **kwargs) -> str: ...
    def binaryContents(self, *args, **kwargs) -> bytes: ...
    def setContents(self, *args) -> None: ...
    def size(self) -> int: ...
    def modificationTime(self) -> int: ...
    def destroy(self) -> None: ...

class HDAViewerHandleModule:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __getattr__(self, name: str) -> Any: ...

class HDAViewerStateModule:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __getattr__(self, name: str) -> Any: ...

class HelpBrowser(PaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def displayHelp(self, node_type: NodeType) -> None: ...
    def displayHelpPath(self, help_path: str) -> None: ...
    def displayHelpPyPanel(self, interface_name: str) -> None: ...
    def homePage(self) -> str: ...
    def setHomePage(self, home_page: str) -> None: ...
    def url(self) -> str: ...
    def setUrl(self, url: str) -> None: ...
    def showUI(self, show: bool) -> None: ...

class hipFile:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def save(self, file_name: Optional[str] = None, save_to_recent_files: bool = True) -> None: ...
    def saveAndIncrementFileName(self) -> None: ...
    def saveAndBackup(self) -> str: ...
    def saveAsBackup(self) -> str: ...
    def basename(self) -> str: ...
    def name(self) -> str: ...
    def path(self) -> str: ...
    def setName(self, file_name: str) -> None: ...
    def saveMode(self) -> EnumValue: ...
    def setSaveMode(self, savemode: EnumValue) -> None: ...
    def clear(self, suppress_save_prompt: bool = False) -> None: ...
    def load(self, file_name: str, suppress_save_prompt: bool = False, ignore_load_warnings: bool = False) -> None: ...
    def merge(self, *args, **kwargs) -> None: ...
    def collisionNodesIfMerged(self, *args, **kwargs) -> Tuple[Node, ...]: ...
    def isLoadingHipFile(self) -> bool: ...
    def isShuttingDown(self) -> bool: ...
    def isNewFile(self) -> bool: ...
    def hasUnsavedChanges(self) -> bool: ...
    def groupColorTable(self) -> dict[str, Color]: ...
    def setGroupColorTable(self, color_table: dict[str, Color]) -> None: ...
    def importFBX(self, *args, **kwargs) -> tuple[Node, str]: ...
    def addEventCallback(self, callback: Any) -> None: ...
    def removeEventCallback(self, callback: Any) -> None: ...
    def clearEventCallbacks(self) -> None: ...
    def eventCallbacks(self) -> Tuple[Any, ...]: ...

class hmath:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def identityTransform(self) -> Matrix4: ...
    def buildTranslate(self, *args) -> Matrix4: ...
    def buildScale(self, *args) -> Matrix4: ...
    def buildShear(self, *args) -> Matrix4: ...
    def buildRotate(self, *args) -> Matrix4: ...
    def buildRotateAboutAxis(self, axis: Sequence[float], angle_in_deg: float) -> Matrix4: ...
    def buildRotateZToAxis(self, axis: Sequence[float]) -> Matrix4: ...
    def buildRotateLookAt(self, _from: Vector3, to: Vector3, up: Vector3) -> Matrix4: ...
    def buildTransform(self, *args, **kwargs) -> Matrix4: ...
    def degToRad(self, degrees: float) -> float: ...
    def radToDeg(self, radians: float) -> float: ...
    def noise1d(self, pos: Sequence[float]) -> float: ...
    def noise3d(self, pos: Sequence[float]) -> Vector3: ...
    def fit(self, value: float, oldmin: float, oldmax: float, newmin: float, newmax: float) -> float: ...
    def fit01(self, value: float, newmin: float, newmax: float) -> float: ...
    def fit10(self, value: float, newmin: float, newmax: float) -> float: ...
    def fit11(self, value: float, newmin: float, newmax: float) -> float: ...
    def sign(self, value: float) -> float: ...
    def clamp(self, value: float, min: float, max: float) -> float: ...
    def smooth(self, value: float, min: float, max: float) -> float: ...
    def wrap(self, value: float, min: float, max: float) -> float: ...
    def rand(self, seed: float) -> float: ...
    def orient2d(self, pa: Sequence[float], pb: Sequence[float], point: Sequence[float]) -> float: ...
    def orient3d(self, pa: Sequence[float], pb: Sequence[float], pc: Sequence[float], point: Sequence[float]) -> float: ...
    def inCircle(self, pa: Sequence[float], pb: Sequence[float], pc: Sequence[float], point: Sequence[float]) -> float: ...
    def inSphere(self, pa: Sequence[float], pb: Sequence[float], pc: Sequence[float], pd: Sequence[float], point: Sequence[float]) -> float: ...
    def intersectPlane(self, plane_point: Vector3, plane_dir: Vector3, line_origin: Vector3, line_dir: Vector3) -> Vector3: ...
    def combineLocalTransform(self, *args, **kwargs) -> Matrix4: ...
    def extractLocalTransform(self, *args, **kwargs) -> Matrix4: ...
    def slerpTransforms(self, xforms: typing.Iterable[Matrix4], input_weights: Sequence[float], normalize_weigths: bool = True, slerp_method: int = 1, slerp_flip_mehtod: int = 1) -> Matrix4: ...

class hotkeys:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def assignments(self, *args) -> Tuple[str, ...]: ...
    def hotkeyDescription(self, hotkey_symbol: str) -> str: ...
    def hotkeyLabel(self, hotkey_symbol: str) -> str: ...
    def isKeyMatch(self, key: str, hotkey_symbol: str) -> bool: ...
    def isKeycodeMatch(self, key_code: int, hotkey_symbol: str) -> bool: ...
    def findConflicts(self, *args) -> Tuple[str, ...]: ...
    def resolveAssignments(self, contexts: Sequence[str], hotkey_symbols: Sequence[str]) -> Tuple[Tuple[str, ...], ...]: ...
    def changeIndex(self) -> int: ...
    def commandsInContext(self, context: str) -> Tuple[dict[str, str], ...]: ...
    def contextsInContext(self, context: str) -> Tuple[dict[str, str], ...]: ...
    def commandCategoriesInCategory(self, category: str) -> Tuple[dict[str, str], ...]: ...
    def commandsInCategory(self, category: str) -> Tuple[dict[str, str], ...]: ...
    def commandBindingsInContext(self, context: str) -> Tuple[dict[str, str], ...]: ...
    def addCommand(self, *args) -> bool: ...
    def addContext(self, hotkey_symbol: str, label: str, description: str) -> bool: ...
    def installDefinitions(self, definitions: PluginHotkeyDefinitions) -> None: ...
    def uninstallDefinitions(self, definitions: PluginHotkeyDefinitions) -> None: ...
    def addCommandBinding(self, context: str, command: str) -> bool: ...
    def removeCommandBinding(self, context: str, command: str) -> bool: ...
    def removeHotkeySymbol(self, hotkey_symbol: str) -> None: ...
    def hotkeySymbol(self, english_context: str, english_command: Optional[str] = None) -> str: ...
    def clearAssignments(self, *args) -> bool: ...
    def addAssignment(self, *args) -> bool: ...
    def removeAssignment(self, *args) -> bool: ...
    def availableKeycodes(self, *args) -> Tuple[int, ...]: ...
    def keycodeToString(self, keycode: int, modifiers: int = 0) -> str: ...
    def stringToKeycode(self, key: str, modifiers: int = 0) -> int: ...
    def revertToDefaults(self, *args) -> None: ...
    def saveOverrides(self) -> bool: ...
    def saveAsKeymap(self, name: str, path: Optional[str] = None) -> bool: ...
    def loadKeymap(self, name: str, path: Optional[str] = None) -> bool: ...
    def importKeymap(self, name: str, path: str) -> bool: ...
    def keymaps(self) -> Tuple[tuple[str, str], ...]: ...
    def currentKeymap(self) -> str: ...

class ik:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def solveFBIK(self, *args, **kwargs) -> None: ...
    def solvePhysFBIK(self, *args, **kwargs) -> None: ...

class _ik_Joint:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def worldTransform(self) -> Matrix4: ...
    def setWorldTransform(self, xform: Matrix4) -> None: ...
    def parent(self) -> _ik_Joint: ...
    def setParent(self, parent: _ik_Joint) -> None: ...
    def rotationOrder(self) -> str: ...
    def setRotationOrder(self, rotate_order: str) -> None: ...
    def rotationWeights(self) -> Vector3: ...
    def setRotationWeights(self, weights: Vector3) -> None: ...
    def translationWeights(self) -> Vector3: ...
    def setTranslationWeights(self, weights: Vector3) -> None: ...
    def mass(self) -> float: ...
    def setMass(self, mass: float) -> None: ...
    def localCenterOfMass(self) -> Vector3: ...
    def setLocalCenterOfMass(self, com: Vector3) -> None: ...
    def rotationLimits(self) -> tuple[Vector3, Vector3]: ...
    def setRotationLimits(self, lower: Vector3, upper: Vector3) -> None: ...
    def translationLimits(self) -> tuple[Vector3, Vector3]: ...
    def setTranslationLimits(self, lower: Vector3, upper: Vector3) -> None: ...
    def restTransform(self) -> Matrix4: ...
    def setRestTransform(self, xform: Matrix4) -> None: ...
    def restRotationWeights(self) -> Vector3: ...
    def setRestRotationWeights(self, weights: Vector3) -> None: ...
    def restTranslationWeights(self) -> Vector3: ...
    def setRestTranslationWeights(self, weights: Vector3) -> None: ...

class _ik_Skeleton:
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def addJoint(self, *args, **kwargs) -> _ik_Joint: ...
    def joints(self) -> Iterator[_ik_Joint]: ...
    def centerOfMass(self) -> Vector3: ...

class _ik_Target:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def joint(self) -> _ik_Joint: ...
    def setJoint(self, joint: _ik_Joint) -> None: ...
    def goalTransform(self) -> Matrix4: ...
    def setGoalTransform(self, xform: Matrix4) -> None: ...
    def jointOffset(self) -> Matrix4: ...
    def setJointOffset(self, offset: Matrix4) -> None: ...
    def targetType(self) -> EnumValue: ...
    def setTargetType(self, target_type: EnumValue) -> None: ...
    def weight(self) -> float: ...
    def setWeight(self, weight: float) -> None: ...
    def priority(self) -> int: ...
    def setPriority(self, level: int) -> None: ...
    def depth(self) -> int: ...
    def setDepth(self, depth: int) -> None: ...

class IndexPairPropertyTable:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def attrib(self) -> Attrib: ...
    def numIndices(self) -> int: ...
    def propertyNames(self) -> Tuple[str, ...]: ...
    def propertyDataType(self, prop_name: str) -> EnumValue: ...
    def propertySize(self, prop_name: str) -> int: ...
    def floatPropertyValueAtIndex(self, prop_name: str, idx: int) -> float: ...
    def floatListPropertyValueAtIndex(self, prop_name: str, idx: int) -> Tuple[float, ...]: ...
    def intPropertyValueAtIndex(self, prop_name: str, idx: int) -> int: ...
    def intListPropertyValueAtIndex(self, prop_name: str, idx: int) -> Tuple[int, ...]: ...
    def stringPropertyValueAtIndex(self, prop_name: str, idx: int) -> str: ...
    def stringListPropertyValueAtIndex(self, prop_name: str, idx: int) -> Tuple[str, ...]: ...

class IndirectInput(NetworkMovableItem):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def outputs(self) -> Tuple[Node, ...]: ...
    def outputConnections(self) -> Tuple[NodeConnection, ...]: ...
    def input(self) -> Node: ...
    def inputOutputIndex(self) -> int: ...
    def inputItem(self) -> NetworkMovableItem: ...
    def inputItemOutputIndex(self) -> int: ...
    def setColorDefault(self) -> None: ...
    def setUseColorFromOutput(self, use_output_color: bool) -> None: ...
    def useColorFromOutput(self) -> bool: ...
    def setSymbolicColorName(self, name: str) -> None: ...
    def symbolicColorName(self) -> str: ...

class OpIndirectInput(IndirectInput):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...

class InterruptableOperation:
    thisown: Incomplete
    def __init__(self, operation_name: str, long_operation_name: Optional[str] = None, open_interrupt_dialog: bool = False) -> None: ...
    __swig_destroy__: Incomplete
    def updateLongProgress(self, percentage: float = -1.0, long_op_status: Optional[str] = None) -> None: ...
    def updateProgress(self, percentage: float = -1.0) -> None: ...
    def __enter__(self) -> InterruptableOperation: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class IntParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def minValue(self) -> int: ...
    def setMinValue(self, min_value: int) -> None: ...
    def maxValue(self) -> int: ...
    def setMaxValue(self, max_value: int) -> None: ...
    def minIsStrict(self) -> bool: ...
    def setMinIsStrict(self, on: bool) -> None: ...
    def maxIsStrict(self) -> bool: ...
    def setMaxIsStrict(self, on: bool) -> None: ...
    def defaultValue(self) -> Tuple[int, ...]: ...
    def setDefaultValue(self, default_value: Sequence[int]) -> None: ...
    def defaultExpression(self) -> Tuple[str, ...]: ...
    def setDefaultExpression(self, default_expression: Sequence[str]) -> None: ...
    def defaultExpressionLanguage(self) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self, default_expression_language: Sequence[EnumValue]) -> None: ...
    def menuItems(self) -> Tuple[str, ...]: ...
    def setMenuItems(self, menu_items: Sequence[str]) -> None: ...
    def menuLabels(self) -> Tuple[str, ...]: ...
    def setMenuLabels(self, menu_labels: Sequence[str]) -> None: ...
    def iconNames(self) -> Tuple[str, ...]: ...
    def setIconNames(self, icon_names: Sequence[str]) -> None: ...
    def itemGeneratorScript(self) -> str: ...
    def setItemGeneratorScript(self, item_generator_script: str) -> None: ...
    def itemGeneratorScriptLanguage(self) -> EnumValue: ...
    def setItemGeneratorScriptLanguage(self, language: EnumValue) -> None: ...
    def menuType(self) -> EnumValue: ...
    def setMenuType(self, menu_type: EnumValue) -> None: ...
    def menuUseToken(self) -> bool: ...
    def setMenuUseToken(self, menuusetoken: bool) -> None: ...

class CopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isDisplayFlagSet(self) -> bool: ...
    def setDisplayFlag(self, on: bool) -> None: ...
    def isTemplateFlagSet(self) -> bool: ...
    def setTemplateFlag(self, on: bool) -> None: ...
    def isCompressFlagSet(self) -> bool: ...
    def setCompressFlag(self, on: bool) -> None: ...
    def outputDataTypes(self) -> Tuple[str, ...]: ...
    def inputDataTypes(self) -> Tuple[str, ...]: ...
    def displayNode(self) -> Node: ...

class IPRViewer(PaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isPaused(self) -> bool: ...
    def isRendering(self) -> bool: ...
    def isActive(self) -> bool: ...
    def killRender(self) -> None: ...
    def pauseRender(self) -> None: ...
    def resumeRender(self) -> None: ...
    def startRender(self) -> None: ...
    def isPreviewOn(self) -> bool: ...
    def setPreview(self, on: bool) -> None: ...
    def isAutoSaveOn(self) -> bool: ...
    def setAutoSave(self, on: bool) -> None: ...
    def autoSavePath(self) -> str: ...
    def setAutoSavePath(self, path: str) -> None: ...
    def isAutoUpdateOn(self) -> bool: ...
    def setAutoUpdate(self, on: bool) -> None: ...
    def autoSaveTime(self) -> float: ...
    def setAutoSaveTime(self, time: float) -> None: ...
    def delay(self) -> float: ...
    def setDelay(self, time: float) -> None: ...
    def updateTime(self) -> float: ...
    def setUpdateTime(self, time: float) -> None: ...
    def lastClickLocation(self) -> Tuple[int, ...]: ...
    def ropNode(self) -> Node: ...
    def setRopNode(self, rop_node: Node) -> None: ...
    def imageResolution(self) -> Tuple[int, ...]: ...
    def cropRegion(self) -> Tuple[float, ...]: ...
    def planes(self) -> Tuple[str, ...]: ...
    def displayedPlane(self) -> str: ...
    def pixel(self, plane_name: str, x: int, y: int) -> Tuple[float, ...]: ...
    def pixels(self, plane_name: str) -> Tuple[Tuple[float, ...], ...]: ...
    def evaluatedStyleSheetJSON(self, x: int, y: int) -> str: ...
    def evaluatedStyleSheetPaths(self, x: int, y: int) -> Tuple[tuple[str, int], ...]: ...
    def saveFrame(self, *args) -> bool: ...
    def objectNode(self, x: int, y: int) -> Node: ...
    def prim(self, x: int, y: int) -> Prim: ...
    def materialNode(self, x: int, y: int) -> Node: ...
    def usingOCIO(self) -> bool: ...
    def setUsingOCIO(self, enable: bool) -> None: ...
    def setOCIODisplayView(self, display: Optional[str] = None, view: Optional[str] = None) -> None: ...
    def getOCIODisplay(self) -> str: ...
    def getOCIOView(self) -> str: ...

class Keyframe(BaseKeyframe):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def evaluatedType(self) -> EnumValue: ...
    def setValue(self, value: float) -> None: ...
    def value(self) -> float: ...
    def isValueSet(self) -> bool: ...
    def setInValue(self, in_value: float) -> None: ...
    def unsetInValue(self) -> None: ...
    def inValue(self) -> float: ...
    def isValueTied(self) -> bool: ...
    def isValueUsed(self) -> bool: ...
    def useValue(self, use: bool) -> None: ...
    def setSlope(self, slope: float) -> None: ...
    def slope(self) -> float: ...
    def isSlopeSet(self) -> bool: ...
    def isSlopeUsed(self) -> bool: ...
    def useSlope(self, use: bool) -> None: ...
    def isSlopeAuto(self) -> bool: ...
    def setSlopeAuto(self, on: bool) -> None: ...
    def setInSlope(self, in_slope: float) -> None: ...
    def unsetInSlope(self) -> None: ...
    def inSlope(self) -> float: ...
    def isSlopeTied(self) -> bool: ...
    def isInSlopeAuto(self) -> bool: ...
    def setInSlopeAuto(self, on: bool) -> None: ...
    def setAccel(self, accel: float) -> None: ...
    def accel(self) -> float: ...
    def isAccelSet(self) -> bool: ...
    def isAccelUsed(self) -> bool: ...
    def useAccel(self, use: bool) -> None: ...
    def setInAccel(self, in_accel: float) -> None: ...
    def unsetInAccel(self) -> None: ...
    def inAccel(self) -> float: ...
    def isAccelTied(self) -> bool: ...
    def interpretAccelAsRatio(self, on: bool) -> None: ...
    def isAccelInterpretedAsRatio(self) -> bool: ...

class LabelParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def labelParmType(self) -> EnumValue: ...
    def setLabelParmType(self, label_parm_type: EnumValue) -> None: ...
    def columnLabels(self) -> Tuple[str, ...]: ...
    def setColumnLabels(self, column_labels: Sequence[str]) -> None: ...

class logging:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def sources(self) -> Tuple[str, ...]: ...
    def setRenderLogVerbosity(self, verbosity: int) -> None: ...
    def renderLogVerbosity(self) -> int: ...
    def saveLogsToFile(self, logs: typing.Iterable[_logging_LogEntry], filepath: str) -> None: ...
    def loadLogsFromFile(self, filepath: str) -> Tuple[_logging_LogEntry, ...]: ...
    def createSource(self, source_name: str) -> None: ...
    def log(self, entry: _logging_LogEntry, source_name: Optional[str] = None) -> None: ...
    def defaultSink(self, force_create: bool = False) -> _logging_MemorySink: ...

class _logging_FileSink(_logging_Sink):
    thisown: Incomplete
    def __init__(self, filepath: str) -> None: ...
    __swig_destroy__: Incomplete
    def filePath(self) -> str: ...

class _logging_LogEntry:
    thisown: Incomplete
    def __init__(self, message: Optional[str] = None, source: Optional[str] = None, source_context: Optional[str] = None, severity: Optional[EnumValue] = None, verbosity: int = 0, time: float = 0.0, thread_id: int = 0, has_external_info: bool = False, external_host_name: Optional[str] = None, external_identifier: Optional[str] = None, external_command_line: Optional[str] = None, external_process_id: int = 0) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def source(self) -> str: ...
    def sourceContext(self) -> str: ...
    def message(self) -> str: ...
    def severity(self) -> EnumValue: ...
    def verbosity(self) -> int: ...
    def time(self) -> float: ...
    def threadId(self) -> int: ...
    def hasExternalInfo(self) -> bool: ...
    def externalHostName(self) -> str: ...
    def externalIdentifier(self) -> str: ...
    def externalCommandLine(self) -> str: ...
    def externalProcessId(self) -> int: ...

class _logging_MemorySink(_logging_Sink):
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def logEntries(self) -> Iterator[_logging_LogEntry]: ...
    def stealLogEntries(self) -> Tuple[_logging_LogEntry, ...]: ...

class LopLockedStage:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def rootLayerIdentifier(self) -> str: ...

class LopNetwork(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isDebugFlagSet(self) -> bool: ...
    def setDebugFlag(self, on: bool) -> None: ...
    def displayNode(self) -> Node: ...
    def viewerNode(self) -> Node: ...
    def viewportOverrides(self, lop: LopNode, output_index: int = 0) -> LopViewportOverrides: ...
    def saveNamedViewportOverrides(self, name: str) -> None: ...
    def loadNamedViewportOverrides(self, name: str) -> None: ...
    def namedViewportOverrides(self) -> Tuple[str, ...]: ...
    def viewportOverridesLayer(self, *args, **kwargs) -> Any: ...
    def viewportLoadMasks(self) -> LopViewportLoadMasks: ...
    def setViewportLoadMasks(self, load_masks: LopViewportLoadMasks) -> None: ...
    def saveNamedViewportLoadMasks(self, name: str, load_masks: LopViewportLoadMasks) -> None: ...
    def loadNamedViewportLoadMasks(self, name: str) -> LopViewportLoadMasks: ...
    def namedViewportLoadMasks(self) -> Tuple[str, ...]: ...
    def editablePostLayer(self, name: str, lop: LopNode, output_index: int = 0) -> LopPostLayer: ...
    def postLayerNames(self) -> Tuple[str, ...]: ...
    def postLayer(self, name: str) -> Any: ...
    def removePostLayer(self, name: str) -> None: ...
    def selection(self) -> Tuple[str, ...]: ...
    def selectionCurrentPrim(self) -> str: ...
    def selectionWithInstanceIds(self) -> Tuple[str, ...]: ...
    def setSelection(self, selection: Sequence[str], currentprim: Optional[str] = None) -> None: ...
    def selectionRules(self) -> dict[str, LopSelectionRule]: ...
    def clearSelectionRules(self) -> None: ...
    def setSelectionRule(self, name: str, rule: LopSelectionRule) -> None: ...

class LopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isDisplayFlagSet(self) -> bool: ...
    def setDisplayFlag(self, on: bool) -> None: ...
    def isDebugFlagSet(self) -> bool: ...
    def setDebugFlag(self, on: bool) -> None: ...
    def displayNode(self) -> Node: ...
    def viewerNode(self) -> Node: ...
    def editableLayer(self) -> Any: ...
    def activeLayer(self, *args, **kwargs) -> Any: ...
    def editableStage(self) -> Any: ...
    def stage(self, *args, **kwargs) -> Any: ...
    def sourceLayer(self, *args, **kwargs) -> Any: ...
    def stagePrimStats(self, *args, **kwargs) -> Any: ...
    def lastModifiedPrims(self) -> Any: ...
    def inputPrims(self, inputidx: int) -> Any: ...
    def setLastModifiedPrims(self, primpaths: Any) -> None: ...
    def loadMasks(self, *args, **kwargs) -> LopViewportLoadMasks: ...
    def sourceLayerCount(self, *args, **kwargs) -> int: ...
    def layersAboveLayerBreak(self, *args, **kwargs) -> Tuple[str, ...]: ...
    def isMostRecentStageLock(self) -> bool: ...
    def selectionRule(self, inputidx: int = -1, pattern: Optional[str] = None) -> LopSelectionRule: ...
    def network(self) -> Node: ...
    def addLockedGeometry(self, *args) -> str: ...
    def addHeldLayer(self, identifier: str) -> None: ...
    def addSubLayer(self, identifier: str) -> None: ...

class lop:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def defaultNewPrimPath(self) -> str: ...
    def setDefaultNewPrimPath(self, path: str) -> None: ...
    def defaultCollectionsPrimPath(self) -> str: ...
    def setDefaultCollectionsPrimPath(self, path: str) -> None: ...
    def defaultCollectionsPrimType(self) -> str: ...
    def setDefaultCollectionsPrimType(self, primtype: str) -> None: ...
    def defaultLightsPrimPath(self) -> str: ...
    def setDefaultLightsPrimPath(self, path: str) -> None: ...
    def defaultCamerasPrimPath(self) -> str: ...
    def setDefaultCamerasPrimPath(self, path: str) -> None: ...
    def defaultTransformSuffix(self) -> str: ...
    def setDefaultTransformSuffix(self, suffix: str) -> None: ...
    def showResolvedPaths(self) -> bool: ...
    def setShowResolvedPaths(self, show_resolved_paths: bool) -> None: ...
    def panesFollowCurrentNode(self) -> bool: ...
    def setPanesFollowCurrentNode(self, follow_current_node: bool) -> None: ...
    def panesShowViewportStage(self) -> bool: ...
    def setPanesShowViewportStage(self, show_viewport_stage: bool) -> None: ...
    def panesShowPostLayers(self) -> bool: ...
    def setPanesShowPostLayers(self, show_post_layers: bool) -> None: ...
    def autoSetAssetResolverContext(self) -> bool: ...
    def setAutoSetAssetResolverContext(self, auto_set_context: bool) -> None: ...
    def updateRendererInBackground(self) -> bool: ...
    def setUpdateRendererInBackground(self, update_in_background: bool) -> None: ...
    def loadPayloadsByDefault(self) -> bool: ...
    def setLoadPayloadsByDefault(self, load_payloads: bool) -> None: ...
    def allowViewportOnlyPayloads(self) -> bool: ...
    def setAllowViewportOnlyPayloads(self, allow_viewport_only_payloads: bool) -> None: ...
    def pathParameterCompletion(self) -> bool: ...
    def setPathParameterCompletion(self, path_parameter_completion: bool) -> None: ...
    def defaultMetersPerUnit(self) -> float: ...
    def setDefaultMetersPerUnit(self, meters_per_unit: float) -> None: ...
    def defaultUpAxis(self) -> str: ...
    def setDefaultUpAxis(self, up_axis: str) -> None: ...
    def savePreferences(self) -> bool: ...
    def reloadLayer(self, layer_path: str, recursive: bool = False) -> None: ...
    def makeValidPrimName(self, name: str) -> str: ...
    def makeValidPrimPath(self, path: str, allow_relative: bool = False) -> str: ...
    def createParmsForProperty(self, *args) -> ParmTemplateGroup: ...
    def createParmsForParameter(self, source: ParmTemplate, parametername: Optional[str] = None, usdvaluetype: Optional[str] = None, prepend_control_parm: bool = True, propertyname: Optional[str] = None) -> ParmTemplateGroup: ...
    def createConnectionParmsForProperty(self, *args) -> ParmTemplateGroup: ...
    def setParmTupleFromProperty(self, *args) -> None: ...
    def shaderTranslatorID(self, node: Node) -> int: ...
    def shaderRenderContextName(self, node: Node, node_output_name: str) -> str: ...
    def translateShader(self, *args) -> str: ...
    def reportShaderTranslation(self, node: Node, usd_shader_path: str) -> None: ...
    def shaderNodeType(self, shader_name: str) -> NodeType: ...
    def availableRendererNames(self) -> Tuple[str, ...]: ...
    def availableRendererLabels(self) -> Tuple[str, ...]: ...
    def outputProcessors(self) -> Tuple[tuple[str, str], ...]: ...
    def outputProcessorParms(self, name: str) -> ParmTemplateGroup: ...
    def usdVersionInfo(self) -> dict[str, str]: ...
    def usdOutputMinimumSeverity(self) -> EnumValue: ...
    def setUsdOutputMinimumSeverity(self, severity: EnumValue) -> None: ...
    def addLockedGeometry(self, *args) -> str: ...
    def removeLockedGeometry(self, identifier: str) -> bool: ...
    def forceReloadAllFilesFromDisk(self, reload_viewports: bool = False) -> None: ...
    def availableRendererInfo(self) -> Any: ...
    def addPreferenceChangeCallback(self, callback: Any) -> None: ...
    def removePreferenceChangeCallback(self, callback: Any) -> None: ...

class LopInstanceIdRule:
    thisown: Incomplete
    def __init__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def instanceIds(self, lopnode: LopNode) -> Tuple[int, ...]: ...
    def primPath(self) -> str: ...
    def setPrimPath(self, primpath: str) -> None: ...
    def instanceIdPattern(self) -> str: ...
    def setInstanceIdPattern(self, pattern: str) -> None: ...
    __swig_destroy__: Incomplete

class LopPostLayer:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __enter__(self) -> LopPostLayer: ...
    def layer(self) -> Any: ...
    def stage(self) -> Any: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class LopSelectionRule:
    thisown: Incomplete
    def __init__(self, pattern: Optional[str] = None) -> None: ...
    def expandedPaths(self, lopnode: Optional[LopNode] = None, return_ancestors: bool = False, fallback_to_new_paths: bool = False, stage: Optional[Any] = None) -> Any: ...
    def firstPath(self, lopnode: Optional[LopNode] = None, return_ancestors: bool = False, fallback_to_new_paths: bool = False, stage: Optional[Any] = None) -> Any: ...
    def collectionAwarePaths(self, lopnode: Optional[LopNode] = None, fallback_to_new_paths: bool = False, stage: Optional[Any] = None) -> Any: ...
    def newPaths(self, lopnode: Optional[LopNode] = None, stage: Optional[Any] = None) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def lastError(self) -> str: ...
    def lastErrorSeverity(self) -> EnumValue: ...
    def lastMayBeTimeVarying(self) -> bool: ...
    def pathPattern(self) -> str: ...
    def setPathPattern(self, pattern: str) -> None: ...
    def traversalDemands(self) -> int: ...
    def setTraversalDemands(self, demands: int) -> None: ...
    def icon(self) -> str: ...
    def setIcon(self, icon: str) -> None: ...
    def sourceNode(self) -> Node: ...
    def sourceNodeInputIndex(self) -> int: ...
    __swig_destroy__: Incomplete

class LopViewportLoadMasks:
    thisown: Incomplete
    def __init__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def setPopulateAll(self, populate_all: bool = True) -> None: ...
    def populateAll(self) -> bool: ...
    def populatePaths(self) -> Tuple[str, ...]: ...
    def isPathPopulated(self, path: str, exact_match: bool = True) -> bool: ...
    def setPopulatePaths(self, paths: Sequence[str]) -> None: ...
    def addPopulatePath(self, path: str) -> None: ...
    def removePopulatePath(self, path: str, remove_children: bool = False) -> None: ...
    def muteLayers(self) -> Tuple[str, ...]: ...
    def isLayerMuted(self, identifier: str) -> bool: ...
    def setMuteLayers(self, identifiers: Sequence[str]) -> None: ...
    def addMuteLayer(self, identifier: str) -> None: ...
    def removeMuteLayer(self, identifier: str) -> None: ...
    def setLoadAll(self, load_all: bool = True) -> None: ...
    def loadAll(self) -> bool: ...
    def loadPaths(self) -> Tuple[str, ...]: ...
    def isPathLoaded(self, path: str, exact_match: bool = True) -> bool: ...
    def isAnyChildPathLoaded(self, path: str) -> bool: ...
    def setLoadPaths(self, paths: Sequence[str]) -> None: ...
    def addLoadPath(self, path: str) -> None: ...
    def removeLoadPath(self, path: str, remove_children: bool = False) -> None: ...
    def setVariantSelectionFallbacks(self, fallbacks: dict[str, typing.Iterable[str]]) -> None: ...
    def variantSelectionFallbacks(self) -> dict[str, Tuple[str, ...]]: ...
    def dumps(self) -> str: ...
    def loads(self, masks_str: str) -> bool: ...
    __swig_destroy__: Incomplete

class LopViewportOverrides:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __enter__(self) -> LopViewportOverrides: ...
    def setDrawMode(self, prims: LopSelectionRule, drawmode: str) -> None: ...
    def setActive(self, prims: LopSelectionRule, active: bool) -> None: ...
    def setVisible(self, prims: LopSelectionRule, visible: bool) -> None: ...
    def setSelectable(self, prims: LopSelectionRule, active: bool, solo: bool = False) -> None: ...
    def setSoloLights(self, prims: Optional[LopSelectionRule] = None) -> None: ...
    def addSoloLights(self, prims: LopSelectionRule) -> None: ...
    def removeSoloLights(self, prims: LopSelectionRule) -> None: ...
    def setSoloGeometry(self, prims: Optional[LopSelectionRule] = None) -> None: ...
    def addSoloGeometry(self, prims: LopSelectionRule) -> None: ...
    def removeSoloGeometry(self, prims: LopSelectionRule) -> None: ...
    def showPurpose(self, prims: LopSelectionRule, purpose: str) -> None: ...
    def setDisplayOpacity(self, prims: LopSelectionRule, opacity: float) -> None: ...
    def clear(self, layer_id: Optional[EnumValue] = None, from_prim: Optional[str] = None) -> None: ...
    def layer(self) -> Any: ...
    def stage(self) -> Any: ...
    def soloLights(self) -> Any: ...
    def soloGeometry(self) -> Any: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class Matrix2:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, matrix2: Matrix2, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def at(self, row: int, col: int) -> float: ...
    def asTuple(self) -> Tuple[float, ...]: ...
    def asTupleOfTuples(self) -> Tuple[Tuple[float, ...], ...]: ...
    def setAt(self, row: int, col: int, value: float) -> None: ...
    def setTo(self, *args) -> None: ...
    def setToIdentity(self) -> None: ...
    def setToZero(self) -> None: ...
    def __add__(self, matrix2: Matrix2) -> Matrix2: ...
    def __sub__(self, matrix2: Matrix2) -> Matrix2: ...
    def __mul__(self, *args) -> Matrix2: ...
    def preMult(self, matrix2: Matrix2) -> Matrix2: ...
    def transposed(self) -> Matrix2: ...
    def inverted(self) -> Matrix2: ...
    def determinant(self) -> float: ...

class Matrix3:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, matrix3: Matrix3, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def at(self, row: int, col: int) -> float: ...
    def asTuple(self) -> Tuple[float, ...]: ...
    def asTupleOfTuples(self) -> Tuple[Tuple[float, ...], ...]: ...
    def setAt(self, row: int, col: int, value: float) -> None: ...
    def setTo(self, *args) -> None: ...
    def setToIdentity(self) -> None: ...
    def setToZero(self) -> None: ...
    def __add__(self, matrix3: Matrix3) -> Matrix3: ...
    def __sub__(self, matrix3: Matrix3) -> Matrix3: ...
    def __mul__(self, *args) -> Matrix3: ...
    def preMult(self, matrix3: Matrix3) -> Matrix3: ...
    def transposed(self) -> Matrix3: ...
    def inverted(self) -> Matrix3: ...
    def determinant(self) -> float: ...
    def extractRotates(self, *args, **kwargs) -> Vector3: ...
    def removeScalesAndShears(self, *args, **kwargs) -> tuple[Vector3, Vector3]: ...

class Matrix4:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, matrix4: Matrix4, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def at(self, row: int, col: int) -> float: ...
    def asTuple(self) -> Tuple[float, ...]: ...
    def asTupleOfTuples(self) -> Tuple[Tuple[float, ...], ...]: ...
    def setAt(self, row: int, col: int, value: float) -> None: ...
    def setTo(self, *args) -> None: ...
    def setToIdentity(self) -> None: ...
    def setToZero(self) -> None: ...
    def __add__(self, matrix4: Matrix4) -> Matrix4: ...
    def __sub__(self, matrix4: Matrix4) -> Matrix4: ...
    def __mul__(self, *args) -> Matrix4: ...
    def preMult(self, matrix4: Matrix4) -> Matrix4: ...
    def transposed(self) -> Matrix4: ...
    def inverted(self) -> Matrix4: ...
    def determinant(self) -> float: ...
    def explode(self, *args, **kwargs) -> dict[str, Vector3]: ...
    def extractTranslates(self, *args, **kwargs) -> Vector3: ...
    def extractRotates(self, *args, **kwargs) -> Vector3: ...
    def extractScales(self, *args, **kwargs) -> Vector3: ...
    def extractShears(self, *args, **kwargs) -> Vector3: ...
    def extractRotationMatrix3(self) -> Matrix3: ...
    def setToPerspective(self, zoom: float, image_aspect: float = 1, pixel_aspect: float = 1, clip_near: float = 0, clip_far: float = 1, window_xmin: float = 0, window_xmax: float = 1, window_ymin: float = 0, window_ymax: float = 1) -> None: ...
    def setToOrthographic(self, zoom: float, orthowidth: float = 1, image_aspect: float = 1, pixel_aspect: float = 1, clip_near: float = 0, clip_far: float = 1, window_xmin: float = 0, window_xmax: float = 1, window_ymin: float = 0, window_ymax: float = 1) -> None: ...

class MenuParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def defaultValue(self) -> int: ...
    def defaultValueAsString(self) -> str: ...
    def setDefaultValue(self, default_value: int) -> None: ...
    def defaultExpression(self) -> str: ...
    def setDefaultExpression(self, default_expression: str) -> None: ...
    def defaultExpressionLanguage(self) -> EnumValue: ...
    def setDefaultExpressionLanguage(self, default_expression_language: EnumValue) -> None: ...
    def menuItems(self) -> Tuple[str, ...]: ...
    def setMenuItems(self, menu_items: Sequence[str]) -> None: ...
    def menuLabels(self) -> Tuple[str, ...]: ...
    def setMenuLabels(self, menu_labels: Sequence[str]) -> None: ...
    def iconNames(self) -> Tuple[str, ...]: ...
    def setIconNames(self, icon_names: Sequence[str]) -> None: ...
    def itemGeneratorScript(self) -> str: ...
    def setItemGeneratorScript(self, item_generator_script: str) -> None: ...
    def itemGeneratorScriptLanguage(self) -> EnumValue: ...
    def setItemGeneratorScriptLanguage(self, language: EnumValue) -> None: ...
    def menuType(self) -> EnumValue: ...
    def setMenuType(self, menu_type: EnumValue) -> None: ...
    def menuUseToken(self) -> bool: ...
    def setMenuUseToken(self, menuusetoken: bool) -> None: ...
    def isButtonStrip(self) -> bool: ...
    def isIconStrip(self) -> bool: ...
    def isMenu(self) -> bool: ...
    def setAsButtonStrip(self) -> None: ...
    def setAsIconStrip(self) -> None: ...
    def setAsMenu(self) -> None: ...

class NetworkDot(IndirectInput):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isPinned(self) -> bool: ...
    def setPinned(self, pinned: bool) -> None: ...
    def setInput(self, *args) -> None: ...
    def inputConnections(self) -> Tuple[NodeConnection, ...]: ...
    def destroy(self) -> None: ...

class OpNetworkDot(OpIndirectInput, NetworkDot):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...

class NetworkEditor(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isShowingConnectors(self) -> bool: ...
    def isUnderCursor(self) -> bool: ...
    def isPosInside(self, pos: Vector2, ignore_floating_windows: bool = True) -> bool: ...
    def setCursorPosition(self, pos: Vector2) -> None: ...
    def cursorPosition(self, confine_to_view: bool = True) -> Vector2: ...
    def screenBounds(self) -> BoundingRect: ...
    def visibleBounds(self) -> BoundingRect: ...
    def setVisibleBounds(self, bounds: BoundingRect, transition_time: float = 0.0, max_scale: float = 0.0, set_center_when_scale_rejected: bool = False) -> None: ...
    def requestZoomReset(self) -> None: ...
    def isZoomResetRequested(self) -> bool: ...
    def setLocatingEnabled(self, enabled: bool) -> None: ...
    def locatingEnabled(self) -> bool: ...
    def lengthToScreen(self, len: float) -> float: ...
    def lengthFromScreen(self, len: float) -> float: ...
    def sizeToScreen(self, size: Vector2) -> Vector2: ...
    def sizeFromScreen(self, size: Vector2) -> Vector2: ...
    def posToScreen(self, pos: Vector2) -> Vector2: ...
    def posFromScreen(self, pos: Vector2) -> Vector2: ...
    def overviewPosToScreen(self, pos: Vector2) -> Vector2: ...
    def overviewPosFromScreen(self, pos: Vector2) -> Vector2: ...
    def overviewVisible(self) -> bool: ...
    def overviewVisibleIfAutomatic(self) -> bool: ...
    def networkItemsInBox(self, pos1: Vector2, pos2: Vector2, for_drop: bool = False, for_select: bool = False) -> Tuple[Tuple[NetworkItem, str, int], ...]: ...
    def setDropTargetItem(self, item: NetworkItem, name: str, index: int) -> None: ...
    def dropTargetItem(self) -> Tuple[NetworkItem, str, int]: ...
    def setDecoratedItem(self, item: NetworkItem, interactive: bool) -> None: ...
    def decoratedItem(self) -> NetworkItem: ...
    def decorationInteractive(self) -> bool: ...
    def setPreSelectedItems(self, items: Tuple[NetworkItem, ...]) -> None: ...
    def preSelectedItems(self) -> Tuple[NetworkItem, ...]: ...
    def selectedConnections(self) -> Tuple[NodeConnection, ...]: ...
    def clearAllSelected(self) -> None: ...
    def setNetworkBoxPendingRemovals(self, items: Sequence[NetworkMovableItem]) -> None: ...
    def networkBoxPendingRemovals(self) -> Tuple[NetworkMovableItem, ...]: ...
    def setFootprints(self, footprints: typing.Iterable[NetworkFootprint]) -> None: ...
    def footprints(self) -> Tuple[NetworkFootprint, ...]: ...
    def setCursorMap(self, cursors: dict[tuple[str, int], str]) -> None: ...
    def cursorMap(self) -> dict[tuple[str, int], str]: ...
    def setDefaultCursor(self, cursor_name: str) -> None: ...
    def defaultCursor(self) -> str: ...
    def setBackgroundImages(self, images: typing.Iterable[NetworkImage]) -> None: ...
    def backgroundImages(self) -> Tuple[NetworkImage, ...]: ...
    def itemRect(self, item: NetworkMovableItem, adjusted: bool = True) -> BoundingRect: ...
    def itemInputPos(self, item: NetworkMovableItem, input_index: int, adjusted: bool = True) -> Vector2: ...
    def itemInputDir(self, item: NetworkMovableItem, input_index: int) -> Vector2: ...
    def itemOutputPos(self, item: NetworkMovableItem, output_index: int, adjusted: bool = True) -> Vector2: ...
    def itemOutputDir(self, item: NetworkMovableItem, output_index: int) -> Vector2: ...
    def allVisibleRects(self, ignore_items: Sequence[NetworkMovableItem], adjusted: bool = True) -> Tuple[tuple[NetworkMovableItem, BoundingRect], ...]: ...
    def setAdjustments(self, items: Tuple[NetworkItem, ...], adjustments: typing.Iterable[NetworkAnimValue], auto_remove: bool = False) -> None: ...
    def setShapes(self, shapes: Tuple[NetworkShape, ...]) -> None: ...
    def setOverlayShapes(self, shapes: Tuple[NetworkShape, ...]) -> None: ...
    def setTooltip(self, tooltip: str) -> None: ...
    def tooltip(self) -> str: ...
    def setPrompt(self, prompt: str) -> None: ...
    def prompt(self) -> str: ...
    def flashMessage(self, image: str, message: str, duration: float) -> None: ...
    def openTabMenu(self, *args, **kwargs) -> None: ...
    def openNodeMenu(self, *args, **kwargs) -> None: ...
    def openVopEffectsMenu(self, node: VopNode, input_index: int) -> None: ...
    def openVopOutputInfoMenu(self, node: VopNode, output_index: int) -> None: ...
    def openFloatingParameterEditor(self, node: Node) -> None: ...
    def openNameEditor(self, item: NetworkMovableItem, select_all: bool = False) -> int: ...
    def openCommentEditor(self, item: NetworkMovableItem, select_all: bool = False) -> int: ...
    def openNoteEditor(self, stickynote: StickyNote, select_all: bool = False) -> int: ...
    def closeTextEditor(self, id: int, apply_changes: bool = True) -> None: ...
    def runShelfTool(self, tool_name: str) -> None: ...
    def scheduleTimerEvent(self, seconds: float) -> int: ...
    def handleCurrentKeyboardEvent(self, resend: bool = False) -> None: ...
    def setVolatileHotkeys(self, hotkey_symbols: Sequence[str]) -> None: ...
    def isVolatileHotkeyDown(self, hotkey_symbol: str) -> bool: ...
    def hotkeyAssignments(self, hotkey_symbols: Sequence[str]) -> Tuple[Tuple[str, ...], ...]: ...
    def setPref(self, pref: str, value: str) -> None: ...
    def getPref(self, pref: str) -> str: ...
    def setPrefs(self, prefs: dict[str, str]) -> None: ...
    def getPrefs(self) -> dict[str, str]: ...
    def registerPref(self, pref: str, value: str, _global: bool) -> None: ...
    def badges(self) -> Tuple[Tuple[str, ...], ...]: ...
    def textBadges(self) -> Tuple[Tuple[str, ...], ...]: ...
    def nodeShapes(self) -> Tuple[str, ...]: ...
    def reloadNodeShapes(self) -> Tuple[str, ...]: ...
    def redraw(self) -> None: ...
    def setDragSourceData(self, items: Sequence[NetworkMovableItem]) -> None: ...
    def setDragSourceWorkItem(self, item_id: int) -> None: ...
    def popEventContext(self) -> None: ...
    def parmScrollPosition(self) -> Vector2: ...
    def setParmScrollPosition(self, position: Vector2) -> None: ...
    def setParmFilterEnabled(self, on: bool) -> None: ...
    def parmFilterEnabled(self) -> bool: ...
    def setParmFilterExactMatch(self, on: bool) -> None: ...
    def parmFilterExactMatch(self) -> bool: ...
    def setParmFilterPattern(self, filter: str) -> None: ...
    def parmFilterPattern(self) -> str: ...
    def setParmFilterMode(self, *args) -> None: ...
    def parmFilterMode(self) -> EnumValue: ...
    def setParmFilterCriteria(self, *args) -> None: ...
    def parmFilterCriteria(self) -> EnumValue: ...
    def pushEventContext(self, module: str, data: Any) -> bool: ...
    def eventContextData(self) -> Any: ...

class NetworkAnimValue:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class NetworkFootprint:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class NetworkImage:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def setPath(self, path: str) -> None: ...
    def path(self) -> str: ...
    def setRelativeToPath(self, path: str) -> None: ...
    def relativeToPath(self) -> str: ...
    def setRect(self, rect: BoundingRect) -> None: ...
    def rect(self) -> BoundingRect: ...
    def setBrightness(self, brightness: float) -> None: ...
    def brightness(self) -> float: ...

class NetworkShape:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class NetworkShapeLine(NetworkShape):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class NetworkShapeBox(NetworkShape):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class NetworkShapeNodeShape(NetworkShape):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class NetworkShapeConnection(NetworkShape):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class Bundle:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def destroy(self) -> None: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def findBestFilter(self) -> EnumValue: ...
    def filter(self) -> EnumValue: ...
    def setFilter(self, filter: EnumValue) -> None: ...
    def pattern(self) -> Any: ...
    def setPattern(self, pattern_or_none: str) -> None: ...
    def nodes(self) -> Tuple[Node, ...]: ...
    def containsNode(self, node: Node) -> bool: ...
    def addNode(self, node: Node) -> None: ...
    def removeNode(self, base_node: Node) -> None: ...
    def clear(self) -> None: ...
    def isSelected(self) -> bool: ...
    def setSelected(self, on: bool, clear_all_selected: bool = False) -> None: ...
    def convertToNormalBundle(self) -> None: ...
    def convertToSmartBundle(self) -> None: ...

class NodeConnection(NetworkItem):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def outputNode(self) -> Node: ...
    def inputIndex(self) -> int: ...
    def outputItem(self) -> NetworkMovableItem: ...
    def inputNode(self) -> Node: ...
    def outputIndex(self) -> int: ...
    def subnetIndirectInput(self) -> SubnetIndirectInput: ...
    def inputItem(self) -> NetworkMovableItem: ...
    def inputItemOutputIndex(self) -> int: ...
    def isSelected(self) -> bool: ...
    def setSelected(self, selected: bool, clear_all_selected: bool = False) -> None: ...
    def inputName(self) -> str: ...
    def inputLabel(self) -> str: ...
    def inputDataType(self) -> str: ...
    def outputName(self) -> str: ...
    def outputLabel(self) -> str: ...
    def outputDataType(self) -> str: ...

class ApexNodeConnection(NodeConnection):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...
    def sessionId(self) -> int: ...

class OpNodeConnection(NodeConnection):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...

class NodeInfoTree:
    thisown: Incomplete
    def __init__(self, tree_root: NodeInfoTree, tree: NodeInfoTree) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def infoType(self) -> str: ...
    def branchOrder(self) -> Tuple[str, ...]: ...
    def branches(self) -> dict[str, NodeInfoTree]: ...
    def headings(self) -> Tuple[str, ...]: ...
    def rows(self) -> Tuple[Tuple[str, ...], ...]: ...

class OrboltURLHandler:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def updateProgressBar(self, percentage: float) -> None: ...
    def closeSplashScreen(self, immediate: bool = False) -> None: ...

class OrientedBoundingBox:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, other: OrientedBoundingBox, tol: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def __mul__(self, matrix4: Matrix4) -> OrientedBoundingBox: ...
    def center(self) -> Vector3: ...
    def rotation(self) -> Matrix3: ...
    def sizevec(self) -> Vector3: ...
    def contains(self, point: Sequence[float]) -> bool: ...
    def isValid(self) -> bool: ...

class OrientedBoundingRect:
    thisown: Incomplete
    def __init__(self, points: typing.Iterable[Vector2]) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, brect: OrientedBoundingRect, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def sizevec(self) -> Vector2: ...
    def center(self) -> Vector2: ...
    def orientation(self) -> Matrix2: ...

class PackedFragment(PackedPrim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def setEmbeddedGeometry(self, geometry: Geometry, attrib: str, name: str) -> None: ...

class PackedGeometry(PackedPrim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def getEmbeddedGeometry(self) -> Geometry: ...
    def setEmbeddedGeometry(self, geometry: Geometry) -> None: ...

class Parm:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def node(self) -> Node: ...
    def tuple(self) -> ParmTuple: ...
    def parmTemplate(self) -> ParmTemplate: ...
    def name(self) -> str: ...
    def path(self) -> str: ...
    def description(self) -> str: ...
    def componentIndex(self) -> int: ...
    def menuContents(self) -> Tuple[str, ...]: ...
    def menuLabels(self) -> Tuple[str, ...]: ...
    def menuItems(self) -> Tuple[str, ...]: ...
    def isDynamicMenu(self) -> bool: ...
    def pressButton(self, *args, **kwargs) -> None: ...
    def referenceExpression(self, to_base_parm: Parm, language: Optional[EnumValue] = None, follow_parm_reference: bool = True) -> str: ...
    def setFromParm(self, src: Parm) -> None: ...
    def setFromParmDefaults(self, src: Parm) -> None: ...
    def overwriteDefaults(self) -> None: ...
    def revertToDefaults(self) -> None: ...
    def revertToAndRestorePermanentDefaults(self) -> None: ...
    def revertToRampDefaults(self) -> None: ...
    def hasTemporaryDefaults(self) -> bool: ...
    def isAtDefault(self, compare_temporary_defaults: bool = True, compare_expressions: bool = True) -> bool: ...
    def isAtRampDefault(self) -> bool: ...
    def setExpression(self, expression: str, language: Optional[EnumValue] = None, replace_expression: bool = True) -> None: ...
    def expression(self) -> str: ...
    def expressionLanguage(self) -> EnumValue: ...
    def rawValue(self) -> str: ...
    def isShowingExpression(self) -> bool: ...
    def showExpression(self, value: bool) -> None: ...
    def setKeyframe(self, keyframe: BaseKeyframe) -> None: ...
    def setKeyframes(self, keyframes: Tuple[BaseKeyframe, ...]) -> None: ...
    def keyframes(self) -> Tuple[BaseKeyframe, ...]: ...
    def keyframesInRange(self, start_frame: float, end_frame: float) -> Tuple[BaseKeyframe, ...]: ...
    def keyframesBefore(self, frame: float) -> Tuple[BaseKeyframe, ...]: ...
    def keyframesAfter(self, frame: float) -> Tuple[BaseKeyframe, ...]: ...
    def evalAsFloat(self) -> float: ...
    def evalAsFloatAtFrame(self, frame: float) -> float: ...
    def evalAsInt(self) -> int: ...
    def evalAsIntAtFrame(self, frame: float) -> int: ...
    def evalAsString(self) -> str: ...
    def evalAsStringAtFrame(self, frame: float) -> str: ...
    def evalAsGeometry(self) -> Geometry: ...
    def evalAsGeometryAtFrame(self, frame: float) -> Geometry: ...
    def evalAsJSONMap(self) -> dict[str, str]: ...
    def evalAsJSONMapAtFrame(self, frame: float) -> dict[str, str]: ...
    def evalAsRamp(self) -> Ramp: ...
    def evalAsRampAtFrame(self, frame: float) -> Ramp: ...
    def evalAsNode(self) -> Node: ...
    def evalAsNodeAtFrame(self, frame: float) -> Node: ...
    def evalAsNodes(self) -> Tuple[Node, ...]: ...
    def evalAsNodesAtFrame(self, frame: float) -> Tuple[Node, ...]: ...
    def evalAsNodePath(self) -> str: ...
    def evalAsNodePathAtFrame(self, frame: float) -> str: ...
    def evalAsNodePaths(self) -> Tuple[str, ...]: ...
    def evalAsNodePathsAtFrame(self, frame: float) -> Tuple[str, ...]: ...
    def unexpandedString(self) -> str: ...
    def deleteKeyframeAtFrame(self, frame: float) -> None: ...
    def deleteAllKeyframes(self) -> None: ...
    def getReferencedParm(self) -> Parm: ...
    def parmsReferencingThis(self) -> Tuple[Parm, ...]: ...
    def isLocked(self) -> bool: ...
    def lock(self, on: bool) -> None: ...
    def isAutoscoped(self) -> bool: ...
    def setAutoscope(self, on: bool) -> None: ...
    def isScoped(self) -> bool: ...
    def setScope(self, on: bool) -> None: ...
    def isAutoSelected(self) -> bool: ...
    def setAutoSelect(self, on: bool) -> None: ...
    def isSelected(self) -> bool: ...
    def setSelect(self, on: bool) -> None: ...
    def alias(self) -> str: ...
    def setAlias(self, alias_name: str) -> None: ...
    def isSpare(self) -> bool: ...
    def isTimeDependent(self) -> bool: ...
    def isMultiParmInstance(self) -> bool: ...
    def isMultiParmParent(self) -> bool: ...
    def parentMultiParm(self) -> Parm: ...
    def multiParmInstanceIndices(self) -> Tuple[int, ...]: ...
    def multiParmInstancesPerItem(self) -> int: ...
    def multiParmInstancesCount(self) -> int: ...
    def multiParmStartOffset(self) -> int: ...
    def multiParmInstances(self) -> Tuple[Parm, ...]: ...
    def insertMultiParmInstance(self, inst_index: int) -> None: ...
    def removeMultiParmInstance(self, inst_index: int) -> None: ...
    def moveMultiParmInstances(self, moves: Sequence[int]) -> None: ...
    def moveUpMultiParmInstance(self, inst_index: int) -> None: ...
    def moveDownMultiParmInstance(self, inst_index: int) -> None: ...
    def containingFolders(self) -> Tuple[str, ...]: ...
    def containingFolderIndices(self) -> Tuple[int, ...]: ...
    def containingFolderSetParmTuples(self) -> Tuple[ParmTuple, ...]: ...
    def asCode(self, brief: bool = False, save_values: bool = True, save_keyframes: bool = True, save_keys_in_frames: bool = False, save_flag_values: bool = True, save_aliases: bool = True, function_name: Optional[str] = None) -> str: ...
    def createClip(self, parent_node: Node, name: str, create_new: bool, apply_immediately: bool, current_value_only: bool = False, create_locked: bool = False, set_value_to_default: bool = False) -> Node: ...
    def appendClip(self, chop_node: Node, apply_immediately: bool, current_value_only: bool = False, create_locked: bool = False, set_value_to_default: bool = False) -> None: ...
    def overrideTrack(self) -> Track: ...
    def isOverrideTrackActive(self) -> bool: ...
    def copyToParmClipboard(self) -> None: ...
    def isDisabled(self) -> bool: ...
    def disable(self, on: bool) -> None: ...
    def isHidden(self) -> bool: ...
    def hide(self, on: bool) -> None: ...
    def isVisible(self) -> bool: ...
    def isConstrained(self) -> bool: ...
    def isPending(self) -> bool: ...
    def keyframeExtrapolation(self, before: bool) -> EnumValue: ...
    def setKeyframeExtrapolation(self, before: bool, e: EnumValue) -> None: ...
    def keyframesRefit(self, *args, **kwargs) -> None: ...
    def uiBackgroundColor(self) -> Color: ...
    def eval(self) -> Any: ...
    def evalAtFrame(self, frame: float) -> Any: ...
    def evalAtTime(self, time: float) -> Any: ...

class ParameterEditor(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def scrollPosition(self) -> Vector2: ...
    def setScrollPosition(self, position: Vector2) -> None: ...
    def setFilterEnabled(self, on: bool) -> None: ...
    def filterEnabled(self) -> bool: ...
    def setFilterPattern(self, filter: str) -> None: ...
    def filterPattern(self) -> str: ...
    def setFilterExactMatch(self, on: bool) -> None: ...
    def filterExactMatch(self) -> bool: ...
    def setFilterMode(self, *args) -> None: ...
    def filterMode(self) -> EnumValue: ...
    def setFilterCriteria(self, *args) -> None: ...
    def filterCriteria(self) -> EnumValue: ...
    def isShowingParmDialog(self) -> bool: ...
    def setShowParmDialog(self, show: bool) -> None: ...
    def setMultiParmTab(self, parm: str, index: int) -> None: ...
    def multiParmTab(self, parm: str) -> int: ...
    def visibleParms(self) -> Tuple[ParmTuple, ...]: ...

class ParmTuple:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def node(self) -> Node: ...
    def parmTemplate(self) -> ParmTemplate: ...
    def name(self) -> str: ...
    def description(self) -> str: ...
    def setPending(self, *args) -> None: ...
    def overwriteDefaults(self) -> None: ...
    def revertToDefaults(self) -> None: ...
    def revertToAndRestorePermanentDefaults(self) -> None: ...
    def isAtDefault(self, compare_temporary_defaults: bool = True, compare_expressions: bool = True) -> bool: ...
    def isAtRampDefault(self) -> bool: ...
    def evalAsFloats(self) -> Tuple[float, ...]: ...
    def evalAsFloatsAtFrame(self, frame: float) -> Tuple[float, ...]: ...
    def evalAsInts(self) -> Tuple[int, ...]: ...
    def evalAsIntsAtFrame(self, frame: float) -> Tuple[int, ...]: ...
    def evalAsStrings(self) -> Tuple[str, ...]: ...
    def evalAsStringsAtFrame(self, frame: float) -> Tuple[str, ...]: ...
    def evalAsRamps(self) -> Tuple[Ramp, ...]: ...
    def evalAsRampsAtFrame(self, frame: float) -> Tuple[Ramp, ...]: ...
    def evalAsGeometries(self) -> Tuple[Geometry, ...]: ...
    def evalAsGeometriesAtFrame(self, frame: float) -> Tuple[Geometry, ...]: ...
    def evalAsJSONMaps(self) -> Tuple[dict[str, str], ...]: ...
    def evalAsJSONMapsAtFrame(self, frame: float) -> Tuple[dict[str, str], ...]: ...
    def lock(self, *args) -> None: ...
    def setAutoscope(self, bool_values: Sequence[bool]) -> None: ...
    def isSpare(self) -> bool: ...
    def isTimeDependent(self) -> bool: ...
    def isMultiParmInstance(self) -> bool: ...
    def isMultiParmParent(self) -> bool: ...
    def parentMultiParm(self) -> Parm: ...
    def multiParmInstanceIndices(self) -> Tuple[int, ...]: ...
    def multiParmInstancesPerItem(self) -> int: ...
    def multiParmInstancesCount(self) -> int: ...
    def multiParmStartOffset(self) -> int: ...
    def multiParmInstances(self) -> Tuple[ParmTuple, ...]: ...
    def containingFolders(self) -> Tuple[str, ...]: ...
    def containingFolderIndices(self) -> Tuple[int, ...]: ...
    def containingFolderSetParmTuples(self) -> Tuple[ParmTuple, ...]: ...
    def setKeyframe(self, keyframes: Tuple[BaseKeyframe, ...]) -> None: ...
    def deleteKeyframeAtFrame(self, frame: float) -> None: ...
    def deleteAllKeyframes(self) -> None: ...
    def __getitem__(self, index: int) -> Parm: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def createClip(self, parent_node: Node, name: str, create_new: bool, apply_immediately: bool, current_value_only: bool = False, create_locked: bool = False, set_value_to_default: bool = False) -> Node: ...
    def appendClip(self, chop_node: Node, apply_immediately: bool, current_value_only: bool = False, create_locked: bool = False, set_value_to_default: bool = False) -> None: ...
    def copyToParmClipboard(self) -> None: ...
    def asCode(self, brief: bool = False, save_values: bool = True, save_keyframes: bool = True, save_keys_in_frames: bool = False, save_flag_values: bool = True, save_aliases: bool = True, function_name: Optional[str] = None) -> str: ...
    def help(self) -> str: ...
    def helpUrl(self) -> str: ...
    def isDisabled(self) -> bool: ...
    def disable(self, on: bool) -> None: ...
    def isHidden(self) -> bool: ...
    def hide(self, on: bool) -> None: ...
    def isConstrained(self) -> bool: ...
    def isShowingExpression(self) -> bool: ...
    def showExpression(self, value: bool) -> None: ...
    def eval(self) -> Any: ...
    def evalAtFrame(self, frame: float) -> Any: ...
    def evalAtTime(self, time: float) -> Any: ...

class perfMon:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def startProfile(self, title: str, options: Optional[PerfMonRecordOptions] = None) -> PerfMonProfile: ...
    def loadProfile(self, file_path: str) -> PerfMonProfile: ...
    def saveProfile(self, profile: PerfMonProfile, file_path: str) -> None: ...
    def activeProfile(self) -> PerfMonProfile: ...
    def startTimedEvent(self, description: str, auto_nest_events: bool = True) -> PerfMonEvent: ...
    def startEvent(self, description: str, auto_nest_events: bool = True) -> PerfMonEvent: ...
    def startTimedCookEvent(self, description: str, node: Node) -> PerfMonEvent: ...
    def startCookEvent(self, description: str, node: Node) -> PerfMonEvent: ...
    def startPaneEvent(self, panetype: str, operation: str) -> PerfMonEvent: ...
    def isRecording(self) -> bool: ...

class PerfMonEvent:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def id(self) -> int: ...
    def name(self) -> str: ...
    def object(self) -> str: ...
    def isAutoNestEnabled(self) -> bool: ...
    def stop(self) -> Tuple[float, ...]: ...
    def isTiming(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def startTime(self) -> float: ...
    def __enter__(self) -> PerfMonEvent: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class PerfMonProfile:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def id(self) -> int: ...
    def title(self) -> str: ...
    def isActive(self) -> bool: ...
    def isPaused(self) -> bool: ...
    def isRecordingCookStats(self) -> bool: ...
    def isRecordingPDGCookStats(self) -> bool: ...
    def isRecordingSolveStats(self) -> bool: ...
    def isRecordingDrawStats(self) -> bool: ...
    def isRecordingGPUDrawStats(self) -> bool: ...
    def isRecordingViewportStats(self) -> bool: ...
    def isRecordingScriptStats(self) -> bool: ...
    def isRecordingRenderStats(self) -> bool: ...
    def isRecordingThreadStats(self) -> bool: ...
    def isRecordingFrameStats(self) -> bool: ...
    def isRecordingMemoryStats(self) -> bool: ...
    def isRecordingErrors(self) -> bool: ...
    def stop(self) -> None: ...
    def cancel(self) -> None: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def exportAsCSV(self, file_path: str) -> None: ...

class PerfMonRecordOptions:
    thisown: Incomplete
    def __init__(self, cook_stats: bool = True, pdg_cook_stats: bool = True, solve_stats: bool = True, draw_stats: bool = True, gpu_draw_stats: bool = False, viewport_stats: bool = True, script_stats: bool = True, render_stats: bool = True, thread_stats: bool = False, frame_stats: bool = True, memory_stats: bool = False, errors: bool = True, pane_stats: bool = True) -> None: ...
    __swig_destroy__: Incomplete
    def recordCookStats(self) -> bool: ...
    def recordPDGCookStats(self) -> bool: ...
    def recordSolveStats(self) -> bool: ...
    def recordDrawStats(self) -> bool: ...
    def recordGPUDrawStats(self) -> bool: ...
    def recordViewportStats(self) -> bool: ...
    def recordPaneStats(self) -> bool: ...
    def recordScriptStats(self) -> bool: ...
    def recordRenderStats(self) -> bool: ...
    def recordThreadStats(self) -> bool: ...
    def recordFrameStats(self) -> bool: ...
    def recordMemoryStats(self) -> bool: ...
    def recordErrors(self) -> bool: ...
    def setRecordCookStats(self, record: bool) -> None: ...
    def setRecordPDGCookStats(self, record: bool) -> None: ...
    def setRecordSolveStats(self, record: bool) -> None: ...
    def setRecordDrawStats(self, record: bool) -> None: ...
    def setRecordGPUDrawStats(self, record: bool) -> None: ...
    def setRecordViewportStats(self, record: bool) -> None: ...
    def setRecordPaneStats(self, record: bool) -> None: ...
    def setRecordScriptStats(self, record: bool) -> None: ...
    def setRecordRenderStats(self, record: bool) -> None: ...
    def setRecordThreadStats(self, record: bool) -> None: ...
    def setRecordFrameStats(self, record: bool) -> None: ...
    def setRecordMemoryStats(self, record: bool) -> None: ...
    def setRecordErrors(self, record: bool) -> None: ...

class PerformanceMonitor(PaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isLiveUpdatesEnabled(self) -> bool: ...
    def enableLiveUpdates(self, on: bool) -> None: ...
    def isRecording(self) -> bool: ...
    def startRecording(self) -> None: ...
    def stopRecording(self) -> None: ...
    def isSamplingCookStats(self) -> bool: ...
    def isSamplingPDGCookStats(self) -> bool: ...
    def isSamplingErrors(self) -> bool: ...
    def isSamplingFrameStats(self) -> bool: ...
    def isSamplingMemoryStats(self) -> bool: ...
    def isSamplingObjectDrawStats(self) -> bool: ...
    def isSamplingObjectGPUDrawStats(self) -> bool: ...
    def isSamplingScriptStats(self) -> bool: ...
    def isSamplingSolveStats(self) -> bool: ...
    def isSamplingThreadStats(self) -> bool: ...
    def isSamplingViewportStats(self) -> bool: ...
    def sampleCookStats(self, on: bool) -> None: ...
    def samplePDGCookStats(self, on: bool) -> None: ...
    def sampleErrors(self, on: bool) -> None: ...
    def sampleFrameStats(self, on: bool) -> None: ...
    def sampleMemoryStats(self, on: bool) -> None: ...
    def sampleObjectDrawStats(self, on: bool) -> None: ...
    def sampleObjectGPUDrawStats(self, on: bool) -> None: ...
    def sampleScriptStats(self, on: bool) -> None: ...
    def sampleSolveStats(self, on: bool) -> None: ...
    def sampleThreadStats(self, on: bool) -> None: ...
    def sampleViewportStats(self, on: bool) -> None: ...
    def showProfile(self, profile: PerfMonProfile) -> None: ...
    def objectView(self) -> EnumValue: ...
    def setObjectView(self, structure: EnumValue) -> None: ...
    def timeFormat(self) -> EnumValue: ...
    def setTimeFormat(self, format: EnumValue) -> None: ...
    def timeUnit(self) -> EnumValue: ...
    def setTimeUnit(self, unit: EnumValue) -> None: ...

class playbar:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isPlaying(self) -> bool: ...
    def play(self) -> None: ...
    def stop(self) -> None: ...
    def reverse(self) -> None: ...
    def jumpToNextKeyframe(self) -> None: ...
    def jumpToPreviousKeyframe(self) -> None: ...
    def playMode(self) -> EnumValue: ...
    def setPlayMode(self, mode: EnumValue) -> None: ...
    def frameIncrement(self) -> float: ...
    def setFrameIncrement(self, increment: float) -> None: ...
    def playbackRange(self) -> Vector2: ...
    def setPlaybackRange(self, start: float, end: float) -> None: ...
    def isRangeRestricted(self) -> bool: ...
    def setRestrictRange(self, on: bool) -> None: ...
    def usesIntegerFrames(self) -> bool: ...
    def setUseIntegerFrames(self, on: bool) -> None: ...
    def isRealTime(self) -> bool: ...
    def setRealTime(self, on: bool) -> None: ...
    def realTimeFactor(self) -> float: ...
    def setRealTimeFactor(self, factor: float) -> None: ...
    def isRealTimeSkipping(self) -> bool: ...
    def setRealTimeSkipping(self, on: bool) -> None: ...
    def isAudioShown(self) -> bool: ...
    def showAudio(self, on: bool) -> None: ...
    def areKeysShown(self) -> bool: ...
    def showKeys(self, on: bool) -> None: ...
    def isSimCacheShown(self) -> bool: ...
    def showSimCache(self, on: bool) -> None: ...
    def isRangeSliderShown(self) -> bool: ...
    def showRangeSlider(self, on: bool) -> None: ...
    def areTicksShown(self) -> bool: ...
    def showTicks(self, on: bool) -> None: ...
    def moveToBottom(self) -> None: ...
    def moveToPane(self, pane: Pane) -> None: ...
    def addEventCallback(self, callback: Any) -> None: ...
    def removeEventCallback(self, callback: Any) -> None: ...
    def clearEventCallbacks(self) -> None: ...
    def eventCallbacks(self) -> Tuple[Any, ...]: ...
    def selectedKeyframes(self) -> dict[Parm, Tuple[BaseKeyframe, ...]]: ...
    def selectionRange(self) -> Vector2: ...
    def selectionRanges(self) -> Tuple[Vector2, ...]: ...
    def timelineRange(self) -> Vector2: ...
    def timeRange(self) -> Vector2: ...
    def setTimeRange(self, start: float, end: float) -> None: ...
    def frameRange(self) -> Vector2: ...
    def setFrameRange(self, start: float, end: float) -> None: ...
    def frameBookmark(self, bookmark: Bookmark) -> None: ...
    def channelList(self) -> ChannelList: ...
    def setChannelList(self, l: ChannelList) -> None: ...
    def channelListFromSelection(self) -> ChannelList: ...
    def channelListFromNodes(self, nodes: Sequence[Node]) -> ChannelList: ...
    def channelListFromParms(self, parms: Tuple[Parm, ...]) -> ChannelList: ...
    def channelListFromParmTuples(self, parms: Tuple[ParmTuple, ...]) -> ChannelList: ...
    def isAnimBarShown(self) -> bool: ...
    def showAnimBar(self, show: bool) -> None: ...
    def animBar(self) -> AnimBar: ...

class PluginHotkeyDefinitions:
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def addCommandCategory(self, symbol: str, label: str, description: str) -> None: ...
    def addCommand(self, symbol: str, label: str, description: str) -> None: ...
    def addContext(self, symbol: str, label: str, description: str) -> None: ...
    def addDefaultBinding(self, *args) -> None: ...
    def containsCommandCategory(self, symbol: str) -> bool: ...
    def containsCommand(self, symbol: str) -> bool: ...
    def containsContext(self, symbol: str) -> bool: ...
    def containsDefaultBinding(self, context: str, command: str) -> bool: ...

class Point:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def number(self) -> int: ...
    def position(self) -> Vector3: ...
    def setPosition(self, position: Sequence[float]) -> None: ...
    def weight(self) -> float: ...
    def setWeight(self, weight: float) -> None: ...
    def attribType(self) -> EnumValue: ...
    def floatAttribValue(self, *args) -> float: ...
    def floatListAttribValue(self, *args) -> Tuple[float, ...]: ...
    def intAttribValue(self, *args) -> int: ...
    def intListAttribValue(self, *args) -> Tuple[int, ...]: ...
    def stringAttribValue(self, *args) -> str: ...
    def stringListAttribValue(self, *args) -> Tuple[str, ...]: ...
    def dictAttribValue(self, *args) -> dict[str, Any]: ...
    def dictListAttribValue(self, *args) -> Tuple[dict[str, Any], ...]: ...
    def setAttribValue(self, *args) -> None: ...
    def attribValue(self, *args) -> Any: ...
    def vertices(self) -> Tuple[Vertex, ...]: ...
    def prims(self) -> Tuple[Prim, ...]: ...

class PointGroup:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def name(self) -> str: ...
    def iterPoints(self) -> Iterator[Point]: ...
    def points(self) -> Tuple[Point, ...]: ...
    def contains(self, point: Point) -> bool: ...
    def isOrdered(self) -> bool: ...
    def add(self, *args) -> None: ...
    def remove(self, *args) -> None: ...
    def clear(self) -> None: ...
    def destroy(self) -> None: ...
    def pointCount(self) -> int: ...
    def optionType(self, option_name: str) -> EnumValue: ...
    def setOption(self, *args) -> None: ...
    def removeOption(self, name: str) -> None: ...
    def dataId(self) -> AttribDataId: ...
    def incrementDataId(self) -> None: ...
    def options(self) -> Any: ...
    def option(self, option_name: str) -> Any: ...

class Polygon(Face):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class PrimGroup:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def name(self) -> str: ...
    def iterPrims(self) -> Iterator[Prim]: ...
    def prims(self) -> Tuple[Prim, ...]: ...
    def contains(self, prim: Prim) -> bool: ...
    def isOrdered(self) -> bool: ...
    def add(self, *args) -> None: ...
    def remove(self, *args) -> None: ...
    def clear(self) -> None: ...
    def destroy(self) -> None: ...
    def primCount(self) -> int: ...
    def optionType(self, option_name: str) -> EnumValue: ...
    def setOption(self, *args) -> None: ...
    def removeOption(self, name: str) -> None: ...
    def dataId(self) -> AttribDataId: ...
    def incrementDataId(self) -> None: ...
    def options(self) -> Any: ...
    def option(self, option_name: str) -> Any: ...

class properties:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def classes(self, *args) -> Tuple[str, ...]: ...
    def classLabel(self, class_name: str) -> str: ...
    def categories(self, class_name: str) -> Tuple[str, ...]: ...
    def parameters(self, class_name: str, category_name: str) -> Tuple[str, ...]: ...
    def parmTemplate(self, class_name: str, parm_name: str) -> ParmTemplate: ...

class PythonPanel(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def activeInterface(self) -> PythonPanelInterface: ...
    def setActiveInterface(self, interface: PythonPanelInterface) -> None: ...
    def reloadActiveInterface(self) -> None: ...
    def showToolbar(self, show: bool) -> None: ...
    def isToolbarShown(self) -> bool: ...
    def expandToolbar(self, expand: bool) -> None: ...
    def isToolbarExpanded(self) -> bool: ...
    def label(self) -> str: ...
    def setLabel(self, label: str) -> None: ...
    def activeInterfaceScriptErrors(self) -> str: ...
    def activeInterfaceRootWidget(self) -> Any: ...

class pypanel:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def installFile(self, file_path: str) -> None: ...
    def interfacesInFile(self, file_path: str) -> Tuple[PythonPanelInterface, ...]: ...
    def interfaces(self) -> dict[str, PythonPanelInterface]: ...
    def interfaceByName(self, name: str) -> PythonPanelInterface: ...
    def setMenuInterfaces(self, names: Sequence[str]) -> None: ...
    def menuInterfaces(self) -> Tuple[str, ...]: ...

class PythonPanelInterface:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def id(self) -> int: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def label(self) -> str: ...
    def setLabel(self, label: str) -> None: ...
    def icon(self) -> str: ...
    def setIcon(self, icon: str) -> None: ...
    def script(self) -> str: ...
    def setScript(self, script: str) -> None: ...
    def help(self) -> str: ...
    def setHelp(self, script: str) -> None: ...
    def helpURL(self) -> str: ...
    def setHelpURL(self, script: str) -> None: ...
    def filePath(self) -> str: ...
    def setFilePath(self, filePath: str) -> None: ...

class Quadric(Prim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def transform(self) -> Matrix3: ...
    def getTransform(self) -> Matrix3: ...
    def vertex(self, index: int) -> Vertex: ...

class Quaternion:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, quaternion: Quaternion, tolerance: float = 1e-05) -> bool: ...
    def almostEqual(self, quaternion: Quaternion, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def setTo(self, tuple: Sequence[float]) -> None: ...
    def setToRotationMatrix(self, *args) -> None: ...
    def setToAngleAxis(self, angle_in_deg: float, axis: Sequence[float]) -> None: ...
    def setToVectors(self, v1: Vector3, v2: Vector3) -> None: ...
    def setToEulerRotates(self, *args, **kwargs) -> None: ...
    def conjugate(self) -> Quaternion: ...
    def inverse(self) -> Quaternion: ...
    def dot(self, quaternion: Quaternion) -> float: ...
    def __add__(self, quaternion: Quaternion) -> Quaternion: ...
    def __sub__(self, quaternion: Quaternion) -> Quaternion: ...
    def __mul__(self, *args) -> Quaternion: ...
    def slerp(self, other: Quaternion, fraction: float) -> Quaternion: ...
    def normalized(self) -> Quaternion: ...
    def length(self) -> float: ...
    def extractRotationMatrix3(self) -> Matrix3: ...
    def extractAngleAxis(self) -> tuple[float, Vector3]: ...
    def extractEulerRotates(self, *args) -> Vector3: ...
    def rotate(self, v: Vector3) -> Vector3: ...

class qt:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def canCreateIcon(self, icon_name: str) -> bool: ...
    def styleSheet(self, file_path: Optional[str] = None) -> str: ...
    def inchesToPixels(self, inches: float) -> float: ...
    def pixelsToInches(self, pixels: float) -> float: ...
    def skipClosingMenusForCurrentButtonPress(self) -> None: ...

class RadialItem:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def destroy(self) -> None: ...
    def type(self) -> EnumValue: ...

class RadialScriptItem(RadialItem):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isSubmenu(self) -> bool: ...
    def label(self) -> str: ...
    def setLabel(self, s: str) -> None: ...
    def icon(self) -> str: ...
    def setIcon(self, s: str) -> None: ...
    def check(self) -> str: ...
    def setCheck(self, s: str) -> None: ...
    def script(self) -> str: ...
    def setScript(self, s: str) -> None: ...
    def shortcut(self) -> str: ...
    def setShortcut(self, s: str) -> None: ...
    def setActionCallback(self, callback: Any) -> None: ...
    def setCheckCallback(self, callback: Any) -> None: ...

class RadialSubmenu(RadialItem):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def label(self) -> str: ...
    def setLabel(self, s: str) -> None: ...
    def shortcut(self) -> str: ...
    def setShortcut(self, s: str) -> None: ...
    def remove(self, location: EnumValue) -> None: ...
    def item(self, location: EnumValue) -> RadialItem: ...
    def items(self) -> dict[EnumValue, RadialItem]: ...
    def createSubmenu(self, location: EnumValue, label: Optional[str] = None, shortcut: Optional[str] = None) -> RadialSubmenu: ...
    def createScriptItem(self, location: EnumValue, label: Optional[str] = None, icon: Optional[str] = None, check: Optional[str] = None, script: Optional[str] = None, shortcut: Optional[str] = None) -> RadialScriptItem: ...

class RadialMenu:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def destroy(self) -> None: ...
    def name(self) -> str: ...
    def categories(self) -> str: ...
    def setCategories(self, s: str) -> None: ...
    def sourceFile(self) -> str: ...
    def save(self, s: str) -> None: ...
    def root(self) -> RadialItem: ...
    def label(self) -> str: ...
    def setLabel(self, s: str) -> None: ...
    def shortcut(self) -> str: ...
    def setShortcut(self, s: str) -> None: ...
    def item(self, location: EnumValue) -> RadialItem: ...
    def items(self) -> dict[EnumValue, RadialItem]: ...
    def createSubmenu(self, location: EnumValue, label: Optional[str] = None, shortcut: Optional[str] = None) -> RadialSubmenu: ...
    def createScriptItem(self, location: EnumValue, label: Optional[str] = None, icon: Optional[str] = None, check: Optional[str] = None, script: Optional[str] = None, shortcut: Optional[str] = None) -> RadialScriptItem: ...

class Ramp:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def isColor(self) -> bool: ...
    def colorType(self) -> EnumValue: ...
    def setColorType(self, enum_value: EnumValue) -> None: ...
    def basis(self) -> Tuple[EnumValue, ...]: ...
    def keys(self) -> Tuple[float, ...]: ...
    def lookup(self, pos: float) -> Any: ...
    def values(self) -> Any: ...

class RampParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def defaultValue(self) -> int: ...
    def setDefaultValue(self, default_value: int) -> None: ...
    def defaultExpression(self) -> str: ...
    def setDefaultExpression(self, default_expression: str) -> None: ...
    def defaultExpressionLanguage(self) -> EnumValue: ...
    def setDefaultExpressionLanguage(self, default_expression_language: EnumValue) -> None: ...
    def parmType(self) -> EnumValue: ...
    def setParmType(self, ramp_parm_type: EnumValue) -> None: ...
    def defaultBasis(self) -> EnumValue: ...
    def setDefaultBasis(self, default_basis: EnumValue) -> None: ...
    def colorType(self) -> EnumValue: ...
    def setColorType(self, color_type: EnumValue) -> None: ...
    def showsControls(self) -> bool: ...
    def setShowsControls(self, on: bool) -> None: ...
    def parmTemplates(self) -> Tuple[ParmTemplate, ...]: ...

class RedrawBlock:
    thisown: Incomplete
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete
    def __enter__(self) -> RedrawBlock: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class ReferencePlane:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def sceneViewer(self) -> SceneViewer: ...
    def isVisible(self) -> bool: ...
    def setIsVisible(self, on: bool) -> None: ...
    def transform(self) -> Matrix4: ...
    def setTransform(self, matrix: Matrix4) -> None: ...
    def cellSize(self) -> Tuple[float, ...]: ...
    def setCellSize(self, size: Sequence[float]) -> None: ...
    def numberOfCellsPerRulerLine(self) -> Tuple[int, ...]: ...
    def setNumberOfCellsPerRulerLine(self, number: Sequence[int]) -> None: ...

class RopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isLocked(self) -> bool: ...
    def setLocked(self, on: bool) -> None: ...
    def inputDependencies(self) -> Tuple[tuple[Node, Tuple[float, ...]], ...]: ...
    def render(self, *args, **kwargs) -> None: ...
    def removeAllRenderEventCallbacks(self) -> None: ...
    def addRenderEventCallback(self, callback: Any, run_before_script: bool = False) -> None: ...
    def removeRenderEventCallback(self, callback: Any) -> None: ...

class SceneGraphTree(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def showInactivePrimitives(self) -> bool: ...
    def setShowInactivePrimitives(self, show: bool) -> None: ...
    def showInvisiblePrimitives(self) -> bool: ...
    def setShowInvisiblePrimitives(self, show: bool) -> None: ...
    def showOverPrimitives(self) -> bool: ...
    def setShowOverPrimitives(self, show: bool) -> None: ...
    def showClassPrimitives(self) -> bool: ...
    def setShowClassPrimitives(self, show: bool) -> None: ...
    def showPrototypePrimitives(self) -> bool: ...
    def setShowPrototypePrimitives(self, show: bool) -> None: ...
    def showLayerInfoPrimitives(self) -> bool: ...
    def setShowLayerInfoPrimitives(self, show: bool) -> None: ...
    def showHiddenInUiPrimitives(self) -> bool: ...
    def setShowHiddenInUiPrimitives(self, show: bool) -> None: ...
    def allColumns(self) -> Tuple[str, ...]: ...
    def visibleColumns(self) -> Tuple[str, ...]: ...
    def setVisibleColumns(self, columns: Sequence[str]) -> None: ...
    def filterPattern(self) -> str: ...
    def setFilterPattern(self, pattern: str) -> None: ...
    def splitPosition(self) -> float: ...
    def setSplitPosition(self, position: float) -> None: ...
    def collectionPrimitives(self) -> str: ...
    def setCollectionPrimitives(self, pattern: str) -> None: ...
    def collectionFilterPattern(self) -> str: ...
    def setCollectionFilterPattern(self, pattern: str) -> None: ...
    def collapsePrimitives(self, prims: Any) -> None: ...
    def expandPrimitives(self, prims: Any, collapse_others: bool = False, expand_leaf_primitives: bool = False) -> None: ...
    def expandedPrimitives(self, include_leaf_primitives: bool = False) -> Any: ...

class SceneViewer(PathBasedPaneTab):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def viewerType(self) -> EnumValue: ...
    def viewports(self) -> Tuple[GeometryViewport, ...]: ...
    def findViewport(self, name: str) -> GeometryViewport: ...
    def curViewport(self) -> GeometryViewport: ...
    def selectedViewport(self) -> GeometryViewport: ...
    def currentState(self) -> str: ...
    def enterViewState(self, wait_for_exit: bool = False) -> None: ...
    def enterCurrentNodeState(self, wait_for_exit: bool = False) -> None: ...
    def enterTranslateToolState(self, wait_for_exit: bool = False) -> None: ...
    def enterRotateToolState(self, wait_for_exit: bool = False) -> None: ...
    def enterScaleToolState(self, wait_for_exit: bool = False) -> None: ...
    def setCurrentState(self, *args, **kwargs) -> None: ...
    def isCreateInContext(self) -> bool: ...
    def isWorldSpaceLocal(self) -> bool: ...
    def viewportLayout(self) -> EnumValue: ...
    def setViewportLayout(self, layout: EnumValue, single: int = -1) -> None: ...
    def selectObjects(self, *args, **kwargs) -> Tuple[Node, ...]: ...
    def selectGeometry(self, *args, **kwargs) -> GeometrySelection: ...
    def selectDynamics(self, *args, **kwargs) -> Tuple[DopData, ...]: ...
    def selectDynamicsPoints(self, *args, **kwargs) -> Tuple[tuple[DopData, GeometrySelection], ...]: ...
    def selectDynamicsPolygons(self, *args, **kwargs) -> Tuple[tuple[DopData, GeometrySelection], ...]: ...
    def selectSceneGraph(self, *args, **kwargs) -> Tuple[str, ...]: ...
    def selectSceneGraphInstances(self, *args, **kwargs) -> Tuple[str, ...]: ...
    def selectPositions(self, *args, **kwargs) -> Tuple[Vector3, ...]: ...
    def selectOrientedPositions(self, *args, **kwargs) -> Tuple[tuple[Vector3, Matrix3], ...]: ...
    def selectDrawableGeometry(self, *args, **kwargs) -> None: ...
    def currentGeometrySelection(self) -> GeometrySelection: ...
    def currentGeometrySelectionParm(self) -> str: ...
    def setCurrentGeometrySelection(self, geometry_type: EnumValue, nodes: Sequence[Node], selections: Tuple[Selection, ...]) -> None: ...
    def currentSceneGraphSelection(self) -> Tuple[str, ...]: ...
    def setCurrentSceneGraphSelection(self, selection: Sequence[str], fix_selection_paths: bool = True) -> None: ...
    def sceneGraphHighlight(self) -> Tuple[str, ...]: ...
    def setSceneGraphHighlight(self, highlight: Sequence[str]) -> None: ...
    def locateSceneGraphPrim(self, *args) -> Tuple[float, str]: ...
    def sceneGraphStageLocked(self) -> bool: ...
    def setSceneGraphStageLocked(self, locked: bool) -> None: ...
    def snappingMode(self) -> EnumValue: ...
    def setSnappingMode(self, snapping_mode: EnumValue) -> None: ...
    def isSnappingToCurrentGeometry(self) -> bool: ...
    def setSnapToCurrentGeometry(self, on: bool) -> None: ...
    def isSnappingToTemplates(self) -> bool: ...
    def setSnapToTemplates(self, on: bool) -> None: ...
    def isSnappingToOtherObjects(self) -> bool: ...
    def setSnapToOtherObjects(self, on: bool) -> None: ...
    def isSnappingToGuides(self) -> bool: ...
    def setSnapToGuides(self, on: bool) -> None: ...
    def isDepthSnapping(self) -> bool: ...
    def setDepthSnapping(self, on: bool) -> None: ...
    def isOrientingOnSnap(self) -> bool: ...
    def setOrientOnSnap(self, on: bool) -> None: ...
    def snappingGravity(self) -> float: ...
    def snappingPriorities(self) -> Tuple[EnumValue, ...]: ...
    def isPickingVisibleGeometry(self) -> bool: ...
    def setPickingVisibleGeometry(self, on: bool) -> None: ...
    def isPickingContainedGeometry(self) -> bool: ...
    def setPickingContainedGeometry(self, on: bool) -> None: ...
    def isGroupPicking(self) -> bool: ...
    def setGroupPicking(self, on: bool) -> None: ...
    def isWholeGeometryPicking(self) -> bool: ...
    def setWholeGeometryPicking(self, on: bool) -> None: ...
    def isSecureSelection(self) -> bool: ...
    def setSecureSelection(self, on: bool) -> None: ...
    def isPickingCurrentNode(self) -> bool: ...
    def setPickingCurrentNode(self, on: bool) -> None: ...
    def pickGeometryType(self) -> EnumValue: ...
    def setPickGeometryType(self, geometry_type: EnumValue) -> None: ...
    def selectionMode(self) -> EnumValue: ...
    def setSelectionMode(self, style: EnumValue) -> None: ...
    def pickStyle(self) -> EnumValue: ...
    def setPickStyle(self, style: EnumValue) -> None: ...
    def pickModifier(self) -> EnumValue: ...
    def setPickModifier(self, modifier: EnumValue) -> None: ...
    def defaultPickModifier(self) -> EnumValue: ...
    def setDefaultPickModifier(self, modifier: EnumValue) -> None: ...
    def pickFacing(self) -> EnumValue: ...
    def setPickFacing(self, facing: EnumValue) -> None: ...
    def activePickModifier(self) -> EnumValue: ...
    def isGroupListVisible(self) -> bool: ...
    def setGroupListVisible(self, on: bool) -> None: ...
    def isGroupListColoringGeometry(self) -> bool: ...
    def setGroupListColoringGeometry(self, on: bool) -> None: ...
    def isGroupListShowingEmptyGroups(self) -> bool: ...
    def setGroupListShowingEmptyGroups(self, on: bool) -> None: ...
    def isGroupListShowingOnlyPreSelectedGroups(self) -> bool: ...
    def setGroupListShowingOnlyPreSelectedGroups(self, on: bool) -> None: ...
    def isGroupListCondensingPathHierarchies(self) -> bool: ...
    def setGroupListCondensingPathHierarchies(self, on: bool) -> None: ...
    def groupListSize(self) -> Vector2: ...
    def setGroupListSize(self, width: float, height: float) -> None: ...
    def groupListType(self) -> EnumValue: ...
    def setGroupListType(self, group_list_type: EnumValue) -> None: ...
    def groupListMask(self) -> str: ...
    def setGroupListMask(self, mask: str) -> None: ...
    def constructionPlane(self) -> ConstructionPlane: ...
    def referencePlane(self) -> ReferencePlane: ...
    def flipbookSettings(self) -> FlipbookSettings: ...
    def flipbook(self, viewport: Optional[GeometryViewport] = None, settings: Optional[FlipbookSettings] = None, open_dialog: bool = False) -> None: ...
    def runShelfTool(self, tool_name: str) -> None: ...
    def beginStateUndo(self, label: str) -> None: ...
    def endStateUndo(self) -> None: ...
    def setPromptMessage(self, *args) -> None: ...
    def clearPromptMessage(self) -> None: ...
    def flashMessage(self, image: str, msg: str, duration: float = 1.0, viewport: Optional[GeometryViewport] = None) -> None: ...
    def hotkeyAssignments(self, hotkey_symbols: Sequence[str]) -> Tuple[Tuple[str, ...], ...]: ...
    def showHandle(self, name: str, value: bool) -> None: ...
    def openVisualizerEditor(self, vis: ViewportVisualizer) -> None: ...
    def openOptionDialog(self, path: str, label: str) -> None: ...
    def triggerStateSelector(self, *args, **kwargs) -> None: ...
    def currentStateSelector(self) -> str: ...
    def showCurrentSopGeometry(self, value: bool) -> None: ...
    def isShowingCurrentSopGeometry(self) -> bool: ...
    def showOperationBar(self, on: bool) -> None: ...
    def isShowingOperationBar(self) -> bool: ...
    def showColorCorrectionBar(self, on: bool) -> None: ...
    def isShowingColorCorrectionBar(self) -> bool: ...
    def showMemoryBar(self, on: bool) -> None: ...
    def isShowingMemoryBar(self) -> bool: ...
    def showDisplayOptionsBar(self, on: bool) -> None: ...
    def isShowingDisplayOptionsBar(self) -> bool: ...
    def showSelectionBar(self, on: bool) -> None: ...
    def isShowingSelectionBar(self) -> bool: ...
    def setIncludeColorCorrectionBar(self, on: bool) -> None: ...
    def includeColorCorrectionBar(self) -> bool: ...
    def setIncludeMemoryBar(self, on: bool) -> None: ...
    def includeMemoryBar(self) -> bool: ...
    def setGeometryVisibility(self, sop: SopNode, on: bool) -> None: ...
    def geometryVisibility(self, sop: SopNode) -> bool: ...
    def usingOCIO(self) -> bool: ...
    def setUsingOCIO(self, enable: bool) -> None: ...
    def setOCIODisplayView(self, display: Optional[str] = None, view: Optional[str] = None) -> None: ...
    def getOCIODisplay(self) -> str: ...
    def getOCIOView(self) -> str: ...
    def geometry(self) -> Tuple[int, ...]: ...
    def runStateCommand(self, name: str, args: Optional[Any] = None) -> None: ...
    def isViewingSceneGraph(self) -> bool: ...
    def stage(self) -> Any: ...
    def stageSerial(self) -> int: ...
    def setShowGeometry(self, show: bool) -> None: ...
    def showGeometry(self) -> bool: ...
    def setShowCameras(self, show: bool) -> None: ...
    def showCameras(self) -> bool: ...
    def setShowLights(self, show: bool) -> None: ...
    def showLights(self) -> bool: ...
    def setShowSelection(self, show: bool) -> None: ...
    def showSelection(self) -> bool: ...
    def setShowRenderTime(self, show: bool) -> None: ...
    def showRenderTime(self) -> bool: ...
    def setShowRenderStats(self, show: bool) -> None: ...
    def showRenderStats(self) -> bool: ...
    def setSelectionKind(self, kind: str) -> None: ...
    def setSelectionPointInstances(self, topmost: bool) -> None: ...
    def selectionKind(self) -> str: ...
    def isSelectingPointInstances(self) -> bool: ...
    def isSelectingTopmostInstance(self) -> bool: ...
    def setSelectionAllowKindMismatch(self, allow: bool) -> None: ...
    def selectionAllowKindMismatch(self) -> bool: ...
    def setSelectionAllowInstanceProxies(self, allow: bool) -> None: ...
    def selectionAllowInstanceProxies(self) -> bool: ...
    def setSelectionAllowHiddenPrims(self, allow: bool) -> None: ...
    def selectionAllowHiddenPrims(self) -> bool: ...
    def setStageControlsPlaybar(self, controls_playbar: bool) -> None: ...
    def stageControlsPlaybar(self) -> bool: ...
    def hydraRenderers(self) -> Tuple[str, ...]: ...
    def setHydraRenderer(self, ren_name: str) -> None: ...
    def currentHydraRenderer(self) -> str: ...
    def isRendererPaused(self) -> bool: ...
    def setRendererPaused(self, paused: bool) -> None: ...
    def restartRenderer(self) -> None: ...
    def resetViewportCamera(self) -> None: ...
    def showProxyPurpose(self, enable: bool, renderer: Optional[str] = None) -> None: ...
    def showGuidePurpose(self, enable: bool, renderer: Optional[str] = None) -> None: ...
    def showRenderPurpose(self, enable: bool, renderer: Optional[str] = None) -> None: ...
    def useViewportOverrides(self, enable: bool, renderer: Optional[str] = None) -> None: ...
    def useViewportLoadMasks(self, enable: bool, renderer: Optional[str] = None) -> None: ...
    def usePostLayers(self, enable: bool, renderer: Optional[str] = None) -> None: ...
    def showingProxyPurpose(self, renderer: Optional[str] = None) -> bool: ...
    def showingGuidePurpose(self, renderer: Optional[str] = None) -> bool: ...
    def showingRenderPurpose(self, renderer: Optional[str] = None) -> bool: ...
    def usingViewportOverrides(self, renderer: Optional[str] = None) -> bool: ...
    def usingViewportLoadMasks(self, renderer: Optional[str] = None) -> bool: ...
    def usingPostLayers(self, renderer: Optional[str] = None) -> bool: ...
    def addEventCallback(self, callback: Any) -> None: ...
    def removeEventCallback(self, callback: Any) -> None: ...
    def clearEventCallbacks(self) -> None: ...
    def eventCallbacks(self) -> Tuple[Any, ...]: ...
    def qtWindow(self) -> Any: ...
    def bindViewerHandle(self, *args, **kwargs) -> None: ...
    def bindViewerHandleStatic(self, *args, **kwargs) -> None: ...
    def unbindViewerHandle(self, handle_instance_name: str) -> None: ...
    def fullName(self) -> str: ...

class ScriptEvalContext:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def node(self) -> Node: ...
    def parm(self) -> Parm: ...
    def __enter__(self) -> ScriptEvalContext: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class Selection:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def freeze(self) -> Selection: ...
    def invert(self, geo: Geometry) -> None: ...
    def convert(self, geo: Geometry, selection_type: EnumValue, select_only_whole: bool = False) -> None: ...
    def boundary(self, geo: Geometry, uv_connectivity: bool = False) -> None: ...
    def grow(self, geo: Geometry, uv_connectivity: bool = False) -> None: ...
    def shrink(self, geo: Geometry, uv_connectivity: bool = False) -> None: ...
    def combine(self, geo: Geometry, selection: Selection, modifier: EnumValue) -> None: ...
    def clear(self) -> None: ...
    def selectionType(self) -> EnumValue: ...
    def numSelected(self) -> int: ...
    def prims(self, geo: Geometry) -> Tuple[Prim, ...]: ...
    def points(self, geo: Geometry) -> Tuple[Point, ...]: ...
    def vertices(self, geo: Geometry) -> Tuple[Vertex, ...]: ...
    def edges(self, geo: Geometry) -> Tuple[Edge, ...]: ...
    def selectionString(self, geo: Geometry, force_numeric: bool = False, collapse_where_possible: bool = True, asterisk_to_select_all: bool = False) -> str: ...

class Selector:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def nodeType(self) -> NodeType: ...
    def selectorType(self) -> str: ...
    def geometryTypes(self) -> Tuple[EnumValue, ...]: ...
    def groupTypeParmValues(self) -> Tuple[int, ...]: ...
    def ordered(self) -> bool: ...
    def prompt(self) -> str: ...
    def primitiveTypes(self) -> Tuple[EnumValue, ...]: ...
    def groupParmName(self) -> str: ...
    def groupTypeParmName(self) -> str: ...
    def inputIndex(self) -> int: ...
    def inputRequired(self) -> bool: ...
    def allowDragging(self) -> bool: ...
    def emptyStringSelectsAll(self) -> bool: ...
    def extraInfo(self) -> str: ...
    def destroy(self) -> None: ...

class SeparatorParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete

class Shelf(ShelfElement):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def tools(self) -> Tuple[Tool, ...]: ...
    def setTools(self, tools: Tuple[Tool, ...]) -> None: ...
    def destroy(self) -> None: ...

class ShelfDock:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def shelfSets(self) -> Tuple[ShelfSet, ...]: ...
    def iconsize(self) -> Tuple[int, ...]: ...
    def show(self, on: bool) -> None: ...

class ShelfSet(ShelfElement):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def shelves(self) -> Tuple[Shelf, ...]: ...
    def setShelves(self, shelves: Tuple[Shelf, ...]) -> None: ...
    def destroy(self) -> None: ...

class ShellIO:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def readline(self, size: int = -1) -> Any: ...
    def addCloseCallback(self, callback: Any) -> None: ...
    def removeCloseCallback(self, callback: Any) -> None: ...
    def closeCallbacks(self) -> Tuple[Any, ...]: ...
    def CloseCallbacks(self) -> Tuple[Any, ...]: ...
    def addExitCallback(self, callback: Any) -> None: ...
    def removeExitCallback(self, callback: Any) -> None: ...
    def exitCallbacks(self) -> Tuple[Any, ...]: ...
    def write(self, data: str) -> None: ...
    def getAndClearWrittenData(self) -> str: ...
    def addDataForReading(self, data: str) -> None: ...
    def addEOFForReading(self) -> None: ...
    def interruptShellThread(self) -> None: ...
    def isWaitingForCommand(self) -> bool: ...
    def setIsWaitingForCommand(self, on: bool) -> None: ...
    def isatty(self) -> bool: ...
    def flush(self) -> None: ...

class shelves:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def shelfSets(self) -> dict[str, ShelfSet]: ...
    def shelves(self) -> dict[str, Shelf]: ...
    def tools(self) -> dict[str, Tool]: ...
    def tool(self, tool_name: str) -> Tool: ...
    def isToolDeleted(self, tool_name: str) -> bool: ...
    def loadFile(self, file_path: str) -> None: ...
    def reloadShelfFiles(self) -> None: ...
    def runningTool(self) -> Tool: ...
    def beginChangeBlock(self) -> None: ...
    def endChangeBlock(self) -> None: ...
    def newShelfSet(self, file_path: Optional[str] = None, name: Optional[str] = None, label: Optional[str] = None) -> ShelfSet: ...
    def newShelf(self, file_path: Optional[str] = None, name: Optional[str] = None, label: Optional[str] = None) -> Shelf: ...
    def newTool(self, *args, **kwargs) -> Tool: ...
    def defaultFilePath(self) -> str: ...
    def defaultToolName(self, nodetype_category_name: str, nodetype_name: str) -> str: ...

class ShopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def shaderString(self, *args) -> str: ...
    def shaderCode(self, *args) -> str: ...
    def shaderName(self, as_otl_path: bool = True, shader_type_name: Optional[str] = None) -> str: ...
    def supportedRenderers(self) -> Tuple[str, ...]: ...
    def definingVopNetNode(self) -> Node: ...
    def shaderType(self) -> EnumValue: ...
    def coshaderNodes(self, parm_name: str) -> Tuple[Node, ...]: ...

class ShopNodeType(OpNodeType):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def shaderType(self) -> EnumValue: ...
    def renderMask(self) -> str: ...

class SopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def geometry(self, output_index: int = 0) -> Geometry: ...
    def geometryNoDep(self, output_index: int = 0) -> Geometry: ...
    def geometryDep(self, output_index: int = 0) -> None: ...
    def geometryAtFrame(self, frame: float, output_index: int = 0) -> Geometry: ...
    def inputGeometry(self, index: int) -> Geometry: ...
    def inputGeometryAtFrame(self, frame: float, index: int) -> Geometry: ...
    def geometryDelta(self) -> GeometryDelta: ...
    def hasVerb(self) -> bool: ...
    def verb(self) -> SopVerb: ...
    def selection(self, selection_type: EnumValue) -> Selection: ...
    def setSelection(self, selection: Selection) -> None: ...
    def curPoint(self) -> Point: ...
    def setCurPoint(self, point_or_none: Point) -> None: ...
    def curPrim(self) -> Prim: ...
    def setCurPrim(self, prim_or_none: Prim) -> None: ...
    def curVertex(self) -> Vertex: ...
    def setCurVertex(self, vertex_or_none: Vertex) -> None: ...
    def managesAttribDataIds(self) -> bool: ...
    def setManagesAttribDataIds(self, on: bool) -> None: ...
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isDisplayFlagSet(self) -> bool: ...
    def setDisplayFlag(self, on: bool) -> None: ...
    def isRenderFlagSet(self) -> bool: ...
    def setRenderFlag(self, on: bool) -> None: ...
    def isTemplateFlagSet(self) -> bool: ...
    def setTemplateFlag(self, on: bool) -> None: ...
    def isSelectableTemplateFlagSet(self) -> bool: ...
    def setSelectableTemplateFlag(self, on: bool) -> None: ...
    def isHighlightFlagSet(self) -> bool: ...
    def setHighlightFlag(self, on: bool) -> None: ...
    def isSoftLocked(self) -> bool: ...
    def setSoftLocked(self, on: bool) -> None: ...
    def isHardLocked(self) -> bool: ...
    def setHardLocked(self, on: bool) -> None: ...
    def isUnloadFlagSet(self) -> bool: ...
    def setUnloadFlag(self, on: bool) -> None: ...
    def copyNodeSelectionToUserSelection(self, force_cook: bool = False) -> None: ...
    def displayNode(self) -> Node: ...
    def renderNode(self) -> Node: ...

class SopNodeType(OpNodeType):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def selectors(self, *args) -> Tuple[Selector, ...]: ...
    def addSelector(self, *args, **kwargs) -> Selector: ...

class SopVerb:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def execute(self, dest: Geometry, inputs: Sequence[Geometry]) -> None: ...
    def executeAtTime(self, dest: Geometry, inputs: Sequence[Geometry], time: float, add_time_dep: bool) -> None: ...
    def loadParmsFromNode(self, sopnode: SopNode) -> None: ...
    def loadParmsFromNodeAtTime(self, sopnode: SopNode, time: float) -> None: ...
    def parms(self) -> dict[str, Any]: ...
    def setParms(self, p: dict[str, Any]) -> None: ...
    def minNumInputs(self) -> int: ...

class StringKeyframe(BaseKeyframe):
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def evaluatedType(self) -> EnumValue: ...

class StringParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def stringType(self) -> EnumValue: ...
    def setStringType(self, string_type: EnumValue) -> None: ...
    def fileType(self) -> EnumValue: ...
    def setFileType(self, file_type: EnumValue) -> None: ...
    def defaultValue(self) -> Tuple[str, ...]: ...
    def setDefaultValue(self, default_value: Sequence[str]) -> None: ...
    def defaultExpression(self) -> Tuple[str, ...]: ...
    def setDefaultExpression(self, default_expression: Sequence[str]) -> None: ...
    def defaultExpressionLanguage(self) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self, default_expression_language: Sequence[EnumValue]) -> None: ...
    def menuItems(self) -> Tuple[str, ...]: ...
    def setMenuItems(self, menu_items: Sequence[str]) -> None: ...
    def menuLabels(self) -> Tuple[str, ...]: ...
    def setMenuLabels(self, menu_labels: Sequence[str]) -> None: ...
    def iconNames(self) -> Tuple[str, ...]: ...
    def setIconNames(self, icon_names: Sequence[str]) -> None: ...
    def itemGeneratorScript(self) -> str: ...
    def setItemGeneratorScript(self, item_generator_script: str) -> None: ...
    def itemGeneratorScriptLanguage(self) -> EnumValue: ...
    def setItemGeneratorScriptLanguage(self, language: EnumValue) -> None: ...
    def menuType(self) -> EnumValue: ...
    def setMenuType(self, menu_type: EnumValue) -> None: ...

class styles:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def hasStyle(self, name: str) -> bool: ...
    def styles(self, pattern: Optional[str] = None) -> Tuple[str, ...]: ...
    def description(self, style: str) -> str: ...
    def stylesheet(self, style: str) -> str: ...
    def errors(self, style: str) -> str: ...
    def addStyle(self, name: str, description: str, stylesheet: str) -> None: ...
    def renameStyle(self, old_name: str, new_name: str) -> None: ...
    def reorderStyles(self, names: Sequence[str]) -> None: ...
    def removeStyle(self, name: str) -> None: ...
    def removeAll(self) -> None: ...

class StyleSheet:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def clone(self) -> StyleSheet: ...
    def cloneWithObject(self, obj: Node) -> StyleSheet: ...
    def cloneWithPrim(self, prim: Prim) -> StyleSheet: ...
    def cloneWithShape(self, shape_name: str, agent_prim: Prim) -> StyleSheet: ...
    def cloneWithAddedStyleSheet(self, *args, **kwargs) -> StyleSheet: ...
    def errors(self) -> str: ...
    def asJSON(self) -> str: ...

class SubnetIndirectInput(IndirectInput):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def inputConnections(self) -> Tuple[NodeConnection, ...]: ...
    def number(self) -> int: ...

class OpSubnetIndirectInput(OpIndirectInput, SubnetIndirectInput):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __hash__(self) -> int: ...

class Surface(Prim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def numRows(self) -> int: ...
    def numCols(self) -> int: ...
    def vertex(self, u_index: int, v_index: int) -> Vertex: ...
    def verticesInRow(self, v_index: int) -> Tuple[Vertex, ...]: ...
    def verticesInCol(self, u_index: int) -> Tuple[Vertex, ...]: ...
    def isClosedInU(self) -> bool: ...
    def isClosedInV(self) -> bool: ...
    def positionAt(self, u: float, v: float) -> Vector3: ...
    def normalAt(self, u: float, v: float) -> Vector3: ...
    def attribValueAt(self, *args) -> Any: ...
    def addRow(self, after: int = -1) -> None: ...
    def addCol(self, after: int = -1) -> None: ...

class Take:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isCurrent(self) -> bool: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def parent(self) -> Take: ...
    def path(self) -> str: ...
    def addChildTake(self, name: Optional[str] = None) -> Take: ...
    def insertTakeAbove(self, name: Optional[str] = None) -> Take: ...
    def addNodeDisplayFlag(self, node: Node) -> None: ...
    def removeNodeDisplayFlag(self, node: Node) -> None: ...
    def addNodeBypassFlag(self, node: Node) -> None: ...
    def removeNodeBypassFlag(self, node: Node) -> None: ...
    def addNodeRenderFlag(self, node: Node) -> None: ...
    def removeNodeRenderFlag(self, node: Node) -> None: ...
    def hasParmTuple(self, parm_tuple: ParmTuple) -> bool: ...
    def parmTuples(self) -> Tuple[ParmTuple, ...]: ...
    def addParmTuple(self, parm_tuple: ParmTuple) -> None: ...
    def removeParmTuple(self, parm_tuple: ParmTuple) -> None: ...
    def addParmTuplesFromTake(self, take: Take, overwrite_existing: bool = True) -> None: ...
    def addParmTuplesFromNode(self, node: Node) -> None: ...
    def removeParmTuplesFromNode(self, node: Node) -> None: ...
    def children(self) -> Tuple[Take, ...]: ...
    def saveToFile(self, filename: str, recurse: bool = False) -> None: ...
    def loadChildTakeFromFile(self, filename: str) -> Take: ...
    def moveUnderTake(self, take: Take) -> None: ...
    def destroy(self, recurse: bool = False) -> None: ...

class takes:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def takes(self) -> Tuple[Take, ...]: ...
    def currentTake(self) -> Take: ...
    def setCurrentTake(self, take: Take) -> None: ...
    def rootTake(self) -> Take: ...
    def findTake(self, take_name: str) -> Take: ...
    def defaultTakeName(self) -> str: ...
    def setDefaultTakeName(self, default_name: str) -> None: ...

class text:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def expandString(self, str: str, expand_tilde: bool = True) -> str: ...
    def expandStringAtFrame(self, str: str, frame: float, expand_tilde: bool = True) -> str: ...
    def expandHuskFilePath(self, str: str, frame_start: float = 1.0, frame_inc: float = 1.0, frame_idx: int = 0) -> str: ...
    def incrementNumberedString(self, str: str) -> str: ...
    def encode(self, varname: str) -> str: ...
    def decode(self, varname: str) -> str: ...
    def encodeAttrib(self, attribname: str) -> str: ...
    def decodeAttrib(self, attribname: str) -> str: ...
    def encodeParm(self, parmname: str) -> str: ...
    def decodeParm(self, parmname: str) -> str: ...
    def alphaNumeric(self, str: str) -> str: ...
    def variableName(self, str: str, safe_chars: Optional[str] = None) -> str: ...
    def abspath(self, path: str, anchor_path: Optional[str] = None) -> str: ...
    def relpath(self, path: str, anchor_path: Optional[str] = None) -> str: ...
    def normpath(self, path: str) -> str: ...
    def collapseCommonVars(self, *args, **kwargs) -> str: ...
    def oclExtractBindings(self, code: str) -> Tuple[dict[str, Any], ...]: ...
    def patternRename(self, str: str, find: str, replace: str) -> str: ...
    def patternMatch(self, pattern: str, str: str, ignore_case: bool = False, path_match: bool = False) -> bool: ...

class TextDrawable(AdvancedDrawable):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def size(self, text: str) -> Tuple[float, ...]: ...

class ToggleParmTemplate(ParmTemplate):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def defaultValue(self) -> bool: ...
    def setDefaultValue(self, default_value: bool) -> None: ...
    def defaultExpression(self) -> str: ...
    def setDefaultExpression(self, default_expression: str) -> None: ...
    def defaultExpressionLanguage(self) -> EnumValue: ...
    def setDefaultExpressionLanguage(self, default_expression_language: EnumValue) -> None: ...

class Tool(ShelfElement):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __lt__(self, other: Tool) -> bool: ...
    def __hash__(self) -> int: ...
    def script(self) -> str: ...
    def setScript(self, script: str) -> None: ...
    def language(self) -> EnumValue: ...
    def setLanguage(self, language: EnumValue) -> None: ...
    def icon(self) -> str: ...
    def setIcon(self, icon: str) -> None: ...
    def help(self) -> str: ...
    def setHelp(self, help: str) -> None: ...
    def helpURL(self) -> str: ...
    def setHelpURL(self, help_url: str) -> None: ...
    def toolMenuCategories(self, pane_type: EnumValue) -> Tuple[NodeTypeCategory, ...]: ...
    def setToolMenuCategories(self, pane_type: EnumValue, categories: Tuple[NodeTypeCategory, ...]) -> None: ...
    def toolMenuOpType(self, pane_type: EnumValue) -> str: ...
    def setToolMenuOpType(self, pane_type: EnumValue, op_type: str) -> None: ...
    def toolMenuLocations(self) -> Tuple[str, ...]: ...
    def setToolLocations(self, locations: Sequence[str]) -> None: ...
    def keywords(self) -> Tuple[str, ...]: ...
    def setKeywords(self, keywords: Sequence[str]) -> None: ...
    def setData(self, *args, **kwargs) -> None: ...
    def destroy(self) -> None: ...

class TopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isDisplayFlagSet(self) -> bool: ...
    def setDisplayFlag(self, on: bool) -> None: ...
    def isRenderFlagSet(self) -> bool: ...
    def setRenderFlag(self, on: bool) -> None: ...
    def displayNode(self) -> Node: ...
    def renderNode(self) -> Node: ...
    def outputNode(self) -> Node: ...
    def topParent(self) -> Node: ...
    def cookWorkItems(self, *args, **kwargs) -> None: ...
    def cookOutputWorkItems(self, block: bool = False, generate_only: bool = False, tops_only: bool = False, save_prompt: bool = False) -> None: ...
    def cookAllOutputWorkItems(self, include_display_node: bool, block: bool = False, generate_only: bool = False, tops_only: bool = False, save_prompt: bool = False) -> None: ...
    def generateStaticWorkItems(self, *args, **kwargs) -> None: ...
    def dirtyAllWorkItems(self, remove_outputs: bool) -> None: ...
    def dirtyWorkItems(self, remove_outputs: bool) -> None: ...
    def generateStaticItems(self, block: bool = False) -> None: ...
    def dirtyAllTasks(self, remove_outputs: bool) -> None: ...
    def dirtyTasks(self, remove_outputs: bool) -> None: ...
    def executeGraph(self, filter_static: bool = False, block: bool = False, generate_only: bool = False, tops_only: bool = False) -> None: ...
    def graphCommands(self) -> str: ...
    def taskGraphCommands(self) -> str: ...
    def setSelectedWorkItem(self, idx: int) -> bool: ...
    def getSelectedWorkItem(self) -> int: ...
    def getWorkItemName(self, idx: int) -> str: ...
    def getPDGGraphContextName(self) -> str: ...
    def getPDGNodeName(self) -> str: ...
    def getPDGNodeId(self) -> int: ...
    def cancelCook(self) -> None: ...
    def pauseCook(self) -> None: ...
    def addPDGFilter(self, idx: int) -> None: ...
    def removePDGFilter(self, idx: int) -> None: ...
    def isPDGFilter(self, idx: int) -> bool: ...
    def enablePDGFilter(self, filter_on: bool) -> None: ...
    def workItemStates(self) -> Tuple[int, ...]: ...
    def collapsedItems(self) -> Tuple[int, ...]: ...
    def collapsedItem(self, idx: int) -> int: ...
    def workItemsInCollapsedItemIds(self, id: int) -> Tuple[int, ...]: ...
    def isProcessor(self) -> bool: ...
    def isPartitioner(self) -> bool: ...
    def isMapper(self) -> bool: ...
    def isScheduler(self) -> bool: ...
    def isServiceCompatible(self, service_name: str) -> bool: ...
    def isFilterOn(self) -> bool: ...
    def getFilterNodes(self) -> Tuple[Node, ...]: ...
    def outputDataTypes(self) -> Tuple[str, ...]: ...
    def inputDataTypes(self) -> Tuple[str, ...]: ...
    def getCookState(self, force: bool) -> EnumValue: ...
    def getDataLayerInterfaceId(self) -> int: ...

class Track:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def chopNode(self) -> ChopNode: ...
    def clip(self) -> Clip: ...
    def name(self) -> str: ...
    def eval(self) -> float: ...
    def evalAtTime(self, time: float) -> float: ...
    def evalAtFrame(self, frame: float) -> float: ...
    def evalAtSample(self, sample: float) -> float: ...
    def evalAtTimeRange(self, start: float, end: float) -> Tuple[float, ...]: ...
    def evalAtFrameRange(self, start: float, end: float) -> Tuple[float, ...]: ...
    def evalAtSampleRange(self, start: float, end: float) -> Tuple[float, ...]: ...
    def numSamples(self) -> int: ...
    def allSamples(self) -> Tuple[float, ...]: ...
    def evalAtSampleIndex(self, index: int) -> float: ...

class ui:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def shellIO(self) -> ShellIO: ...
    def curDesktop(self) -> Desktop: ...
    def desktop(self, name: str) -> Desktop: ...
    def desktops(self) -> Tuple[Desktop, ...]: ...
    def radialMenu(self, name: str) -> RadialMenu: ...
    def radialMenus(self) -> Tuple[RadialMenu, ...]: ...
    def createRadialMenu(self, name: str, label: str) -> RadialMenu: ...
    def createRadialItem(self, submenu: bool = False, callback: bool = False) -> RadialScriptItem: ...
    def injectRadialItem(self, location: int, item: RadialItem) -> None: ...
    def injectRadialMenu(self, name: str) -> None: ...
    def updateMainMenuBar(self) -> None: ...
    def panes(self) -> Tuple[Pane, ...]: ...
    def paneTabs(self) -> Tuple[PaneTab, ...]: ...
    def currentPaneTabs(self) -> Tuple[PaneTab, ...]: ...
    def paneTabOfType(self, type: EnumValue, index: int = 0) -> PaneTab: ...
    def findPane(self, pane_id: int) -> Pane: ...
    def findPaneTab(self, name: str) -> PaneTab: ...
    def floatingPaneTabs(self) -> Tuple[PaneTab, ...]: ...
    def floatingPanels(self) -> Tuple[FloatingPanel, ...]: ...
    def paneUnderCursor(self) -> Pane: ...
    def paneTabUnderCursor(self) -> PaneTab: ...
    def isUserInteracting(self) -> bool: ...
    def setUserInteracting(self, interacting: bool) -> None: ...
    def orientationUpAxis(self) -> EnumValue: ...
    def handleOrientToNormalAxis(self) -> EnumValue: ...
    def displayConfirmation(self, *args, **kwargs) -> bool: ...
    def displayCustomConfirmation(self, *args, **kwargs) -> int: ...
    def displayMessage(self, *args, **kwargs) -> int: ...
    def readInput(self, *args, **kwargs) -> tuple[int, str]: ...
    def readMultiInput(self, *args, **kwargs) -> tuple[int, Tuple[str, ...]]: ...
    def selectFromList(self, *args, **kwargs) -> Tuple[int, ...]: ...
    def selectFromTree(self, *args, **kwargs) -> Tuple[str, ...]: ...
    def selectParmTag(self, width: int = 0, height: int = 0) -> Tuple[str, ...]: ...
    def selectParm(self, *args, **kwargs) -> Tuple[str, ...]: ...
    def selectParmTuple(self, *args, **kwargs) -> Tuple[str, ...]: ...
    def selectColor(self, initial_color: Optional[Color] = None) -> Color: ...
    def loadPaletteFile(self, file: str) -> Tuple[Color, ...]: ...
    def savePaletteFile(self, file: str, colors: typing.Iterable[Color]) -> None: ...
    def updateValueLadder(self, cursor_x: int, cursor_y: int, alt_key: bool, shift_key: bool) -> None: ...
    def closeValueLadder(self) -> None: ...
    def displayFileDependencyDialog(self, *args, **kwargs) -> Tuple[bool, Tuple[tuple[Parm, str], ...]]: ...
    def displayNodeHelp(self, node_type: NodeType) -> None: ...
    def openRenderDialog(self, rop: RopNode) -> None: ...
    def openRenameSelectedDialog(self, network: Node) -> None: ...
    def openParameterInterfaceDialog(self, node: Node, open_tab: Optional[EnumValue] = None, open_tab_tree_path: Optional[str] = None) -> None: ...
    def updateMode(self) -> EnumValue: ...
    def setUpdateMode(self, mode: EnumValue) -> None: ...
    def triggerUpdate(self) -> None: ...
    def reloadViewportColorSchemes(self) -> None: ...
    def reloadColorScheme(self) -> None: ...
    def currentColorScheme(self) -> str: ...
    def isAutoKey(self) -> bool: ...
    def removeAllSelectionCallbacks(self) -> None: ...
    def createDialog(self, ui_file_name: str) -> Dialog: ...
    def findDialog(self, ui_file_name: str) -> Dialog: ...
    def dialogs(self) -> Tuple[Dialog, ...]: ...
    def writePythonShellHistoryFile(self, filename: Optional[str] = None) -> None: ...
    def readPythonShellHistoryFile(self, filename: Optional[str] = None) -> None: ...
    def setStatusMessage(self, *args, **kwargs) -> None: ...
    def statusMessage(self) -> tuple[str, EnumValue]: ...
    def openAssetUploadDialog(self, uploading_node: Node, session_key: str, containing_node: Node) -> None: ...
    def openAssetDependenciesDialog(self, uploading_nodes: Sequence[Node], uploaded_nodes: Sequence[Node], session_key: str, containing_node: Node) -> None: ...
    def hasDragSourceData(self, label: str) -> bool: ...
    def getDragSourceData(self, label: str, index: int = 0) -> DDSourceAny: ...
    def resourceValueFromName(self, name: str) -> str: ...
    def colorFromName(self, name: str) -> Color: ...
    def globalScaleFactor(self) -> float: ...
    def scaledSize(self, size: int) -> int: ...
    def inchesToPixels(self, inches: float) -> float: ...
    def pixelsToInches(self, pixels: float) -> float: ...
    def copyTextToClipboard(self, text: str) -> None: ...
    def getTextFromClipboard(self) -> str: ...
    def hotkeys(self, hotkey_symbol: str) -> Tuple[str, ...]: ...
    def hotkeyDescription(self, hotkey_symbol: str) -> str: ...
    def isKeyMatch(self, key: str, hotkey_symbol: str) -> bool: ...
    def openCaptureWeightSpreadsheet(self, node: Node, pattern: Optional[str] = None) -> None: ...
    def registerViewerState(self, vs_templ: ViewerStateTemplate) -> None: ...
    def registerViewerStateFile(self, state_file: str) -> None: ...
    def registerViewerStates(self) -> None: ...
    def unregisterViewerState(self, state_typename: str) -> None: ...
    def unregisterViewerStateFile(self, state_file: str) -> None: ...
    def isRegisteredViewerState(self, state_name: str) -> bool: ...
    def reloadViewerState(self, state_typename: str) -> None: ...
    def reloadViewerStates(self, *args, **kwargs) -> None: ...
    def viewerStateInfo(self, *args, **kwargs) -> str: ...
    def viewerStateInfoFromFile(self, state_file: str) -> Tuple[str, str]: ...
    def viewerHandleInfo(self, *args, **kwargs) -> str: ...
    def printResourceMessage(self, *args, **kwargs) -> None: ...
    def fireResourceCustomEvent(self, resource_type: EnumValue, user_data: dict[str, Any], queue: bool = True) -> None: ...
    def showInFileBrowser(self, file_path: str) -> None: ...
    def showFloatingParameterEditor(self, node: Node, reuse: bool = True) -> ParameterEditor: ...
    def openParameterExpressionEditor(self, parm: Parm) -> None: ...
    def openPreferences(self, page: str, label: str) -> None: ...
    def hideAllMinimizedStowbars(self) -> bool: ...
    def setHideAllMinimizedStowbars(self, hide: bool) -> None: ...
    def registerViewerHandle(self, tmpl: ViewerHandleTemplate) -> None: ...
    def registerViewerHandles(self) -> None: ...
    def registerViewerHandleFile(self, handle_file: str) -> None: ...
    def unregisterViewerHandle(self, handle_name: str) -> None: ...
    def unregisterViewerHandleFile(self, handle_file: str) -> None: ...
    def isRegisteredViewerHandle(self, handle_name: str) -> bool: ...
    def reloadViewerHandle(self, handle_name: str) -> None: ...
    def loadPackage(self, package_filepath: str) -> None: ...
    def loadPackageArchive(self, *args, **kwargs) -> Tuple[str, ...]: ...
    def unloadPackage(self, package_filepath: str) -> None: ...
    def reloadPackage(self, package_filepath: str) -> None: ...
    def packageInfo(self, *args) -> str: ...
    def sharedAssetGalleryDataSource(self, gallery_name: str) -> AssetGalleryDataSource: ...
    def setSharedAssetGalleryDataSource(self, data_source: AssetGalleryDataSource, gallery_name: str) -> None: ...
    def reloadSharedAssetGalleryDataSource(self, gallery_name: str) -> None: ...
    def selectMultipleNodes(self, relative_to_node: Optional[Node] = None, initial_node: Optional[Node] = None, node_type_filter: Optional[EnumValue] = None, title: Optional[str] = None, width: int = 0, height: int = 0, custom_node_filter_callback: Optional[Any] = None) -> Tuple[str, ...]: ...
    def openBookmarkEditor(self, bookmark: Optional[Bookmark] = None) -> None: ...
    def openColorEditor(self, color_changed_callback: Any, include_alpha: bool = False, initial_color: Optional[Color] = None, initial_alpha: float = 1.0) -> None: ...
    def openValueLadder(self, *args, **kwargs) -> None: ...
    def addEventLoopCallback(self, callback: Any) -> None: ...
    def removeEventLoopCallback(self, callback: Any) -> None: ...
    def postEventCallback(self, callback: Any) -> None: ...
    def removePostedEventCallback(self, callback: Any) -> None: ...
    def eventLoopCallbacks(self) -> Tuple[Any, ...]: ...
    def waitUntil(self, callback: Any) -> None: ...
    def addTriggerUpdateCallback(self, callback: Any) -> None: ...
    def removeTriggerUpdateCallback(self, callback: Any) -> None: ...
    def addSelectionCallback(self, callback: Any) -> None: ...
    def removeSelectionCallback(self, callback: Any) -> None: ...
    def selectionCallbacks(self) -> Tuple[Any, ...]: ...
    def addResourceEventCallback(self, callback: Any) -> None: ...
    def removeResourceEventCallback(self, callback: Any) -> None: ...
    def openFileEditor(self, *args, **kwargs) -> None: ...
    def openViewerStateCodeGenDialog(self, *args, **kwargs) -> None: ...
    def openViewerHandleCodeGenDialog(self, category: NodeTypeCategory, action_callback: Any) -> None: ...

class UIEvent:
    thisown: Incomplete
    def __init__(self, val: int, val2: int) -> None: ...
    __swig_destroy__: Incomplete
    def device(self) -> UIEventDevice: ...
    def hasQueuedEvents(self) -> bool: ...
    def queuedEvents(self) -> Tuple[UIEventDevice, ...]: ...
    def value(self) -> Any: ...
    def reason(self) -> EnumValue: ...
    def valueType(self) -> EnumValue: ...

class UIEventDevice:
    thisown: Incomplete
    def __init__(self, val: int, val2: int, val3: int) -> None: ...
    __swig_destroy__: Incomplete
    def isAltKey(self) -> bool: ...
    def isAutoRepeat(self) -> bool: ...
    def isCapsLock(self) -> bool: ...
    def isCtrlKey(self) -> bool: ...
    def isKeyPad(self) -> bool: ...
    def isShiftKey(self) -> bool: ...
    def isArrowDown(self) -> bool: ...
    def isArrowLeft(self) -> bool: ...
    def isArrowRight(self) -> bool: ...
    def isArrowUp(self) -> bool: ...
    def isKeyPressed(self) -> bool: ...
    def isFunctionKey(self) -> bool: ...
    def keyValue(self) -> int: ...
    def keyString(self) -> str: ...
    def modifierString(self) -> str: ...
    def isKeyUp(self) -> bool: ...
    def isKeyDown(self) -> bool: ...
    def isLeftButton(self) -> bool: ...
    def isMiddleButton(self) -> bool: ...
    def isRightButton(self) -> bool: ...
    def isLeftButtonReleased(self) -> bool: ...
    def isMiddleButtonReleased(self) -> bool: ...
    def isRightButtonReleased(self) -> bool: ...
    def mouseWheel(self) -> float: ...
    def mouseX(self) -> float: ...
    def mouseY(self) -> float: ...
    def isTablet(self) -> bool: ...
    def tabletAngle(self) -> float: ...
    def tabletPressure(self) -> float: ...
    def tabletRoll(self) -> float: ...
    def tabletTilt(self) -> float: ...
    def time(self) -> float: ...

class undos:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def areEnabled(self) -> bool: ...
    def disabler(self) -> UndosDisabler: ...
    def group(self, label: str, editor: Optional[NetworkEditor] = None) -> UndosGroup: ...
    def removeUndos(self, tag: str) -> None: ...
    def clear(self) -> None: ...
    def memoryUsage(self) -> int: ...
    def memoryUsageLimit(self) -> int: ...
    def performUndo(self) -> bool: ...
    def performRedo(self) -> bool: ...
    def undoLabels(self) -> Tuple[str, ...]: ...
    def redoLabels(self) -> Tuple[str, ...]: ...
    def add(self, undo: Any, label: str, tag: Optional[str] = None) -> None: ...

class UndosDisabler:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __enter__(self) -> UndosDisabler: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class UndosGroup:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def label(self) -> str: ...
    def __enter__(self) -> UndosGroup: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class VDB(Prim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def sample(self, position: Sequence[float]) -> float: ...
    def samplev(self, position: Sequence[float]) -> Vector3: ...
    def gradient(self, position: Sequence[float]) -> Vector3: ...
    def voxel(self, index: Sequence[int]) -> float: ...
    def resolution(self) -> Tuple[int, ...]: ...
    def indexToPos(self, index: Sequence[int]) -> Vector3: ...
    def posToIndex(self, position: Sequence[float]) -> Tuple[int, ...]: ...
    def isSDF(self) -> bool: ...
    def isHeightField(self) -> bool: ...
    def volumeMax(self) -> float: ...
    def volumeMin(self) -> float: ...
    def volumeAverage(self) -> float: ...
    def transform(self) -> Matrix3: ...
    def taper(self) -> float: ...
    def vertex(self, index: int) -> Vertex: ...
    def isEmpty(self) -> bool: ...
    def activeVoxelCount(self) -> int: ...
    def activeVoxelBoundingBox(self) -> BoundingBox: ...
    def voxelSize(self) -> Vector3: ...
    def dataType(self) -> EnumValue: ...
    def voxelRangeAsBool(self, range: BoundingBox) -> Tuple[bool, ...]: ...
    def voxelRangeAsFloat(self, range: BoundingBox) -> Tuple[float, ...]: ...
    def voxelRangeAsInt(self, range: BoundingBox) -> Tuple[int, ...]: ...
    def voxelRangeAsVector3(self, range: BoundingBox) -> Tuple[Vector3, ...]: ...
    def voxelRange(self, range: BoundingBox) -> Any: ...

class Vector2:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, vector2: Vector2, tolerance: float = 1e-05) -> bool: ...
    def almostEqual(self, vector2: Vector2, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def setTo(self, sequence: Sequence[float]) -> None: ...
    def __add__(self, vector2: Vector2) -> Vector2: ...
    def __sub__(self, vector2: Vector2) -> Vector2: ...
    def __neg__(self) -> Vector2: ...
    def __rmul__(self, scalar: float) -> Vector2: ...
    def __mul__(self, *args) -> Vector2: ...
    def __div__(self, scalar: float) -> Vector2: ...
    def __truediv__(self, scalar: float) -> Vector2: ...
    def normalized(self) -> Vector2: ...
    def length(self) -> float: ...
    def lengthSquared(self) -> float: ...
    def distanceTo(self, vector2: Vector2) -> float: ...
    def dot(self, vector2: Vector2) -> float: ...
    def x(self) -> float: ...
    def y(self) -> float: ...

class Vector3:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, vector3: Vector3, tolerance: float = 1e-05) -> bool: ...
    def almostEqual(self, vector3: Vector3, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def setTo(self, sequence: Sequence[float]) -> None: ...
    def __add__(self, vector3: Vector3) -> Vector3: ...
    def __sub__(self, vector3: Vector3) -> Vector3: ...
    def __neg__(self) -> Vector3: ...
    def __rmul__(self, scalar: float) -> Vector3: ...
    def __mul__(self, *args) -> Vector3: ...
    def __div__(self, scalar: float) -> Vector3: ...
    def __truediv__(self, scalar: float) -> Vector3: ...
    def normalized(self) -> Vector3: ...
    def multiplyAsDir(self, matrix4: Matrix4) -> Vector3: ...
    def length(self) -> float: ...
    def lengthSquared(self) -> float: ...
    def matrixToRotateTo(self, vector3: Vector3) -> Matrix4: ...
    def smoothRotation(self, *args, **kwargs) -> Vector3: ...
    def distanceTo(self, vector3: Vector3) -> float: ...
    def angleTo(self, vector3: Vector3) -> float: ...
    def dot(self, vector3: Vector3) -> float: ...
    def cross(self, vector3: Vector3) -> Vector3: ...
    def ocio_transform(self, src_space: str, dest_space: str) -> Vector3: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def distanceToSegment(self, point1: Vector3, point2: Vector3) -> float: ...
    def distance2ToSegment(self, point1: Vector3, point2: Vector3) -> float: ...
    def pointOnSegment(self, point1: Vector3, point2: Vector3) -> Vector3: ...

class Vector4:
    thisown: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isAlmostEqual(self, vector4: Vector4, tolerance: float = 1e-05) -> bool: ...
    def almostEqual(self, vector4: Vector4, tolerance: float = 1e-05) -> bool: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def setTo(self, sequence: Sequence[float]) -> None: ...
    def __add__(self, vector4: Vector4) -> Vector4: ...
    def __sub__(self, vector4: Vector4) -> Vector4: ...
    def __rmul__(self, scalar: float) -> Vector4: ...
    def __mul__(self, *args) -> Vector4: ...
    def __div__(self, scalar: float) -> Vector4: ...
    def __truediv__(self, scalar: float) -> Vector4: ...
    def normalized(self) -> Vector4: ...
    def length(self) -> float: ...
    def lengthSquared(self) -> float: ...
    def dot(self, vector4: Vector4) -> float: ...
    def ocio_transform(self, src_space: str, dest_space: str) -> Vector4: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def w(self) -> float: ...

class Vertex:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def prim(self) -> Prim: ...
    def point(self) -> Point: ...
    def number(self) -> int: ...
    def linearNumber(self) -> int: ...
    def attribType(self) -> EnumValue: ...
    def floatAttribValue(self, *args) -> float: ...
    def floatListAttribValue(self, *args) -> Tuple[float, ...]: ...
    def intAttribValue(self, *args) -> int: ...
    def intListAttribValue(self, *args) -> Tuple[int, ...]: ...
    def stringAttribValue(self, *args) -> str: ...
    def stringListAttribValue(self, *args) -> Tuple[str, ...]: ...
    def dictAttribValue(self, *args) -> dict[str, Any]: ...
    def dictListAttribValue(self, *args) -> Tuple[dict[str, Any], ...]: ...
    def setAttribValue(self, *args) -> None: ...
    def attribValue(self, *args) -> Any: ...

class VertexGroup:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def geometry(self) -> Geometry: ...
    def name(self) -> str: ...
    def iterVertices(self) -> Iterator[Vertex]: ...
    def vertices(self) -> Tuple[Vertex, ...]: ...
    def contains(self, vertex: Vertex) -> bool: ...
    def isOrdered(self) -> bool: ...
    def add(self, *args) -> None: ...
    def remove(self, *args) -> None: ...
    def clear(self) -> None: ...
    def destroy(self) -> None: ...
    def vertexCount(self) -> int: ...
    def optionType(self, option_name: str) -> EnumValue: ...
    def setOption(self, *args) -> None: ...
    def removeOption(self, name: str) -> None: ...
    def dataId(self) -> AttribDataId: ...
    def incrementDataId(self) -> None: ...
    def options(self) -> Any: ...
    def option(self, option_name: str) -> Any: ...

class VexContext:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def nodeTypeCategory(self) -> NodeTypeCategory: ...
    def shaderType(self) -> EnumValue: ...
    def pathsToLoadedVexFunctions(self) -> dict[str, str]: ...

class ViewerDragger:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def valid(self) -> bool: ...
    def startDrag(self, event: ViewerEvent, start_pos: Vector3) -> None: ...
    def startDragAcrossFloor(self, event: ViewerEvent, start_pos: Vector3) -> None: ...
    def startDragAlongLine(self, event: ViewerEvent, line_start: Vector3, line_dir: Vector3) -> None: ...
    def startDragAlongPlane(self, event: ViewerEvent, plane_point: Vector3, plane_normal: Vector3) -> None: ...
    def startDragRotate(self, event: ViewerEvent, center_pos: Vector3, radius: float, rotate_axis: Vector3, orient: Matrix3) -> None: ...
    def drag(self, event: ViewerEvent) -> ViewerDragger.DragValueMap: ...
    def endDrag(self) -> None: ...
    def position(self) -> Vector3: ...
    def startPosition(self) -> Vector3: ...
    def startDirection(self) -> Vector3: ...
    def startRotatePosition(self) -> Vector3: ...
    def viewport(self) -> GeometryViewport: ...
    def enableModifierKeys(self, allow: bool) -> None: ...

class ViewerEvent(UIEvent):
    thisown: Incomplete
    def __init__(self, sceneViewer: SceneViewer, val: int, val2: int) -> None: ...
    __swig_destroy__: Incomplete
    def ray(self) -> Tuple[Vector3, Vector3]: ...
    def snappingRay(self) -> dict[str, Any]: ...
    def screenToRay(self, scrx: float, scry: float) -> Tuple[Vector3, Vector3]: ...
    def curViewport(self) -> GeometryViewport: ...

class ViewerStateContext(GadgetContext):
    thisown: Incomplete
    def __init__(self, val: int) -> None: ...
    __swig_destroy__: Incomplete

class ViewerHandleDragger(ViewerDragger):
    thisown: Incomplete
    def __init__(self, name: str) -> None: ...
    __swig_destroy__: Incomplete

class ViewerHandleContext(GadgetContext):
    thisown: Incomplete
    def __init__(self, val: int) -> None: ...
    __swig_destroy__: Incomplete
    def isParameterEnabled(self, parm_name: str) -> bool: ...
    def scaleFactor(self, *args) -> float: ...
    def scaleValue(self) -> float: ...
    def objectWorldTransform(self) -> Matrix4: ...
    def objectLocalTransform(self) -> Matrix4: ...

class ViewerHandleTemplate:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def typeName(self) -> str: ...
    def categories(self) -> Tuple[NodeTypeCategory, ...]: ...
    def bindMenu(self, menu: ViewerStateMenu) -> None: ...
    def bindIcon(self, name: str) -> None: ...
    def bindGadget(self, *args, **kwargs) -> None: ...
    def bindParameter(self, *args, **kwargs) -> None: ...
    def exportParameters(self, params: Sequence[str]) -> None: ...
    def bindSetting(self, *args, **kwargs) -> None: ...
    def bindHotkeyDefinitions(self, definitions: PluginHotkeyDefinitions) -> None: ...
    def bindFactory(self, callback: Any) -> None: ...

class ViewerState:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def name(self) -> str: ...
    def description(self) -> str: ...
    def icon(self) -> str: ...
    def categories(self) -> Tuple[NodeTypeCategory, ...]: ...
    def nodeType(self) -> NodeType: ...
    def isHidden(self) -> bool: ...
    def hotkey(self) -> str: ...
    def parmTemplates(self) -> ParmTemplateGroup: ...

class ViewerStateDragger(ViewerDragger):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def setTransform(self, xform: Matrix4) -> None: ...
    def setInverseTransform(self, inv_xform: Matrix4) -> None: ...
    def transform(self) -> Matrix4: ...
    def inverseTransform(self) -> Matrix4: ...

class ViewerStateMenu:
    thisown: Incomplete
    def __init__(self, handle: str, label: str) -> None: ...
    __swig_destroy__: Incomplete
    def addToggleItem(self, *args, **kwargs) -> None: ...
    def addActionItem(self, *args, **kwargs) -> None: ...
    def addSeparator(self) -> None: ...
    def addRadioStrip(self, handle: str, label: str, default_value: str) -> None: ...
    def addRadioStripItem(self, *args, **kwargs) -> None: ...
    def addMenu(self, sub_menu: ViewerStateMenu) -> None: ...

class ViewerStateTemplate:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def typeName(self) -> str: ...
    def categoryName(self) -> str: ...
    def contexts(self) -> Tuple[NodeTypeCategory, ...]: ...
    def bindParameter(self, *args, **kwargs) -> None: ...
    def bindHandle(self, *args, **kwargs) -> None: ...
    def bindHandleStatic(self, *args, **kwargs) -> None: ...
    def bindGadget(self, *args, **kwargs) -> None: ...
    def bindGeometrySelector(self, *args, **kwargs) -> None: ...
    def bindObjectSelector(self, *args, **kwargs) -> None: ...
    def bindSceneGraphSelector(self, *args, **kwargs) -> None: ...
    def bindDynamicsSelector(self, *args, **kwargs) -> None: ...
    def bindDynamicsPointSelector(self, *args, **kwargs) -> None: ...
    def bindDynamicsPolygonSelector(self, *args, **kwargs) -> None: ...
    def bindDrawableSelector(self, *args, **kwargs) -> None: ...
    def bindSelector(self, *args, **kwargs) -> None: ...
    def bindMenu(self, menu: ViewerStateMenu) -> None: ...
    def bindIcon(self, name: str) -> None: ...
    def bindSupportsSelectionChange(self, supports_change: bool) -> None: ...
    def bindSupportsMoveTool(self, supports_movetool: bool) -> None: ...
    def bindPlaybackChangeEvent(self) -> None: ...
    def bindNodeChangeEvent(self, event_types: Sequence[EnumValue]) -> None: ...
    def bindNodeParmChangeEvent(self, parm_names: Sequence[str]) -> None: ...
    def bindHotkeyDefinitions(self, definitions: PluginHotkeyDefinitions) -> None: ...
    def bindFactory(self, callback: Any) -> None: ...

class ViewportVisualizer:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def name(self) -> str: ...
    def setName(self, name: str) -> None: ...
    def label(self) -> str: ...
    def setLabel(self, label: str) -> None: ...
    def icon(self) -> str: ...
    def setIcon(self, icon: str) -> None: ...
    def isActive(self, viewport: Optional[GeometryViewport] = None) -> bool: ...
    def setIsActive(self, on: bool, viewport: Optional[GeometryViewport] = None) -> None: ...
    def type(self) -> ViewportVisualizerType: ...
    def setType(self, type: ViewportVisualizerType) -> None: ...
    def category(self) -> EnumValue: ...
    def categoryNode(self) -> Node: ...
    def scope(self) -> EnumValue: ...
    def setScope(self, scope: EnumValue) -> None: ...
    def isShownInToolbar(self) -> bool: ...
    def showInToolbar(self, on: bool) -> None: ...
    def isActiveWhenUnselected(self) -> bool: ...
    def setIsActiveWhenUnselected(self, on: bool) -> None: ...
    def isActiveWhenSelected(self) -> bool: ...
    def setIsActiveWhenSelected(self, on: bool) -> None: ...
    def isActiveWhenGhosted(self) -> bool: ...
    def setIsActiveWhenGhosted(self, on: bool) -> None: ...
    def isActiveWhenDisplayed(self) -> bool: ...
    def setIsActiveWhenDisplayed(self, on: bool) -> None: ...
    def isActiveWhenCurrent(self) -> bool: ...
    def setIsActiveWhenCurrent(self, on: bool) -> None: ...
    def isActiveWhenTemplated(self) -> bool: ...
    def setIsActiveWhenTemplated(self, on: bool) -> None: ...
    def parmNames(self) -> Tuple[str, ...]: ...
    def evalParmAsFloat(self, parm_name: str) -> float: ...
    def evalParmAsInt(self, parm_name: str) -> int: ...
    def evalParmAsString(self, parm_name: str) -> str: ...
    def evalParmAsRamp(self, parm_name: str) -> Ramp: ...
    def evalParm(self, parm_name: str) -> Any: ...
    def setParm(self, *args) -> None: ...
    def destroy(self) -> None: ...

class viewportVisualizers:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def visualizers(self, *args, **kwargs) -> Tuple[ViewportVisualizer, ...]: ...
    def createVisualizer(self, *args, **kwargs) -> ViewportVisualizer: ...
    def copyVisualizer(self, source: ViewportVisualizer) -> ViewportVisualizer: ...
    def types(self) -> Tuple[ViewportVisualizerType, ...]: ...
    def type(self, name: str) -> ViewportVisualizerType: ...
    def isCategoryActive(self, category: EnumValue, node: Optional[Node] = None, viewport: Optional[GeometryViewport] = None) -> bool: ...
    def setIsCategoryActive(self, on: bool, category: EnumValue, node: Optional[Node] = None, viewport: Optional[GeometryViewport] = None) -> None: ...
    def visualizerBySessionId(self, session_id: int) -> ViewportVisualizer: ...
    def removeAllEventCallbacks(self, *args, **kwargs) -> None: ...
    def addEventCallback(self, *args, **kwargs) -> None: ...
    def removeEventCallback(self, *args, **kwargs) -> None: ...
    def eventCallbacks(self, *args) -> Tuple[tuple[Tuple[EnumValue, ...], Any], ...]: ...

class ViewportVisualizerType:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def name(self) -> str: ...
    def description(self) -> str: ...
    def icon(self) -> str: ...

class Volume(Prim):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def sample(self, position: Sequence[float]) -> float: ...
    def gradient(self, position: Sequence[float]) -> Vector3: ...
    def voxel(self, index: Sequence[int]) -> float: ...
    def setVoxel(self, index: Sequence[int], value: float) -> None: ...
    def allVoxels(self) -> Tuple[float, ...]: ...
    def allVoxelsAsString(self) -> bytes: ...
    def setAllVoxels(self, values: Sequence[float]) -> None: ...
    def setAllVoxelsFromString(self, values: Any) -> None: ...
    def voxelSlice(self, plane: str, index: int) -> Tuple[float, ...]: ...
    def voxelSliceAsString(self, plane: str, index: int) -> bytes: ...
    def setVoxelSlice(self, values: Sequence[float], plane: str, index: int) -> None: ...
    def setVoxelSliceFromString(self, values: Any, plane: str, index: int) -> None: ...
    def resolution(self) -> Tuple[int, ...]: ...
    def indexToPos(self, index: Sequence[int]) -> Vector3: ...
    def posToIndex(self, position: Sequence[float]) -> Tuple[int, ...]: ...
    def isValidIndex(self, index: Sequence[int]) -> bool: ...
    def isSDF(self) -> bool: ...
    def isHeightField(self) -> bool: ...
    def volumeMax(self) -> float: ...
    def volumeMin(self) -> float: ...
    def volumeAverage(self) -> float: ...
    def transform(self) -> Matrix3: ...
    def setTransform(self, transform: Matrix4) -> None: ...
    def taperX(self) -> float: ...
    def taperY(self) -> float: ...
    def vertex(self, index: int) -> Vertex: ...
    def voxelSize(self) -> Vector3: ...

class VopNetNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def definedType(self) -> NodeType: ...
    def vexContext(self) -> VexContext: ...
    def shaderType(self) -> EnumValue: ...

class VopNode(OpNode):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def insertParmGenerator(self, input_name: str, parm_gen_type: EnumValue, reference_input_defaults: bool) -> VopNode: ...
    def insertParmGeneratorsForAllInputs(self, parm_gen_type: EnumValue, reference_input_defaults: bool) -> dict[str, Node]: ...
    def parmDefinerNode(self) -> VopNode: ...
    def deleteIndependentInputNodes(self, input_index: int) -> bool: ...
    def dependsOnlyOn(self, other_node: VopNode, max_connections: int, recurse: bool) -> bool: ...
    def setIsInputVisible(self, input_name: str, is_visible: bool) -> None: ...
    def isInputVisible(self, input_name: str) -> bool: ...
    def inputDataTypes(self) -> Tuple[str, ...]: ...
    def outputDataTypes(self) -> Tuple[str, ...]: ...
    def inputParmTypes(self) -> Tuple[str, ...]: ...
    def isInputCompatible(self, idx: int, other: VopNode, other_idx: int, allow_conversions: bool = False) -> bool: ...
    def code(self) -> str: ...
    def outerCode(self) -> str: ...
    def isBypassed(self) -> bool: ...
    def bypass(self, on: bool) -> None: ...
    def isDebugFlagSet(self) -> bool: ...
    def setDebugFlag(self, on: bool) -> None: ...
    def isDetailLowFlagSet(self) -> bool: ...
    def setDetailLowFlag(self, on: bool) -> None: ...
    def isDetailMediumFlagSet(self) -> bool: ...
    def setDetailMediumFlag(self, on: bool) -> None: ...
    def isDetailHighFlagSet(self) -> bool: ...
    def setDetailHighFlag(self, on: bool) -> None: ...
    def isCompressFlagSet(self) -> bool: ...
    def setCompressFlag(self, on: bool) -> None: ...
    def isMaterialFlagSet(self) -> bool: ...
    def setMaterialFlag(self, on: bool) -> None: ...
    def setInputGroupExpanded(self, group: str, expanded: bool) -> None: ...
    def isInputGroupExpanded(self, group: str) -> bool: ...
    def inputsInGroup(self, group: str) -> Tuple[int, ...]: ...
    def inputGroupNames(self) -> Tuple[str, ...]: ...
    def inputIndexOrder(self) -> Tuple[int, ...]: ...
    def findBypassInputName(self, output_name: str) -> str: ...
    def renderMask(self) -> str: ...
    def shaderString(self, *args) -> str: ...
    def shaderCode(self, *args) -> str: ...
    def shaderName(self, as_otl_path: bool = True, shader_type_name: Optional[str] = None) -> str: ...
    def shaderNameForSignature(self, signature: Optional[str] = None) -> str: ...
    def shaderType(self) -> EnumValue: ...
    def shaderLanguageName(self) -> str: ...
    def setShaderLanguageName(self, language_name: str) -> bool: ...
    def currentSignatureName(self) -> str: ...
    def coshaderNodes(self, parm_name: str) -> Tuple[Node, ...]: ...
    def coshaderNodesOutputNames(self, parm_name: str) -> Tuple[str, ...]: ...
    def subnetTerminalChild(self, subnet_output_name: str) -> tuple[Node, str]: ...
    def extraBindings(self) -> Tuple[str, ...]: ...
    def usdShaderParms(self, force_parms_at_default: bool = False) -> Tuple[str, ...]: ...
    def usdPreviewShaderParms(self) -> Tuple[str, ...]: ...

class VopNodeType(OpNodeType):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def shaderType(self) -> EnumValue: ...
    def renderMask(self) -> str: ...
    def vopnetMask(self) -> str: ...
    def inputTags(self, input_name: str) -> dict[str, str]: ...
    def outputTags(self, output_name: str) -> dict[str, str]: ...

def isUIAvailable() -> bool: ...
def exit(exit_code: int = 0, suppress_save_prompt: bool = False) -> None: ...
def applicationName() -> str: ...
def applicationVersion(include_patch: bool = False) -> Tuple[int, ...]: ...
def applicationVersionString() -> str: ...
def applicationCompilationDate() -> str: ...
def applicationPlatformInfo() -> str: ...
def vdbVersionInfo() -> dict[str, str]: ...
def hdkAPIVersion() -> int: ...
def licenseCategory() -> EnumValue: ...
def isApprentice() -> bool: ...
def releaseLicense() -> None: ...
def maxThreads() -> int: ...
def setMaxThreads(max_threads: int) -> None: ...
def root() -> Node: ...
def pwd() -> Node: ...
def parent() -> Node: ...
def setPwd(node: Node) -> None: ...
def cd(path: str) -> None: ...
def phm() -> HDAModule: ...
def currentDopNet() -> Node: ...
def setCurrentDopNet(dopnet: Node) -> None: ...
def simulationEnabled() -> bool: ...
def setSimulationEnabled(enabled: bool) -> None: ...
def node(path: str) -> Node: ...
def item(path: str) -> NetworkMovableItem: ...
def nodes(paths: Sequence[str]) -> Tuple[Node, ...]: ...
def items(paths: Sequence[str]) -> Tuple[NetworkMovableItem, ...]: ...
def nodeBySessionId(session_id: int) -> Node: ...
def networkBoxBySessionId(session_id: int) -> NetworkBox: ...
def stickyNoteBySessionId(session_id: int) -> StickyNote: ...
def subnetIndirectInputBySessionId(session_id: int) -> SubnetIndirectInput: ...
def networkDotBySessionId(session_id: int) -> NetworkDot: ...
def itemBySessionId(item_type: EnumValue, session_id: int) -> NetworkMovableItem: ...
def nodeConnectionBySessionId(session_id: int, input_index: int) -> NodeConnection: ...
def createApexRootNode() -> ApexNode: ...
def apexNodeBySessionId(session_id: int) -> ApexNode: ...
def apexNodeConnectionBySessionId(session_id: int) -> ApexNodeConnection: ...
def apexStickyNoteBySessionId(session_id: int) -> ApexStickyNote: ...
def defaultColor(color_item: EnumValue) -> Color: ...
def setDefaultColor(color_item: EnumValue, color: Color) -> None: ...
def selectedNodes(include_hidden: bool = False) -> Tuple[Node, ...]: ...
def selectedItems(include_hidden: bool = False) -> Tuple[NetworkMovableItem, ...]: ...
def selectedConnections() -> Tuple[NodeConnection, ...]: ...
def clearAllSelected() -> None: ...
def copyNodesToClipboard(nodes: Sequence[Node]) -> None: ...
def pasteNodesFromClipboard(destination_node: Node) -> None: ...
def parm(path: str) -> Parm: ...
def parmTuple(path: str) -> ParmTuple: ...
def evaluatingParm() -> Parm: ...
def parmClipboardContents() -> Tuple[dict[str, str], ...]: ...
def evalParm(path: str) -> Any: ...
def evalParmTuple(path: str) -> Any: ...
def ch(path: str) -> Any: ...
def hscriptExpression(expression: str) -> Any: ...
def expressionGlobals() -> Any: ...
def lvar(name: str) -> Any: ...
def contextOption(opt: str) -> Any: ...
def loadCPIODataFromString(data: Any) -> Tuple[tuple[str, bytes], ...]: ...
def loadIndexDataFromString(data: Any) -> dict[str, bytes]: ...
def addContextOptionChangeCallback(callback: Any) -> None: ...
def removeContextOptionChangeCallback(callback: Any) -> None: ...
def contextOptionChangeCallbacks() -> Tuple[Any, ...]: ...
def hscriptFloatExpression(expression: str) -> float: ...
def hscriptStringExpression(expression: str) -> str: ...
def hscriptVectorExpression(expression: str) -> Tuple[float, ...]: ...
def hscriptMatrixExpression(expression: str) -> Tuple[Tuple[float, ...], ...]: ...
def getEnvConfigValue(name: str, default_value: Optional[str] = None) -> str: ...
def getenv(name: str, default_value: Optional[str] = None) -> str: ...
def putenv(name: str, value: str) -> None: ...
def unsetenv(name: str) -> None: ...
def allowEnvironmentToOverwriteVariable(name: str, onoff: bool) -> None: ...
def updateProgressAndCheckForInterrupt(percentage: int = -1) -> bool: ...
def runVex(*args, **kwargs) -> dict[str, Any]: ...
def saveImageDataToFile(*args) -> None: ...
def loadImageDataFromFile(*args, **kwargs) -> bytes: ...
def imageResolution(image_file_name: str) -> Tuple[int, ...]: ...
def runCallbackAndCatchCrashes(callback: PyObject) -> PyObject: ...
def updateModeSetting() -> EnumValue: ...
def setUpdateMode(mode: EnumValue) -> None: ...
def orboltURLHandler() -> OrboltURLHandler: ...
def chsop(path: str) -> str: ...
def chsoplist(path: str) -> str: ...
def sortedNodePaths(paths: Sequence[str]) -> Tuple[str, ...]: ...
def sortedNodes(nodes: Sequence[Node]) -> Tuple[Node, ...]: ...
def patternMatch(pattern: str, str: str, ignore_case: bool = False, path_match: bool = False) -> int: ...
def chopExportConflictResolutionPattern() -> str: ...
def setChopExportConflictResolutionPattern(pattern: str) -> None: ...
def nodeType(*args) -> NodeType: ...
def preferredNodeType(name: str, parent_node: Optional[Node] = None) -> NodeType: ...
def objNodeTypeCategory() -> NodeTypeCategory: ...
def sopNodeTypeCategory() -> NodeTypeCategory: ...
def dopNodeTypeCategory() -> NodeTypeCategory: ...
def cop2NodeTypeCategory() -> NodeTypeCategory: ...
def copNodeTypeCategory() -> NodeTypeCategory: ...
def shopNodeTypeCategory() -> NodeTypeCategory: ...
def vopNodeTypeCategory() -> NodeTypeCategory: ...
def ropNodeTypeCategory() -> NodeTypeCategory: ...
def chopNodeTypeCategory() -> NodeTypeCategory: ...
def cop2NetNodeTypeCategory() -> NodeTypeCategory: ...
def vopNetNodeTypeCategory() -> NodeTypeCategory: ...
def chopNetNodeTypeCategory() -> NodeTypeCategory: ...
def topNodeTypeCategory() -> NodeTypeCategory: ...
def lopNodeTypeCategory() -> NodeTypeCategory: ...
def managerNodeTypeCategory() -> NodeTypeCategory: ...
def rootNodeTypeCategory() -> NodeTypeCategory: ...
def dataNodeTypeCategory() -> NodeTypeCategory: ...
def nodeTypeCategories() -> dict[str, NodeTypeCategory]: ...
def apexNodeTypeCategory() -> NodeTypeCategory: ...
def copyNodesTo(nodes: Sequence[Node], destination_node: Node) -> Tuple[Node, ...]: ...
def moveNodesTo(nodes: Sequence[Node], destination_node: Node) -> Tuple[Node, ...]: ...
def addNodeBundle(name: Optional[str] = None) -> Bundle: ...
def nodeBundles() -> Tuple[Bundle, ...]: ...
def selectedNodeBundles() -> Tuple[Bundle, ...]: ...
def nodeBundle(name: str) -> Bundle: ...
def hdaDefinition(category: NodeTypeCategory, name: str, file_path: str) -> HDADefinition: ...
def time() -> float: ...
def setTime(time: float) -> None: ...
def frame(full_precision: bool = False) -> float: ...
def intFrame() -> int: ...
def setFrame(frame: float) -> None: ...
def fps() -> float: ...
def setFps(fps: float, modify_frame_count: bool = True, preserve_keyframes: bool = False, preserve_frame_start: bool = False) -> None: ...
def timeToFrame(time: float, full_precision: bool = False) -> float: ...
def frameToTime(frame: float) -> float: ...
def scaleToMKS(units: str) -> float: ...
def scaleFromMKS(units: str) -> float: ...
def bezier() -> float: ...
def constant() -> float: ...
def cubic() -> float: ...
def cycle(start_frame: float, end_frame: float) -> float: ...
def cyclet(start_time: float, end_time: float) -> float: ...
def cycleoffset(start_time: float, end_time: float) -> float: ...
def cycleoffsett(start_time: float, end_time: float) -> float: ...
def ease() -> float: ...
def easein() -> float: ...
def easeinp(ease_speed: float) -> float: ...
def easeout() -> float: ...
def easeoutp(ease_speed: float) -> float: ...
def easep(ease_bias: float) -> float: ...
def linear() -> float: ...
def match() -> float: ...
def matchin() -> float: ...
def matchout() -> float: ...
def qlinear() -> float: ...
def quintic() -> float: ...
def repeat(start_frame: float, end_frame: float) -> float: ...
def repeatt(start_time: float, end_time: float) -> float: ...
def spline() -> float: ...
def vmatch() -> float: ...
def vmatchin() -> float: ...
def vmatchout() -> float: ...
def helpServerUrl() -> str: ...
def hscriptCommandHelp(command_name: str) -> str: ...
def hscript(command: str) -> Tuple[str, ...]: ...
def almostEqual(x: float, y: float) -> bool: ...
def fileReferences(*args, **kwargs) -> Tuple[tuple[Parm, str], ...]: ...
def findFile(file_name: str) -> str: ...
def findFiles(file_name: str) -> Tuple[str, ...]: ...
def findFilesWithExtension(file_extension: str, subdirectory: Optional[str] = None) -> Tuple[str, ...]: ...
def findDirectory(directory_name: str) -> str: ...
def findDirectories(directory_name: str) -> Tuple[str, ...]: ...
def houdiniPath(pathvar: Optional[str] = None) -> Tuple[str, ...]: ...
def homeHoudiniDirectory() -> str: ...
def readFile(file_path: str) -> str: ...
def readBinaryFile(file_path: str) -> bytes: ...
def saveCPIODataToString(data: typing.Iterable[tuple[str, bytes]]) -> bytes: ...
def loadIndexDataFromFile(file_path: str) -> dict[str, bytes]: ...
def saveIndexDataToString(index_data: dict[str, bytes]) -> bytes: ...
def saveIndexDataToFile(file_path: str, index_data: dict[str, bytes]) -> None: ...
def vexContexts() -> Tuple[VexContext, ...]: ...
def vexContextForShaderType(shader_type: EnumValue) -> VexContext: ...
def vexContextForNodeTypeCategory(node_type_category: NodeTypeCategory) -> VexContext: ...
def convertClipData(data: bytes, from_binary: bool, from_blosc_compression: bool, to_binary: bool, to_blosc_compression: bool) -> bytes: ...
def convertKeyframesToClipData(keyframe_map: dict[str, Tuple[Keyframe, ...]], binary: bool = True, use_blosc_compression: bool = True) -> bytes: ...
def setSessionModuleSource(source: str) -> None: ...
def appendSessionModuleSource(source: str) -> None: ...
def sessionModuleSource() -> str: ...
def compareNode(path: str, dest: Optional[str] = None) -> bool: ...
def compareNodeBackup(path: str, index: int, dest: Optional[str] = None) -> bool: ...
def compareHDA(path_left: str, path_right: str, dest: Optional[str] = None) -> bool: ...
def compareHDABackup(path: str, index: int, dest: Optional[str] = None) -> bool: ...
def compareHip(dest: Optional[str] = None) -> bool: ...
def compareHipBackup(index: int, dest: Optional[str] = None) -> bool: ...
def hasContextOption(opt: str) -> bool: ...
def contextOptionNames() -> Tuple[str, ...]: ...
def setContextOption(*args) -> None: ...
def removeContextOption(opt: str) -> None: ...
def contextOptionConfig(opt: str) -> str: ...
def setContextOptionConfig(opt: str, config: str) -> None: ...
def isAutoContextOption(opt: str) -> bool: ...
def isAutoContextOptionOverridden(opt: str) -> bool: ...
def removeAllContextOptionChangeCallbacks() -> None: ...
def getPreferenceNames() -> Tuple[str, ...]: ...
def getPreference(name: str) -> str: ...
def setPreference(name: str, value: str) -> bool: ...
def addPreference(name: str, value: str) -> bool: ...
def removePreference(name: str) -> bool: ...
def refreshPreferences() -> None: ...
def startHoudiniEngineDebugger(*args) -> None: ...
def userName(alpha: bool = True) -> str: ...
def machineName(alpha: bool = True) -> str: ...
def createAnimationLayers(*args) -> Node: ...
def addAnimationLayer(*args) -> Node: ...
def removeAnimationLayer(layermixer: Node, layername: str, merge_down: bool = False) -> bool: ...
def createAnimationClip(*args) -> Node: ...
def registerOpdefPath(*args, **kwargs) -> None: ...
def videoEncoders(driver: EnumValue, available: bool = False) -> Tuple[str, ...]: ...

assertTrue: Incomplete
clipInfo: Incomplete
expandString: Incomplete
hscriptExpandString: Incomplete
expandStringAtFrame: Incomplete
incrementNumberedString: Incomplete
encode: Incomplete
decode: Incomplete
thirdPartyLibraryVersions: Incomplete
selectedItemsAsData: Incomplete
itemsAsData: Incomplete
createItemsFromData: Incomplete
parmTemplateFromData: Incomplete
hipExtension: Incomplete
