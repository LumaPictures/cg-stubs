from maya.app.flux.imports import *
from _typeshed import Incomplete

pixmap_cache: Incomplete
fluxIcons: Incomplete
maya_scale: Incomplete
qt_dpi: Incomplete

class HWidget(qt.QWidget):
    addWidget: Incomplete
    addSpacing: Incomplete
    addStretch: Incomplete
    setMargins: Incomplete
    margins: Incomplete
    setSpacing: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class VWidget(qt.QWidget):
    addWidget: Incomplete
    addSpacing: Incomplete
    addStretch: Incomplete
    setMargins: Incomplete
    margins: Incomplete
    setSpacing: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

def centerOnScreen(dialog) -> None: ...
def registerQtObject(obj) -> None: ...
def widgetWithLayout(typ: str = 'V', spacing: int = 0, *margins): ...
def setHLayout(widget, spacing: int = 0, *margins) -> None: ...
def setVLayout(widget, spacing: int = 0, *margins) -> None: ...
def setWidgetWindowColor(widget, color) -> None: ...
def setWidgetBackgroundColor(widget, color) -> None: ...
def setWidgetBaseColor(widget, color) -> None: ...
def configureDragDrop(widget) -> None: ...
def configureRightClickMenu(widget, callback) -> None: ...
def getPixmap(name): ...
def scalePixmap(pixmap, width, height): ...
def getIconFromName(name): ...
def createPixmap(imageName): ...
def highlightPixmap(pixmap): ...
def applyMargins(margins, rect) -> None: ...
def getWidgetOfClassFromLayout(layout, widgetClassName): ...
def dpiScale(value): ...
def dpi(value: int = 1): ...
def pix(value: int = 1): ...

class QPainter(qt.QPainter):
    def __init__(self, *args) -> None: ...

class TextFieldWrapper(qt.QObject):
    textEdited: Incomplete
    lineEdit: Incomplete
    isTextDirty: bool
    def __init__(self, lineEdit) -> None: ...
    def setText(self, text) -> None: ...
    def text(self): ...

class DropWindow(qt.QDialog):
    instance: Incomplete
    dropped: Incomplete
    stepLabels: Incomplete
    currentStep: int
    accepts: Incomplete
    uiControls: Incomplete
    customUI: Incomplete
    listWidget: Incomplete
    droppedData: str
    def __init__(self, label: str = '', title: str = '', accepts: Incomplete | None = None, ui: Incomplete | None = None, minWidth: int = 450, **kw) -> None: ...
    def updateCustomUI(self) -> None: ...
    paAnimation: Incomplete
    def flashRedIndicator(self) -> None: ...
    def eventFilter(self, widget, event): ...
    def closeEvent(self, e) -> None: ...
    @staticmethod
    def getDrop(label: str = '', callback: Incomplete | None = None, title: str = '', accepts: Incomplete | None = None, ui: Incomplete | None = None, minWidth: int = 450) -> None: ...

class NodeListWidget(qt.QListWidget):
    clicked: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def mouseMoveEvent(self, e) -> None: ...
    def mousePressEvent(self, e) -> None: ...

class NodeSelector(qt.QDialog):
    clicked: Incomplete
    createCallback: Incomplete
    acceptableNode: Incomplete
    acceptableFunc: Incomplete
    listWidget: Incomplete
    def __init__(self, parent: Incomplete | None = None, acceptableNode: str = '', createCallback: Incomplete | None = None, acceptableFunc: Incomplete | None = None) -> None: ...
    def getIcon(self, name): ...
    def getNodeType(self, node): ...
    def rowClicked(self, row) -> None: ...
    def focusOutEvent(self, event) -> None: ...

class SingleNodeInputWidget(qt.QWidget):
    accepted: Incomplete
    acceptableNode: Incomplete
    acceptableFunc: Incomplete
    icon: Incomplete
    label: Incomplete
    button: Incomplete
    selector: Incomplete
    createCallback: Incomplete
    def __init__(self, acceptableNode: str = '', createCallback: Incomplete | None = None, acceptableFunc: Incomplete | None = None) -> None: ...
    def setNode(self, node: Incomplete | None = None) -> None: ...
    def currentNode(self): ...
    def setIcon(self, name) -> None: ...
    def getNodeType(self, node): ...
    def dragEnterEvent(self, e) -> None: ...
    def dropEvent(self, e) -> None: ...
    def dragLeaveEvent(self, e) -> None: ...
    def dragMoveEvent(self, e) -> None: ...
    def showSelector(self) -> None: ...
    def acceptNode(self, name) -> None: ...
    def selectorFinished(self, result) -> None: ...
    def createTrianglePixmap(self): ...
    def paintEvent(self, e) -> None: ...

class ImageButton(qt.QWidget):
    clicked: Incomplete
    rightClicked: Incomplete
    hover: bool
    bgHighlighted: bool
    bgFadeOnPress: bool
    bgColor: Incomplete
    fadeBgColor: Incomplete
    isCurrentlyFading: bool
    hasHoverBackground: bool
    hoverBackgroundColor: Incomplete
    hasConstantBackground: bool
    isHighlightEnabled: bool
    def __init__(self, imageName, text: str = '', textPos: str = 'bottom', highlighted: bool = False, parent: Incomplete | None = None) -> None: ...
    def setBackgroundColor(self, color) -> None: ...
    def setConstantBackground(self, hasConst) -> None: ...
    def isHighlighted(self): ...
    def setHighlighted(self, highlighted) -> None: ...
    def setImage(self, image) -> None: ...
    pixmap: Incomplete
    hoverPixmap: Incomplete
    def setImageFromPixmap(self, pixmap) -> None: ...
    def setText(self, text) -> None: ...
    button: Incomplete
    def createButton(self) -> None: ...
    label: Incomplete
    def createTextLabel(self, text) -> None: ...
    def redrawPixmap(self) -> None: ...
    bgPixmap: Incomplete
    def createBackground(self) -> None: ...
    def createRoundRectPixmap(self, color): ...
    def createImage(self, imageName) -> None: ...
    def fadeBackground(self) -> None: ...
    def enterEvent(self, e): ...
    def leaveEvent(self, e): ...
    def leftMousePress(self) -> None: ...
    def mousePressEvent(self, e) -> None: ...
    def mouseReleaseEvent(self, e) -> None: ...

class DraggableListWidget(qt.QListWidget):
    pixmap: Incomplete
    iconLabel: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def resizeEvent(self, e) -> None: ...
    def dragEnterEvent(self, event) -> None: ...
    def dragMoveEvent(self, event) -> None: ...
    def paintEvent(self, e) -> None: ...

class DraggableTreeWidget(qt.QTreeWidget):
    pixmap: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def dragEnterEvent(self, event) -> None: ...
    def dragMoveEvent(self, event) -> None: ...
    def paintEvent(self, e) -> None: ...

class DropWindowListWidget(DraggableListWidget):
    def __init__(self, *args, **wargs) -> None: ...
    def onBackgroundPropertyChange(self) -> None: ...
    def event(self, e): ...

class FrameWidget(qt.QWidget):
    switched: Incomplete
    expanded: Incomplete
    topBar: Incomplete
    arrowIcon: Incomplete
    label: Incomplete
    contents: Incomplete
    def __init__(self, text, expanded: bool = False, parent: Incomplete | None = None) -> None: ...
    def mousePressEvent(self, e) -> None: ...
    collapsedPixmap: Incomplete
    def createCollapsedIcon(self): ...
    expandedPixmap: Incomplete
    def createExpandedIcon(self): ...
    def updateVisibility(self) -> None: ...
    def updateArrow(self) -> None: ...
    def switchMode(self) -> None: ...
    def addWidget(self, widget) -> None: ...

class FrameBar(qt.QWidget):
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def paintEvent(self, e) -> None: ...

class ListButtonBtn:
    icons: Incomplete
    state: int
    name: Incomplete
    highlightable: Incomplete
    def __init__(self, icons, name, highlightable: bool = True) -> None: ...

class ListButtonItem(qt.QListWidgetItem):
    isOn: bool
    color: Incomplete
    def __init__(self, text, parent, index: Incomplete | None = None) -> None: ...
    def addButton(self, icons, name, alignLeft: bool = True, alignRight: bool = False, highlightable: bool = True) -> None: ...
    def getButton(self, name): ...

class ListButtonDelegate(qt.QItemDelegate):
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def applyCellMargins(self, index) -> None: ...
    def paint(self, painter, option, index) -> None: ...
    def sizeHint(self, option, index): ...
    def createEditor(self, parent, option, index): ...
    def updateEditorGeometry(self, editor, option, index) -> None: ...
    def setEditorData(self, editor, index) -> None: ...
    def setModelData(self, editor, model, index) -> None: ...

class ListButtonWidget(qt.QListWidget):
    actionButtonPressed: bool
    dataDelegate: Incomplete
    margins_out: Incomplete
    margins_in: Incomplete
    colorBarWidth: Incomplete
    iconHeight: Incomplete
    iconWidth: Incomplete
    rightIconWidth: Incomplete
    padding: Incomplete
    margins_toright: Incomplete
    margins_rightbtns: Incomplete
    hoverOver: Incomplete
    showToggleButton: bool
    bgpixmap: Incomplete
    showDropIndicator: bool
    rowBGColor: Incomplete
    def __init__(self, parent: Incomplete | None = None, rightIconWidth: int = 20) -> None: ...
    def dragEnterEvent(self, event) -> None: ...
    def dragMoveEvent(self, event) -> None: ...
    def itemTextChangedAtIndex(self, index, oldValue, newValue): ...
    def dropEvent(self, event) -> None: ...
    def openTreeMenu(self, position) -> None: ...
    def selectionChanged(self, item1, item2) -> None: ...
    def setLabelColor(self, color) -> None: ...
    def createNewLayer(self) -> None: ...
    def getButtonPressed(self, item, x): ...
    def mousePressEvent(self, event) -> None: ...
    def handleNormalSelection(self, index) -> None: ...
    def handleRightClickSelection(self, index) -> None: ...
    def mouseDoubleClickEvent(self, event) -> None: ...
    def mouseReleaseEvent(self, event) -> None: ...
    def mouseMoveEvent(self, event) -> None: ...
    def paintEvent(self, e) -> None: ...

def getIconSuffix(): ...
def loadFluxIcons(): ...
