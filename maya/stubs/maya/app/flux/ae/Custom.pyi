from maya.app.flux.imports import *
from _typeshed import Incomplete
from collections.abc import Generator
from contextlib import contextmanager

SLIDER_ATTR_TYPES: Incomplete
VECTOR_ATTR_TYPES: Incomplete

class ControlHandle:
    pCustom: Incomplete
    internalKey: Incomplete
    def __init__(self, pCustom, internalKey) -> None: ...
    def setEnabled(self, enabled) -> None: ...
    def setLabel(self, label) -> None: ...
    def setAttr(self, attr, **kwargs) -> None: ...

class Custom(qt.QObject):
    build_args: Incomplete
    build_kwargs: Incomplete
    name: Incomplete
    registeredNames: Incomplete
    customControls: Incomplete
    pluginName: str
    externalNodes: Incomplete
    useCustomResouceFunction: Incomplete
    listeners: Incomplete
    cachedNodes: Incomplete
    refWidgets: Incomplete
    toolBtnJobs: Incomplete
    controlKeys: Incomplete
    def __init__(self, nodeName, *args, **kwargs) -> None: ...
    customId: Incomplete
    def onCreate(self, node) -> None: ...
    def onReplace(self, node) -> None: ...
    def onClose(self) -> None: ...
    def eventFilter(self, widget, event): ...
    def createAttributeListener(self, attr, func, node: str = '') -> None: ...
    def createContextListener(self, func) -> None: ...
    def addControl(self, attr, **kwargs): ...
    def addColor(self, attr, **kwargs): ...
    def addCheckbox(self, attr, **kwargs): ...
    def textFieldAttrChanged(self, key) -> None: ...
    def textFieldEditingFinished(self, key) -> None: ...
    def addTextField(self, attr, **kwargs): ...
    def addSlider(self, attr, **kwargs): ...
    def addVector(self, attr, **kwargs): ...
    def addEnum(self, attr, **kwargs): ...
    def addRadio(self, attr, **kwargs): ...
    def addNavigation(self, attr: str = '', **kwargs): ...
    def setControlAttr(self, key, attr, **kwargs) -> None: ...
    def setControlEnabled(self, key, enabled) -> None: ...
    def setControlLabel(self, key, label) -> None: ...
    def melDeferred(self, cmd) -> None: ...
    def addSpacing(self, value) -> None: ...
    def addStretch(self, factor: int = 1) -> None: ...
    def addWidget(self, widget, stetchFactor: int = 0, alignment: int = 0) -> None: ...
    def setIndex(self, ref, index) -> None: ...
    def currentLayout(self): ...
    def onLayoutVisibilityChange(self, func) -> None: ...
    def setLayoutEnabled(self, ref, enabled) -> None: ...
    def setLayoutHidden(self, ref, hidden) -> None: ...
    def controlHandle(self, controlKey): ...
    def registerExternalNode(self, name, func) -> None: ...
    def supress(self, *attrs) -> None: ...
    @contextmanager
    def frameLayout(self, name, expanded: bool = False, ref: Incomplete | None = None) -> Generator[None]: ...
    @contextmanager
    def tabLayout(self, ref: Incomplete | None = None) -> Generator[None]: ...
    @contextmanager
    def newTab(self, name) -> Generator[None]: ...
    @contextmanager
    def horizontalLayout(self, offset: int = 0, height: Incomplete | None = None, ref: Incomplete | None = None) -> Generator[None]: ...
    @contextmanager
    def verticalLayout(self, offset: int = 0, height: Incomplete | None = None, ref: Incomplete | None = None) -> Generator[None]: ...
    @contextmanager
    def indentLayout(self, name: str = '', autoStretch: bool = True, ref: Incomplete | None = None) -> Generator[None]: ...
    @contextmanager
    def stackedLayout(self, ref: Incomplete | None = None) -> Generator[None]: ...
    @contextmanager
    def page(self) -> Generator[None]: ...
