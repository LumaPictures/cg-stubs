import unittest
from _typeshed import Incomplete
from maya.debug.DebugTrace import DebugTrace as DebugTrace

IN_UNIT_TEST: Incomplete

class cmds:
    JOBS_ACTIVE: Incomplete
    NEXT_JOB: int
    @staticmethod
    def scriptJob(kill: Incomplete | None = None, optionVarChanged: Incomplete | None = None): ...
    global_option_vars: Incomplete
    @staticmethod
    def optionVar(init: Incomplete | None = None, intValue: Incomplete | None = None, intValueAppend: Incomplete | None = None, floatValue: Incomplete | None = None, floatValueAppend: Incomplete | None = None, stringValue: Incomplete | None = None, stringValueAppend: Incomplete | None = None, exists: Incomplete | None = None, query: Incomplete | None = None, floatArray: Incomplete | None = None, intArray: Incomplete | None = None, stringArray: Incomplete | None = None, category: Incomplete | None = None, intValue3: Incomplete | None = None, floatValue3: Incomplete | None = None): ...
CREATE_DEBUG_PROXY = IN_UNIT_TEST

class DebugTrace:
    def dbg(self, _) -> None: ...

DBG: Incomplete
OPTION_VAR_TYPE_BOOL: int
OPTION_VAR_TYPE_FLOAT: int
OPTION_VAR_TYPE_INT: int
OPTION_VAR_TYPE_STRING: int
OPTION_VAR_TYPE_RGB: int
OPTION_VAR_TYPE_FLOAT_ARRAY: int
OPTION_VAR_TYPE_INT_ARRAY: int
OPTION_VAR_TYPE_STRING_ARRAY: int
OPTION_VAR_TYPES: Incomplete
ENUM_LISTS: Incomplete
ERR_OV_NOT_BOOL: Incomplete
ERR_OV_NOT_FLOAT: Incomplete
ERR_OV_NOT_INT: Incomplete
ERR_OV_NOT_STRING: Incomplete
ERR_OV_NOT_FLOAT_ARRAY: Incomplete
ERR_OV_NOT_INT_ARRAY: Incomplete
ERR_OV_NOT_STRING_ARRAY: Incomplete
ERR_OV_NOT_RGB: Incomplete
ERR_OV_NOT_RGB_INT: Incomplete
ERR_OV_NOT_RGB_FLOAT: Incomplete
ERR_OV_NOT_ENUM: Incomplete
ERR_OV_NOT_LEGAL_ENUM: Incomplete
ERR_OV_TYPE_UNKNOWN: Incomplete

def var_type_info(var_type): ...
def is_valid_value_of_type(var_value, var_type): ...
def option_var_initialize(var_name, var_type, var_value, var_category) -> None: ...
def option_var_set_value(var_name, var_type, var_value) -> None: ...
def option_var_get_value(var_name, var_type): ...

class OptionVar:
    CATEGORY_LIST: Incomplete
    name: Incomplete
    value_default: Incomplete
    value_category: Incomplete
    clients: Incomplete
    title: Incomplete
    info: Incomplete
    option_var_job: Incomplete
    categories: int
    value_type: Incomplete
    value_remembered: Incomplete
    def __init__(self, name, value_type, value_default, value_category: str = '') -> None: ...
    class StateError(ValueError):
        def __init__(self, msg) -> None: ...
    def read_preference_from_state(self): ...
    def set_state_from_preference(self) -> None: ...
    monitor_preference: bool
    def do_read_preference_from_state(self): ...
    def do_set_state_from_preference(self) -> None: ...
    def update_clients(self) -> None: ...
    def update_all_clients_but_me(self, who_am_i) -> None: ...
    def add_client(self, client, client_callback) -> None: ...
    def remove_client(self, client) -> None: ...
    def get_value(self): ...
    def set_value(self, var_value): ...
    def set_value_directly(self, client, var_value): ...
    def remember_current(self) -> None: ...
    def restore_remembered(self) -> None: ...
    def revert_to_default(self) -> None: ...
    @staticmethod
    def callback_preference_changed(option_var) -> None: ...
    def in_category(self, category): ...
    def set_in_category(self, category, new_value) -> None: ...
    @property
    def monitor_preference(self): ...
    @monitor_preference.setter
    def monitor_preference(self, new_value) -> None: ...

class MyOptionVar(OptionVar):
    my_state: int
    title: str
    info: str
    def __init__(self) -> None: ...
    def read_preference_from_state(self): ...
    def set_state_from_preference(self) -> None: ...

class OptionVarTest(unittest.TestCase):
    def test_simple(self) -> None: ...
    def test_enum(self) -> None: ...
