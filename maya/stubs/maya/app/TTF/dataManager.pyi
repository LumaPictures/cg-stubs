from maya.app.flux.imports import *
import json
from _typeshed import Incomplete
from maya.app.TTF.search import TTFSearch as TTFSearch

class DataManager:
    contexts: Incomplete
    defaults: Incomplete
    db: Incomplete
    ttf: Incomplete
    userEdits: Incomplete
    needsToFinishLoading: bool
    callback: Incomplete
    def __init__(self) -> None: ...
    def finishLoading(self) -> None: ...
    def save(self) -> None: ...
    def addItem(self, item, tags=[]) -> None: ...
    prefsFolder: Incomplete
    prefsFile: Incomplete
    auditFile: Incomplete
    def loadPaths(self) -> None: ...
    prefs: Incomplete
    def loadPrefs(self) -> None: ...
    def savePrefs(self) -> None: ...
    def getContext(self): ...
    def setContext(self, ctx) -> None: ...
    def getContextId(self): ...
    def setContextId(self, ctxId) -> None: ...
    def getHistory(self): ...
    def addHistory(self, script) -> None: ...
    toolsPackage: Incomplete
    def loadToolsPackage(self) -> None: ...
    cmdsPackage: Incomplete
    def loadCmdsPackage(self) -> None: ...
    def getHotkeyForCommand(self, command): ...
    def data(self, field): ...
    def categoryToList(self, category): ...
    def getMenuPaths(self, cmd): ...
    def getUserEdits(self): ...
    def getCMDSCommands(self): ...
    def getToolCommands(self): ...
    def getDocLinkCommand(self, script): ...
    def getAnnotationForCommand(self, command): ...
    def getImageForCommand(self, command): ...
    def getAllTags(self): ...
    def getColorForTag(self, tagName): ...
    def setColorForTag(self, tagName, color) -> None: ...
    def getTagsForCommand(self, name): ...
    def removeTagForCommand(self, name, tag) -> None: ...
    def addTagForCommand(self, name, tag) -> None: ...
    def getAllCommandsForTag(self, tag): ...
    def addTag(self, tag) -> None: ...
    def deleteTag(self, tag) -> None: ...
    def renameTag(self, old, new) -> None: ...
    def getSuggestionTags(self, commands): ...
    def compareRankedCommands(self, lhs, rhs): ...
    def getAllFavorites(self, searchString: str = '', shortFirst: bool = True): ...
    def commandExists(self, name): ...
    def favorite(self, command) -> None: ...
    def unfavorite(self, command) -> None: ...
    def isFavorite(self, command): ...
    def getFavorites(self): ...
    def filterAndSort(self, names, filterStr, shortFirst): ...
    def getCommandNames(self, searchString, shortFirst: bool = True, tags=[]): ...
    def getCommand(self, name): ...
    def getAvailableTagName(self, text): ...
    def getDefaultUserAudit(self): ...
    def loadUserAudit(self) -> None: ...
    def user_addTag(self, name) -> None: ...
    def user_setTag(self, name, command) -> None: ...
    def user_unsetTag(self, name, command) -> None: ...
    def user_delTag(self, name) -> None: ...
    def user_setTagColor(self, name, color) -> None: ...
    def user_renameTag(self, old, new) -> None: ...
    def saveUserEdits(self) -> None: ...

class TTFItem:
    rtc: Incomplete
    command: Incomplete
    optionCommand: str
    label: Incomplete
    description: Incomplete
    longAnnotation: Incomplete
    imageName: Incomplete
    keywords: Incomplete
    plugin: Incomplete
    categories: Incomplete
    helpUrl: Incomplete
    def __init__(self, rtc, command, label, description: str = 'Command', longAnnotation: str = '', categories=[], imageName: str = 'out_MASH_Utilities', keywords=[], plugin: str = '', helpUrl: str = '') -> None: ...
    def getCmdNameAsKeys(self, regex): ...
    def getLabelAsKeys(self, regex): ...
    def getKeywordAsKeys(self, regex): ...
    def getDescriptionAsKeys(self, regex): ...

class TTFTag:
    name: Incomplete
    commands: Incomplete
    color: Incomplete
    def __init__(self, name, commands=[], color: str = '#48AAB5') -> None: ...

def searchItemFunc(item): ...

class SetEncoder(json.JSONEncoder):
    def default(self, obj): ...
