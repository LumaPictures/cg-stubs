import maya.app.renderSetup.model.childNode as childNode
import maya.app.renderSetup.model.context as context
import maya.app.renderSetup.model.namespace as namespace
import maya.app.renderSetup.model.nodeList as nodeList
from _typeshed import Incomplete
from collections.abc import Generator
from maya.app.renderSetup.model.observable import Observable as Observable
from maya.app.renderSetup.model.renderSetupPrivate import PostApplyCmd as PostApplyCmd

kInvalidCollectionName: Incomplete
kUnknownCollection: Incomplete
kUnknownContainer: Incomplete
kCollectionUnicity: Incomplete
kAOVCollectionNodeCreationFailed: Incomplete
kInvalidLegacySrcNode: Incomplete
kAttachCollection: Incomplete
kCreateLightsCollection: Incomplete
kCreateLightsChildCollection: Incomplete
kCreateRenderSettingsCollection: Incomplete
kCreateAOVCollection: Incomplete
kCreateAOVChildCollection: Incomplete
kSetRenderability: Incomplete
kCollectionDetached: Incomplete
kCollectionAttached: Incomplete
kAttachGroup: Incomplete
kGroupDetached: Incomplete
kGroupAttached: Incomplete

def memberTraversal(node): ...

class RenderLayerBase:
    needsApplyUpdate: bool
    legacyNodeNameCache: Incomplete
    def __init__(self) -> None: ...
    def isRenderable(self): ...
    def setRenderable(self, value) -> None: ...
    def isVisible(self): ...
    def makeVisible(self): ...
    def setObjectDeleted(self) -> None: ...
    def isCollection(self): ...
    def isGroup(self): ...

class DefaultRenderLayer(RenderLayerBase, Observable):
    def __init__(self) -> None: ...
    def name(self): ...
    def getLegacyNode(self): ...
    def hasLightsCollectionInstance(self): ...
    def needsRefresh(self): ...
    def clearMemberNodesCache(self) -> None: ...
    def setMemberNodesCache(self, cache) -> None: ...
    def getMemberNodesCache(self): ...
    def getChildren(self): ...
    @context.applyLayer
    def apply(self) -> None: ...
    @context.unapplyLayer
    def unapply(self) -> None: ...

class RenderLayer(RenderLayerBase, nodeList.ListBase, childNode.ChildNode):
    kTypeId: Incomplete
    kTypeName: str
    containerLowest: Incomplete
    containerHighest: Incomplete
    containers: Incomplete
    legacyRenderLayer: Incomplete
    numIsolatedChildren: Incomplete
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    isUpdatingMembership: bool
    needsMembershipUpdate: bool
    def __init__(self) -> None: ...
    def hasSelector(self): ...
    def postConstructor(self) -> None: ...
    def needsRefresh(self): ...
    def setObjectDeleted(self) -> None: ...
    def typeId(self): ...
    def typeName(self): ...
    def getLegacyNode(self): ...
    def getNumIsolatedChildren(self): ...
    def clearMemberNodesCache(self) -> None: ...
    def setMemberNodesCache(self, cache) -> None: ...
    def getMemberNodesCache(self): ...
    def addMembers(self, objs): ...
    def addDefaultMembers(self, objs) -> None: ...
    @_visible
    def descendantAdded(self, child) -> None: ...
    def checkGroupHasDagNodes(self, group): ...
    def itemChangedRecursive(self, refreshSelf: bool = False) -> None: ...
    def setName(self, newName) -> None: ...
    def createCollection(self, collectionName): ...
    def createGroup(self, groupName): ...
    def appendCollection(self, child) -> None: ...
    def appendContainer(self, child) -> None: ...
    def appendGroup(self, child) -> None: ...
    def attachContainer(self, pos, child) -> None: ...
    def attachCollection(self, pos, child) -> None: ...
    def attachGroup(self, pos, child) -> None: ...
    def detachContainer(self, child) -> None: ...
    def detachCollection(self, child) -> None: ...
    def detachGroup(self, child) -> None: ...
    def getCollections(self): ...
    def getGroups(self): ...
    def getContainers(self): ...
    def hasDefaultCollection(self): ...
    def getDefaultCollection(self): ...
    def getContainerByName(self, containerName, nested: bool = False): ...
    def getCollectionByName(self, collectionName, nested: bool = False): ...
    def getGroupByName(self, groupName, nested: bool = False): ...
    def getRenderSettingsChildCollectionByName(self, renderSettingsChildCollectionName, nested: bool = False): ...
    appendChild = appendContainer
    attachChild = attachContainer
    detachChild = detachContainer
    getChildren = getCollections
    def hasCollection(self, collectionName): ...
    def hasApplyOverridesRecursive(self): ...
    def renderSettingsCollectionInstance(self): ...
    def aovCollectionInstance(self): ...
    def lightsCollectionInstance(self): ...
    def hasLightsCollectionInstance(self): ...
    def hasRenderSettingsCollectionInstance(self): ...
    def hasAOVCollectionInstance(self): ...
    def getFirstCollectionIndex(self): ...
    def getMembers(self): ...
    getEnabledSelectedNodeNames = getMembers
    def findMembersRecursive(self, node, paths, groupEnabled): ...
    def findCollection(self, predicate, creator: Incomplete | None = None): ...
    def findGroup(self, predicate, creator: Incomplete | None = None): ...
    def getCorrespondingCollection(self, nodeName, selectedCollectionName): ...
    def createAbsoluteOverride(self, nodeName, attrName, collectionName: Incomplete | None = None): ...
    def createRelativeOverride(self, nodeName, attrName, collectionName: Incomplete | None = None): ...
    def createConnectionOverride(self, nodeName, attrName, collectionName: Incomplete | None = None): ...
    def getOverrides(self): ...
    def attachOverride(self, overrideName) -> None: ...
    def isAbstractClass(self): ...
    @context.applyLayer
    def apply(self) -> None: ...
    @context.unapplyLayer
    def unapply(self) -> None: ...
    @context.updateLayer
    def update(self) -> None: ...
    def overridesConnections(self): ...
    def copyForClipboard(self): ...
    def acceptImport(self) -> None: ...
    def isAcceptableChild(self, modelOrData): ...
    def findIn(self, nodeNames, includeSelf: bool = True) -> Generator[Incomplete, None, Incomplete]: ...

@namespace.root
def create(name): ...
def delete(renderLayer) -> None: ...
