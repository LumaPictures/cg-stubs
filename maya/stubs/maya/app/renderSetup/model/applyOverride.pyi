import maya.api.OpenMaya as OpenMaya
from _typeshed import Incomplete
from collections.abc import Generator

class LeafClass:
    def isAbstractClass(self): ...

class ApplyValueOverride:
    def isPassiveOutput(self, plug): ...
    def isInvertible(self): ...
    def canHandleSetOverride(self): ...
    def handleSetOverride(self, overriddenPlug, autoKeyed) -> None: ...

class ApplyOverride(OpenMaya.MPxNode):
    kTypeId: Incomplete
    kTypeName: str
    kNotOnMainSceneShort: str
    kNotOnMainSceneLong: str
    @classmethod
    def creator(cls): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def isAbstractClass(self): ...
    def isEnabled(self): ...
    def getEnabledPlug(self): ...
    def getOriginalPlug(self): ...
    def getOutputPlug(self): ...
    def override(self): ...
    def onMainScene(self): ...
    def setNotOnMainScene(self) -> None: ...

class ApplyAbsOverride(ApplyValueOverride, ApplyOverride):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def getValuePlug(self): ...
    def setOverrideValue(self, overriddenPlug, autoKeyed) -> None: ...
    def isOverrideValueSettable(self): ...

class ApplyRelOverride(ApplyValueOverride, ApplyOverride):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def getMultiplyPlug(self): ...
    def getOffsetPlug(self): ...
    def setOverrideValue(self, overriddenPlug, autoKeyed): ...
    def isOverrideValueSettable(self): ...

class ApplyAbsFloatOverride(LeafClass, ApplyAbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyRelFloatOverride(LeafClass, ApplyRelOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyAbsIntOverride(LeafClass, ApplyAbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyRelIntOverride(LeafClass, ApplyRelOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyAbs3FloatsOverride(LeafClass, ApplyAbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyRel3FloatsOverride(LeafClass, ApplyRelOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyAbsBoolOverride(LeafClass, ApplyAbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyAbsEnumOverride(LeafClass, ApplyAbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyAbsStringOverride(LeafClass, ApplyAbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyAbs2FloatsOverride(LeafClass, ApplyAbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

class ApplyRel2FloatsOverride(LeafClass, ApplyRelOverride):
    kTypeId: Incomplete
    kTypeName: str
    def __init__(self) -> None: ...
    @staticmethod
    def initializer() -> None: ...
    def compute(self, plug, dataBlock): ...

def create(name, typeId): ...
def connectedSrc(dstPlug): ...
def reverseGenerator(dstPlug) -> Generator[Incomplete]: ...
def connectedDst(srcPlug): ...
def forwardGenerator(srcPlug) -> Generator[Incomplete]: ...
def getAllApplyOverrideClasses(): ...
