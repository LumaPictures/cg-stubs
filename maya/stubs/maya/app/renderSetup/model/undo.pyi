import maya.api.OpenMaya as OpenMaya
from _typeshed import Incomplete
from maya import cmds as cmds

class CtxMgr:
    openChunk: bool
    name: Incomplete
    closeChunk: bool
    def __init__(self, name: str = 'unnamedOperation') -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def chunk(chunkName): ...

class SuspendUndo:
    previouslySuspended: bool
    def __init__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def suspend(): ...

class NotifyPostRedoCmd(OpenMaya.MPxCommand):
    kCmdName: str
    callable: Incomplete
    def isUndoable(self): ...
    def doIt(self, args) -> None: ...
    @staticmethod
    def execute(callable) -> None: ...
    @staticmethod
    def creator(): ...
    def __init__(self, callable) -> None: ...
    def redoIt(self) -> None: ...
    def undoIt(self) -> None: ...

class NotifyPostUndoCmd(OpenMaya.MPxCommand):
    kCmdName: str
    callable: Incomplete
    def isUndoable(self): ...
    def doIt(self, args) -> None: ...
    @staticmethod
    def execute(callable) -> None: ...
    @staticmethod
    def creator(): ...
    def __init__(self, callable) -> None: ...
    def redoIt(self) -> None: ...
    def undoIt(self) -> None: ...

class Pointer:
    pointee: Incomplete
    def __init__(self) -> None: ...
    def release(self): ...
    def set(self, v) -> None: ...

class NotifyDecoratorCmd(OpenMaya.MPxCommand):
    kCmdName: str
    onRedo: Incomplete
    onUndo: Incomplete
    state: Incomplete
    def isUndoable(self): ...
    def doIt(self, args) -> None: ...
    @staticmethod
    def execute(onRedo, onUndo, state) -> None: ...
    @staticmethod
    def creator(): ...
    def __init__(self, onRedo, onUndo, state) -> None: ...
    def redoIt(self) -> None: ...
    def undoIt(self) -> None: ...

class NotifyCtxMgr:
    name: Incomplete
    openChunk: bool
    closeChunk: bool
    postRedo: Incomplete
    postUndo: Incomplete
    def __init__(self, name, postRedo, postUndo: Incomplete | None = None) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

class NotifyDecorateMgr:
    name: Incomplete
    openChunk: bool
    closeChunk: bool
    pre: Incomplete
    post: Incomplete
    state: Incomplete
    def __init__(self, name, pre, post) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def notify(chunkName, postRedo, postUndo: Incomplete | None = None): ...
