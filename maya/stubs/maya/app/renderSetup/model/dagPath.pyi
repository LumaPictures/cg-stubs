from _typeshed import Incomplete
from collections.abc import Generator

class _PlugNotFound(Exception): ...

class DagPath:
    dagPath: Incomplete
    def __init__(self, dagPath) -> None: ...
    @staticmethod
    def create(pathStr): ...
    def node(self): ...
    def fullPathName(self): ...
    def findSetsConnections(self, fnType=...) -> Generator[Incomplete]: ...
    def findShadingEngineConnections(self): ...
    def findMaterialPlugs(self) -> Generator[Incomplete]: ...
    def getInstMaterialAssignPlug(self): ...
    def findShadingEnginesInMaterialTemplate(self) -> Generator[Incomplete, None, Incomplete]: ...
    def findSets(self): ...
    def findShadingEngines(self) -> Generator[Incomplete]: ...
    def findSurfaceShaders(self): ...
    def findDisplacementShaders(self): ...
    def findVolumeShaders(self): ...
    def findGeometryGenerator(self): ...
