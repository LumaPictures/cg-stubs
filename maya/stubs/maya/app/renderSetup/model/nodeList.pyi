import maya.api.OpenMaya as OpenMaya
from _typeshed import Incomplete
from collections.abc import Generator

class ListItem(OpenMaya.MPxNode):
    kTypeId: Incomplete
    kTypeName: str
    parentList: Incomplete
    next: Incomplete
    previous: Incomplete
    def __init__(self) -> None: ...
    def isAbstractClass(self): ...
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def getNext(self): ...
    def getPrevious(self): ...
    def setNext(self, item) -> None: ...
    def setPrevious(self, item) -> None: ...
    def parent(self): ...
    def ancestors(self, root: Incomplete | None = None): ...
    def setParent(self, parentListUserNode) -> None: ...
    def activate(self) -> None: ...
    def deactivate(self) -> None: ...

class ListBase:
    @classmethod
    def initListItems(cls): ...
    def __init__(self) -> None: ...
    def getFront(self): ...
    def getBack(self): ...
    def setFront(self, item) -> None: ...
    def setBack(self, item) -> None: ...
    def itemAdded(self, listItem) -> None: ...
    def itemRemoved(self, listItem) -> None: ...
    def addListObserver(self, obs) -> None: ...
    def removeListObserver(self, obs) -> None: ...
    def clearListObservers(self) -> None: ...

def reverseListGenerator(list) -> Generator[Incomplete]: ...

forwardListGenerator: Incomplete

def reverseListNodeClassGenerator(list, cls) -> Generator[Incomplete]: ...
def forwardListNodeClassGenerator(list, cls) -> Generator[Incomplete]: ...
def isAfter(list, a, b): ...
def remove(list, x) -> None: ...
def insert(list, ndx, x) -> None: ...
def insertBefore(list, nextItem, x) -> None: ...
def append(list, x) -> None: ...
def prepend(list, x) -> None: ...
def pop(list): ...
