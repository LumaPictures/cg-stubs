from _typeshed import Incomplete

PREF_CATEGORY: str
kOptionVarEditMode: str
kOptionVarUserTemplateDirectory: str
kOptionVarGlobalTemplateDirectory: str
kOptionVarUserPresetsDirectory: str
kOptionVarGlobalPresetsDirectory: str
kGlobalTemplatePathInvalid: Incomplete
kGlobalPresetsPathInvalid: Incomplete

def getEditMode(): ...
def setEditMode(value): ...
def getUserTemplateDirectory(): ...
def getGlobalTemplateDirectory(): ...
def getGlobalTemplateDirectoryWithoutCheck(): ...
def getUserPresetsDirectory(): ...
def getGlobalPresetsDirectory(): ...
def getFileExtension(): ...

class BaseSetting:
    kEnvVar: str
    kOptionVar: Incomplete
    kDefault: Incomplete
    def __init__(self) -> None: ...
    @classmethod
    def hasEnvVar(cls): ...
    @classmethod
    def getEnvVar(cls): ...
    @classmethod
    def setEnvVar(cls, val) -> None: ...
    @classmethod
    def unsetEnvVar(cls) -> None: ...
    @classmethod
    def hasOptionVar(cls): ...
    @classmethod
    def getOptionVar(cls): ...
    @classmethod
    def setOptionVar(cls, val) -> None: ...
    @classmethod
    def unsetOptionVar(cls) -> None: ...
    @classmethod
    def isEnabled(cls): ...
    @classmethod
    def toggleOptionVar(cls) -> None: ...

class UntitledCollectionsSetting(BaseSetting):
    kEnvVar: str
    kOptionVar: str
    kDefault: bool

class IncludeAllLightsSettingContextManager:
    beforeSetIsEnabled: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def updateVisibleLayerMembership() -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...

def includeAllLightsSettingDecorator(f): ...

class IncludeAllLightsSetting(BaseSetting):
    kEnvVar: str
    kOptionVar: str
    kDefault: bool
    optionChangeObservable: Incomplete
    @classmethod
    def addOptionChangeObserver(cls, obsMethod) -> None: ...
    @classmethod
    def removeOptionChangeObserver(cls, obsMethod) -> None: ...
    @classmethod
    @includeAllLightsSettingDecorator
    def setEnvVar(cls, val) -> None: ...
    @classmethod
    @includeAllLightsSettingDecorator
    def unsetEnvVar(cls) -> None: ...
    @classmethod
    @includeAllLightsSettingDecorator
    def setOptionVar(cls, val) -> None: ...
    @classmethod
    @includeAllLightsSettingDecorator
    def unsetOptionVar(cls) -> None: ...

class ShowWarningIcons(BaseSetting):
    kEnvVar: str
    kOptionVar: str
    kDefault: bool
    optionChangeObservable: Incomplete
    @classmethod
    def addOptionChangeObserver(cls, obsMethod) -> None: ...
    @classmethod
    def removeOptionChangeObserver(cls, obsMethod) -> None: ...
    @classmethod
    @includeAllLightsSettingDecorator
    def setEnvVar(cls, val) -> None: ...
    @classmethod
    @includeAllLightsSettingDecorator
    def unsetEnvVar(cls) -> None: ...
    @classmethod
    @includeAllLightsSettingDecorator
    def setOptionVar(cls, val) -> None: ...
    @classmethod
    @includeAllLightsSettingDecorator
    def unsetOptionVar(cls) -> None: ...

class DisplayRSNodesSettingContextManager:
    beforeSetIsEnabled: Incomplete
    def __init__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...

def displayRSNodesSettingDecorator(f): ...

class DisplayRSNodesSetting(BaseSetting):
    kEnvVar: str
    kOptionVar: str
    kDefault: bool
    @classmethod
    @displayRSNodesSettingDecorator
    def setEnvVar(cls, val) -> None: ...
    @classmethod
    @displayRSNodesSettingDecorator
    def unsetEnvVar(cls) -> None: ...
    @classmethod
    @displayRSNodesSettingDecorator
    def setOptionVar(cls, val) -> None: ...
    @classmethod
    @displayRSNodesSettingDecorator
    def unsetOptionVar(cls) -> None: ...

class AlwaysListVisibleLayerSetting(BaseSetting):
    kOptionVar: str
    kDefault: bool
    optionChangeObservable: Incomplete
    @classmethod
    def addOptionChangeObserver(cls, obsMethod) -> None: ...
    @classmethod
    def removeOptionChangeObserver(cls, obsMethod) -> None: ...
    @classmethod
    def hasOptionChangeObserver(cls, obsMethod): ...
    @classmethod
    def hasEnvVar(cls): ...
    @classmethod
    def getEnvVar(cls) -> None: ...
    @classmethod
    def setEnvVar(cls, val) -> None: ...
    @classmethod
    def setOptionVar(cls, val) -> None: ...

class ExportRenderSettingsAOVs(BaseSetting):
    kEnvVar: str
    kOptionVar: str
    kDefault: bool
    kToggled: bool
    @classmethod
    def setToggled(cls, value) -> None: ...
    @classmethod
    def isEnabled(cls): ...

def initialize() -> None: ...
