import maya.app.renderSetup.model.applyOverride as applyOverride
import maya.app.renderSetup.model.context as context
import maya.app.renderSetup.model.override as override
from _typeshed import Incomplete
from collections.abc import Generator
from maya.app.renderSetup.model.renderSetupPrivate import PostApplyCmd as PostApplyCmd

kApplyNodeNoRenderLayerConnection: Incomplete
kAttrValueAlreadyCreated: Incomplete
kMaterialOverrideFailure: Incomplete
kMaterialTemplateOverrideFailure: Incomplete

def isRestoringOriginal(): ...
def setRestoringOriginal(restoringOriginal) -> None: ...
def handleRestoringOriginalCtx(): ...
def transferPlug(src, dst) -> None: ...

class ConnectionOverride(override.AbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def initializer() -> None: ...
    attrChangedCallbackId: Incomplete
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def onFileOpened(self) -> None: ...
    def activate(self) -> None: ...
    def deactivate(self) -> None: ...
    def __del__(self) -> None: ...
    def isApplicable(self): ...
    def attrChangedCB(self, msg, plg, otherPlug, clientData) -> None: ...
    @override.valid
    @context.applyOverride
    def apply(self, selectedNodeNames: Incomplete | None = None) -> None: ...
    @context.applyOverride
    def reapply(self, overridden) -> None: ...
    @override.valid
    @context.applyOverride
    def postApply(self) -> None: ...
    @context.unapplyOverride
    def unapply(self) -> None: ...
    @context.updateOverride
    def update(self) -> None: ...
    def overridesConnections(self): ...
    @context.updateApplyOverride
    def doAction(self, target, source) -> None: ...
    def doSaveOriginal(self, target, storage) -> None: ...
    def getOverridden(self): ...
    def setSource(self, attr) -> None: ...

class ShaderOverride(ConnectionOverride):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def isApplicable(self): ...
    def isValid(self): ...
    def setShader(self, name, srcAttr: str = '.outColor') -> None: ...
    @context.updateApplyOverride
    def doAction(self, target, source): ...
    def doSaveOriginal(self, target, storage) -> None: ...

class MaterialOverride(ConnectionOverride):
    kTypeId: Incomplete
    kTypeName: str
    kShadingEngineNameLong: str
    kShadingEngineNameShort: str
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def isApplicable(self): ...
    def isValid(self): ...
    def setMaterial(self, name) -> None: ...
    @context.updateApplyOverride
    def doAction(self, target, source) -> None: ...
    @staticmethod
    def saveShadingEngine(shadingEngineObj, storagePlug) -> None: ...
    def doSaveOriginal(self, target, storage) -> None: ...

class MaterialTemplateOverride(ConnectionOverride):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def isApplicable(self): ...
    def isValid(self): ...
    def setMaterialTemplate(self, name) -> None: ...

class DstConnectionHandle:
    def __init__(self, node, aDst, srcStrAttrNameLong, srcStrAttrNameShort) -> None: ...
    def connect(self, src) -> None: ...
    def disconnect(self) -> None: ...
    def src(self): ...
    def dst(self): ...

class ConnectionUniqueOverride(override.UniqueOverride, ConnectionOverride):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def initializer() -> None: ...

class ApplyConnectionOverride(applyOverride.LeafClass, applyOverride.ApplyOverride):
    kTypeId: Incomplete
    kTypeName: str
    kOriginalLong: str
    kOriginalShort: str
    kTargetLong: str
    kTargetShort: str
    kTargetNameLong: str
    kTargetNameShort: str
    aTarget: Incomplete
    aPrevious: Incomplete
    aNext: Incomplete
    @classmethod
    def create(cls, name): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def finalize(self, ovrValuePlug): ...
    def typeId(self): ...
    def typeName(self): ...
    def getOriginalPlug(self): ...
    def getTarget(self): ...
    def connectTarget(self, target) -> None: ...
    def isEnabled(self): ...
    def getPrevPlug(self): ...
    def getNextPlug(self): ...
    def isApplicable(self): ...
    def update(self) -> None: ...
    def prev(self): ...
    def __next__(self): ...
    def moveTargetTo(self, to) -> None: ...
    def insert(self, target, nextOvr: Incomplete | None = None) -> None: ...
    def extract(self) -> None: ...
    @staticmethod
    def reverseGenerator(applyNode) -> Generator[Incomplete]: ...
    @staticmethod
    def forwardGenerator(applyNode) -> Generator[Incomplete]: ...
