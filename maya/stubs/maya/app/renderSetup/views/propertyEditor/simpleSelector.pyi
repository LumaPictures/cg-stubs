from _typeshed import Incomplete
from maya.app.renderSetup.common.devtools import abstractmethod as abstractmethod
from maya.app.renderSetup.views.propertyEditor.collectionFilterLineEdit import CollectionFilterLineEdit as CollectionFilterLineEdit
from maya.app.renderSetup.views.propertyEditor.collectionStaticSelectionWidget import CollectionStaticSelectionWidget as CollectionStaticSelectionWidget
from maya.app.renderSetup.views.propertyEditor.expressionLabels import IncludeExpressionLabel as IncludeExpressionLabel
from maya.app.renderSetup.views.propertyEditor.layout import Layout as Layout
from maya.app.renderSetup.views.renderSetupDelegate import RenderSetupDelegate as RenderSetupDelegate

def ifNotBlockChangeMessages(f): ...

class SimpleSelector:
    LIST_BOX_HEIGHT: Incomplete
    EXPRESSION_BUTTON_WIDTH: Incomplete
    INVERSE_STRING: Incomplete
    SELECT_STRING: Incomplete
    CREATE_EXPRESSION_STRING: Incomplete
    DRAG_DROP_FILTER_STRING: Incomplete
    kModelType: Incomplete
    expression: str
    filterType: Incomplete
    addToCollectionGroupBoxLayout: Incomplete
    includeExpressionWidgets: Incomplete
    includeExpression: Incomplete
    customFilterEdit: Incomplete
    filtersGroupBoxLayout: Incomplete
    staticSelector: Incomplete
    def __init__(self, selector) -> None: ...
    def build(self, layout, populate: bool = True) -> None: ...
    def displayType(self): ...
    def includeExpressionChanged(self, text) -> None: ...
    @ifNotBlockChangeMessages
    def includeExpressionEntered(self) -> None: ...
    @ifNotBlockChangeMessages
    def customFilterEntered(self) -> None: ...
    def populateFields(self) -> None: ...
    def selectIncludeExpression(self) -> None: ...
    def selectStaticEntries(self) -> None: ...
    def highlight(self, names) -> None: ...
    def saveExpressionPattern(self, currentText) -> None: ...

class BasicSelector(SimpleSelector):
    kUsage: Incomplete
    kDisplayType: Incomplete
    kModelType: Incomplete
    includeHierarchy: Incomplete
    def __init__(self, selector) -> None: ...
    def build(self, layout) -> None: ...
    @ifNotBlockChangeMessages
    def setIncludeHierarchy(self, value) -> None: ...
    def populateFields(self) -> None: ...

class LightsCollectionSelector(SimpleSelector):
    kModelType: Incomplete
    includeExpression: Incomplete
    staticSelector: Incomplete
    includeAllLightsOption: Incomplete
    def __init__(self, selector) -> None: ...
    def build(self, layout, populate: bool = True) -> None: ...
    def setIncludeAllLightsOption(self, value) -> None: ...
    def populateFields(self) -> None: ...
