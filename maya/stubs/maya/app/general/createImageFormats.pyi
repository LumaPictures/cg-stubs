from _typeshed import Incomplete

def cmpFormat(x, y): ...

class ImageDescriptor:
    kIsImage: int
    kIsMovie: int
    kIsVector: int
    kIsSixteen: int
    kIsLayered: int
    extension: Incomplete
    ident: Incomplete
    imfKey: Incomplete
    description: Incomplete
    properties: Incomplete
    otherExtensions: Incomplete
    oldOutf: int
    oldImfKey: str
    def __init__(self, ident, extension, description, properties, imfKey: Incomplete | None = None, otherExtensions: Incomplete | None = None) -> None: ...
    def filterFormat(self): ...
    def menuFormat(self): ...
    def prop(self, propBits): ...

class ImageFormats:
    formats: Incomplete
    imfPlugins: Incomplete
    def __init__(self) -> None: ...
    def findKey(self, key): ...
    def findIdent(self, ident): ...
    def addFormat(self, ident, extension, description, properties: int = 1, imfKey: Incomplete | None = None, otherExtensions: Incomplete | None = None) -> None: ...
    def listFormats(self, type: int = 255, returnFormat: Incomplete | None = None): ...
    oldOutf: Incomplete
    oldImfKey: Incomplete
    def pushRenderGlobalsForDesc(self, description) -> None: ...
    def popRenderGlobals(self) -> None: ...
