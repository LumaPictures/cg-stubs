from . import CommandWithOptionVars as CommandWithOptionVars
from _typeshed import Incomplete

class CreateSoftBody(CommandWithOptionVars.CommandWithOptionVars):
    commandName: str
    commandHelpTag: str
    l10nCommandName: Incomplete
    optionVarCategory: str
    optionVarPrefix: str
    optionVarDefaults: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def command(meshes: Incomplete | None = None, name: str = 'bulletSoftBodyShape#', generateBendConstraints: Incomplete | None = None, selfCollision: Incomplete | None = None, bendResistance: Incomplete | None = None, linearStiffness: Incomplete | None = None, friction: Incomplete | None = None, damping: Incomplete | None = None, pressure: Incomplete | None = None, collisionMargin: Incomplete | None = None, positionIterations: Incomplete | None = None, preserveSourceMesh: Incomplete | None = None, singleTransform: Incomplete | None = None, **kwargs): ...
    def addOptionDialogWidgets(self): ...

def setSoftBodyPerParticleMass(newValue: Incomplete | None = None) -> None: ...
def setSoftBodyPerParticleLinearStiffness(newValue: Incomplete | None = None) -> None: ...
def setSoftBodyPerParticleBendResistance(newValue: Incomplete | None = None) -> None: ...
def paintSoftBodyVertexProperty(vertexProperty, softbody: Incomplete | None = None) -> None: ...
