from _typeshed import Incomplete
from typing import ClassVar

class MAnimControl:
    kPlaybackLoop: ClassVar[int] = ...
    kPlaybackOnce: ClassVar[int] = ...
    kPlaybackOscillate: ClassVar[int] = ...
    kPlaybackViewActive: ClassVar[int] = ...
    kPlaybackViewAll: ClassVar[int] = ...
    @staticmethod
    def animationEndTime(*args, **kwargs): ...
    @staticmethod
    def animationStartTime(*args, **kwargs): ...
    @staticmethod
    def autoKeyMode(*args, **kwargs): ...
    @staticmethod
    def currentTime(*args, **kwargs): ...
    @staticmethod
    def globalInTangentType(*args, **kwargs): ...
    @staticmethod
    def globalOutTangentType(*args, **kwargs): ...
    @staticmethod
    def isPlaying(*args, **kwargs): ...
    @staticmethod
    def isScrubbing(*args, **kwargs): ...
    @staticmethod
    def maxTime(*args, **kwargs): ...
    @staticmethod
    def minTime(*args, **kwargs): ...
    @staticmethod
    def playBackward(*args, **kwargs): ...
    @staticmethod
    def playForward(*args, **kwargs): ...
    @staticmethod
    def playbackBy(*args, **kwargs): ...
    @staticmethod
    def playbackMode(*args, **kwargs): ...
    @staticmethod
    def playbackSpeed(*args, **kwargs): ...
    @staticmethod
    def setAnimationEndTime(*args, **kwargs): ...
    @staticmethod
    def setAnimationStartEndTime(*args, **kwargs): ...
    @staticmethod
    def setAnimationStartTime(*args, **kwargs): ...
    @staticmethod
    def setAutoKeyMode(*args, **kwargs): ...
    @staticmethod
    def setCurrentTime(*args, **kwargs): ...
    @staticmethod
    def setGlobalInTangentType(*args, **kwargs): ...
    @staticmethod
    def setGlobalOutTangentType(*args, **kwargs): ...
    @staticmethod
    def setMaxTime(*args, **kwargs): ...
    @staticmethod
    def setMinMaxTime(*args, **kwargs): ...
    @staticmethod
    def setMinTime(*args, **kwargs): ...
    @staticmethod
    def setPlaybackBy(*args, **kwargs): ...
    @staticmethod
    def setPlaybackMode(*args, **kwargs): ...
    @staticmethod
    def setPlaybackSpeed(*args, **kwargs): ...
    @staticmethod
    def setViewMode(*args, **kwargs): ...
    @staticmethod
    def setWeightedTangents(*args, **kwargs): ...
    @staticmethod
    def stop(*args, **kwargs): ...
    @staticmethod
    def viewMode(*args, **kwargs): ...
    @staticmethod
    def weightedTangents(*args, **kwargs): ...

class MAnimCurveChange:
    def __init__(self, *args, **kwargs) -> None: ...
    def redoIt(self, *args, **kwargs): ...
    def undoIt(self, *args, **kwargs): ...

class MAnimCurveClipboard:
    theAPIClipboard: ClassVar[MAnimCurveClipboard] = ...
    endTime: Incomplete
    endUnitlessInput: Incomplete
    isEmpty: Incomplete
    startTime: Incomplete
    startUnitlessInput: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs): ...
    def clipboardItems(self, *args, **kwargs): ...
    def set(self, *args, **kwargs): ...

class MAnimCurveClipboardItem:
    animCurve: Incomplete
    fullAttributeName: Incomplete
    leafAttributeName: Incomplete
    nodeName: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def animCurveType(self, *args, **kwargs): ...
    def getAddressingInfo(self, *args, **kwargs): ...
    def setAddressingInfo(self, *args, **kwargs): ...
    def setAnimCurve(self, *args, **kwargs): ...
    def setNameInfo(self, *args, **kwargs): ...

class MAnimCurveClipboardItemArray:
    sizeIncrement: Incomplete
    def __add__(self, value): ...
    def __contains__(self, key) -> bool: ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key): ...
    def __iadd__(self, value): ...
    def __imul__(self, value): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def __mul__(self, value): ...
    def __rmul__(self, value): ...
    def __setitem__(self, key, value) -> None: ...
    def append(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def copy(self, *args, **kwargs): ...
    def insert(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def setLength(self, *args, **kwargs): ...

class MAnimMessage(MMessage):
    @staticmethod
    def addAnimCurveEditedCallback(*args, **kwargs): ...
    @staticmethod
    def addAnimKeyframeEditCheckCallback(*args, **kwargs): ...
    @staticmethod
    def addAnimKeyframeEditedCallback(*args, **kwargs): ...
    @staticmethod
    def addDisableImplicitControlCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeAnimKeyframeEditedCallback(*args, **kwargs): ...
    @staticmethod
    def addPostBakeResultsCallback(*args, **kwargs): ...
    @staticmethod
    def addPreBakeResultsCallback(*args, **kwargs): ...
    @staticmethod
    def flushAnimKeyframeEditedCallbacks(*args, **kwargs): ...

class MAnimUtil:
    @staticmethod
    def findAnimatablePlugs(*args, **kwargs): ...
    @staticmethod
    def findAnimatedPlugs(*args, **kwargs): ...
    @staticmethod
    def findAnimation(*args, **kwargs): ...
    @staticmethod
    def findConstraint(*args, **kwargs): ...
    @staticmethod
    def findSetDrivenKeyAnimation(*args, **kwargs): ...
    @staticmethod
    def isAnimated(*args, **kwargs): ...

class MFnAnimCurve(MFnDependencyNode):
    kAnimCurveTA: ClassVar[int] = ...
    kAnimCurveTL: ClassVar[int] = ...
    kAnimCurveTT: ClassVar[int] = ...
    kAnimCurveTU: ClassVar[int] = ...
    kAnimCurveUA: ClassVar[int] = ...
    kAnimCurveUL: ClassVar[int] = ...
    kAnimCurveUT: ClassVar[int] = ...
    kAnimCurveUU: ClassVar[int] = ...
    kAnimCurveUnknown: ClassVar[int] = ...
    kConstant: ClassVar[int] = ...
    kCycle: ClassVar[int] = ...
    kCycleRelative: ClassVar[int] = ...
    kLinear: ClassVar[int] = ...
    kOscillate: ClassVar[int] = ...
    kTangentAuto: ClassVar[int] = ...
    kTangentAutoCustom: ClassVar[int] = ...
    kTangentAutoEase: ClassVar[int] = ...
    kTangentAutoMix: ClassVar[int] = ...
    kTangentClamped: ClassVar[int] = ...
    kTangentCustomEnd: ClassVar[int] = ...
    kTangentCustomStart: ClassVar[int] = ...
    kTangentFast: ClassVar[int] = ...
    kTangentFixed: ClassVar[int] = ...
    kTangentFlat: ClassVar[int] = ...
    kTangentGlobal: ClassVar[int] = ...
    kTangentLinear: ClassVar[int] = ...
    kTangentPlateau: ClassVar[int] = ...
    kTangentShared1: ClassVar[int] = ...
    kTangentShared2: ClassVar[int] = ...
    kTangentShared3: ClassVar[int] = ...
    kTangentShared4: ClassVar[int] = ...
    kTangentShared5: ClassVar[int] = ...
    kTangentShared6: ClassVar[int] = ...
    kTangentShared7: ClassVar[int] = ...
    kTangentShared8: ClassVar[int] = ...
    kTangentSlow: ClassVar[int] = ...
    kTangentSmooth: ClassVar[int] = ...
    kTangentStep: ClassVar[int] = ...
    kTangentStepNext: ClassVar[int] = ...
    kTangentTypeCount: ClassVar[int] = ...
    animCurveType: Incomplete
    isStatic: Incomplete
    isTimeInput: Incomplete
    isUnitlessInput: Incomplete
    isWeighted: Incomplete
    numKeys: Incomplete
    postInfinityType: Incomplete
    preInfinityType: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addKey(self, *args, **kwargs): ...
    def addKeys(self, *args, **kwargs): ...
    def addKeysWithTangents(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def evaluate(self, *args, **kwargs): ...
    def find(self, *args, **kwargs): ...
    def findClosest(self, *args, **kwargs): ...
    def getTangentAngleWeight(self, *args, **kwargs): ...
    def getTangentXY(self, *args, **kwargs): ...
    def inTangentType(self, *args, **kwargs): ...
    def input(self, *args, **kwargs): ...
    def insertKey(self, *args, **kwargs): ...
    def isBreakdown(self, *args, **kwargs): ...
    def outTangentType(self, *args, **kwargs): ...
    def quaternionW(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def setAngle(self, *args, **kwargs): ...
    def setInTangentType(self, *args, **kwargs): ...
    def setInput(self, *args, **kwargs): ...
    def setIsBreakdown(self, *args, **kwargs): ...
    def setIsWeighted(self, *args, **kwargs): ...
    def setOutTangentType(self, *args, **kwargs): ...
    def setPostInfinityType(self, *args, **kwargs): ...
    def setPreInfinityType(self, *args, **kwargs): ...
    def setQuaternionW(self, *args, **kwargs): ...
    def setTangent(self, *args, **kwargs): ...
    def setTangentTypes(self, *args, **kwargs): ...
    def setTangentsLocked(self, *args, **kwargs): ...
    def setValue(self, *args, **kwargs): ...
    def setWeight(self, *args, **kwargs): ...
    def setWeightsLocked(self, *args, **kwargs): ...
    def tangentsLocked(self, *args, **kwargs): ...
    def timedAnimCurveTypeForPlug(self, *args, **kwargs): ...
    def unitlessAnimCurveTypeForPlug(self, *args, **kwargs): ...
    def value(self, *args, **kwargs): ...
    def weightsLocked(self, *args, **kwargs): ...

class MFnGeometryFilter(MFnDependencyNode):
    deformerSet: Incomplete
    envelope: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getComponentAtIndex(self, *args, **kwargs): ...
    def getInputGeometry(self, *args, **kwargs): ...
    def getOutputGeometry(self, *args, **kwargs): ...
    def getPathAtIndex(self, *args, **kwargs): ...
    def groupIdAtIndex(self, *args, **kwargs): ...
    def indexForGroupId(self, *args, **kwargs): ...
    def indexForOutputConnection(self, *args, **kwargs): ...
    def indexForOutputShape(self, *args, **kwargs): ...
    def inputShapeAtIndex(self, *args, **kwargs): ...
    def numOutputConnections(self, *args, **kwargs): ...
    def outputShapeAtIndex(self, *args, **kwargs): ...

class MFnIkJoint(MFnTransform):
    def __init__(self, *args, **kwargs) -> None: ...
    def create(self, *args, **kwargs): ...
    def degreesOfFreedom(self, *args, **kwargs): ...
    def hikJointName(self, *args, **kwargs): ...
    def maxRotateDampXRange(self, *args, **kwargs): ...
    def maxRotateDampXStrength(self, *args, **kwargs): ...
    def maxRotateDampYRange(self, *args, **kwargs): ...
    def maxRotateDampYStrength(self, *args, **kwargs): ...
    def maxRotateDampZRange(self, *args, **kwargs): ...
    def maxRotateDampZStrength(self, *args, **kwargs): ...
    def minRotateDampXRange(self, *args, **kwargs): ...
    def minRotateDampXStrength(self, *args, **kwargs): ...
    def minRotateDampYRange(self, *args, **kwargs): ...
    def minRotateDampYStrength(self, *args, **kwargs): ...
    def minRotateDampZRange(self, *args, **kwargs): ...
    def minRotateDampZStrength(self, *args, **kwargs): ...
    def orientation(self, *args, **kwargs): ...
    def orientationComponents(self, *args, **kwargs): ...
    def preferredAngle(self, *args, **kwargs): ...
    def scaleOrientation(self, *args, **kwargs): ...
    def segmentScale(self, *args, **kwargs): ...
    def setDegreesOfFreedom(self, *args, **kwargs): ...
    def setMaxRotateDampXRange(self, *args, **kwargs): ...
    def setMaxRotateDampXStrength(self, *args, **kwargs): ...
    def setMaxRotateDampYRange(self, *args, **kwargs): ...
    def setMaxRotateDampYStrength(self, *args, **kwargs): ...
    def setMaxRotateDampZRange(self, *args, **kwargs): ...
    def setMaxRotateDampZStrength(self, *args, **kwargs): ...
    def setMinRotateDampXRange(self, *args, **kwargs): ...
    def setMinRotateDampXStrength(self, *args, **kwargs): ...
    def setMinRotateDampYRange(self, *args, **kwargs): ...
    def setMinRotateDampYStrength(self, *args, **kwargs): ...
    def setMinRotateDampZRange(self, *args, **kwargs): ...
    def setMinRotateDampZStrength(self, *args, **kwargs): ...
    def setOrientation(self, *args, **kwargs): ...
    def setPreferredAngle(self, *args, **kwargs): ...
    def setScaleOrientation(self, *args, **kwargs): ...
    def setSegmentScale(self, *args, **kwargs): ...
    def setStiffness(self, *args, **kwargs): ...
    def stiffness(self, *args, **kwargs): ...

class MFnSkinCluster(MFnGeometryFilter):
    def __init__(self, *args, **kwargs) -> None: ...
    def getBlendWeights(self, *args, **kwargs): ...
    def getPointsAffectedByInfluence(self, *args, **kwargs): ...
    def getWeights(self, *args, **kwargs): ...
    def indexForInfluenceObject(self, *args, **kwargs): ...
    def influenceObjects(self, *args, **kwargs): ...
    def setBlendWeights(self, *args, **kwargs): ...
    def setWeights(self, *args, **kwargs): ...

class MFnWeightGeometryFilter(MFnGeometryFilter):
    def __init__(self, *args, **kwargs) -> None: ...
    def getEnvelopeWeights(self, *args, **kwargs): ...
    def getWeightPlugStrings(self, *args, **kwargs): ...
    def getWeights(self, *args, **kwargs): ...
    def setWeight(self, *args, **kwargs): ...
    def weightPlugStrings(self, *args, **kwargs): ...
key: str
ourdict: dict
py2dict: dict
val: str
