from _typeshed import Incomplete
from typing import ClassVar

class M3dView:
    kActive: ClassVar[int] = ...
    kActiveAffected: ClassVar[int] = ...
    kActiveColors: ClassVar[int] = ...
    kActiveComponent: ClassVar[int] = ...
    kActiveTemplate: ClassVar[int] = ...
    kBackgroundColor: ClassVar[int] = ...
    kBoundingBox: ClassVar[int] = ...
    kCenter: ClassVar[int] = ...
    kDefaultQualityRenderer: ClassVar[int] = ...
    kDepth_8: ClassVar[int] = ...
    kDepth_Float: ClassVar[int] = ...
    kDisplayCVs: ClassVar[int] = ...
    kDisplayCameras: ClassVar[int] = ...
    kDisplayDeformers: ClassVar[int] = ...
    kDisplayDimensions: ClassVar[int] = ...
    kDisplayDynamicConstraints: ClassVar[int] = ...
    kDisplayDynamics: ClassVar[int] = ...
    kDisplayEverything: ClassVar[int] = ...
    kDisplayFluids: ClassVar[int] = ...
    kDisplayFollicles: ClassVar[int] = ...
    kDisplayGrid: ClassVar[int] = ...
    kDisplayHairSystems: ClassVar[int] = ...
    kDisplayHulls: ClassVar[int] = ...
    kDisplayIkHandles: ClassVar[int] = ...
    kDisplayImagePlane: ClassVar[int] = ...
    kDisplayJoints: ClassVar[int] = ...
    kDisplayLights: ClassVar[int] = ...
    kDisplayLocators: ClassVar[int] = ...
    kDisplayManipulators: ClassVar[int] = ...
    kDisplayMeshes: ClassVar[int] = ...
    kDisplayNCloths: ClassVar[int] = ...
    kDisplayNParticles: ClassVar[int] = ...
    kDisplayNRigids: ClassVar[int] = ...
    kDisplayNurbsCurves: ClassVar[int] = ...
    kDisplayNurbsSurfaces: ClassVar[int] = ...
    kDisplayParticleInstancers: ClassVar[int] = ...
    kDisplayPivots: ClassVar[int] = ...
    kDisplayPlanes: ClassVar[int] = ...
    kDisplaySelectHandles: ClassVar[int] = ...
    kDisplayStrokes: ClassVar[int] = ...
    kDisplaySubdivSurfaces: ClassVar[int] = ...
    kDisplayTextures: ClassVar[int] = ...
    kDormant: ClassVar[int] = ...
    kDormantColors: ClassVar[int] = ...
    kExcludeMotionTrails: ClassVar[int] = ...
    kExcludePluginShapes: ClassVar[int] = ...
    kExternalRenderer: ClassVar[int] = ...
    kFlatShaded: ClassVar[int] = ...
    kGouraudShaded: ClassVar[int] = ...
    kHighQualityRenderer: ClassVar[int] = ...
    kHilite: ClassVar[int] = ...
    kIntermediateObject: ClassVar[int] = ...
    kInvisible: ClassVar[int] = ...
    kLead: ClassVar[int] = ...
    kLeft: ClassVar[int] = ...
    kLightActive: ClassVar[int] = ...
    kLightAll: ClassVar[int] = ...
    kLightDefault: ClassVar[int] = ...
    kLightNone: ClassVar[int] = ...
    kLightSelected: ClassVar[int] = ...
    kLive: ClassVar[int] = ...
    kNoStatus: ClassVar[int] = ...
    kPoints: ClassVar[int] = ...
    kRight: ClassVar[int] = ...
    kStippleDashed: ClassVar[int] = ...
    kStippleNone: ClassVar[int] = ...
    kTemplate: ClassVar[int] = ...
    kTemplateColor: ClassVar[int] = ...
    kUnused1: ClassVar[int] = ...
    kViewport2Renderer: ClassVar[int] = ...
    kWireFrame: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def active3dView(*args, **kwargs): ...
    @staticmethod
    def activeAffectedColor(*args, **kwargs): ...
    @staticmethod
    def activeTemplateColor(*args, **kwargs): ...
    @staticmethod
    def applicationShell(*args, **kwargs): ...
    @staticmethod
    def backgroundColor(*args, **kwargs): ...
    @staticmethod
    def backgroundColorBottom(*args, **kwargs): ...
    @staticmethod
    def backgroundColorTop(*args, **kwargs): ...
    def beginGL(self, *args, **kwargs): ...
    def beginProjMatrixOverride(self, *args, **kwargs): ...
    def beginSelect(self, *args, **kwargs): ...
    def beginXorDrawing(self, *args, **kwargs): ...
    def colorAtIndex(self, *args, **kwargs): ...
    def colorMask(self, *args, **kwargs): ...
    def disallowPolygonOffset(self, *args, **kwargs): ...
    def display(self, *args, **kwargs): ...
    @staticmethod
    def displayStatus(*args, **kwargs): ...
    def displayStyle(self, *args, **kwargs): ...
    def drawText(self, *args, **kwargs): ...
    def endGL(self, *args, **kwargs): ...
    def endProjMatrixOverride(self, *args, **kwargs): ...
    def endSelect(self, *args, **kwargs): ...
    def endXorDrawing(self, *args, **kwargs): ...
    def filteredObjectList(self, *args, **kwargs): ...
    @staticmethod
    def get3dView(*args, **kwargs): ...
    def getCamera(self, *args, **kwargs): ...
    def getColorIndexAndTable(self, *args, **kwargs): ...
    def getLightCount(self, *args, **kwargs): ...
    def getLightIndex(self, *args, **kwargs): ...
    def getLightPath(self, *args, **kwargs): ...
    def getLightingMode(self, *args, **kwargs): ...
    @staticmethod
    def getM3dViewFromModelEditor(*args, **kwargs): ...
    @staticmethod
    def getM3dViewFromModelPanel(*args, **kwargs): ...
    def getRendererName(self, *args, **kwargs): ...
    def getScreenPosition(self, *args, **kwargs): ...
    @staticmethod
    def hiliteColor(*args, **kwargs): ...
    def initNames(self, *args, **kwargs): ...
    @staticmethod
    def isBackgroundGradient(*args, **kwargs): ...
    def isLightVisible(self, *args, **kwargs): ...
    def isShadeActiveOnly(self, *args, **kwargs): ...
    def isVisible(self, *args, **kwargs): ...
    @staticmethod
    def leadColor(*args, **kwargs): ...
    @staticmethod
    def liveColor(*args, **kwargs): ...
    def loadName(self, *args, **kwargs): ...
    def modelViewMatrix(self, *args, **kwargs): ...
    def multipleDrawEnabled(self, *args, **kwargs): ...
    def multipleDrawPassCount(self, *args, **kwargs): ...
    def numActiveColors(self, *args, **kwargs): ...
    def numDormantColors(self, *args, **kwargs): ...
    def numUserDefinedColors(self, *args, **kwargs): ...
    @staticmethod
    def numberOf3dViews(*args, **kwargs): ...
    def objectDisplay(self, *args, **kwargs): ...
    def objectListFilterName(self, *args, **kwargs): ...
    def playblastPortHeight(self, *args, **kwargs): ...
    def playblastPortWidth(self, *args, **kwargs): ...
    def pluginObjectDisplay(self, *args, **kwargs): ...
    def popName(self, *args, **kwargs): ...
    def popViewport(self, *args, **kwargs): ...
    def portHeight(self, *args, **kwargs): ...
    def portWidth(self, *args, **kwargs): ...
    def projectionMatrix(self, *args, **kwargs): ...
    def pushName(self, *args, **kwargs): ...
    def pushViewport(self, *args, **kwargs): ...
    def readBufferTo2dTexture(self, *args, **kwargs): ...
    def readColorBuffer(self, *args, **kwargs): ...
    def readDepthMap(self, *args, **kwargs): ...
    @staticmethod
    def referenceLayerColor(*args, **kwargs): ...
    def refresh(self, *args, **kwargs): ...
    def renderOverrideName(self, *args, **kwargs): ...
    def rendererString(self, *args, **kwargs): ...
    def scheduleRefresh(self, *args, **kwargs): ...
    @staticmethod
    def scheduleRefreshAllViews(*args, **kwargs): ...
    def selectMode(self, *args, **kwargs): ...
    def setCamera(self, *args, **kwargs): ...
    def setColorMask(self, *args, **kwargs): ...
    def setDisallowPolygonOffset(self, *args, **kwargs): ...
    def setDisplayStyle(self, *args, **kwargs): ...
    def setDrawColor(self, *args, **kwargs): ...
    def setDrawColorAndAlpha(self, *args, **kwargs): ...
    def setMultipleDrawEnable(self, *args, **kwargs): ...
    def setMultipleDrawPassCount(self, *args, **kwargs): ...
    def setObjectDisplay(self, *args, **kwargs): ...
    def setObjectListFilterName(self, *args, **kwargs): ...
    def setPluginObjectDisplay(self, *args, **kwargs): ...
    def setRenderOverrideName(self, *args, **kwargs): ...
    def setShowObjectFilterNameInHUD(self, *args, **kwargs): ...
    def setShowViewSelectedChildren(self, *args, **kwargs): ...
    def setUserDefinedColor(self, *args, **kwargs): ...
    def setViewSelectedPrefix(self, *args, **kwargs): ...
    def showObjectFilterNameInHUD(self, *args, **kwargs): ...
    def showViewSelectedChildren(self, *args, **kwargs): ...
    @staticmethod
    def templateColor(*args, **kwargs): ...
    def textureMode(self, *args, **kwargs): ...
    def twoSidedLighting(self, *args, **kwargs): ...
    def updateViewingParameters(self, *args, **kwargs): ...
    def userDefinedColorIndex(self, *args, **kwargs): ...
    def usingDefaultMaterial(self, *args, **kwargs): ...
    def usingMipmappedTextures(self, *args, **kwargs): ...
    def viewIsFiltered(self, *args, **kwargs): ...
    def viewSelectedPrefix(self, *args, **kwargs): ...
    def viewToObjectSpace(self, *args, **kwargs): ...
    def viewToWorld(self, *args, **kwargs): ...
    def viewport(self, *args, **kwargs): ...
    def widget(self, *args, **kwargs): ...
    def window(self, *args, **kwargs): ...
    def wireframeOnShaded(self, *args, **kwargs): ...
    def wireframeOnlyInShadedMode(self, *args, **kwargs): ...
    def worldToView(self, *args, **kwargs): ...
    def writeColorBuffer(self, *args, **kwargs): ...
    def xray(self, *args, **kwargs): ...
    def xrayJoints(self, *args, **kwargs): ...

class MCursor:
    kCrossHairCursor: ClassVar[MCursor] = ...
    kDefaultCursor: ClassVar[MCursor] = ...
    kDoubleCrossHairCursor: ClassVar[MCursor] = ...
    kEditCursor: ClassVar[MCursor] = ...
    kHandCursor: ClassVar[MCursor] = ...
    kPencilCursor: ClassVar[MCursor] = ...
    def __eq__(self, value) -> bool: ...
    def __ge__(self, value) -> bool: ...
    def __gt__(self, value) -> bool: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __le__(self, value) -> bool: ...
    def __lt__(self, value) -> bool: ...
    def __ne__(self, value) -> bool: ...

class MDrawData:
    def __init__(self, *args, **kwargs) -> None: ...
    def geometry(self, *args, **kwargs): ...

class MDrawInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def canDrawComponent(self, *args, **kwargs): ...
    def completelyInside(self, *args, **kwargs): ...
    def displayStatus(self, *args, **kwargs): ...
    def displayStyle(self, *args, **kwargs): ...
    def getPrototype(self, *args, **kwargs): ...
    def inSelect(self, *args, **kwargs): ...
    def inUserInteraction(self, *args, **kwargs): ...
    def inclusiveMatrix(self, *args, **kwargs): ...
    def multiPath(self, *args, **kwargs): ...
    def objectDisplayStatus(self, *args, **kwargs): ...
    def pluginObjectDisplayStatus(self, *args, **kwargs): ...
    def projectionMatrix(self, *args, **kwargs): ...
    def setMultiPath(self, *args, **kwargs): ...
    def userChangingViewContext(self, *args, **kwargs): ...
    def view(self, *args, **kwargs): ...

class MDrawProperties:
    color: Incomplete
    lineStyle: Incomplete
    lineWidth: Incomplete
    pointSize: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MDrawRequest:
    color: Incomplete
    component: Incomplete
    displayCullOpposite: Incomplete
    displayCulling: Incomplete
    displayStatus: Incomplete
    displayStyle: Incomplete
    drawData: Incomplete
    drawLast: Incomplete
    isTransparent: Incomplete
    material: Incomplete
    matrix: Incomplete
    multiPath: Incomplete
    token: Incomplete
    view: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def planeColor(self, *args, **kwargs): ...
    def setPlaneColor(self, *args, **kwargs): ...

class MEvent:
    controlKey: ClassVar[int] = ...
    kLeftMouse: ClassVar[int] = ...
    kMiddleMouse: ClassVar[int] = ...
    shiftKey: ClassVar[int] = ...
    modifiers: Incomplete
    position: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getWindowPosition(self, *args, **kwargs): ...
    def isModifierControl(self, *args, **kwargs): ...
    def isModifierKeyRelease(self, *args, **kwargs): ...
    def isModifierLeftMouseButton(self, *args, **kwargs): ...
    def isModifierMiddleMouseButton(self, *args, **kwargs): ...
    def isModifierNone(self, *args, **kwargs): ...
    def isModifierShift(self, *args, **kwargs): ...
    def mouseButton(self, *args, **kwargs): ...

class MFnCircleSweepManip(MFnManip3D):
    endPoint: Incomplete
    startPoint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleIndex(self, *args, **kwargs): ...
    def axisIndex(self, *args, **kwargs): ...
    def centerIndex(self, *args, **kwargs): ...
    def connectToAnglePlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def endCircleIndex(self, *args, **kwargs): ...
    def setAngle(self, *args, **kwargs): ...
    def setCenterPoint(self, *args, **kwargs): ...
    def setDrawAsArc(self, *args, **kwargs): ...
    def setNormal(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def startCircleIndex(self, *args, **kwargs): ...

class MFnCurveSegmentManip(MFnManip3D):
    endParameter: Incomplete
    startParameter: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToCurvePlug(self, *args, **kwargs): ...
    def connectToEndParamPlug(self, *args, **kwargs): ...
    def connectToStartParamPlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def curveIndex(self, *args, **kwargs): ...
    def endParamIndex(self, *args, **kwargs): ...
    def startParamIndex(self, *args, **kwargs): ...

class MFnDirectionManip(MFnManip3D):
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToDirectionPlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def directionIndex(self, *args, **kwargs): ...
    def endPointIndex(self, *args, **kwargs): ...
    def setDirection(self, *args, **kwargs): ...
    def setDrawStart(self, *args, **kwargs): ...
    def setNormalizeDirection(self, *args, **kwargs): ...
    def setStartPoint(self, *args, **kwargs): ...
    def startPointIndex(self, *args, **kwargs): ...

class MFnDiscManip(MFnManip3D):
    def __init__(self, *args, **kwargs) -> None: ...
    def angleIndex(self, *args, **kwargs): ...
    def axisIndex(self, *args, **kwargs): ...
    def centerIndex(self, *args, **kwargs): ...
    def connectToAnglePlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def setAngle(self, *args, **kwargs): ...
    def setCenterPoint(self, *args, **kwargs): ...
    def setNormal(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...

class MFnDistanceManip(MFnManip3D):
    isDrawLineOn: Incomplete
    isDrawStartOn: Incomplete
    scalingFactor: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToDistancePlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def currentPointIndex(self, *args, **kwargs): ...
    def directionIndex(self, *args, **kwargs): ...
    def distanceIndex(self, *args, **kwargs): ...
    def setDirection(self, *args, **kwargs): ...
    def setStartPoint(self, *args, **kwargs): ...
    def startPointIndex(self, *args, **kwargs): ...

class MFnFreePointTriadManip(MFnManip3D):
    kViewPlane: ClassVar[int] = ...
    kXYPlane: ClassVar[int] = ...
    kXZPlane: ClassVar[int] = ...
    kYZPlane: ClassVar[int] = ...
    isDrawAxesOn: Incomplete
    isKeyframeAllOn: Incomplete
    isSnapModeOn: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToPointPlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def pointIndex(self, *args, **kwargs): ...
    def setDirection(self, *args, **kwargs): ...
    def setDrawArrowHead(self, *args, **kwargs): ...
    def setGlobalTriadPlane(self, *args, **kwargs): ...
    def setPoint(self, *args, **kwargs): ...

class MFnManip3D(MFnTransform):
    isOptimizePlaybackOn: Incomplete
    isVisible: Incomplete
    manipScale: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def deleteManipulator(*args, **kwargs): ...
    @staticmethod
    def drawPlaneHandles(*args, **kwargs): ...
    @staticmethod
    def globalSize(*args, **kwargs): ...
    @staticmethod
    def handleSize(*args, **kwargs): ...
    @staticmethod
    def lineSize(*args, **kwargs): ...
    def rotateXYZValue(self, *args, **kwargs): ...
    @staticmethod
    def setDrawPlaneHandles(*args, **kwargs): ...
    @staticmethod
    def setGlobalSize(*args, **kwargs): ...
    @staticmethod
    def setHandleSize(*args, **kwargs): ...
    @staticmethod
    def setLineSize(*args, **kwargs): ...

class MFnPointOnCurveManip(MFnManip3D):
    isDrawCurveOn: Incomplete
    parameter: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToCurvePlug(self, *args, **kwargs): ...
    def connectToParamPlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def curveIndex(self, *args, **kwargs): ...
    def curvePoint(self, *args, **kwargs): ...
    def paramIndex(self, *args, **kwargs): ...

class MFnPointOnSurfaceManip(MFnManip3D):
    isDrawSurfaceOn: Incomplete
    uParam: Incomplete
    vParam: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToParamPlug(self, *args, **kwargs): ...
    def connectToSurfacePlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def paramIndex(self, *args, **kwargs): ...
    def setDrawArrows(self, *args, **kwargs): ...
    def surfaceIndex(self, *args, **kwargs): ...

class MFnRotateManip(MFnManip3D):
    kGimbal: ClassVar[int] = ...
    kObjectSpace: ClassVar[int] = ...
    kWorldSpace: ClassVar[int] = ...
    isSnapModeOn: Incomplete
    rotateMode: Incomplete
    snapIncrement: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToRotationCenterPlug(self, *args, **kwargs): ...
    def connectToRotationPlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def displayWithNode(self, *args, **kwargs): ...
    def rotationCenterIndex(self, *args, **kwargs): ...
    def rotationIndex(self, *args, **kwargs): ...
    def setInitialRotation(self, *args, **kwargs): ...
    def setRotationCenter(self, *args, **kwargs): ...

class MFnScaleManip(MFnManip3D):
    kArbitraryOrientation: ClassVar[int] = ...
    kDefaultOrientation: ClassVar[int] = ...
    isSnapModeOn: Incomplete
    orientation: Incomplete
    orientationMode: Incomplete
    snapIncrement: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToScaleCenterPlug(self, *args, **kwargs): ...
    def connectToScalePlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def displayWithNode(self, *args, **kwargs): ...
    def scaleCenterIndex(self, *args, **kwargs): ...
    def scaleIndex(self, *args, **kwargs): ...
    def setInitialScale(self, *args, **kwargs): ...

class MFnStateManip(MFnManip3D):
    maxStates: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToStatePlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def positionIndex(self, *args, **kwargs): ...
    def setInitialState(self, *args, **kwargs): ...
    def state(self, *args, **kwargs): ...
    def stateIndex(self, *args, **kwargs): ...

class MFnToggleManip(MFnManip3D):
    direction: Incomplete
    length: Incomplete
    startPoint: Incomplete
    toggle: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToTogglePlug(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def directionIndex(self, *args, **kwargs): ...
    def lengthIndex(self, *args, **kwargs): ...
    def startPointIndex(self, *args, **kwargs): ...
    def toggleIndex(self, *args, **kwargs): ...

class MHWShaderSwatchGenerator(MSwatchRenderBase):
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def createObj(*args, **kwargs): ...
    def doIteration(self, *args, **kwargs): ...
    @staticmethod
    def getSwatchBackgroundColor(*args, **kwargs): ...
    @staticmethod
    def initialize(*args, **kwargs): ...

class MManipData:
    def __init__(self, *args, **kwargs) -> None: ...
    def asBool(self, *args, **kwargs): ...
    def asDouble(self, *args, **kwargs): ...
    def asFloat(self, *args, **kwargs): ...
    def asLong(self, *args, **kwargs): ...
    def asMObject(self, *args, **kwargs): ...
    def asShort(self, *args, **kwargs): ...
    def asUnsigned(self, *args, **kwargs): ...
    def isSimple(self, *args, **kwargs): ...

class MMaterial:
    kAmbientColor: ClassVar[int] = ...
    kBumpMap: ClassVar[int] = ...
    kColor: ClassVar[int] = ...
    kCosinePower: ClassVar[int] = ...
    kDiffuse: ClassVar[int] = ...
    kEccentricity: ClassVar[int] = ...
    kHighlightSize: ClassVar[int] = ...
    kIncandescence: ClassVar[int] = ...
    kReflectedColor: ClassVar[int] = ...
    kReflectivity: ClassVar[int] = ...
    kRoughness: ClassVar[int] = ...
    kSpecularColor: ClassVar[int] = ...
    kSpecularRollOff: ClassVar[int] = ...
    kTransluscence: ClassVar[int] = ...
    kTransparency: ClassVar[int] = ...
    kWhiteness: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def applyTexture(self, *args, **kwargs): ...
    @staticmethod
    def defaultMaterial(*args, **kwargs): ...
    def evaluateDiffuse(self, *args, **kwargs): ...
    def evaluateEmission(self, *args, **kwargs): ...
    def evaluateMaterial(self, *args, **kwargs): ...
    def evaluateShininess(self, *args, **kwargs): ...
    def evaluateSpecular(self, *args, **kwargs): ...
    def evaluateTexture(self, *args, **kwargs): ...
    def getDiffuse(self, *args, **kwargs): ...
    def getEmission(self, *args, **kwargs): ...
    def getHasTransparency(self, *args, **kwargs): ...
    def getHwShaderNode(self, *args, **kwargs): ...
    def getShininess(self, *args, **kwargs): ...
    def getSpecular(self, *args, **kwargs): ...
    def getTextureTransformation(self, *args, **kwargs): ...
    def materialIsTextured(self, *args, **kwargs): ...
    def setMaterial(self, *args, **kwargs): ...
    def shadingEngine(self, *args, **kwargs): ...
    def textureImage(self, *args, **kwargs): ...

class MMaterialArray:
    sizeIncrement: Incomplete
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def copy(self, *args, **kwargs): ...
    def insert(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def set(self, *args, **kwargs): ...
    def setLength(self, *args, **kwargs): ...

class MPaintMessage(MMessage):
    @staticmethod
    def addVertexColorCallback(*args, **kwargs): ...

class MPanelCanvas:
    kGraphEditorAxisLabels: ClassVar[int] = ...
    kGraphEditorBackground: ClassVar[int] = ...
    kGraphEditorCurveNames: ClassVar[int] = ...
    kGraphEditorCurves: ClassVar[int] = ...
    kGraphEditorFirstDefaultDraw: ClassVar[int] = ...
    kGraphEditorGrid: ClassVar[int] = ...
    kGraphEditorLastDefaultDraw: ClassVar[int] = ...
    kGraphEditorOverlayTexture: ClassVar[int] = ...
    kGraphEditorRetimeToolText: ClassVar[int] = ...
    kGraphEditorTimeMarker: ClassVar[int] = ...
    kGraphEditorUndefined: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addPrimitive(self, *args, **kwargs): ...
    def createFloatVertexBuffer(self, *args, **kwargs): ...
    def createPrimitive(self, *args, **kwargs): ...
    def createTimeVertexBuffer(self, *args, **kwargs): ...
    def destroyPrimitive(self, *args, **kwargs): ...
    def destroyVertexBuffer(self, *args, **kwargs): ...
    def isAutoRefresh(self, *args, **kwargs): ...
    def isLayerVisible(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def refresh(self, *args, **kwargs): ...
    def registerDrawUICallback(self, *args, **kwargs): ...
    def removePrimitive(self, *args, **kwargs): ...
    def setAutoRefresh(self, *args, **kwargs): ...
    def setLayerVisible(self, *args, **kwargs): ...
    def supportsUIDrawing(self, *args, **kwargs): ...
    def unregisterDrawUICallback(self, *args, **kwargs): ...

class MPanelCanvasInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def getViewportBounds(self, *args, **kwargs): ...
    def getViewportSize(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...
    def setViewportBounds(self, *args, **kwargs): ...
    def supportsUIDrawing(self, *args, **kwargs): ...

class MPxContext:
    kImage1: ClassVar[int] = ...
    kImage2: ClassVar[int] = ...
    kImage3: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def abortAction(self, *args, **kwargs): ...
    def addManipulator(self, *args, **kwargs): ...
    def argTypeNumericalInput(self, *args, **kwargs): ...
    def beginMarquee(self, *args, **kwargs): ...
    def completeAction(self, *args, **kwargs): ...
    def deleteAction(self, *args, **kwargs): ...
    def deleteManipulators(self, *args, **kwargs): ...
    def doDrag(self, *args, **kwargs): ...
    def doDragLegacy(self, *args, **kwargs): ...
    def doEnterRegion(self, *args, **kwargs): ...
    def doExitRegion(self, *args, **kwargs): ...
    def doHold(self, *args, **kwargs): ...
    def doHoldLegacy(self, *args, **kwargs): ...
    def doPress(self, *args, **kwargs): ...
    def doPressLegacy(self, *args, **kwargs): ...
    def doPtrMoved(self, *args, **kwargs): ...
    def doPtrMovedLegacy(self, *args, **kwargs): ...
    def doRelease(self, *args, **kwargs): ...
    def doReleaseLegacy(self, *args, **kwargs): ...
    def dragMarquee(self, *args, **kwargs): ...
    def drawFeedback(self, *args, **kwargs): ...
    def feedbackNumericalInput(self, *args, **kwargs): ...
    def helpStateHasChanged(self, *args, **kwargs): ...
    def image(self, *args, **kwargs): ...
    def inAlternateContext(self, *args, **kwargs): ...
    def newToolCommand(self, *args, **kwargs): ...
    def processNumericalInput(self, *args, **kwargs): ...
    def releaseMarquee(self, *args, **kwargs): ...
    def setCursor(self, *args, **kwargs): ...
    def setHelpString(self, *args, **kwargs): ...
    def setImage(self, *args, **kwargs): ...
    def setTitleString(self, *args, **kwargs): ...
    def stringClassName(self, *args, **kwargs): ...
    def toolOffCleanup(self, *args, **kwargs): ...
    def toolOnSetup(self, *args, **kwargs): ...

class MPxContextCommand:
    def __init__(self, *args, **kwargs) -> None: ...
    def appendSyntax(self, *args, **kwargs): ...
    def doEditFlags(self, *args, **kwargs): ...
    def doQueryFlags(self, *args, **kwargs): ...
    def makeObj(self, *args, **kwargs): ...
    def parser(self, *args, **kwargs): ...
    def setResult(self, *args, **kwargs): ...
    def syntax(self, *args, **kwargs): ...

class MPxDragAndDropBehavior:
    def __init__(self, *args, **kwargs) -> None: ...
    def connectAttrToAttr(self, *args, **kwargs): ...
    def connectAttrToNode(self, *args, **kwargs): ...
    def connectNodeToAttr(self, *args, **kwargs): ...
    def connectNodeToNode(self, *args, **kwargs): ...
    def shouldBeUsedFor(self, *args, **kwargs): ...

class MPxHardwareShader(MPxNode):
    kIsTransparent: ClassVar[int] = ...
    kNoTransparencyFrontBackCull: ClassVar[int] = ...
    kNoTransparencyPolygonSort: ClassVar[int] = ...
    outColor: ClassVar[MObject] = ...
    outColorB: ClassVar[MObject] = ...
    outColorG: ClassVar[MObject] = ...
    outColorR: ClassVar[MObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def findResource(*args, **kwargs): ...
    def getAvailableImages(self, *args, **kwargs): ...
    @staticmethod
    def getHardwareShader(*args, **kwargs): ...
    def profile(self, *args, **kwargs): ...
    def renderImage(self, *args, **kwargs): ...
    def renderSwatchImage(self, *args, **kwargs): ...
    def setUniformParameters(self, *args, **kwargs): ...
    def setVaryingParameters(self, *args, **kwargs): ...
    def transparencyOptions(self, *args, **kwargs): ...

class MPxHwShaderNode(MPxNode):
    kDirtyAll: ClassVar[int] = ...
    kDirtyColorArrays: ClassVar[int] = ...
    kDirtyNone: ClassVar[int] = ...
    kDirtyNormalArray: ClassVar[int] = ...
    kDirtyTexCoordArrays: ClassVar[int] = ...
    kDirtyVertexArray: ClassVar[int] = ...
    kIsTransparent: ClassVar[int] = ...
    kNoTransparencyFrontBackCull: ClassVar[int] = ...
    kNoTransparencyPolygonSort: ClassVar[int] = ...
    kWriteAll: ClassVar[int] = ...
    kWriteColorArrays: ClassVar[int] = ...
    kWriteNone: ClassVar[int] = ...
    kWriteNormalArray: ClassVar[int] = ...
    kWriteTexCoordArrays: ClassVar[int] = ...
    kWriteVertexArray: ClassVar[int] = ...
    outColor: ClassVar[MObject] = ...
    outColorB: ClassVar[MObject] = ...
    outColorG: ClassVar[MObject] = ...
    outColorR: ClassVar[MObject] = ...
    outGlowColor: ClassVar[MObject] = ...
    outGlowColorB: ClassVar[MObject] = ...
    outGlowColorG: ClassVar[MObject] = ...
    outGlowColorR: ClassVar[MObject] = ...
    outMatteOpacity: ClassVar[MObject] = ...
    outMatteOpacityB: ClassVar[MObject] = ...
    outMatteOpacityG: ClassVar[MObject] = ...
    outMatteOpacityR: ClassVar[MObject] = ...
    outTransparency: ClassVar[MObject] = ...
    outTransparencyB: ClassVar[MObject] = ...
    outTransparencyG: ClassVar[MObject] = ...
    outTransparencyR: ClassVar[MObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bind(self, *args, **kwargs): ...
    def colorsPerVertex(self, *args, **kwargs): ...
    def currentPath(self, *args, **kwargs): ...
    def currentShadingEngine(self, *args, **kwargs): ...
    def dirtyMask(self, *args, **kwargs): ...
    def geometry(self, *args, **kwargs): ...
    def getAvailableImages(self, *args, **kwargs): ...
    def getColorSetNames(self, *args, **kwargs): ...
    @staticmethod
    def getHwShaderNode(*args, **kwargs): ...
    def getTexCoordSetNames(self, *args, **kwargs): ...
    def glBind(self, *args, **kwargs): ...
    def glGeometry(self, *args, **kwargs): ...
    def glUnbind(self, *args, **kwargs): ...
    def hasTransparency(self, *args, **kwargs): ...
    def invertTexCoords(self, *args, **kwargs): ...
    def normalsPerVertex(self, *args, **kwargs): ...
    def provideVertexIDs(self, *args, **kwargs): ...
    def renderImage(self, *args, **kwargs): ...
    def renderSwatchImage(self, *args, **kwargs): ...
    def supportsBatching(self, *args, **kwargs): ...
    def texCoordsPerVertex(self, *args, **kwargs): ...
    def transparencyOptions(self, *args, **kwargs): ...
    def unbind(self, *args, **kwargs): ...

class MPxLocatorNode(MPxNode):
    boundingBoxCenterX: ClassVar[MObject] = ...
    boundingBoxCenterY: ClassVar[MObject] = ...
    boundingBoxCenterZ: ClassVar[MObject] = ...
    center: ClassVar[MObject] = ...
    instObjGroups: ClassVar[MObject] = ...
    intermediateObject: ClassVar[MObject] = ...
    inverseMatrix: ClassVar[MObject] = ...
    isTemplated: ClassVar[MObject] = ...
    localPosition: ClassVar[MObject] = ...
    localPositionX: ClassVar[MObject] = ...
    localPositionY: ClassVar[MObject] = ...
    localPositionZ: ClassVar[MObject] = ...
    localScale: ClassVar[MObject] = ...
    localScaleX: ClassVar[MObject] = ...
    localScaleY: ClassVar[MObject] = ...
    localScaleZ: ClassVar[MObject] = ...
    matrix: ClassVar[MObject] = ...
    nodeBoundingBox: ClassVar[MObject] = ...
    nodeBoundingBoxMax: ClassVar[MObject] = ...
    nodeBoundingBoxMaxX: ClassVar[MObject] = ...
    nodeBoundingBoxMaxY: ClassVar[MObject] = ...
    nodeBoundingBoxMaxZ: ClassVar[MObject] = ...
    nodeBoundingBoxMin: ClassVar[MObject] = ...
    nodeBoundingBoxMinX: ClassVar[MObject] = ...
    nodeBoundingBoxMinY: ClassVar[MObject] = ...
    nodeBoundingBoxMinZ: ClassVar[MObject] = ...
    nodeBoundingBoxSize: ClassVar[MObject] = ...
    nodeBoundingBoxSizeX: ClassVar[MObject] = ...
    nodeBoundingBoxSizeY: ClassVar[MObject] = ...
    nodeBoundingBoxSizeZ: ClassVar[MObject] = ...
    objectColor: ClassVar[MObject] = ...
    objectGroupColor: ClassVar[MObject] = ...
    objectGroupId: ClassVar[MObject] = ...
    objectGroups: ClassVar[MObject] = ...
    objectGrpCompList: ClassVar[MObject] = ...
    parentInverseMatrix: ClassVar[MObject] = ...
    parentMatrix: ClassVar[MObject] = ...
    underWorldObject: ClassVar[MObject] = ...
    useObjectColor: ClassVar[MObject] = ...
    visibility: ClassVar[MObject] = ...
    worldInverseMatrix: ClassVar[MObject] = ...
    worldMatrix: ClassVar[MObject] = ...
    worldPosition: ClassVar[MObject] = ...
    worldPositionX: ClassVar[MObject] = ...
    worldPositionY: ClassVar[MObject] = ...
    worldPositionZ: ClassVar[MObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def boundingBox(self, *args, **kwargs): ...
    def closestPoint(self, *args, **kwargs): ...
    def color(self, *args, **kwargs): ...
    def colorRGB(self, *args, **kwargs): ...
    def draw(self, *args, **kwargs): ...
    def drawLast(self, *args, **kwargs): ...
    def excludeAsLocator(self, *args, **kwargs): ...
    def getShapeSelectionMask(self, *args, **kwargs): ...
    def isBounded(self, *args, **kwargs): ...
    def isTransparent(self, *args, **kwargs): ...
    def useClosestPointForSelection(self, *args, **kwargs): ...

class MPxManipContainer(MPxNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def addCircleSweepManip(self, *args, **kwargs): ...
    def addCurveSegmentManip(self, *args, **kwargs): ...
    def addDirectionManip(self, *args, **kwargs): ...
    def addDiscManip(self, *args, **kwargs): ...
    def addDistanceManip(self, *args, **kwargs): ...
    def addFreePointTriadManip(self, *args, **kwargs): ...
    def addMPxManipulatorNode(self, *args, **kwargs): ...
    def addManipToPlugConversion(self, *args, **kwargs): ...
    def addPlugToInViewEditor(self, *args, **kwargs): ...
    def addPlugToManipConversion(self, *args, **kwargs): ...
    def addPointOnCurveManip(self, *args, **kwargs): ...
    def addPointOnSurfaceManip(self, *args, **kwargs): ...
    def addRotateManip(self, *args, **kwargs): ...
    def addScaleManip(self, *args, **kwargs): ...
    def addStateManip(self, *args, **kwargs): ...
    @staticmethod
    def addToManipConnectTable(*args, **kwargs): ...
    def addToggleManip(self, *args, **kwargs): ...
    def connectToDependNode(self, *args, **kwargs): ...
    def createChildren(self, *args, **kwargs): ...
    def doDrag(self, *args, **kwargs): ...
    def doPress(self, *args, **kwargs): ...
    def doRelease(self, *args, **kwargs): ...
    def draw(self, *args, **kwargs): ...
    def drawUI(self, *args, **kwargs): ...
    def finishAddingManips(self, *args, **kwargs): ...
    def getConverterManipDoubleValue(self, *args, **kwargs): ...
    def getConverterManipMEulerRotationValue(self, *args, **kwargs): ...
    def getConverterManipMMatrixValue(self, *args, **kwargs): ...
    def getConverterManipMPointValue(self, *args, **kwargs): ...
    def getConverterManipMTransformationMatrixValue(self, *args, **kwargs): ...
    def getConverterManipMVectorValue(self, *args, **kwargs): ...
    def getConverterManipUIntValue(self, *args, **kwargs): ...
    def getConverterManipValues(self, *args, **kwargs): ...
    def getConverterPlugDoubleValue(self, *args, **kwargs): ...
    def getConverterPlugMEulerRotationValue(self, *args, **kwargs): ...
    def getConverterPlugMMatrixValue(self, *args, **kwargs): ...
    def getConverterPlugMPointValue(self, *args, **kwargs): ...
    def getConverterPlugMVectorValue(self, *args, **kwargs): ...
    def getConverterPlugValues(self, *args, **kwargs): ...
    @staticmethod
    def initialize(*args, **kwargs): ...
    def isManipActive(self, *args, **kwargs): ...
    def manipToPlugConversion(self, *args, **kwargs): ...
    @staticmethod
    def newManipulator(*args, **kwargs): ...
    def plugToManipConversion(self, *args, **kwargs): ...
    def preDrawUI(self, *args, **kwargs): ...
    @staticmethod
    def removeFromManipConnectTable(*args, **kwargs): ...

class MPxManipulatorNode(MPxNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def addDependentPlug(self, *args, **kwargs): ...
    def addDoubleValue(self, *args, **kwargs): ...
    def addPointValue(self, *args, **kwargs): ...
    def addVectorValue(self, *args, **kwargs): ...
    def colorAndName(self, *args, **kwargs): ...
    def connectPlugToValue(self, *args, **kwargs): ...
    def connectToDependNode(self, *args, **kwargs): ...
    def dependentPlugsReset(self, *args, **kwargs): ...
    def deregisterForMouseMove(self, *args, **kwargs): ...
    def dimmedColor(self, *args, **kwargs): ...
    def doDrag(self, *args, **kwargs): ...
    def doMove(self, *args, **kwargs): ...
    def doPress(self, *args, **kwargs): ...
    def doRelease(self, *args, **kwargs): ...
    def draw(self, *args, **kwargs): ...
    def drawUI(self, *args, **kwargs): ...
    def finishAddingManips(self, *args, **kwargs): ...
    def getDoubleValue(self, *args, **kwargs): ...
    def getPointValue(self, *args, **kwargs): ...
    def getVectorValue(self, *args, **kwargs): ...
    def glActiveName(self, *args, **kwargs): ...
    def glFirstHandle(self, *args, **kwargs): ...
    def labelBackgroundColor(self, *args, **kwargs): ...
    def labelColor(self, *args, **kwargs): ...
    def lineColor(self, *args, **kwargs): ...
    def mainColor(self, *args, **kwargs): ...
    def mouseDown(self, *args, **kwargs): ...
    def mousePosition(self, *args, **kwargs): ...
    def mouseRay(self, *args, **kwargs): ...
    def mouseRayWorld(self, *args, **kwargs): ...
    def mouseUp(self, *args, **kwargs): ...
    @staticmethod
    def newManipulator(*args, **kwargs): ...
    def preDrawUI(self, *args, **kwargs): ...
    def prevColor(self, *args, **kwargs): ...
    def registerForMouseMove(self, *args, **kwargs): ...
    def selectedColor(self, *args, **kwargs): ...
    def setDoubleValue(self, *args, **kwargs): ...
    def setHandleColor(self, *args, **kwargs): ...
    def setPointValue(self, *args, **kwargs): ...
    def setVectorValue(self, *args, **kwargs): ...
    def shouldDrawHandleAsSelected(self, *args, **kwargs): ...
    def xColor(self, *args, **kwargs): ...
    def yColor(self, *args, **kwargs): ...
    def zColor(self, *args, **kwargs): ...

class MPxSelectionContext(MPxContext):
    def __init__(self, *args, **kwargs) -> None: ...
    def abortAction(self, *args, **kwargs): ...
    def addManipulator(self, *args, **kwargs): ...
    def argTypeNumericalInput(self, *args, **kwargs): ...
    def deleteManipulators(self, *args, **kwargs): ...
    def doDrag(self, *args, **kwargs): ...
    def doDragLegacy(self, *args, **kwargs): ...
    def doHold(self, *args, **kwargs): ...
    def doHoldLegacy(self, *args, **kwargs): ...
    def doPress(self, *args, **kwargs): ...
    def doPressLegacy(self, *args, **kwargs): ...
    def doRelease(self, *args, **kwargs): ...
    def doReleaseLegacy(self, *args, **kwargs): ...
    def feedbackNumericalInput(self, *args, **kwargs): ...
    def helpStateHasChanged(self, *args, **kwargs): ...
    def image(self, *args, **kwargs): ...
    def isSelecting(self, *args, **kwargs): ...
    def lastDragPoint(self, *args, **kwargs): ...
    def newToolCommand(self, *args, **kwargs): ...
    def processNumericalInput(self, *args, **kwargs): ...
    def setAllowDoubleClickAction(self, *args, **kwargs): ...
    def setAllowPaintSelect(self, *args, **kwargs): ...
    def setAllowPreSelectHilight(self, *args, **kwargs): ...
    def setAllowSoftSelect(self, *args, **kwargs): ...
    def setAllowSymmetry(self, *args, **kwargs): ...
    def setImage(self, *args, **kwargs): ...
    def startPoint(self, *args, **kwargs): ...

class MPxSurfaceShapeUI:
    kSelectMeshEdges: ClassVar[int] = ...
    kSelectMeshFaces: ClassVar[int] = ...
    kSelectMeshUVs: ClassVar[int] = ...
    kSelectMeshVerts: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def canDrawUV(self, *args, **kwargs): ...
    def drawUV(self, *args, **kwargs): ...
    def material(self, *args, **kwargs): ...
    def materials(self, *args, **kwargs): ...
    def select(self, *args, **kwargs): ...
    def selectUV(self, *args, **kwargs): ...
    def snap(self, *args, **kwargs): ...
    def surfaceShape(self, *args, **kwargs): ...
    @staticmethod
    def surfaceShapeUI(*args, **kwargs): ...

class MPxToolCommand(MPxCommand):
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel(self, *args, **kwargs): ...
    def doFinalize(self, *args, **kwargs): ...
    def doIt(self, *args, **kwargs): ...
    def finalize(self, *args, **kwargs): ...

class MSelectInfo(MDrawInfo):
    highestPriority: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addSelection(self, *args, **kwargs): ...
    def getAlignmentMatrix(self, *args, **kwargs): ...
    def getLocalRay(self, *args, **kwargs): ...
    def isRay(self, *args, **kwargs): ...
    def selectClosest(self, *args, **kwargs): ...
    def selectForHilite(self, *args, **kwargs): ...
    def selectOnHilitedOnly(self, *args, **kwargs): ...
    def selectPath(self, *args, **kwargs): ...
    def selectRect(self, *args, **kwargs): ...
    def selectable(self, *args, **kwargs): ...
    def selectableComponent(self, *args, **kwargs): ...
    def setSnapPoint(self, *args, **kwargs): ...
    def singleSelection(self, *args, **kwargs): ...
    def view(self, *args, **kwargs): ...

class MTextureEditorDrawInfo:
    kDrawEdgeForSelect: ClassVar[int] = ...
    kDrawEverything: ClassVar[int] = ...
    kDrawFacetForSelect: ClassVar[int] = ...
    kDrawFunctionFirst: ClassVar[int] = ...
    kDrawFunctionLast: ClassVar[int] = ...
    kDrawUVForSelect: ClassVar[int] = ...
    kDrawVertexForSelect: ClassVar[int] = ...
    kDrawWireframe: ClassVar[int] = ...
    drawingFunction: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MTimeSliderCustomDrawManager:
    kAbove: ClassVar[int] = ...
    kBelow: ClassVar[int] = ...
    kOn: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearDrawPrimitives(self, *args, **kwargs): ...
    def deregisterCustomDraw(self, *args, **kwargs): ...
    def registerCustomDrawOn(self, *args, **kwargs): ...
    def registerCustomDrawOutside(self, *args, **kwargs): ...
    def requestTimeSliderRedraw(self, *args, **kwargs): ...
    def setBackgroundColor(self, *args, **kwargs): ...
    def setDrawHeight(self, *args, **kwargs): ...
    def setDrawLayer(self, *args, **kwargs): ...
    def setDrawLocation(self, *args, **kwargs): ...
    def setDrawPrimitives(self, *args, **kwargs): ...
    def setDrawPriority(self, *args, **kwargs): ...
    def setDrawVisible(self, *args, **kwargs): ...
    def setEditPrimitiveFunction(self, *args, **kwargs): ...
    def setSetCopyPrimitivesFunction(self, *args, **kwargs): ...
    def setStartPrimitiveEditFunction(self, *args, **kwargs): ...
    def setStopPrimitiveEditFunction(self, *args, **kwargs): ...
    def setTooltip(self, *args, **kwargs): ...

class MTimeSliderDrawPrimitive:
    kBracket: ClassVar[int] = ...
    kFilledRect: ClassVar[int] = ...
    kFrameFlag: ClassVar[int] = ...
    kFullOutline: ClassVar[int] = ...
    kMoveEndTime: ClassVar[int] = ...
    kMovePrimitive: ClassVar[int] = ...
    kMoveStartTime: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kUpperOutline: ClassVar[int] = ...
    kVerticalLine: ClassVar[int] = ...
    bottom: Incomplete
    color: Incomplete
    drawType: Incomplete
    endTime: Incomplete
    height: Incomplete
    label: Incomplete
    priority: Incomplete
    startTime: Incomplete
    tooltip: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MUiMessage(MMessage):
    @staticmethod
    def add3dViewDestroyMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPostRenderMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPreRenderMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewRenderOverrideChangedCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewRendererChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addCameraChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addUiDeletedCallback(*args, **kwargs): ...

class RenderParameters:
    baseColor: Incomplete
    showAlphaMask: Incomplete
    unfiltered: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class ShaderContext:
    path: Incomplete
    shadingEngine: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
key: str
ourdict: dict
py2dict: dict
val: str
