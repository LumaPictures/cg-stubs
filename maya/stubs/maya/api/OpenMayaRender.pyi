from _typeshed import Incomplete
from typing import ClassVar

class MAttributeParameterMapping:
    def __init__(self, *args, **kwargs) -> None: ...
    def allowConnection(self, *args, **kwargs): ...
    def allowRename(self, *args, **kwargs): ...
    def attributeName(self, *args, **kwargs): ...
    def parameterName(self, *args, **kwargs): ...
    def resolvedParameterName(self, *args, **kwargs): ...

class MAttributeParameterMappingList:
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def findByAttributeName(self, *args, **kwargs): ...
    def findByParameterName(self, *args, **kwargs): ...

class MBlendState:
    kAdd: ClassVar[int] = ...
    kAlphaChannel: ClassVar[int] = ...
    kBlendFactor: ClassVar[int] = ...
    kBlueChannel: ClassVar[int] = ...
    kBothInvSourceAlpha: ClassVar[int] = ...
    kBothSourceAlpha: ClassVar[int] = ...
    kDestinationAlpha: ClassVar[int] = ...
    kDestinationColor: ClassVar[int] = ...
    kGreenChannel: ClassVar[int] = ...
    kInvBlendFactor: ClassVar[int] = ...
    kInvDestinationAlpha: ClassVar[int] = ...
    kInvDestinationColor: ClassVar[int] = ...
    kInvSourceAlpha: ClassVar[int] = ...
    kInvSourceColor: ClassVar[int] = ...
    kMax: ClassVar[int] = ...
    kMaxTargets: ClassVar[int] = ...
    kMin: ClassVar[int] = ...
    kNoChannels: ClassVar[int] = ...
    kOne: ClassVar[int] = ...
    kRGBAChannels: ClassVar[int] = ...
    kRGBChannels: ClassVar[int] = ...
    kRedChannel: ClassVar[int] = ...
    kReverseSubtract: ClassVar[int] = ...
    kSourceAlpha: ClassVar[int] = ...
    kSourceAlphaSat: ClassVar[int] = ...
    kSourceColor: ClassVar[int] = ...
    kSubtract: ClassVar[int] = ...
    kZero: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def desc(self, *args, **kwargs): ...
    def resourceHandle(self, *args, **kwargs): ...

class MBlendStateDesc:
    alphaToCoverageEnable: Incomplete
    blendFactor: Incomplete
    independentBlendEnable: Incomplete
    multiSampleMask: Incomplete
    targetBlends: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def setDefaults(self, *args, **kwargs): ...

class MCameraOverride:
    mCameraPath: Incomplete
    mFarClippingPlane: Incomplete
    mHiddenCameraList: Incomplete
    mNearClippingPlane: Incomplete
    mProjectionMatrix: Incomplete
    mUseFarClippingPlane: Incomplete
    mUseHiddenCameraList: Incomplete
    mUseNearClippingPlane: Incomplete
    mUseProjectionMatrix: Incomplete
    mUseViewMatrix: Incomplete
    mViewMatrix: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MClearOperation(MRenderOperation):
    kClearAll: ClassVar[int] = ...
    kClearColor: ClassVar[int] = ...
    kClearDepth: ClassVar[int] = ...
    kClearNone: ClassVar[int] = ...
    kClearStencil: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearColor(self, *args, **kwargs): ...
    def clearColor2(self, *args, **kwargs): ...
    def clearDepth(self, *args, **kwargs): ...
    def clearGradient(self, *args, **kwargs): ...
    def clearStencil(self, *args, **kwargs): ...
    def mask(self, *args, **kwargs): ...
    def overridesColors(self, *args, **kwargs): ...
    def setClearColor(self, *args, **kwargs): ...
    def setClearColor2(self, *args, **kwargs): ...
    def setClearDepth(self, *args, **kwargs): ...
    def setClearGradient(self, *args, **kwargs): ...
    def setClearStencil(self, *args, **kwargs): ...
    def setMask(self, *args, **kwargs): ...
    def setOverridesColors(self, *args, **kwargs): ...

class MColorManagementUtilities:
    @staticmethod
    def getColorTransformCacheIdForInputSpace(*args, **kwargs): ...
    @staticmethod
    def getColorTransformCacheIdForOutputTransform(*args, **kwargs): ...
    @staticmethod
    def getColorTransformData(*args, **kwargs): ...
    @staticmethod
    def isColorManagementAvailable(*args, **kwargs): ...
    @staticmethod
    def isColorManagementEnabled(*args, **kwargs): ...

class MComponentDataIndexing:
    kFaceVertex: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def componentType(self, *args, **kwargs): ...
    def indices(self, *args, **kwargs): ...
    def setComponentType(self, *args, **kwargs): ...

class MComponentDataIndexingList:
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...

class MDepthNormalizationDescription:
    fDepthBias: Incomplete
    fDepthScale: Incomplete
    fFarClipDistance: Incomplete
    fNearClipDistance: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MDepthStencilState:
    kDecrementStencil: ClassVar[int] = ...
    kDecrementStencilSat: ClassVar[int] = ...
    kIncrementStencil: ClassVar[int] = ...
    kIncrementStencilSat: ClassVar[int] = ...
    kInvertStencil: ClassVar[int] = ...
    kKeepStencil: ClassVar[int] = ...
    kReplaceStencil: ClassVar[int] = ...
    kZeroStencil: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def desc(self, *args, **kwargs): ...
    def resourceHandle(self, *args, **kwargs): ...

class MDepthStencilStateDesc:
    backFace: Incomplete
    depthEnable: Incomplete
    depthFunc: Incomplete
    depthWriteEnable: Incomplete
    frontFace: Incomplete
    stencilEnable: Incomplete
    stencilReadMask: Incomplete
    stencilReferenceVal: Incomplete
    stencilWriteMask: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def setDefaults(self, *args, **kwargs): ...

class MDrawContext(MFrameContext):
    kFilteredIgnoreLightLimit: ClassVar[int] = ...
    kFilteredToLightLimit: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copyCurrentColorRenderTarget(self, *args, **kwargs): ...
    def copyCurrentColorRenderTargetToTexture(self, *args, **kwargs): ...
    def copyCurrentDepthRenderTarget(self, *args, **kwargs): ...
    def copyCurrentDepthRenderTargetToTexture(self, *args, **kwargs): ...
    def getDepthRange(self, *args, **kwargs): ...
    def getFrameStamp(self, *args, **kwargs): ...
    def getFrustumBox(self, *args, **kwargs): ...
    def getLightInformation(self, *args, **kwargs): ...
    def getLightParameterInformation(self, *args, **kwargs): ...
    def getPassContext(self, *args, **kwargs): ...
    def getRenderTargetSize(self, *args, **kwargs): ...
    def getSceneBox(self, *args, **kwargs): ...
    def getStateManager(self, *args, **kwargs): ...
    def numberOfActiveLights(self, *args, **kwargs): ...
    def viewDirectionAlongNegZ(self, *args, **kwargs): ...

class MDrawRegistry:
    @staticmethod
    def deregisterComponentConverter(*args, **kwargs): ...
    @staticmethod
    def deregisterDrawOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def deregisterGeometryOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def deregisterImagePlaneOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def deregisterIndexBufferMutator(*args, **kwargs): ...
    @staticmethod
    def deregisterPrimitiveGenerator(*args, **kwargs): ...
    @staticmethod
    def deregisterShaderOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def deregisterShadingNodeOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def deregisterSubSceneOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def deregisterSurfaceShadingNodeOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def deregisterVertexBufferGenerator(*args, **kwargs): ...
    @staticmethod
    def deregisterVertexBufferMutator(*args, **kwargs): ...
    @staticmethod
    def registerComponentConverter(*args, **kwargs): ...
    @staticmethod
    def registerDrawOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def registerGeometryOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def registerImagePlaneOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def registerIndexBufferMutator(*args, **kwargs): ...
    @staticmethod
    def registerPrimitiveGenerator(*args, **kwargs): ...
    @staticmethod
    def registerShaderOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def registerShadingNodeOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def registerSubSceneOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def registerSurfaceShadingNodeOverrideCreator(*args, **kwargs): ...
    @staticmethod
    def registerVertexBufferGenerator(*args, **kwargs): ...
    @staticmethod
    def registerVertexBufferMutator(*args, **kwargs): ...

class MFragmentManager:
    kDomainShader: ClassVar[int] = ...
    kGeometryShader: ClassVar[int] = ...
    kHullConstantShader: ClassVar[int] = ...
    kHullShader: ClassVar[int] = ...
    kPixelShader: ClassVar[int] = ...
    kVertexShader: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addAutomaticShaderStageInput(self, *args, **kwargs): ...
    def addDomainShaderInputNameMapping(self, *args, **kwargs): ...
    def addFragmentGraphFromBuffer(self, *args, **kwargs): ...
    def addFragmentGraphFromFile(self, *args, **kwargs): ...
    def addFragmentPath(self, *args, **kwargs): ...
    def addShadeFragmentFromBuffer(self, *args, **kwargs): ...
    def addShadeFragmentFromFile(self, *args, **kwargs): ...
    def findDomainShaderInputName(self, *args, **kwargs): ...
    def fragmentList(self, *args, **kwargs): ...
    def getColorManagementFragmentInfo(self, *args, **kwargs): ...
    def getEffectOutputDirectory(self, *args, **kwargs): ...
    def getFragmentXML(self, *args, **kwargs): ...
    def getIntermediateGraphOutputDirectory(self, *args, **kwargs): ...
    def hasFragment(self, *args, **kwargs): ...
    def removeAutomaticShaderStageInput(self, *args, **kwargs): ...
    def removeDomainShaderInputNameMapping(self, *args, **kwargs): ...
    def removeFragment(self, *args, **kwargs): ...
    def setEffectOutputDirectory(self, *args, **kwargs): ...
    def setIntermediateGraphOutputDirectory(self, *args, **kwargs): ...

class MFrameContext:
    k2dViewport: ClassVar[int] = ...
    k3dViewport: ClassVar[int] = ...
    kAmbientLight: ClassVar[int] = ...
    kAmbientOcclusion: ClassVar[int] = ...
    kAntiAliasing: ClassVar[int] = ...
    kBackfaceCulling: ClassVar[int] = ...
    kBoundingBox: ClassVar[int] = ...
    kCustomLights: ClassVar[int] = ...
    kDefaultMaterial: ClassVar[int] = ...
    kDepthOfField: ClassVar[int] = ...
    kDepthPeeling: ClassVar[int] = ...
    kExcludeAll: ClassVar[int] = ...
    kExcludeCVs: ClassVar[int] = ...
    kExcludeCameras: ClassVar[int] = ...
    kExcludeClipGhosts: ClassVar[int] = ...
    kExcludeControllers: ClassVar[int] = ...
    kExcludeDeformers: ClassVar[int] = ...
    kExcludeDimensions: ClassVar[int] = ...
    kExcludeDynamicConstraints: ClassVar[int] = ...
    kExcludeDynamics: ClassVar[int] = ...
    kExcludeFluids: ClassVar[int] = ...
    kExcludeFollicles: ClassVar[int] = ...
    kExcludeGreasePencils: ClassVar[int] = ...
    kExcludeGrid: ClassVar[int] = ...
    kExcludeHUD: ClassVar[int] = ...
    kExcludeHairSystems: ClassVar[int] = ...
    kExcludeHoldOuts: ClassVar[int] = ...
    kExcludeHulls: ClassVar[int] = ...
    kExcludeIkHandles: ClassVar[int] = ...
    kExcludeImagePlane: ClassVar[int] = ...
    kExcludeJoints: ClassVar[int] = ...
    kExcludeLights: ClassVar[int] = ...
    kExcludeLocators: ClassVar[int] = ...
    kExcludeManipulators: ClassVar[int] = ...
    kExcludeMeshes: ClassVar[int] = ...
    kExcludeMotionTrails: ClassVar[int] = ...
    kExcludeNCloths: ClassVar[int] = ...
    kExcludeNParticles: ClassVar[int] = ...
    kExcludeNRigids: ClassVar[int] = ...
    kExcludeNone: ClassVar[int] = ...
    kExcludeNurbsCurves: ClassVar[int] = ...
    kExcludeNurbsSurfaces: ClassVar[int] = ...
    kExcludeParticleInstancers: ClassVar[int] = ...
    kExcludePivots: ClassVar[int] = ...
    kExcludePlanes: ClassVar[int] = ...
    kExcludePluginShapes: ClassVar[int] = ...
    kExcludeSelectHandles: ClassVar[int] = ...
    kExcludeStrokes: ClassVar[int] = ...
    kExcludeSubdivSurfaces: ClassVar[int] = ...
    kExcludeTextures: ClassVar[int] = ...
    kFlatShaded: ClassVar[int] = ...
    kFogExp: ClassVar[int] = ...
    kFogExp2: ClassVar[int] = ...
    kFogLinear: ClassVar[int] = ...
    kGammaCorrection: ClassVar[int] = ...
    kGouraudShaded: ClassVar[int] = ...
    kImage: ClassVar[int] = ...
    kLightDefault: ClassVar[int] = ...
    kMotionBlur: ClassVar[int] = ...
    kNoLighting: ClassVar[int] = ...
    kObjectSorting: ClassVar[int] = ...
    kProjectionInverseMtx: ClassVar[int] = ...
    kProjectionMtx: ClassVar[int] = ...
    kProjectionTranposeMtx: ClassVar[int] = ...
    kProjectionTranspInverseMtx: ClassVar[int] = ...
    kSceneLights: ClassVar[int] = ...
    kSelectedLights: ClassVar[int] = ...
    kSelectionHighlighting: ClassVar[int] = ...
    kShadeActiveOnly: ClassVar[int] = ...
    kSmoothWireframe: ClassVar[int] = ...
    kTextured: ClassVar[int] = ...
    kTwoSidedLighting: ClassVar[int] = ...
    kUnsorted: ClassVar[int] = ...
    kViewColorTransformEnabled: ClassVar[int] = ...
    kViewDirection: ClassVar[int] = ...
    kViewFarClipValue: ClassVar[int] = ...
    kViewInverseMtx: ClassVar[int] = ...
    kViewMtx: ClassVar[int] = ...
    kViewNearClipValue: ClassVar[int] = ...
    kViewPosition: ClassVar[int] = ...
    kViewProjInverseMtx: ClassVar[int] = ...
    kViewProjMtx: ClassVar[int] = ...
    kViewProjTranposeMtx: ClassVar[int] = ...
    kViewProjTranspInverseMtx: ClassVar[int] = ...
    kViewRight: ClassVar[int] = ...
    kViewTranspInverseMtx: ClassVar[int] = ...
    kViewTransposeMtx: ClassVar[int] = ...
    kViewUnnormalizedFarClipValue: ClassVar[int] = ...
    kViewUnnormlizedNearClipValue: ClassVar[int] = ...
    kViewUp: ClassVar[int] = ...
    kViewportPixelSize: ClassVar[int] = ...
    kWeightedAverage: ClassVar[int] = ...
    kWireFrame: ClassVar[int] = ...
    kWireFrameOnShadedNone: ClassVar[int] = ...
    kWireFrameOnShadedReduced: ClassVar[int] = ...
    kWireframeOnShadedFull: ClassVar[int] = ...
    kWorldInverseMtx: ClassVar[int] = ...
    kWorldMtx: ClassVar[int] = ...
    kWorldTranspInverseMtx: ClassVar[int] = ...
    kWorldTransposeMtx: ClassVar[int] = ...
    kWorldViewInverseMtx: ClassVar[int] = ...
    kWorldViewMtx: ClassVar[int] = ...
    kWorldViewProjInverseMtx: ClassVar[int] = ...
    kWorldViewProjMtx: ClassVar[int] = ...
    kWorldViewProjTranspInverseMtx: ClassVar[int] = ...
    kWorldViewProjTransposeMtx: ClassVar[int] = ...
    kWorldViewTranspInverseMtx: ClassVar[int] = ...
    kWorldViewTransposeMtx: ClassVar[int] = ...
    kXray: ClassVar[int] = ...
    kXrayActiveComponents: ClassVar[int] = ...
    kXrayJoint: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def classificationExclusions(self, *args, **kwargs): ...
    def getBackgroundParameters(self, *args, **kwargs): ...
    def getCurrentCameraPath(self, *args, **kwargs): ...
    def getCurrentColorRenderTarget(self, *args, **kwargs): ...
    def getCurrentDepthRenderTarget(self, *args, **kwargs): ...
    def getDOFParameters(self, *args, **kwargs): ...
    def getDisplayStyle(self, *args, **kwargs): ...
    def getEnvironmentParameters(self, *args, **kwargs): ...
    def getGlobalLineWidth(self, *args, **kwargs): ...
    def getHwFogParameters(self, *args, **kwargs): ...
    def getLightLimit(self, *args, **kwargs): ...
    def getLightingMode(self, *args, **kwargs): ...
    def getMatrix(self, *args, **kwargs): ...
    def getPostEffectEnabled(self, *args, **kwargs): ...
    def getRenderOverrideInformation(self, *args, **kwargs): ...
    def getTransparencyAlgorithm(self, *args, **kwargs): ...
    def getTuple(self, *args, **kwargs): ...
    def getViewportDimensions(self, *args, **kwargs): ...
    @staticmethod
    def inUserInteraction(*args, **kwargs): ...
    def objectTypeExclusions(self, *args, **kwargs): ...
    def renderingDestination(self, *args, **kwargs): ...
    @staticmethod
    def semanticToMatrixType(*args, **kwargs): ...
    @staticmethod
    def semanticToTupleType(*args, **kwargs): ...
    @staticmethod
    def shadeTemplates(*args, **kwargs): ...
    @staticmethod
    def userChangingViewContext(*args, **kwargs): ...
    @staticmethod
    def wireOnShadedMode(*args, **kwargs): ...

class MGeometry:
    kAdjacentLineStrip: ClassVar[int] = ...
    kAdjacentLines: ClassVar[int] = ...
    kAdjacentTriangleStrip: ClassVar[int] = ...
    kAdjacentTriangles: ClassVar[int] = ...
    kAll: ClassVar[int] = ...
    kBitangent: ClassVar[int] = ...
    kBoundingBox: ClassVar[int] = ...
    kChar: ClassVar[int] = ...
    kColor: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    kInt16: ClassVar[int] = ...
    kInt32: ClassVar[int] = ...
    kInvalidPrimitive: ClassVar[int] = ...
    kInvalidSemantic: ClassVar[int] = ...
    kInvalidType: ClassVar[int] = ...
    kLineStrip: ClassVar[int] = ...
    kLines: ClassVar[int] = ...
    kNormal: ClassVar[int] = ...
    kPatch: ClassVar[int] = ...
    kPoints: ClassVar[int] = ...
    kPosition: ClassVar[int] = ...
    kSelectionHighlighting: ClassVar[int] = ...
    kSelectionOnly: ClassVar[int] = ...
    kShaded: ClassVar[int] = ...
    kTangent: ClassVar[int] = ...
    kTangentWithSign: ClassVar[int] = ...
    kTexture: ClassVar[int] = ...
    kTextured: ClassVar[int] = ...
    kTriangleStrip: ClassVar[int] = ...
    kTriangles: ClassVar[int] = ...
    kUnsignedChar: ClassVar[int] = ...
    kUnsignedInt16: ClassVar[int] = ...
    kUnsignedInt32: ClassVar[int] = ...
    kWireframe: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addIndexBuffer(self, *args, **kwargs): ...
    def addVertexBuffer(self, *args, **kwargs): ...
    def createIndexBuffer(self, *args, **kwargs): ...
    def createVertexBuffer(self, *args, **kwargs): ...
    @staticmethod
    def dataTypeString(*args, **kwargs): ...
    def deleteIndexBuffer(self, *args, **kwargs): ...
    def deleteVertexBuffer(self, *args, **kwargs): ...
    @staticmethod
    def drawModeString(*args, **kwargs): ...
    def indexBuffer(self, *args, **kwargs): ...
    def indexBufferCount(self, *args, **kwargs): ...
    @staticmethod
    def primitiveString(*args, **kwargs): ...
    @staticmethod
    def semanticString(*args, **kwargs): ...
    def vertexBuffer(self, *args, **kwargs): ...
    def vertexBufferCount(self, *args, **kwargs): ...

class MGeometryExtractor:
    kPolyGeom_BaseMesh: ClassVar[int] = ...
    kPolyGeom_Normal: ClassVar[int] = ...
    kPolyGeom_NotSharing: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def minimumBufferSize(*args, **kwargs): ...
    def populateIndexBuffer(self, *args, **kwargs): ...
    def populateVertexBuffer(self, *args, **kwargs): ...
    def primitiveCount(self, *args, **kwargs): ...
    def vertexCount(self, *args, **kwargs): ...

class MGeometryIndexMapping:
    def __init__(self, *args, **kwargs) -> None: ...
    def component(self, *args, **kwargs): ...
    def dagPath(self, *args, **kwargs): ...
    def geometryCount(self, *args, **kwargs): ...
    def indexLength(self, *args, **kwargs): ...
    def indexStart(self, *args, **kwargs): ...

class MGeometryRequirements:
    def __init__(self, *args, **kwargs) -> None: ...
    def addIndexingRequirement(self, *args, **kwargs): ...
    def addVertexRequirement(self, *args, **kwargs): ...
    def indexingRequirements(self, *args, **kwargs): ...
    def vertexRequirements(self, *args, **kwargs): ...

class MGeometryUtilities:
    kActive: ClassVar[int] = ...
    kActiveAffected: ClassVar[int] = ...
    kActiveComponent: ClassVar[int] = ...
    kActiveTemplate: ClassVar[int] = ...
    kDefaultCube: ClassVar[int] = ...
    kDefaultPlane: ClassVar[int] = ...
    kDefaultSphere: ClassVar[int] = ...
    kDormant: ClassVar[int] = ...
    kHilite: ClassVar[int] = ...
    kIntermediateObject: ClassVar[int] = ...
    kInvisible: ClassVar[int] = ...
    kLead: ClassVar[int] = ...
    kLive: ClassVar[int] = ...
    kNoStatus: ClassVar[int] = ...
    kTemplate: ClassVar[int] = ...
    @staticmethod
    def acquireReferenceGeometry(*args, **kwargs): ...
    @staticmethod
    def displayStatus(*args, **kwargs): ...
    @staticmethod
    def releaseReferenceGeometry(*args, **kwargs): ...
    @staticmethod
    def wireframeColor(*args, **kwargs): ...

class MHUDRender(MRenderOperation):
    def __init__(self, *args, **kwargs) -> None: ...
    def addUIDrawables(self, *args, **kwargs): ...
    def hasUIDrawables(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...

class MIndexBuffer:
    def __init__(self, *args, **kwargs) -> None: ...
    def acquire(self, *args, **kwargs): ...
    def commit(self, *args, **kwargs): ...
    def dataType(self, *args, **kwargs): ...
    def hasCustomResourceHandle(self, *args, **kwargs): ...
    def lockResourceHandle(self, *args, **kwargs): ...
    def map(self, *args, **kwargs): ...
    def resourceHandle(self, *args, **kwargs): ...
    def setResourceHandle(self, *args, **kwargs): ...
    def size(self, *args, **kwargs): ...
    def unload(self, *args, **kwargs): ...
    def unlockResourceHandle(self, *args, **kwargs): ...
    def unmap(self, *args, **kwargs): ...
    def update(self, *args, **kwargs): ...

class MIndexBufferDescriptor:
    kControlVertex: ClassVar[int] = ...
    kCustom: ClassVar[int] = ...
    kEdgeLine: ClassVar[int] = ...
    kEditPoint: ClassVar[int] = ...
    kFaceCenter: ClassVar[int] = ...
    kHullEdgeCenter: ClassVar[int] = ...
    kHullEdgeLine: ClassVar[int] = ...
    kHullFaceCenter: ClassVar[int] = ...
    kHullTriangle: ClassVar[int] = ...
    kHullUV: ClassVar[int] = ...
    kSubDivEdge: ClassVar[int] = ...
    kTangent: ClassVar[int] = ...
    kTriangle: ClassVar[int] = ...
    kTriangleEdge: ClassVar[int] = ...
    kVertexPoint: ClassVar[int] = ...
    component: Incomplete
    dataType: Incomplete
    indexType: Incomplete
    name: Incomplete
    primitive: Incomplete
    primitiveStride: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MIndexBufferDescriptorList:
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...

class MInitContext:
    dagPath: Incomplete
    shader: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MInitFeedback:
    customData: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MIntersection:
    barycentricCoordinates: Incomplete
    edgeInterpolantValue: Incomplete
    index: Incomplete
    instanceID: Incomplete
    intersectionPoint: Incomplete
    selectionLevel: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MLightParameterInformation:
    kBoolean: ClassVar[int] = ...
    kColor: ClassVar[int] = ...
    kCosConeAngle: ClassVar[int] = ...
    kDecayRate: ClassVar[int] = ...
    kDepthRange: ClassVar[int] = ...
    kDropoff: ClassVar[int] = ...
    kEmitsDiffuse: ClassVar[int] = ...
    kEmitsSpecular: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    kFloat2: ClassVar[int] = ...
    kFloat3: ClassVar[int] = ...
    kFloat4: ClassVar[int] = ...
    kFloat4x4Col: ClassVar[int] = ...
    kFloat4x4Row: ClassVar[int] = ...
    kGlobalShadowOn: ClassVar[int] = ...
    kInteger: ClassVar[int] = ...
    kIntensity: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kIrradianceIn: ClassVar[int] = ...
    kLightEnabled: ClassVar[int] = ...
    kNoSemantic: ClassVar[int] = ...
    kSampler: ClassVar[int] = ...
    kShadowBias: ClassVar[int] = ...
    kShadowColor: ClassVar[int] = ...
    kShadowDirty: ClassVar[int] = ...
    kShadowMap: ClassVar[int] = ...
    kShadowMapSize: ClassVar[int] = ...
    kShadowOn: ClassVar[int] = ...
    kShadowSamp: ClassVar[int] = ...
    kShadowViewProj: ClassVar[int] = ...
    kStartShadowParameters: ClassVar[int] = ...
    kTexture2: ClassVar[int] = ...
    kTextureCube: ClassVar[int] = ...
    kWorldDirection: ClassVar[int] = ...
    kWorldPosition: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def arrayParameterCount(self, *args, **kwargs): ...
    def getParameter(self, *args, **kwargs): ...
    def getParameterTextureHandle(self, *args, **kwargs): ...
    def lightPath(self, *args, **kwargs): ...
    def lightType(self, *args, **kwargs): ...
    def parameterList(self, *args, **kwargs): ...
    def parameterNames(self, *args, **kwargs): ...
    def parameterSemantic(self, *args, **kwargs): ...
    def parameterType(self, *args, **kwargs): ...

class MPassContext:
    kBeginRenderSemantic: ClassVar[str] = ...
    kBeginSceneRenderSemantic: ClassVar[str] = ...
    kColorPassSemantic: ClassVar[str] = ...
    kCullBackSemantic: ClassVar[str] = ...
    kCullFrontSemantic: ClassVar[str] = ...
    kDOFPassSemantic: ClassVar[str] = ...
    kDepthPassSemantic: ClassVar[str] = ...
    kEndRenderSemantic: ClassVar[str] = ...
    kEndSceneRenderSemantic: ClassVar[str] = ...
    kMaterialOverrideSemantic: ClassVar[str] = ...
    kMotionVectorPassSemantic: ClassVar[str] = ...
    kNonPEPatternPassSemantic: ClassVar[str] = ...
    kNormalDepthPassSemantic: ClassVar[str] = ...
    kOpaqueGeometrySemantic: ClassVar[str] = ...
    kOpaqueUISemantic: ClassVar[str] = ...
    kPEPatternPassSemantic: ClassVar[str] = ...
    kPostUIGeometrySemantic: ClassVar[str] = ...
    kPreUIGeometrySemantic: ClassVar[str] = ...
    kSelectionPassSemantic: ClassVar[str] = ...
    kShadowPassSemantic: ClassVar[str] = ...
    kTransparentGeometrySemantic: ClassVar[str] = ...
    kTransparentPeelAndAvgSemantic: ClassVar[str] = ...
    kTransparentPeelSemantic: ClassVar[str] = ...
    kTransparentUISemantic: ClassVar[str] = ...
    kTransparentWeightedAvgSemantic: ClassVar[str] = ...
    kUIGeometrySemantic: ClassVar[str] = ...
    kUserPassSemantic: ClassVar[str] = ...
    kXrayUISemantic: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def hasShaderOverride(self, *args, **kwargs): ...
    def passIdentifier(self, *args, **kwargs): ...
    def passSemantics(self, *args, **kwargs): ...
    def shaderOverrideInstance(self, *args, **kwargs): ...

class MPresentTarget(MRenderOperation):
    kCenterBuffer: ClassVar[int] = ...
    kLeftBuffer: ClassVar[int] = ...
    kRightBuffer: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def presentDepth(self, *args, **kwargs): ...
    def setPresentDepth(self, *args, **kwargs): ...
    def setTargetBackBuffer(self, *args, **kwargs): ...
    def targetBackBuffer(self, *args, **kwargs): ...

class MPxComponentConverter:
    def __init__(self, *args, **kwargs) -> None: ...
    def addIntersection(self, *args, **kwargs): ...
    def component(self, *args, **kwargs): ...
    def initialize(self, *args, **kwargs): ...
    def selectionMask(self, *args, **kwargs): ...

class MPxDrawOverride:
    def __init__(self, *args, **kwargs) -> None: ...
    def addUIDrawables(self, *args, **kwargs): ...
    def boundingBox(self, *args, **kwargs): ...
    def disableInternalBoundingBoxDraw(self, *args, **kwargs): ...
    def excludedFromPostEffects(self, *args, **kwargs): ...
    def handleTraceMessage(self, *args, **kwargs): ...
    def hasUIDrawables(self, *args, **kwargs): ...
    def isBounded(self, *args, **kwargs): ...
    def isTransparent(self, *args, **kwargs): ...
    @staticmethod
    def pointSnappingActive(*args, **kwargs): ...
    def prepareForDraw(self, *args, **kwargs): ...
    def refineSelectionPath(self, *args, **kwargs): ...
    def supportedDrawAPIs(self, *args, **kwargs): ...
    def traceCallSequence(self, *args, **kwargs): ...
    def transform(self, *args, **kwargs): ...
    def updateSelectionGranularity(self, *args, **kwargs): ...
    def userSelect(self, *args, **kwargs): ...
    def wantUserSelection(self, *args, **kwargs): ...

class MPxGeometryOverride:
    def __init__(self, *args, **kwargs) -> None: ...
    def addUIDrawables(self, *args, **kwargs): ...
    def cleanUp(self, *args, **kwargs): ...
    def configCache(self, *args, **kwargs): ...
    def getFrameContext(self, *args, **kwargs): ...
    def handleTraceMessage(self, *args, **kwargs): ...
    def hasUIDrawables(self, *args, **kwargs): ...
    def isIndexingDirty(self, *args, **kwargs): ...
    def isStreamDirty(self, *args, **kwargs): ...
    @staticmethod
    def pointSnappingActive(*args, **kwargs): ...
    def populateGeometry(self, *args, **kwargs): ...
    def refineSelectionPath(self, *args, **kwargs): ...
    def requiresGeometryUpdate(self, *args, **kwargs): ...
    def requiresUpdateRenderItems(self, *args, **kwargs): ...
    def supportedDrawAPIs(self, *args, **kwargs): ...
    def supportsEvaluationManagerParallelUpdate(self, *args, **kwargs): ...
    def supportsVP2CustomCaching(self, *args, **kwargs): ...
    def traceCallSequence(self, *args, **kwargs): ...
    def updateDG(self, *args, **kwargs): ...
    def updateRenderItems(self, *args, **kwargs): ...
    def updateSelectionGranularity(self, *args, **kwargs): ...

class MPxImagePlaneOverride:
    def __init__(self, *args, **kwargs) -> None: ...
    def supportedDrawAPIs(self, *args, **kwargs): ...

class MPxIndexBufferMutator:
    def __init__(self, *args, **kwargs) -> None: ...
    def mutateIndexing(self, *args, **kwargs): ...

class MPxPrimitiveGenerator:
    def __init__(self, *args, **kwargs) -> None: ...
    def computeIndexCount(self, *args, **kwargs): ...
    def generateIndexing(self, *args, **kwargs): ...

class MPxShaderOverride:
    def __init__(self, *args, **kwargs) -> None: ...
    def activateKey(self, *args, **kwargs): ...
    def addGeometryRequirement(self, *args, **kwargs): ...
    def addGeometryRequirements(self, *args, **kwargs): ...
    def addIndexingRequirement(self, *args, **kwargs): ...
    def addShaderSignature(self, *args, **kwargs): ...
    def boundingBoxExtraScale(self, *args, **kwargs): ...
    def draw(self, *args, **kwargs): ...
    def drawGeometry(self, *args, **kwargs): ...
    def endUpdate(self, *args, **kwargs): ...
    def handlesConsolidatedGeometry(self, *args, **kwargs): ...
    def handlesDraw(self, *args, **kwargs): ...
    def initialize(self, *args, **kwargs): ...
    def initialize2(self, *args, **kwargs): ...
    def isTransparent(self, *args, **kwargs): ...
    def nonTexturedShaderInstance(self, *args, **kwargs): ...
    def overridesDrawState(self, *args, **kwargs): ...
    def overridesNonMaterialItems(self, *args, **kwargs): ...
    def rebuildAlways(self, *args, **kwargs): ...
    def setGeometryRequirements(self, *args, **kwargs): ...
    def shaderInstance(self, *args, **kwargs): ...
    def supportedDrawAPIs(self, *args, **kwargs): ...
    def supportsAdvancedTransparency(self, *args, **kwargs): ...
    def terminateKey(self, *args, **kwargs): ...
    def updateDG(self, *args, **kwargs): ...
    def updateDevice(self, *args, **kwargs): ...

class MPxShadingNodeOverride:
    def __init__(self, *args, **kwargs) -> None: ...
    def allowConnections(self, *args, **kwargs): ...
    def fragmentName(self, *args, **kwargs): ...
    def getCustomMappings(self, *args, **kwargs): ...
    def outputForConnection(self, *args, **kwargs): ...
    def supportedDrawAPIs(self, *args, **kwargs): ...
    def updateDG(self, *args, **kwargs): ...
    def updateShader(self, *args, **kwargs): ...
    def valueChangeRequiresFragmentRebuild(self, *args, **kwargs): ...

class MPxSubSceneOverride:
    def __init__(self, *args, **kwargs) -> None: ...
    def addInstanceTransform(self, *args, **kwargs): ...
    def addUIDrawables(self, *args, **kwargs): ...
    def areUIDrawablesDirty(self, *args, **kwargs): ...
    def furtherUpdateRequired(self, *args, **kwargs): ...
    def getInstancedSelectionPath(self, *args, **kwargs): ...
    def getSelectionPath(self, *args, **kwargs): ...
    def hasUIDrawables(self, *args, **kwargs): ...
    @staticmethod
    def pointSnappingActive(*args, **kwargs): ...
    def removeAllInstances(self, *args, **kwargs): ...
    def removeExtraInstanceData(self, *args, **kwargs): ...
    def removeInstance(self, *args, **kwargs): ...
    def requiresUpdate(self, *args, **kwargs): ...
    def setAllowTransparentInstances(self, *args, **kwargs): ...
    def setExtraInstanceData(self, *args, **kwargs): ...
    def setGeometryForRenderItem(self, *args, **kwargs): ...
    def setInstanceTransformArray(self, *args, **kwargs): ...
    def supportedDrawAPIs(self, *args, **kwargs): ...
    def update(self, *args, **kwargs): ...
    def updateInstanceTransform(self, *args, **kwargs): ...
    def updateSelectionGranularity(self, *args, **kwargs): ...

class MPxSurfaceShadingNodeOverride(MPxShadingNodeOverride):
    def __init__(self, *args, **kwargs) -> None: ...
    def bumpAttribute(self, *args, **kwargs): ...
    def primaryColorParameter(self, *args, **kwargs): ...
    def transparencyParameter(self, *args, **kwargs): ...

class MPxVertexBufferGenerator:
    def __init__(self, *args, **kwargs) -> None: ...
    def createVertexStream(self, *args, **kwargs): ...
    def getSourceIndexing(self, *args, **kwargs): ...
    def getSourceStreams(self, *args, **kwargs): ...

class MPxVertexBufferMutator:
    def __init__(self, *args, **kwargs) -> None: ...
    def modifyVertexStream(self, *args, **kwargs): ...

class MQuadRender(MRenderOperation):
    mClearOperation: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def blendStateOverride(self, *args, **kwargs): ...
    def clearOperation(self, *args, **kwargs): ...
    def depthStencilStateOverride(self, *args, **kwargs): ...
    def rasterizerStateOverride(self, *args, **kwargs): ...
    def shader(self, *args, **kwargs): ...

class MRasterizerState:
    kCullBack: ClassVar[int] = ...
    kCullFront: ClassVar[int] = ...
    kCullNone: ClassVar[int] = ...
    kFillSolid: ClassVar[int] = ...
    kFillWireFrame: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def desc(self, *args, **kwargs): ...
    def resourceHandle(self, *args, **kwargs): ...

class MRasterizerStateDesc:
    antialiasedLineEnable: Incomplete
    cullMode: Incomplete
    depthBias: Incomplete
    depthBiasClamp: Incomplete
    depthBiasIsFloat: Incomplete
    depthClipEnable: Incomplete
    fillMode: Incomplete
    frontCounterClockwise: Incomplete
    multiSampleEnable: Incomplete
    scissorEnable: Incomplete
    slopeScaledDepthBias: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def setDefaults(self, *args, **kwargs): ...

class MRenderItem:
    DecorationItem: ClassVar[int] = ...
    DrawOnlyWhenDefaultMaterialActive: ClassVar[int] = ...
    IgnoreDefaultMaterialMode: ClassVar[int] = ...
    InternalItem: ClassVar[int] = ...
    InternalMaterialItem: ClassVar[int] = ...
    InternalTexturedMaterialItem: ClassVar[int] = ...
    InternalUnsupportedMaterialItem: ClassVar[int] = ...
    MaterialSceneItem: ClassVar[int] = ...
    NonMaterialSceneItem: ClassVar[int] = ...
    OverrideNonMaterialItem: ClassVar[int] = ...
    SkipWhenDefaultMaterialActive: ClassVar[int] = ...
    sActiveLineDepthPriority: ClassVar[int] = ...
    sActivePointDepthPriority: ClassVar[int] = ...
    sActiveWireDepthPriority: ClassVar[int] = ...
    sDormantFilledDepthPriority: ClassVar[int] = ...
    sDormantPointDepthPriority: ClassVar[int] = ...
    sDormantWireDepthPriority: ClassVar[int] = ...
    sHiliteWireDepthPriority: ClassVar[int] = ...
    sSelectionDepthPriority: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def allowIsolateSelectCopy(self, *args, **kwargs): ...
    def associateWithIndexBuffer(self, *args, **kwargs): ...
    def availableShaderParameters(self, *args, **kwargs): ...
    def boundingBox(self, *args, **kwargs): ...
    def castsShadows(self, *args, **kwargs): ...
    def component(self, *args, **kwargs): ...
    @staticmethod
    def create(*args, **kwargs): ...
    def customData(self, *args, **kwargs): ...
    def depthPriority(self, *args, **kwargs): ...
    @staticmethod
    def destroy(*args, **kwargs): ...
    def drawMode(self, *args, **kwargs): ...
    def enable(self, *args, **kwargs): ...
    def excludedFromDefaultMaterialOverride(self, *args, **kwargs): ...
    def excludedFromPostEffects(self, *args, **kwargs): ...
    def geometry(self, *args, **kwargs): ...
    def getCustomData(self, *args, **kwargs): ...
    def getDefaultMaterialHandling(self, *args, **kwargs): ...
    def getShader(self, *args, **kwargs): ...
    def getShaderParameters(self, *args, **kwargs): ...
    def isCompatibleWithMayaInstancer(self, *args, **kwargs): ...
    def isConsolidated(self, *args, **kwargs): ...
    def isEnabled(self, *args, **kwargs): ...
    def isIsolateSelectCopy(self, *args, **kwargs): ...
    def isShaderFromNode(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...
    def objectTypeExclusionFlag(self, *args, **kwargs): ...
    def primitive(self, *args, **kwargs): ...
    def primitiveAndStride(self, *args, **kwargs): ...
    def receivesShadows(self, *args, **kwargs): ...
    def requiredVertexBuffers(self, *args, **kwargs): ...
    def selectionMask(self, *args, **kwargs): ...
    def setAllowIsolateSelectCopy(self, *args, **kwargs): ...
    def setBoundingBox(self, *args, **kwargs): ...
    def setCastsShadows(self, *args, **kwargs): ...
    def setCompatibleWithMayaInstancer(self, *args, **kwargs): ...
    def setCustomData(self, *args, **kwargs): ...
    def setDefaultMaterialHandling(self, *args, **kwargs): ...
    def setDepthPriority(self, *args, **kwargs): ...
    def setDrawMode(self, *args, **kwargs): ...
    def setExcludedFromDefaultMaterialOverride(self, *args, **kwargs): ...
    def setExcludedFromPostEffects(self, *args, **kwargs): ...
    def setMatrix(self, *args, **kwargs): ...
    def setObjectTypeExclusionFlag(self, *args, **kwargs): ...
    def setPrimitive(self, *args, **kwargs): ...
    def setReceivesShadows(self, *args, **kwargs): ...
    def setSelectionMask(self, *args, **kwargs): ...
    def setShader(self, *args, **kwargs): ...
    def setShaderFromNode(self, *args, **kwargs): ...
    def setTreatAsTransparent(self, *args, **kwargs): ...
    def setWantConsolidation(self, *args, **kwargs): ...
    def setWantSubSceneConsolidation(self, *args, **kwargs): ...
    def shadingComponent(self, *args, **kwargs): ...
    def sourceDagPath(self, *args, **kwargs): ...
    def sourceIndexMapping(self, *args, **kwargs): ...
    def type(self, *args, **kwargs): ...
    def wantConsolidation(self, *args, **kwargs): ...
    def wantSubSceneConsolidation(self, *args, **kwargs): ...

class MRenderItemList:
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def indexOf(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...

class MRenderOperation:
    kClear: ClassVar[int] = ...
    kDataServer: ClassVar[int] = ...
    kHUDRender: ClassVar[int] = ...
    kPresentTarget: ClassVar[int] = ...
    kQuadRender: ClassVar[int] = ...
    kSceneRender: ClassVar[int] = ...
    kUserDefined: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def enableSRGBWrite(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...
    def operationType(self, *args, **kwargs): ...
    def targetOverrideList(self, *args, **kwargs): ...
    def viewportRectangleOverride(self, *args, **kwargs): ...

class MRenderOverride:
    def __init__(self, *args, **kwargs) -> None: ...
    def cleanup(self, *args, **kwargs): ...
    def getFrameContext(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...
    def nextRenderOperation(self, *args, **kwargs): ...
    def renderOperation(self, *args, **kwargs): ...
    def select(self, *args, **kwargs): ...
    def setup(self, *args, **kwargs): ...
    def startOperationIterator(self, *args, **kwargs): ...
    def supportedDrawAPIs(self, *args, **kwargs): ...
    def uiName(self, *args, **kwargs): ...

class MRenderParameters:
    def __init__(self, *args, **kwargs) -> None: ...
    def getParameter(self, *args, **kwargs): ...
    def isArrayParameter(self, *args, **kwargs): ...
    def parameterList(self, *args, **kwargs): ...
    def parameterType(self, *args, **kwargs): ...
    def semantic(self, *args, **kwargs): ...
    def setArrayParameter(self, *args, **kwargs): ...
    def setParameter(self, *args, **kwargs): ...

class MRenderProfile:
    kMayaD3D: ClassVar[int] = ...
    kMayaOpenGL: ClassVar[int] = ...
    kMayaSoftware: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addRenderer(self, *args, **kwargs): ...
    def hasRenderer(self, *args, **kwargs): ...
    def numberOfRenderers(self, *args, **kwargs): ...

class MRenderTarget:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def freeRawData(*args, **kwargs): ...
    def rawData(self, *args, **kwargs): ...
    def resourceHandle(self, *args, **kwargs): ...
    def targetDescription(self, *args, **kwargs): ...
    def updateDescription(self, *args, **kwargs): ...

class MRenderTargetAssignment:
    target: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MRenderTargetDescription:
    def __init__(self, *args, **kwargs) -> None: ...
    def allowsUnorderedAccess(self, *args, **kwargs): ...
    def arraySliceCount(self, *args, **kwargs): ...
    def compatibleWithDescription(self, *args, **kwargs): ...
    def height(self, *args, **kwargs): ...
    def isCubeMap(self, *args, **kwargs): ...
    def multiSampleCount(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...
    def rasterFormat(self, *args, **kwargs): ...
    def setAllowsUnorderedAccess(self, *args, **kwargs): ...
    def setArraySliceCount(self, *args, **kwargs): ...
    def setHeight(self, *args, **kwargs): ...
    def setIsCubeMap(self, *args, **kwargs): ...
    def setMultiSampleCount(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setRasterFormat(self, *args, **kwargs): ...
    def setWidth(self, *args, **kwargs): ...
    def width(self, *args, **kwargs): ...

class MRenderTargetManager:
    def __init__(self, *args, **kwargs) -> None: ...
    def acquireRenderTarget(self, *args, **kwargs): ...
    def acquireRenderTargetFromScreen(self, *args, **kwargs): ...
    def formatSupportsSRGBWrite(self, *args, **kwargs): ...
    def releaseRenderTarget(self, *args, **kwargs): ...

class MRenderUtilities:
    kAmbientLight: ClassVar[int] = ...
    kDefaultLights: ClassVar[int] = ...
    kOrthogonalCameraCloseUp: ClassVar[int] = ...
    kOrthogonalCameraWithMargin: ClassVar[int] = ...
    kPerspectiveCamera: ClassVar[int] = ...
    kSwatchLight: ClassVar[int] = ...
    @staticmethod
    def acquireSwatchDrawContext(*args, **kwargs): ...
    @staticmethod
    def acquireUVTextureDrawContext(*args, **kwargs): ...
    @staticmethod
    def blitTargetToGL(*args, **kwargs): ...
    @staticmethod
    def blitTargetToImage(*args, **kwargs): ...
    @staticmethod
    def drawSimpleMesh(*args, **kwargs): ...
    @staticmethod
    def releaseDrawContext(*args, **kwargs): ...
    @staticmethod
    def renderMaterialViewerGeometry(*args, **kwargs): ...
    @staticmethod
    def swatchBackgroundColor(*args, **kwargs): ...

class MRenderer:
    kA8: ClassVar[int] = ...
    kA8B8G8R8: ClassVar[int] = ...
    kAllDevices: ClassVar[int] = ...
    kB5G5R5A1: ClassVar[int] = ...
    kB5G6R5: ClassVar[int] = ...
    kB8G8R8A8: ClassVar[int] = ...
    kB8G8R8X8: ClassVar[int] = ...
    kBC6H_SF16: ClassVar[int] = ...
    kBC6H_UF16: ClassVar[int] = ...
    kBC7_UNORM: ClassVar[int] = ...
    kBC7_UNORM_SRGB: ClassVar[int] = ...
    kD24S8: ClassVar[int] = ...
    kD24X8: ClassVar[int] = ...
    kD32_FLOAT: ClassVar[int] = ...
    kDXT1_UNORM: ClassVar[int] = ...
    kDXT1_UNORM_SRGB: ClassVar[int] = ...
    kDXT2_UNORM: ClassVar[int] = ...
    kDXT2_UNORM_PREALPHA: ClassVar[int] = ...
    kDXT2_UNORM_SRGB: ClassVar[int] = ...
    kDXT3_UNORM: ClassVar[int] = ...
    kDXT3_UNORM_PREALPHA: ClassVar[int] = ...
    kDXT3_UNORM_SRGB: ClassVar[int] = ...
    kDXT4_SNORM: ClassVar[int] = ...
    kDXT4_UNORM: ClassVar[int] = ...
    kDXT5_SNORM: ClassVar[int] = ...
    kDXT5_UNORM: ClassVar[int] = ...
    kDirectX11: ClassVar[int] = ...
    kL16: ClassVar[int] = ...
    kL8: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kNumberOfRasterFormats: ClassVar[int] = ...
    kOpenGL: ClassVar[int] = ...
    kOpenGLCoreProfile: ClassVar[int] = ...
    kR10G10B10A2_UINT: ClassVar[int] = ...
    kR10G10B10A2_UNORM: ClassVar[int] = ...
    kR16G16B16A16_FLOAT: ClassVar[int] = ...
    kR16G16B16A16_SINT: ClassVar[int] = ...
    kR16G16B16A16_SNORM: ClassVar[int] = ...
    kR16G16B16A16_UINT: ClassVar[int] = ...
    kR16G16B16A16_UNORM: ClassVar[int] = ...
    kR16G16_FLOAT: ClassVar[int] = ...
    kR16G16_SINT: ClassVar[int] = ...
    kR16G16_SNORM: ClassVar[int] = ...
    kR16G16_UINT: ClassVar[int] = ...
    kR16G16_UNORM: ClassVar[int] = ...
    kR16_FLOAT: ClassVar[int] = ...
    kR16_SINT: ClassVar[int] = ...
    kR16_SNORM: ClassVar[int] = ...
    kR16_UINT: ClassVar[int] = ...
    kR16_UNORM: ClassVar[int] = ...
    kR1_UNORM: ClassVar[int] = ...
    kR24G8: ClassVar[int] = ...
    kR24X8: ClassVar[int] = ...
    kR32G32B32A32_FLOAT: ClassVar[int] = ...
    kR32G32B32A32_SINT: ClassVar[int] = ...
    kR32G32B32A32_UINT: ClassVar[int] = ...
    kR32G32B32_FLOAT: ClassVar[int] = ...
    kR32G32B32_SINT: ClassVar[int] = ...
    kR32G32B32_UINT: ClassVar[int] = ...
    kR32G32_FLOAT: ClassVar[int] = ...
    kR32G32_SINT: ClassVar[int] = ...
    kR32G32_UINT: ClassVar[int] = ...
    kR32_FLOAT: ClassVar[int] = ...
    kR32_SINT: ClassVar[int] = ...
    kR32_UINT: ClassVar[int] = ...
    kR8G8B8A8_SINT: ClassVar[int] = ...
    kR8G8B8A8_SNORM: ClassVar[int] = ...
    kR8G8B8A8_UINT: ClassVar[int] = ...
    kR8G8B8A8_UNORM: ClassVar[int] = ...
    kR8G8B8X8: ClassVar[int] = ...
    kR8G8_SINT: ClassVar[int] = ...
    kR8G8_SNORM: ClassVar[int] = ...
    kR8G8_UINT: ClassVar[int] = ...
    kR8G8_UNORM: ClassVar[int] = ...
    kR8_SINT: ClassVar[int] = ...
    kR8_SNORM: ClassVar[int] = ...
    kR8_UINT: ClassVar[int] = ...
    kR8_UNORM: ClassVar[int] = ...
    kR9G9B9E5_FLOAT: ClassVar[int] = ...
    @staticmethod
    def GPUDeviceHandle(*args, **kwargs): ...
    @staticmethod
    def GPUmaximumPrimitiveCount(*args, **kwargs): ...
    @staticmethod
    def GPUmaximumVertexBufferSize(*args, **kwargs): ...
    @staticmethod
    def activeRenderOverride(*args, **kwargs): ...
    @staticmethod
    def copyTargetToScreen(*args, **kwargs): ...
    @staticmethod
    def deregisterOverride(*args, **kwargs): ...
    @staticmethod
    def disableChangeManagementUntilNextRefresh(*args, **kwargs): ...
    @staticmethod
    def drawAPI(*args, **kwargs): ...
    @staticmethod
    def drawAPIIsOpenGL(*args, **kwargs): ...
    @staticmethod
    def drawAPIVersion(*args, **kwargs): ...
    @staticmethod
    def findRenderOverride(*args, **kwargs): ...
    @staticmethod
    def getFragmentManager(*args, **kwargs): ...
    @staticmethod
    def getRenderTargetManager(*args, **kwargs): ...
    @staticmethod
    def getShaderManager(*args, **kwargs): ...
    @staticmethod
    def getTextureManager(*args, **kwargs): ...
    @staticmethod
    def needEvaluateAllLights(*args, **kwargs): ...
    @staticmethod
    def outputTargetSize(*args, **kwargs): ...
    @staticmethod
    def registerOverride(*args, **kwargs): ...
    @staticmethod
    def render(*args, **kwargs): ...
    @staticmethod
    def renderOverrideCount(*args, **kwargs): ...
    @staticmethod
    def renderOverrideName(*args, **kwargs): ...
    @staticmethod
    def setGeometryDrawDirty(*args, **kwargs): ...
    @staticmethod
    def setLightRequiresShadows(*args, **kwargs): ...
    @staticmethod
    def setLightsAndShadowsDirty(*args, **kwargs): ...
    @staticmethod
    def setRenderOverrideName(*args, **kwargs): ...

class MSamplerState:
    kAnisotropic: ClassVar[int] = ...
    kMinLinear_MagMipPoint: ClassVar[int] = ...
    kMinLinear_MagPoint_MipLinear: ClassVar[int] = ...
    kMinMagLinear_MipPoint: ClassVar[int] = ...
    kMinMagMipLinear: ClassVar[int] = ...
    kMinMagMipPoint: ClassVar[int] = ...
    kMinMagPoint_MipLinear: ClassVar[int] = ...
    kMinPoint_MagLinear_MipPoint: ClassVar[int] = ...
    kMinPoint_MagMipLinear: ClassVar[int] = ...
    kTexBorder: ClassVar[int] = ...
    kTexClamp: ClassVar[int] = ...
    kTexMirror: ClassVar[int] = ...
    kTexWrap: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def desc(self, *args, **kwargs): ...
    def resourceHandle(self, *args, **kwargs): ...

class MSamplerStateDesc:
    addressU: Incomplete
    addressV: Incomplete
    addressW: Incomplete
    borderColor: Incomplete
    comparisonFn: Incomplete
    coordCount: Incomplete
    elementIndex: Incomplete
    filter: Incomplete
    maxAnisotropy: Incomplete
    maxLOD: Incomplete
    minLOD: Incomplete
    mipLODBias: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def setDefaults(self, *args, **kwargs): ...

class MSceneRender(MRenderOperation):
    kAmbientLight: ClassVar[int] = ...
    kBoundingBox: ClassVar[int] = ...
    kCullBackFaces: ClassVar[int] = ...
    kCullFrontFaces: ClassVar[int] = ...
    kCullNone: ClassVar[int] = ...
    kDefaultMaterial: ClassVar[int] = ...
    kExcludeAll: ClassVar[int] = ...
    kExcludeCVs: ClassVar[int] = ...
    kExcludeCameras: ClassVar[int] = ...
    kExcludeDeformers: ClassVar[int] = ...
    kExcludeDimensions: ClassVar[int] = ...
    kExcludeDynamicConstraints: ClassVar[int] = ...
    kExcludeDynamics: ClassVar[int] = ...
    kExcludeFluids: ClassVar[int] = ...
    kExcludeFollicles: ClassVar[int] = ...
    kExcludeGrid: ClassVar[int] = ...
    kExcludeHairSystems: ClassVar[int] = ...
    kExcludeHoldOuts: ClassVar[int] = ...
    kExcludeHulls: ClassVar[int] = ...
    kExcludeIkHandles: ClassVar[int] = ...
    kExcludeImagePlane: ClassVar[int] = ...
    kExcludeJoints: ClassVar[int] = ...
    kExcludeLights: ClassVar[int] = ...
    kExcludeLocators: ClassVar[int] = ...
    kExcludeManipulators: ClassVar[int] = ...
    kExcludeMeshes: ClassVar[int] = ...
    kExcludeMotionTrails: ClassVar[int] = ...
    kExcludeNCloths: ClassVar[int] = ...
    kExcludeNParticles: ClassVar[int] = ...
    kExcludeNRigids: ClassVar[int] = ...
    kExcludeNone: ClassVar[int] = ...
    kExcludeNurbsCurves: ClassVar[int] = ...
    kExcludeNurbsSurfaces: ClassVar[int] = ...
    kExcludeParticleInstancers: ClassVar[int] = ...
    kExcludePivots: ClassVar[int] = ...
    kExcludePlanes: ClassVar[int] = ...
    kExcludeSelectHandles: ClassVar[int] = ...
    kExcludeStrokes: ClassVar[int] = ...
    kExcludeSubdivSurfaces: ClassVar[int] = ...
    kExcludeTextures: ClassVar[int] = ...
    kFlatShaded: ClassVar[int] = ...
    kLightDefault: ClassVar[int] = ...
    kNoCullingOverride: ClassVar[int] = ...
    kNoDisplayModeOverride: ClassVar[int] = ...
    kNoLight: ClassVar[int] = ...
    kNoLightingModeOverride: ClassVar[int] = ...
    kNoSceneFilterOverride: ClassVar[int] = ...
    kPostEffectDisableAll: ClassVar[int] = ...
    kPostEffectDisableDOF: ClassVar[int] = ...
    kPostEffectDisableMotionBlur: ClassVar[int] = ...
    kPostEffectDisableNone: ClassVar[int] = ...
    kPostEffectDisableSSAO: ClassVar[int] = ...
    kRenderAllItems: ClassVar[int] = ...
    kRenderNonShadedItems: ClassVar[int] = ...
    kRenderOpaqueShadedItems: ClassVar[int] = ...
    kRenderPostSceneUIItems: ClassVar[int] = ...
    kRenderPreSceneUIItems: ClassVar[int] = ...
    kRenderShadedItems: ClassVar[int] = ...
    kRenderTransparentShadedItems: ClassVar[int] = ...
    kRenderUIItems: ClassVar[int] = ...
    kSceneLights: ClassVar[int] = ...
    kSelectedLights: ClassVar[int] = ...
    kShadeActiveOnly: ClassVar[int] = ...
    kShaded: ClassVar[int] = ...
    kTextured: ClassVar[int] = ...
    kWireFrame: ClassVar[int] = ...
    mClearOperation: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addPostUIDrawables(self, *args, **kwargs): ...
    def addPreUIDrawables(self, *args, **kwargs): ...
    def cameraOverride(self, *args, **kwargs): ...
    def clearOperation(self, *args, **kwargs): ...
    def cullingOverride(self, *args, **kwargs): ...
    def displayModeOverride(self, *args, **kwargs): ...
    def fragmentName(self, *args, **kwargs): ...
    def getObjectTypeExclusions(self, *args, **kwargs): ...
    def getParameters(self, *args, **kwargs): ...
    def hasUIDrawables(self, *args, **kwargs): ...
    def lightModeOverride(self, *args, **kwargs): ...
    def objectSetOverride(self, *args, **kwargs): ...
    def objectTypeExclusions(self, *args, **kwargs): ...
    def postEffectsOverride(self, *args, **kwargs): ...
    def postRender(self, *args, **kwargs): ...
    def postSceneRender(self, *args, **kwargs): ...
    def preRender(self, *args, **kwargs): ...
    def preSceneRender(self, *args, **kwargs): ...
    def renderFilterOverride(self, *args, **kwargs): ...
    def shaderOverride(self, *args, **kwargs): ...
    def shadowEnableOverride(self, *args, **kwargs): ...

class MSelectionContext:
    kComponent: ClassVar[int] = ...
    kEdge: ClassVar[int] = ...
    kFace: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kObject: ClassVar[int] = ...
    kVertex: ClassVar[int] = ...
    selectionLevel: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MSelectionInfo:
    alignmentMatrix: Incomplete
    cursorPoint: Incomplete
    isRay: Incomplete
    isSingleSelection: Incomplete
    localRay: Incomplete
    pointSnapping: Incomplete
    selectClosest: Incomplete
    selectOnHilitedOnly: Incomplete
    selectRect: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def selectForHilite(self, *args, **kwargs): ...
    def selectable(self, *args, **kwargs): ...
    def selectableComponent(self, *args, **kwargs): ...

class MShaderCompileMacro:
    definition: Incomplete
    name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MShaderInstance:
    kAnisotropyShader: ClassVar[int] = ...
    kAnisotropyShader2: ClassVar[int] = ...
    kBoolean: ClassVar[int] = ...
    kDisplacementPosShader: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    kFloat2: ClassVar[int] = ...
    kFloat3: ClassVar[int] = ...
    kFloat4: ClassVar[int] = ...
    kFloat4x4Col: ClassVar[int] = ...
    kFloat4x4Row: ClassVar[int] = ...
    kGeometryShader: ClassVar[int] = ...
    kGlossShader: ClassVar[int] = ...
    kGlossShader2: ClassVar[int] = ...
    kInteger: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kNormalShader: ClassVar[int] = ...
    kNormalShader2: ClassVar[int] = ...
    kPixelShader: ClassVar[int] = ...
    kReflectanceShader: ClassVar[int] = ...
    kReflectanceShader2: ClassVar[int] = ...
    kRotationAngleShader: ClassVar[int] = ...
    kRotationAngleShader2: ClassVar[int] = ...
    kRoughnessShader: ClassVar[int] = ...
    kRoughnessShader2: ClassVar[int] = ...
    kSampler: ClassVar[int] = ...
    kTexture1: ClassVar[int] = ...
    kTexture2: ClassVar[int] = ...
    kTexture3: ClassVar[int] = ...
    kTextureCube: ClassVar[int] = ...
    kVertexShader: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def activatePass(self, *args, **kwargs): ...
    def addColorManagementTextures(self, *args, **kwargs): ...
    def addInputFragment(self, *args, **kwargs): ...
    def addInputFragmentForMultiParams(self, *args, **kwargs): ...
    def addOutputFragment(self, *args, **kwargs): ...
    def annotation(self, *args, **kwargs): ...
    def bind(self, *args, **kwargs): ...
    def clone(self, *args, **kwargs): ...
    def createShaderInstanceWithColorManagementFragment(self, *args, **kwargs): ...
    def getArraySize(self, *args, **kwargs): ...
    def getPassCount(self, *args, **kwargs): ...
    def isArrayParameter(self, *args, **kwargs): ...
    def isTransparent(self, *args, **kwargs): ...
    def isVaryingParameter(self, *args, **kwargs): ...
    def parameterDefaultValue(self, *args, **kwargs): ...
    def parameterList(self, *args, **kwargs): ...
    def parameterSemantic(self, *args, **kwargs): ...
    def parameterType(self, *args, **kwargs): ...
    def passAnnotation(self, *args, **kwargs): ...
    def postDrawCallback(self, *args, **kwargs): ...
    def preDrawCallback(self, *args, **kwargs): ...
    def renameParameter(self, *args, **kwargs): ...
    def requiredVertexBuffers(self, *args, **kwargs): ...
    def resourceName(self, *args, **kwargs): ...
    def semantic(self, *args, **kwargs): ...
    def setArrayParameter(self, *args, **kwargs): ...
    def setAsVarying(self, *args, **kwargs): ...
    def setIsTransparent(self, *args, **kwargs): ...
    def setParameter(self, *args, **kwargs): ...
    def setSemantic(self, *args, **kwargs): ...
    def techniqueAnnotation(self, *args, **kwargs): ...
    def techniqueNames(self, *args, **kwargs): ...
    def uiName(self, *args, **kwargs): ...
    def uiWidget(self, *args, **kwargs): ...
    def unbind(self, *args, **kwargs): ...
    def updateParameters(self, *args, **kwargs): ...
    def writeEffectSourceToFile(self, *args, **kwargs): ...

class MShaderManager:
    k3dBlinnShader: ClassVar[int] = ...
    k3dCPVDashLineShader: ClassVar[int] = ...
    k3dCPVFatPointShader: ClassVar[int] = ...
    k3dCPVShader: ClassVar[int] = ...
    k3dCPVSolidShader: ClassVar[int] = ...
    k3dCPVThickDashLineShader: ClassVar[int] = ...
    k3dCPVThickLineShader: ClassVar[int] = ...
    k3dColorLookupFatPointShader: ClassVar[int] = ...
    k3dColorOpacityLookupFatPointShader: ClassVar[int] = ...
    k3dDashLineShader: ClassVar[int] = ...
    k3dDefaultMaterialShader: ClassVar[int] = ...
    k3dDepthShader: ClassVar[int] = ...
    k3dFatPointShader: ClassVar[int] = ...
    k3dFloat2NumericShader: ClassVar[int] = ...
    k3dFloat3NumericShader: ClassVar[int] = ...
    k3dFloatNumericShader: ClassVar[int] = ...
    k3dIntegerNumericShader: ClassVar[int] = ...
    k3dIsotropicStandardSurfaceShader: ClassVar[int] = ...
    k3dOpacityLookupFatPointShader: ClassVar[int] = ...
    k3dPointLightShadowerShader: ClassVar[int] = ...
    k3dPointVectorShader: ClassVar[int] = ...
    k3dShadowerShader: ClassVar[int] = ...
    k3dSolidShader: ClassVar[int] = ...
    k3dSolidTextureShader: ClassVar[int] = ...
    k3dStandardSurfaceShader: ClassVar[int] = ...
    k3dStippleShader: ClassVar[int] = ...
    k3dThickDashLineShader: ClassVar[int] = ...
    k3dThickLineShader: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addShaderIncludePath(self, *args, **kwargs): ...
    def addShaderPath(self, *args, **kwargs): ...
    def clearEffectCache(self, *args, **kwargs): ...
    def getEffectsBufferShader(self, *args, **kwargs): ...
    def getEffectsFileShader(self, *args, **kwargs): ...
    def getEffectsTechniques(self, *args, **kwargs): ...
    def getFragmentShader(self, *args, **kwargs): ...
    @staticmethod
    def getLastError(*args, **kwargs): ...
    @staticmethod
    def getLastErrorSource(*args, **kwargs): ...
    def getShaderFromNode(self, *args, **kwargs): ...
    def getStockShader(self, *args, **kwargs): ...
    @staticmethod
    def isSupportedShaderSemantic(*args, **kwargs): ...
    def releaseShader(self, *args, **kwargs): ...
    def removeEffectFromCache(self, *args, **kwargs): ...
    def shaderIncludePaths(self, *args, **kwargs): ...
    def shaderPaths(self, *args, **kwargs): ...

class MStateManager:
    kCompareAlways: ClassVar[int] = ...
    kCompareEqual: ClassVar[int] = ...
    kCompareGreater: ClassVar[int] = ...
    kCompareGreaterEqual: ClassVar[int] = ...
    kCompareLess: ClassVar[int] = ...
    kCompareLessEqual: ClassVar[int] = ...
    kCompareNever: ClassVar[int] = ...
    kCompareNotEqual: ClassVar[int] = ...
    kDomainShader: ClassVar[int] = ...
    kGeometryShader: ClassVar[int] = ...
    kHullShader: ClassVar[int] = ...
    kNoShader: ClassVar[int] = ...
    kPixelShader: ClassVar[int] = ...
    kVertexShader: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def acquireBlendState(*args, **kwargs): ...
    @staticmethod
    def acquireDepthStencilState(*args, **kwargs): ...
    @staticmethod
    def acquireRasterizerState(*args, **kwargs): ...
    @staticmethod
    def acquireSamplerState(*args, **kwargs): ...
    def getBlendState(self, *args, **kwargs): ...
    def getDepthStencilState(self, *args, **kwargs): ...
    @staticmethod
    def getMaxSamplerCount(*args, **kwargs): ...
    def getRasterizerState(self, *args, **kwargs): ...
    def getSamplerState(self, *args, **kwargs): ...
    @staticmethod
    def releaseBlendState(*args, **kwargs): ...
    @staticmethod
    def releaseDepthStencilState(*args, **kwargs): ...
    @staticmethod
    def releaseRasterizerState(*args, **kwargs): ...
    @staticmethod
    def releaseSamplerState(*args, **kwargs): ...
    def setBlendState(self, *args, **kwargs): ...
    def setDepthStencilState(self, *args, **kwargs): ...
    def setRasterizerState(self, *args, **kwargs): ...
    def setSamplerState(self, *args, **kwargs): ...

class MStencilOpDesc:
    stencilDepthFailOp: Incomplete
    stencilFailOp: Incomplete
    stencilFunc: Incomplete
    stencilPassOp: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def setDefaults(self, *args, **kwargs): ...

class MSubSceneContainer:
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def add(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def count(self, *args, **kwargs): ...
    def find(self, *args, **kwargs): ...
    def getIterator(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...

class MSubSceneContainerIterator:
    def __init__(self, *args, **kwargs) -> None: ...
    def destroy(self, *args, **kwargs): ...
    def next(self, *args, **kwargs): ...
    def reset(self, *args, **kwargs): ...

class MSwatchRenderBase:
    renderQuality: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def cancelCurrentSwatchRender(*args, **kwargs): ...
    def cancelParallelRendering(self, *args, **kwargs): ...
    def doIteration(self, *args, **kwargs): ...
    def finishParallelRender(self, *args, **kwargs): ...
    def image(self, *args, **kwargs): ...
    def node(self, *args, **kwargs): ...
    def renderParallel(self, *args, **kwargs): ...
    def resolution(self, *args, **kwargs): ...
    def swatchNode(self, *args, **kwargs): ...

class MTargetBlendDesc:
    alphaBlendOperation: Incomplete
    alphaDestinationBlend: Incomplete
    alphaSourceBlend: Incomplete
    blendEnable: Incomplete
    blendOperation: Incomplete
    destinationBlend: Incomplete
    sourceBlend: Incomplete
    targetWriteMask: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def setDefaults(self, *args, **kwargs): ...

class MTexture:
    def __init__(self, *args, **kwargs) -> None: ...
    def bytesPerPixel(self, *args, **kwargs): ...
    @staticmethod
    def freeRawData(*args, **kwargs): ...
    def hasAlpha(self, *args, **kwargs): ...
    def hasTransparentAlpha(self, *args, **kwargs): ...
    def hasZeroAlpha(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...
    def rawData(self, *args, **kwargs): ...
    def resourceHandle(self, *args, **kwargs): ...
    def setHasAlpha(self, *args, **kwargs): ...
    def setHasTransparentAlpha(self, *args, **kwargs): ...
    def setHasZeroAlpha(self, *args, **kwargs): ...
    def textureDescription(self, *args, **kwargs): ...
    def update(self, *args, **kwargs): ...

class MTextureAssignment:
    texture: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MTextureDescription:
    kCubeMap: ClassVar[int] = ...
    kDepthTexture: ClassVar[int] = ...
    kEnvCrossHoriz: ClassVar[int] = ...
    kEnvCrossVert: ClassVar[int] = ...
    kEnvCubemap: ClassVar[int] = ...
    kEnvHemiSphere: ClassVar[int] = ...
    kEnvLatLong: ClassVar[int] = ...
    kEnvNone: ClassVar[int] = ...
    kEnvSphere: ClassVar[int] = ...
    kImage1D: ClassVar[int] = ...
    kImage1DArray: ClassVar[int] = ...
    kImage2D: ClassVar[int] = ...
    kImage2DArray: ClassVar[int] = ...
    kNumberOfEnvMapTypes: ClassVar[int] = ...
    kNumberOfTextureTypes: ClassVar[int] = ...
    kVolumeTexture: ClassVar[int] = ...
    fArraySlices: Incomplete
    fBytesPerRow: Incomplete
    fBytesPerSlice: Incomplete
    fDepth: Incomplete
    fEnvMapType: Incomplete
    fFormat: Incomplete
    fHeight: Incomplete
    fMipmaps: Incomplete
    fTextureType: Incomplete
    fWidth: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def setToDefault2DTexture(self, *args, **kwargs): ...

class MTextureManager:
    def __init__(self, *args, **kwargs) -> None: ...
    def acquireDepthTexture(self, *args, **kwargs): ...
    def acquireTexture(self, *args, **kwargs): ...
    def acquireTiledTexture(self, *args, **kwargs): ...
    def addImagePath(self, *args, **kwargs): ...
    def imagePaths(self, *args, **kwargs): ...
    def releaseTexture(self, *args, **kwargs): ...
    def saveTexture(self, *args, **kwargs): ...

class MTextureUpdateRegion:
    fXRangeMax: Incomplete
    fXRangeMin: Incomplete
    fYRangeMax: Incomplete
    fYRangeMin: Incomplete
    fZRangeMax: Incomplete
    fZRangeMin: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MUIDrawManager:
    kAutomatic: ClassVar[int] = ...
    kCenter: ClassVar[int] = ...
    kClosedLine: ClassVar[int] = ...
    kDashed: ClassVar[int] = ...
    kDefaultFontSize: ClassVar[int] = ...
    kDotted: ClassVar[int] = ...
    kFlat: ClassVar[int] = ...
    kInclineItalic: ClassVar[int] = ...
    kInclineNormal: ClassVar[int] = ...
    kInclineOblique: ClassVar[int] = ...
    kLeft: ClassVar[int] = ...
    kLineNone: ClassVar[int] = ...
    kLineOverline: ClassVar[int] = ...
    kLineStrikeoutLine: ClassVar[int] = ...
    kLineStrip: ClassVar[int] = ...
    kLineUnderline: ClassVar[int] = ...
    kLines: ClassVar[int] = ...
    kNonSelectable: ClassVar[int] = ...
    kPoints: ClassVar[int] = ...
    kRight: ClassVar[int] = ...
    kSelectable: ClassVar[int] = ...
    kShaded: ClassVar[int] = ...
    kShortDashed: ClassVar[int] = ...
    kShortDotted: ClassVar[int] = ...
    kSmallFontSize: ClassVar[int] = ...
    kSolid: ClassVar[int] = ...
    kStippled: ClassVar[int] = ...
    kStretchCondensed: ClassVar[int] = ...
    kStretchExpanded: ClassVar[int] = ...
    kStretchExtraCondensed: ClassVar[int] = ...
    kStretchExtraExpanded: ClassVar[int] = ...
    kStretchSemiCondensed: ClassVar[int] = ...
    kStretchSemiExpanded: ClassVar[int] = ...
    kStretchUltraCondensed: ClassVar[int] = ...
    kStretchUltraExpanded: ClassVar[int] = ...
    kStretchUnstretched: ClassVar[int] = ...
    kTriStrip: ClassVar[int] = ...
    kTriangles: ClassVar[int] = ...
    kWeightBlack: ClassVar[int] = ...
    kWeightBold: ClassVar[int] = ...
    kWeightDemiBold: ClassVar[int] = ...
    kWeightLight: ClassVar[int] = ...
    kWeightNormal: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def arc(self, *args, **kwargs): ...
    def arc2d(self, *args, **kwargs): ...
    def beginDrawInXray(self, *args, **kwargs): ...
    def beginDrawable(self, *args, **kwargs): ...
    def box(self, *args, **kwargs): ...
    def capsule(self, *args, **kwargs): ...
    def circle(self, *args, **kwargs): ...
    def circle2d(self, *args, **kwargs): ...
    def cone(self, *args, **kwargs): ...
    def cylinder(self, *args, **kwargs): ...
    def depthPriority(self, *args, **kwargs): ...
    def endDrawInXray(self, *args, **kwargs): ...
    def endDrawable(self, *args, **kwargs): ...
    @staticmethod
    def getFontList(*args, **kwargs): ...
    @staticmethod
    def getIconNames(*args, **kwargs): ...
    def icon(self, *args, **kwargs): ...
    def line(self, *args, **kwargs): ...
    def line2d(self, *args, **kwargs): ...
    def lineList(self, *args, **kwargs): ...
    def lineStrip(self, *args, **kwargs): ...
    def mesh(self, *args, **kwargs): ...
    def mesh2d(self, *args, **kwargs): ...
    def point(self, *args, **kwargs): ...
    def point2d(self, *args, **kwargs): ...
    def points(self, *args, **kwargs): ...
    def rect(self, *args, **kwargs): ...
    def rect2d(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setColorIndex(self, *args, **kwargs): ...
    def setDepthPriority(self, *args, **kwargs): ...
    def setFontIncline(self, *args, **kwargs): ...
    def setFontLine(self, *args, **kwargs): ...
    def setFontName(self, *args, **kwargs): ...
    def setFontSize(self, *args, **kwargs): ...
    def setFontStretch(self, *args, **kwargs): ...
    def setFontWeight(self, *args, **kwargs): ...
    def setLineStyle(self, *args, **kwargs): ...
    def setLineWidth(self, *args, **kwargs): ...
    def setPaintStyle(self, *args, **kwargs): ...
    def setPointSize(self, *args, **kwargs): ...
    def setTexture(self, *args, **kwargs): ...
    def setTextureMask(self, *args, **kwargs): ...
    def setTextureSampler(self, *args, **kwargs): ...
    def sphere(self, *args, **kwargs): ...
    def text(self, *args, **kwargs): ...
    def text2d(self, *args, **kwargs): ...

class MUniformParameter:
    kSemanticBackgroundColor: ClassVar[int] = ...
    kSemanticBump: ClassVar[int] = ...
    kSemanticBumpTexture: ClassVar[int] = ...
    kSemanticColor: ClassVar[int] = ...
    kSemanticColorTexture: ClassVar[int] = ...
    kSemanticEnvironment: ClassVar[int] = ...
    kSemanticFarClipPlane: ClassVar[int] = ...
    kSemanticFrameNumber: ClassVar[int] = ...
    kSemanticHWSEdgeLevel: ClassVar[int] = ...
    kSemanticHWSFaceLevel: ClassVar[int] = ...
    kSemanticHWSFrontCCW: ClassVar[int] = ...
    kSemanticHWSHighlighting: ClassVar[int] = ...
    kSemanticHWSInstancedDraw: ClassVar[int] = ...
    kSemanticHWSObjectLevel: ClassVar[int] = ...
    kSemanticHWSOccluder: ClassVar[int] = ...
    kSemanticHWSPrimitiveBase: ClassVar[int] = ...
    kSemanticHWSPrimitiveCountPerInstance: ClassVar[int] = ...
    kSemanticHWSVertexLevel: ClassVar[int] = ...
    kSemanticLocalViewer: ClassVar[int] = ...
    kSemanticNearClipPlane: ClassVar[int] = ...
    kSemanticNormal: ClassVar[int] = ...
    kSemanticNormalTexture: ClassVar[int] = ...
    kSemanticNormalizationTexture: ClassVar[int] = ...
    kSemanticObjectDir: ClassVar[int] = ...
    kSemanticObjectPos: ClassVar[int] = ...
    kSemanticOpaqueDepthTexture: ClassVar[int] = ...
    kSemanticProjectionDir: ClassVar[int] = ...
    kSemanticProjectionInverseMatrix: ClassVar[int] = ...
    kSemanticProjectionInverseTransposeMatrix: ClassVar[int] = ...
    kSemanticProjectionMatrix: ClassVar[int] = ...
    kSemanticProjectionPos: ClassVar[int] = ...
    kSemanticProjectionTransposeMatrix: ClassVar[int] = ...
    kSemanticTime: ClassVar[int] = ...
    kSemanticTranspDepthTexture: ClassVar[int] = ...
    kSemanticUnknown: ClassVar[int] = ...
    kSemanticViewDir: ClassVar[int] = ...
    kSemanticViewInverseMatrix: ClassVar[int] = ...
    kSemanticViewInverseTransposeMatrix: ClassVar[int] = ...
    kSemanticViewMatrix: ClassVar[int] = ...
    kSemanticViewPos: ClassVar[int] = ...
    kSemanticViewProjectionInverseMatrix: ClassVar[int] = ...
    kSemanticViewProjectionInverseTransposeMatrix: ClassVar[int] = ...
    kSemanticViewProjectionMatrix: ClassVar[int] = ...
    kSemanticViewProjectionTransposeMatrix: ClassVar[int] = ...
    kSemanticViewTransposeMatrix: ClassVar[int] = ...
    kSemanticViewportPixelSize: ClassVar[int] = ...
    kSemanticWorldDir: ClassVar[int] = ...
    kSemanticWorldInverseMatrix: ClassVar[int] = ...
    kSemanticWorldInverseTransposeMatrix: ClassVar[int] = ...
    kSemanticWorldMatrix: ClassVar[int] = ...
    kSemanticWorldPos: ClassVar[int] = ...
    kSemanticWorldTransposeMatrix: ClassVar[int] = ...
    kSemanticWorldViewInverseMatrix: ClassVar[int] = ...
    kSemanticWorldViewInverseTransposeMatrix: ClassVar[int] = ...
    kSemanticWorldViewMatrix: ClassVar[int] = ...
    kSemanticWorldViewProjectionInverseMatrix: ClassVar[int] = ...
    kSemanticWorldViewProjectionInverseTransposeMatrix: ClassVar[int] = ...
    kSemanticWorldViewProjectionMatrix: ClassVar[int] = ...
    kSemanticWorldViewProjectionTransposeMatrix: ClassVar[int] = ...
    kSemanticWorldViewTransposeMatrix: ClassVar[int] = ...
    kType1DTexture: ClassVar[int] = ...
    kType2DTexture: ClassVar[int] = ...
    kType3DTexture: ClassVar[int] = ...
    kTypeBool: ClassVar[int] = ...
    kTypeCubeTexture: ClassVar[int] = ...
    kTypeEnum: ClassVar[int] = ...
    kTypeEnvTexture: ClassVar[int] = ...
    kTypeFloat: ClassVar[int] = ...
    kTypeInt: ClassVar[int] = ...
    kTypeString: ClassVar[int] = ...
    kTypeUnknown: ClassVar[int] = ...
    enumFieldNames: Incomplete
    keyable: Incomplete
    rangeMax: Incomplete
    rangeMin: Incomplete
    softRangeMax: Incomplete
    softRangeMin: Incomplete
    uiHidden: Incomplete
    uiNiceName: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def asBool(self, *args, **kwargs): ...
    def asFloat(self, *args, **kwargs): ...
    def asFloatArray(self, *args, **kwargs): ...
    def asInt(self, *args, **kwargs): ...
    def asString(self, *args, **kwargs): ...
    def copy(self, *args, **kwargs): ...
    def hasChanged(self, *args, **kwargs): ...
    def isATexture(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...
    def numColumns(self, *args, **kwargs): ...
    def numElements(self, *args, **kwargs): ...
    def numRows(self, *args, **kwargs): ...
    def plug(self, *args, **kwargs): ...
    def semantic(self, *args, **kwargs): ...
    def setBool(self, *args, **kwargs): ...
    def setDirty(self, *args, **kwargs): ...
    def setFloat(self, *args, **kwargs): ...
    def setFloatArray(self, *args, **kwargs): ...
    def setInt(self, *args, **kwargs): ...
    def setString(self, *args, **kwargs): ...
    def source(self, *args, **kwargs): ...
    def type(self, *args, **kwargs): ...
    def userData(self, *args, **kwargs): ...

class MUniformParameterList:
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def copy(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setLength(self, *args, **kwargs): ...

class MUserRenderOperation(MRenderOperation):
    def __init__(self, *args, **kwargs) -> None: ...
    def addUIDrawables(self, *args, **kwargs): ...
    def cameraOverride(self, *args, **kwargs): ...
    def hasUIDrawables(self, *args, **kwargs): ...
    def requiresLightData(self, *args, **kwargs): ...
    def requiresResetDeviceStates(self, *args, **kwargs): ...

class MVaryingParameter:
    kBinormal: ClassVar[int] = ...
    kChar: ClassVar[int] = ...
    kColor: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    kInt16: ClassVar[int] = ...
    kInt32: ClassVar[int] = ...
    kInvalidParameter: ClassVar[int] = ...
    kNoSemantic: ClassVar[int] = ...
    kNormal: ClassVar[int] = ...
    kPosition: ClassVar[int] = ...
    kStructure: ClassVar[int] = ...
    kTangent: ClassVar[int] = ...
    kTexCoord: ClassVar[int] = ...
    kUnsignedChar: ClassVar[int] = ...
    kUnsignedInt16: ClassVar[int] = ...
    kUnsignedInt32: ClassVar[int] = ...
    kWeight: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addElement(self, *args, **kwargs): ...
    def copy(self, *args, **kwargs): ...
    def destinationSetName(self, *args, **kwargs): ...
    def dimension(self, *args, **kwargs): ...
    def elementSize(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def maximumStride(self, *args, **kwargs): ...
    def name(self, *args, **kwargs): ...
    def numElements(self, *args, **kwargs): ...
    def removeElements(self, *args, **kwargs): ...
    def semantic(self, *args, **kwargs): ...
    def semanticName(self, *args, **kwargs): ...
    def setSource(self, *args, **kwargs): ...
    def sourceSemantic(self, *args, **kwargs): ...
    def sourceSetName(self, *args, **kwargs): ...
    def type(self, *args, **kwargs): ...
    def updateId(self, *args, **kwargs): ...

class MVaryingParameterList:
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def copy(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setLength(self, *args, **kwargs): ...

class MVertexBuffer:
    def __init__(self, *args, **kwargs) -> None: ...
    def acquire(self, *args, **kwargs): ...
    def commit(self, *args, **kwargs): ...
    def descriptor(self, *args, **kwargs): ...
    def hasCustomResourceHandle(self, *args, **kwargs): ...
    def lockResourceHandle(self, *args, **kwargs): ...
    def map(self, *args, **kwargs): ...
    def resourceHandle(self, *args, **kwargs): ...
    def setResourceHandle(self, *args, **kwargs): ...
    def unload(self, *args, **kwargs): ...
    def unlockResourceHandle(self, *args, **kwargs): ...
    def unmap(self, *args, **kwargs): ...
    def update(self, *args, **kwargs): ...
    def vertexCount(self, *args, **kwargs): ...

class MVertexBufferArray:
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def getBuffer(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...

class MVertexBufferDescriptor:
    dataType: Incomplete
    dataTypeSize: Incomplete
    dimension: Incomplete
    name: Incomplete
    offset: Incomplete
    semantic: Incomplete
    semanticName: Incomplete
    stride: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MVertexBufferDescriptorList:
    def __getitem__(self, key): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def append(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
key: str
ourdict: dict
py2dict: dict
val: str
