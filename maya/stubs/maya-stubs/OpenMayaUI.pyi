import maya.OpenMaya
import maya.OpenMayaRender
from _typeshed import Incomplete
from typing import Callable, ClassVar

class _SwigNonDynamicMeta(type):
    __setattr__: ClassVar[Callable] = ...

class charPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class intPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class shortPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class floatPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class doublePtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class boolPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class uIntPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class uCharPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class M3dView:
    kBoundingBox: ClassVar[int] = ...
    kFlatShaded: ClassVar[int] = ...
    kGouraudShaded: ClassVar[int] = ...
    kWireFrame: ClassVar[int] = ...
    kPoints: ClassVar[int] = ...
    kActive: ClassVar[int] = ...
    kLive: ClassVar[int] = ...
    kDormant: ClassVar[int] = ...
    kInvisible: ClassVar[int] = ...
    kHilite: ClassVar[int] = ...
    kTemplate: ClassVar[int] = ...
    kActiveTemplate: ClassVar[int] = ...
    kActiveComponent: ClassVar[int] = ...
    kLead: ClassVar[int] = ...
    kIntermediateObject: ClassVar[int] = ...
    kActiveAffected: ClassVar[int] = ...
    kNoStatus: ClassVar[int] = ...
    kActiveColors: ClassVar[int] = ...
    kDormantColors: ClassVar[int] = ...
    kTemplateColor: ClassVar[int] = ...
    kBackgroundColor: ClassVar[int] = ...
    kLeft: ClassVar[int] = ...
    kCenter: ClassVar[int] = ...
    kRight: ClassVar[int] = ...
    kDisplayEverything: ClassVar[int] = ...
    kDisplayNurbsCurves: ClassVar[int] = ...
    kDisplayNurbsSurfaces: ClassVar[int] = ...
    kDisplayMeshes: ClassVar[int] = ...
    kDisplayPlanes: ClassVar[int] = ...
    kDisplayLights: ClassVar[int] = ...
    kDisplayCameras: ClassVar[int] = ...
    kDisplayJoints: ClassVar[int] = ...
    kDisplayIkHandles: ClassVar[int] = ...
    kDisplayDeformers: ClassVar[int] = ...
    kDisplayDynamics: ClassVar[int] = ...
    kDisplayParticleInstancers: ClassVar[int] = ...
    kDisplayLocators: ClassVar[int] = ...
    kDisplayDimensions: ClassVar[int] = ...
    kDisplaySelectHandles: ClassVar[int] = ...
    kDisplayPivots: ClassVar[int] = ...
    kDisplayTextures: ClassVar[int] = ...
    kDisplayGrid: ClassVar[int] = ...
    kDisplayCVs: ClassVar[int] = ...
    kDisplayHulls: ClassVar[int] = ...
    kDisplayStrokes: ClassVar[int] = ...
    kDisplaySubdivSurfaces: ClassVar[int] = ...
    kDisplayFluids: ClassVar[int] = ...
    kDisplayFollicles: ClassVar[int] = ...
    kDisplayHairSystems: ClassVar[int] = ...
    kDisplayImagePlane: ClassVar[int] = ...
    kDisplayNCloths: ClassVar[int] = ...
    kDisplayNRigids: ClassVar[int] = ...
    kDisplayDynamicConstraints: ClassVar[int] = ...
    kDisplayManipulators: ClassVar[int] = ...
    kDisplayNParticles: ClassVar[int] = ...
    kExcludeMotionTrails: ClassVar[int] = ...
    kExcludePluginShapes: ClassVar[int] = ...
    kLightAll: ClassVar[int] = ...
    kLightSelected: ClassVar[int] = ...
    kLightActive: ClassVar[int] = ...
    kLightDefault: ClassVar[int] = ...
    kUnused1: ClassVar[int] = ...
    kLightNone: ClassVar[int] = ...
    kDefaultQualityRenderer: ClassVar[int] = ...
    kHighQualityRenderer: ClassVar[int] = ...
    kViewport2Renderer: ClassVar[int] = ...
    kExternalRenderer: ClassVar[int] = ...
    kDepth_8: ClassVar[int] = ...
    kDepth_Float: ClassVar[int] = ...
    kStippleNone: ClassVar[int] = ...
    kStippleDashed: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def active3dView(*args, **kwargs): ...
    @staticmethod
    def numberOf3dViews(*args, **kwargs): ...
    @staticmethod
    def get3dView(*args, **kwargs): ...
    @staticmethod
    def displayStatus(*args, **kwargs): ...
    @classmethod
    def makeSharedContextCurrent(cls, *args, **kwargs): ...
    @classmethod
    def display(cls, *args, **kwargs): ...
    @classmethod
    def deviceContext(cls, *args, **kwargs): ...
    @staticmethod
    def applicationShell(*args, **kwargs): ...
    @classmethod
    def getScreenPosition(cls, *args, **kwargs): ...
    @classmethod
    def widget(cls, *args, **kwargs): ...
    @classmethod
    def window(cls, *args, **kwargs): ...
    @classmethod
    def portWidth(cls, *args, **kwargs): ...
    @classmethod
    def portHeight(cls, *args, **kwargs): ...
    @classmethod
    def devicePixelRatio(cls, *args, **kwargs): ...
    @classmethod
    def isVisible(cls, *args, **kwargs): ...
    @classmethod
    def playblastPortWidth(cls, *args, **kwargs): ...
    @classmethod
    def playblastPortHeight(cls, *args, **kwargs): ...
    @classmethod
    def pushViewport(cls, *args, **kwargs): ...
    @classmethod
    def popViewport(cls, *args, **kwargs): ...
    @classmethod
    def viewport(cls, *args, **kwargs): ...
    @classmethod
    def beginGL(cls, *args, **kwargs): ...
    @classmethod
    def endGL(cls, *args, **kwargs): ...
    @classmethod
    def beginSelect(cls, *args, **kwargs): ...
    @classmethod
    def endSelect(cls, *args, **kwargs): ...
    @classmethod
    def selectMode(cls, *args, **kwargs): ...
    @classmethod
    def textureMode(cls, *args, **kwargs): ...
    @classmethod
    def loadName(cls, *args, **kwargs): ...
    @classmethod
    def pushName(cls, *args, **kwargs): ...
    @classmethod
    def popName(cls, *args, **kwargs): ...
    @classmethod
    def initNames(cls, *args, **kwargs): ...
    @classmethod
    def beginXorDrawing(cls, *args, **kwargs): ...
    @classmethod
    def endXorDrawing(cls, *args, **kwargs): ...
    @classmethod
    def setDrawColor(cls, *args, **kwargs): ...
    @classmethod
    def setDrawColorAndAlpha(cls, *args, **kwargs): ...
    @classmethod
    def numDormantColors(cls, *args, **kwargs): ...
    @classmethod
    def numActiveColors(cls, *args, **kwargs): ...
    @classmethod
    def numUserDefinedColors(cls, *args, **kwargs): ...
    @classmethod
    def setUserDefinedColor(cls, *args, **kwargs): ...
    @classmethod
    def userDefinedColorIndex(cls, *args, **kwargs): ...
    @classmethod
    def colorAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def getColorIndexAndTable(cls, *args, **kwargs): ...
    @classmethod
    def colorMask(cls, *args, **kwargs): ...
    @classmethod
    def setColorMask(cls, *args, **kwargs): ...
    @staticmethod
    def isBackgroundGradient(*args, **kwargs): ...
    @staticmethod
    def templateColor(*args, **kwargs): ...
    @staticmethod
    def backgroundColor(*args, **kwargs): ...
    @staticmethod
    def backgroundColorTop(*args, **kwargs): ...
    @staticmethod
    def backgroundColorBottom(*args, **kwargs): ...
    @staticmethod
    def liveColor(*args, **kwargs): ...
    @staticmethod
    def referenceLayerColor(*args, **kwargs): ...
    @staticmethod
    def activeTemplateColor(*args, **kwargs): ...
    @staticmethod
    def leadColor(*args, **kwargs): ...
    @staticmethod
    def hiliteColor(*args, **kwargs): ...
    @staticmethod
    def activeAffectedColor(*args, **kwargs): ...
    @classmethod
    def drawText(cls, *args, **kwargs): ...
    @classmethod
    def getCamera(cls, *args, **kwargs): ...
    @classmethod
    def setCamera(cls, *args, **kwargs): ...
    @staticmethod
    def scheduleRefreshAllViews(*args, **kwargs): ...
    @classmethod
    def scheduleRefresh(cls, *args, **kwargs): ...
    @classmethod
    def refresh(cls, *args, **kwargs): ...
    @classmethod
    def getLightCount(cls, *args, **kwargs): ...
    @classmethod
    def getLightingMode(cls, *args, **kwargs): ...
    @classmethod
    def getLightPath(cls, *args, **kwargs): ...
    @classmethod
    def isLightVisible(cls, *args, **kwargs): ...
    @classmethod
    def getLightIndex(cls, *args, **kwargs): ...
    @classmethod
    def viewToWorld(cls, *args, **kwargs): ...
    @classmethod
    def viewToObjectSpace(cls, *args, **kwargs): ...
    @classmethod
    def worldToView(cls, *args, **kwargs): ...
    @classmethod
    def projectionMatrix(cls, *args, **kwargs): ...
    @classmethod
    def modelViewMatrix(cls, *args, **kwargs): ...
    @classmethod
    def viewSelectedPrefix(cls, *args, **kwargs): ...
    @classmethod
    def setViewSelectedPrefix(cls, *args, **kwargs): ...
    @classmethod
    def showViewSelectedChildren(cls, *args, **kwargs): ...
    @classmethod
    def setShowViewSelectedChildren(cls, *args, **kwargs): ...
    @staticmethod
    def getM3dViewFromModelPanel(*args, **kwargs): ...
    @staticmethod
    def getM3dViewFromModelEditor(*args, **kwargs): ...
    @classmethod
    def displayStyle(cls, *args, **kwargs): ...
    @classmethod
    def isShadeActiveOnly(cls, *args, **kwargs): ...
    @classmethod
    def setDisplayStyle(cls, *args, **kwargs): ...
    @classmethod
    def setObjectDisplay(cls, *args, **kwargs): ...
    @classmethod
    def objectDisplay(cls, *args, **kwargs): ...
    @classmethod
    def setPluginObjectDisplay(cls, *args, **kwargs): ...
    @classmethod
    def pluginObjectDisplay(cls, *args, **kwargs): ...
    @classmethod
    def getRendererName(cls, *args, **kwargs): ...
    @classmethod
    def rendererString(cls, *args, **kwargs): ...
    @classmethod
    def wireframeOnlyInShadedMode(cls, *args, **kwargs): ...
    @classmethod
    def wireframeOnShaded(cls, *args, **kwargs): ...
    @classmethod
    def xray(cls, *args, **kwargs): ...
    @classmethod
    def xrayJoints(cls, *args, **kwargs): ...
    @classmethod
    def twoSidedLighting(cls, *args, **kwargs): ...
    @classmethod
    def readColorBuffer(cls, *args, **kwargs): ...
    @classmethod
    def writeColorBuffer(cls, *args, **kwargs): ...
    @classmethod
    def readDepthMap(cls, *args, **kwargs): ...
    @classmethod
    def readBufferTo2dTexture(cls, *args, **kwargs): ...
    @classmethod
    def usingMipmappedTextures(cls, *args, **kwargs): ...
    @classmethod
    def usingDefaultMaterial(cls, *args, **kwargs): ...
    @classmethod
    def setDisallowPolygonOffset(cls, *args, **kwargs): ...
    @classmethod
    def disallowPolygonOffset(cls, *args, **kwargs): ...
    @classmethod
    def updateViewingParameters(cls, *args, **kwargs): ...
    @classmethod
    def multipleDrawEnabled(cls, *args, **kwargs): ...
    @classmethod
    def setMultipleDrawEnable(cls, *args, **kwargs): ...
    @classmethod
    def multipleDrawPassCount(cls, *args, **kwargs): ...
    @classmethod
    def setMultipleDrawPassCount(cls, *args, **kwargs): ...
    @classmethod
    def beginProjMatrixOverride(cls, *args, **kwargs): ...
    @classmethod
    def endProjMatrixOverride(cls, *args, **kwargs): ...
    @classmethod
    def setRenderOverrideName(cls, *args, **kwargs): ...
    @classmethod
    def renderOverrideName(cls, *args, **kwargs): ...
    @classmethod
    def setObjectListFilterName(cls, *args, **kwargs): ...
    @classmethod
    def objectListFilterName(cls, *args, **kwargs): ...
    @classmethod
    def setShowObjectFilterNameInHUD(cls, *args, **kwargs): ...
    @classmethod
    def showObjectFilterNameInHUD(cls, *args, **kwargs): ...
    @classmethod
    def viewIsFiltered(cls, *args, **kwargs): ...
    @classmethod
    def filteredObjectList(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MCursor:
    __init__: ClassVar[Callable] = ...
    defaultCursor: ClassVar[MCursor] = ...
    crossHairCursor: ClassVar[MCursor] = ...
    doubleCrossHairCursor: ClassVar[MCursor] = ...
    editCursor: ClassVar[MCursor] = ...
    pencilCursor: ClassVar[MCursor] = ...
    handCursor: ClassVar[MCursor] = ...
    textBeamCursor: ClassVar[MCursor] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
cvar: swigvarlink  # type: ignore[name-defined]

class MDeviceChannel:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def longName(cls, *args, **kwargs): ...
    @classmethod
    def axisIndex(cls, *args, **kwargs): ...
    @classmethod
    def hasChildren(cls, *args, **kwargs): ...
    @classmethod
    def parent(cls, *args, **kwargs): ...
    @classmethod
    def childByIndex(cls, *args, **kwargs): ...
    @classmethod
    def numChildren(cls, *args, **kwargs): ...

class MDeviceState:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def devicePosition(cls, *args, **kwargs): ...
    @classmethod
    def setDevicePosition(cls, *args, **kwargs): ...
    @classmethod
    def buttonState(cls, *args, **kwargs): ...
    @classmethod
    def setButtonState(cls, *args, **kwargs): ...
    @classmethod
    def maxAxis(cls, *args, **kwargs): ...
    @classmethod
    def isNull(cls, *args, **kwargs): ...

class MDrawData:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def geometry(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDrawInfo:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getPrototype(cls, *args, **kwargs): ...
    @classmethod
    def view(cls, *args, **kwargs): ...
    @classmethod
    def multiPath(cls, *args, **kwargs): ...
    @classmethod
    def setMultiPath(cls, *args, **kwargs): ...
    @classmethod
    def projectionMatrix(cls, *args, **kwargs): ...
    @classmethod
    def inclusiveMatrix(cls, *args, **kwargs): ...
    @classmethod
    def displayStyle(cls, *args, **kwargs): ...
    @classmethod
    def displayStatus(cls, *args, **kwargs): ...
    @classmethod
    def objectDisplayStatus(cls, *args, **kwargs): ...
    @classmethod
    def pluginObjectDisplayStatus(cls, *args, **kwargs): ...
    @classmethod
    def inSelect(cls, *args, **kwargs): ...
    @classmethod
    def inUserInteraction(cls, *args, **kwargs): ...
    @classmethod
    def userChangingViewContext(cls, *args, **kwargs): ...
    @classmethod
    def completelyInside(cls, *args, **kwargs): ...
    @classmethod
    def canDrawComponent(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDrawRequest:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def view(cls, *args, **kwargs): ...
    @classmethod
    def setView(cls, *args, **kwargs): ...
    @classmethod
    def multiPath(cls, *args, **kwargs): ...
    @classmethod
    def setMultiPath(cls, *args, **kwargs): ...
    @classmethod
    def component(cls, *args, **kwargs): ...
    @classmethod
    def setComponent(cls, *args, **kwargs): ...
    @classmethod
    def drawData(cls, *args, **kwargs): ...
    @classmethod
    def setDrawData(cls, *args, **kwargs): ...
    @classmethod
    def displayStatus(cls, *args, **kwargs): ...
    @classmethod
    def setDisplayStatus(cls, *args, **kwargs): ...
    @classmethod
    def displayCulling(cls, *args, **kwargs): ...
    @classmethod
    def setDisplayCulling(cls, *args, **kwargs): ...
    @classmethod
    def displayCullOpposite(cls, *args, **kwargs): ...
    @classmethod
    def setDisplayCullOpposite(cls, *args, **kwargs): ...
    @classmethod
    def displayStyle(cls, *args, **kwargs): ...
    @classmethod
    def setDisplayStyle(cls, *args, **kwargs): ...
    @classmethod
    def color(cls, *args, **kwargs): ...
    @classmethod
    def setColor(cls, *args, **kwargs): ...
    @classmethod
    def material(cls, *args, **kwargs): ...
    @classmethod
    def setMaterial(cls, *args, **kwargs): ...
    @classmethod
    def isTransparent(cls, *args, **kwargs): ...
    @classmethod
    def setIsTransparent(cls, *args, **kwargs): ...
    @classmethod
    def drawLast(cls, *args, **kwargs): ...
    @classmethod
    def setDrawLast(cls, *args, **kwargs): ...
    @classmethod
    def token(cls, *args, **kwargs): ...
    @classmethod
    def setToken(cls, *args, **kwargs): ...
    @classmethod
    def matrix(cls, *args, **kwargs): ...
    @classmethod
    def setMatrix(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDrawRequestQueue:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isEmpty(cls, *args, **kwargs): ...
    @classmethod
    def add(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDrawTraversal:
    kActiveItem: ClassVar[int] = ...
    kTemplateItem: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def traverse(cls, *args, **kwargs): ...
    @classmethod
    def filterNode(cls, *args, **kwargs): ...
    @classmethod
    def setOrthoFrustum(cls, *args, **kwargs): ...
    @classmethod
    def setPerspFrustum(cls, *args, **kwargs): ...
    @classmethod
    def setFrustum(cls, *args, **kwargs): ...
    @classmethod
    def frustumValid(cls, *args, **kwargs): ...
    @classmethod
    def setLeafLevelCulling(cls, *args, **kwargs): ...
    @classmethod
    def leafLevelCulling(cls, *args, **kwargs): ...
    @classmethod
    def enableFiltering(cls, *args, **kwargs): ...
    @classmethod
    def filteringEnabled(cls, *args, **kwargs): ...
    @classmethod
    def numberOfItems(cls, *args, **kwargs): ...
    @classmethod
    def itemPath(cls, *args, **kwargs): ...
    @classmethod
    def itemHasStatus(cls, *args, **kwargs): ...

class MEvent:
    shiftKey: ClassVar[int] = ...
    controlKey: ClassVar[int] = ...
    kLeftMouse: ClassVar[int] = ...
    kMiddleMouse: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getPosition(cls, *args, **kwargs): ...
    @classmethod
    def setPosition(cls, *args, **kwargs): ...
    @classmethod
    def getWindowPosition(cls, *args, **kwargs): ...
    @classmethod
    def mouseButton(cls, *args, **kwargs): ...
    @classmethod
    def isModifierKeyRelease(cls, *args, **kwargs): ...
    @classmethod
    def modifiers(cls, *args, **kwargs): ...
    @classmethod
    def setModifiers(cls, *args, **kwargs): ...
    @classmethod
    def isModifierNone(cls, *args, **kwargs): ...
    @classmethod
    def isModifierShift(cls, *args, **kwargs): ...
    @classmethod
    def isModifierControl(cls, *args, **kwargs): ...
    @classmethod
    def isModifierLeftMouseButton(cls, *args, **kwargs): ...
    @classmethod
    def isModifierMiddleMouseButton(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MExternalDropData:
    __init__: ClassVar[Callable] = ...
    kLeftButton: ClassVar[int] = ...
    kRightButton: ClassVar[int] = ...
    kMidButton: ClassVar[int] = ...
    kMiddleButton: ClassVar[int] = ...
    kNoModifier: ClassVar[int] = ...
    kShiftModifier: ClassVar[int] = ...
    kControlModifier: ClassVar[int] = ...
    kAltModifier: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def hasText(cls, *args, **kwargs): ...
    @classmethod
    def text(cls, *args, **kwargs): ...
    @classmethod
    def hasUrls(cls, *args, **kwargs): ...
    @classmethod
    def urls(cls, *args, **kwargs): ...
    @classmethod
    def hasHtml(cls, *args, **kwargs): ...
    @classmethod
    def html(cls, *args, **kwargs): ...
    @classmethod
    def hasColor(cls, *args, **kwargs): ...
    @classmethod
    def color(cls, *args, **kwargs): ...
    @classmethod
    def hasImage(cls, *args, **kwargs): ...
    @classmethod
    def image(cls, *args, **kwargs): ...
    @classmethod
    def formats(cls, *args, **kwargs): ...
    @classmethod
    def hasFormat(cls, *args, **kwargs): ...
    @classmethod
    def dataSize(cls, *args, **kwargs): ...
    @classmethod
    def mouseButtons(cls, *args, **kwargs): ...
    @classmethod
    def keyboardModifiers(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MFeedbackLine:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def setFormat(*args, **kwargs): ...
    @staticmethod
    def setTitle(*args, **kwargs): ...
    @staticmethod
    def setValue(*args, **kwargs): ...
    @staticmethod
    def clear(*args, **kwargs): ...
    @staticmethod
    def showFeedback(*args, **kwargs): ...
    @staticmethod
    def setShowFeedback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MFnManip3D(maya.OpenMaya.MFnTransform):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def isVisible(cls, *args, **kwargs): ...
    @classmethod
    def setVisible(cls, *args, **kwargs): ...
    @classmethod
    def manipScale(cls, *args, **kwargs): ...
    @classmethod
    def setManipScale(cls, *args, **kwargs): ...
    @classmethod
    def isOptimizePlaybackOn(cls, *args, **kwargs): ...
    @classmethod
    def setOptimizePlayback(cls, *args, **kwargs): ...
    @staticmethod
    def globalSize(*args, **kwargs): ...
    @staticmethod
    def setGlobalSize(*args, **kwargs): ...
    @staticmethod
    def handleSize(*args, **kwargs): ...
    @staticmethod
    def setHandleSize(*args, **kwargs): ...
    @staticmethod
    def lineSize(*args, **kwargs): ...
    @staticmethod
    def setLineSize(*args, **kwargs): ...
    @staticmethod
    def deleteManipulator(*args, **kwargs): ...
    @staticmethod
    def drawPlaneHandles(*args, **kwargs): ...
    @staticmethod
    def setDrawPlaneHandles(*args, **kwargs): ...
    @classmethod
    def rotateXYZValue(cls, *args, **kwargs): ...

class MFnCircleSweepManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToAnglePlug(cls, *args, **kwargs): ...
    @classmethod
    def setCenterPoint(cls, *args, **kwargs): ...
    @classmethod
    def setStartPoint(cls, *args, **kwargs): ...
    @classmethod
    def setEndPoint(cls, *args, **kwargs): ...
    @classmethod
    def setNormal(cls, *args, **kwargs): ...
    @classmethod
    def setRadius(cls, *args, **kwargs): ...
    @classmethod
    def setAngle(cls, *args, **kwargs): ...
    @classmethod
    def setDrawAsArc(cls, *args, **kwargs): ...
    @classmethod
    def startPoint(cls, *args, **kwargs): ...
    @classmethod
    def endPoint(cls, *args, **kwargs): ...
    @classmethod
    def centerIndex(cls, *args, **kwargs): ...
    @classmethod
    def axisIndex(cls, *args, **kwargs): ...
    @classmethod
    def angleIndex(cls, *args, **kwargs): ...
    @classmethod
    def startCircleIndex(cls, *args, **kwargs): ...
    @classmethod
    def endCircleIndex(cls, *args, **kwargs): ...

class MFnCurveSegmentManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToCurvePlug(cls, *args, **kwargs): ...
    @classmethod
    def connectToStartParamPlug(cls, *args, **kwargs): ...
    @classmethod
    def connectToEndParamPlug(cls, *args, **kwargs): ...
    @classmethod
    def setStartParameter(cls, *args, **kwargs): ...
    @classmethod
    def setEndParameter(cls, *args, **kwargs): ...
    @classmethod
    def startParameter(cls, *args, **kwargs): ...
    @classmethod
    def endParameter(cls, *args, **kwargs): ...
    @classmethod
    def curveIndex(cls, *args, **kwargs): ...
    @classmethod
    def startParamIndex(cls, *args, **kwargs): ...
    @classmethod
    def endParamIndex(cls, *args, **kwargs): ...

class MFnDirectionManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToDirectionPlug(cls, *args, **kwargs): ...
    @classmethod
    def setNormalizeDirection(cls, *args, **kwargs): ...
    @classmethod
    def setDrawStart(cls, *args, **kwargs): ...
    @classmethod
    def setStartPoint(cls, *args, **kwargs): ...
    @classmethod
    def setDirection(cls, *args, **kwargs): ...
    @classmethod
    def startPointIndex(cls, *args, **kwargs): ...
    @classmethod
    def endPointIndex(cls, *args, **kwargs): ...
    @classmethod
    def directionIndex(cls, *args, **kwargs): ...

class MFnDiscManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToAnglePlug(cls, *args, **kwargs): ...
    @classmethod
    def setCenterPoint(cls, *args, **kwargs): ...
    @classmethod
    def setNormal(cls, *args, **kwargs): ...
    @classmethod
    def setRadius(cls, *args, **kwargs): ...
    @classmethod
    def setAngle(cls, *args, **kwargs): ...
    @classmethod
    def centerIndex(cls, *args, **kwargs): ...
    @classmethod
    def axisIndex(cls, *args, **kwargs): ...
    @classmethod
    def angleIndex(cls, *args, **kwargs): ...

class MFnDistanceManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToDistancePlug(cls, *args, **kwargs): ...
    @classmethod
    def setStartPoint(cls, *args, **kwargs): ...
    @classmethod
    def setDirection(cls, *args, **kwargs): ...
    @classmethod
    def setDrawStart(cls, *args, **kwargs): ...
    @classmethod
    def setDrawLine(cls, *args, **kwargs): ...
    @classmethod
    def setScalingFactor(cls, *args, **kwargs): ...
    @classmethod
    def isDrawStartOn(cls, *args, **kwargs): ...
    @classmethod
    def isDrawLineOn(cls, *args, **kwargs): ...
    @classmethod
    def scalingFactor(cls, *args, **kwargs): ...
    @classmethod
    def distanceIndex(cls, *args, **kwargs): ...
    @classmethod
    def directionIndex(cls, *args, **kwargs): ...
    @classmethod
    def startPointIndex(cls, *args, **kwargs): ...
    @classmethod
    def currentPointIndex(cls, *args, **kwargs): ...

class MFnFreePointTriadManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    kYZPlane: ClassVar[int] = ...
    kXZPlane: ClassVar[int] = ...
    kXYPlane: ClassVar[int] = ...
    kViewPlane: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToPointPlug(cls, *args, **kwargs): ...
    @classmethod
    def setDrawAxes(cls, *args, **kwargs): ...
    @classmethod
    def setSnapMode(cls, *args, **kwargs): ...
    @classmethod
    def setKeyframeAll(cls, *args, **kwargs): ...
    @classmethod
    def setDrawArrowHead(cls, *args, **kwargs): ...
    @classmethod
    def setGlobalTriadPlane(cls, *args, **kwargs): ...
    @classmethod
    def setPoint(cls, *args, **kwargs): ...
    @classmethod
    def setDirection(cls, *args, **kwargs): ...
    @classmethod
    def isDrawAxesOn(cls, *args, **kwargs): ...
    @classmethod
    def isSnapModeOn(cls, *args, **kwargs): ...
    @classmethod
    def isKeyframeAllOn(cls, *args, **kwargs): ...
    @classmethod
    def pointIndex(cls, *args, **kwargs): ...

class MFnPointOnCurveManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToCurvePlug(cls, *args, **kwargs): ...
    @classmethod
    def connectToParamPlug(cls, *args, **kwargs): ...
    @classmethod
    def setDrawCurve(cls, *args, **kwargs): ...
    @classmethod
    def setParameter(cls, *args, **kwargs): ...
    @classmethod
    def isDrawCurveOn(cls, *args, **kwargs): ...
    @classmethod
    def parameter(cls, *args, **kwargs): ...
    @classmethod
    def curvePoint(cls, *args, **kwargs): ...
    @classmethod
    def curveIndex(cls, *args, **kwargs): ...
    @classmethod
    def paramIndex(cls, *args, **kwargs): ...

class MFnPointOnSurfaceManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToSurfacePlug(cls, *args, **kwargs): ...
    @classmethod
    def connectToParamPlug(cls, *args, **kwargs): ...
    @classmethod
    def setDrawSurface(cls, *args, **kwargs): ...
    @classmethod
    def setDrawArrows(cls, *args, **kwargs): ...
    @classmethod
    def setParameters(cls, *args, **kwargs): ...
    @classmethod
    def getParameters(cls, *args, **kwargs): ...
    @classmethod
    def isDrawSurfaceOn(cls, *args, **kwargs): ...
    @classmethod
    def surfaceIndex(cls, *args, **kwargs): ...
    @classmethod
    def paramIndex(cls, *args, **kwargs): ...

class MFnRotateManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    kObjectSpace: ClassVar[int] = ...
    kWorldSpace: ClassVar[int] = ...
    kGimbal: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToRotationPlug(cls, *args, **kwargs): ...
    @classmethod
    def connectToRotationCenterPlug(cls, *args, **kwargs): ...
    @classmethod
    def setInitialRotation(cls, *args, **kwargs): ...
    @classmethod
    def displayWithNode(cls, *args, **kwargs): ...
    @classmethod
    def setRotateMode(cls, *args, **kwargs): ...
    @classmethod
    def rotateMode(cls, *args, **kwargs): ...
    @classmethod
    def setSnapMode(cls, *args, **kwargs): ...
    @classmethod
    def isSnapModeOn(cls, *args, **kwargs): ...
    @classmethod
    def setSnapIncrement(cls, *args, **kwargs): ...
    @classmethod
    def snapIncrement(cls, *args, **kwargs): ...
    @classmethod
    def rotationIndex(cls, *args, **kwargs): ...
    @classmethod
    def rotationCenterIndex(cls, *args, **kwargs): ...
    @classmethod
    def setRotationCenter(cls, *args, **kwargs): ...

class MFnScaleManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    kDefaultOrientation: ClassVar[int] = ...
    kArbitraryOrientation: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToScalePlug(cls, *args, **kwargs): ...
    @classmethod
    def connectToScaleCenterPlug(cls, *args, **kwargs): ...
    @classmethod
    def setInitialScale(cls, *args, **kwargs): ...
    @classmethod
    def displayWithNode(cls, *args, **kwargs): ...
    @classmethod
    def setSnapMode(cls, *args, **kwargs): ...
    @classmethod
    def isSnapModeOn(cls, *args, **kwargs): ...
    @classmethod
    def setSnapIncrement(cls, *args, **kwargs): ...
    @classmethod
    def snapIncrement(cls, *args, **kwargs): ...
    @classmethod
    def setOrientation(cls, *args, **kwargs): ...
    @classmethod
    def getOrientation(cls, *args, **kwargs): ...
    @classmethod
    def setOrientationMode(cls, *args, **kwargs): ...
    @classmethod
    def getOrientationMode(cls, *args, **kwargs): ...
    @classmethod
    def scaleIndex(cls, *args, **kwargs): ...
    @classmethod
    def scaleCenterIndex(cls, *args, **kwargs): ...

class MFnStateManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToStatePlug(cls, *args, **kwargs): ...
    @classmethod
    def setInitialState(cls, *args, **kwargs): ...
    @classmethod
    def setMaxStates(cls, *args, **kwargs): ...
    @classmethod
    def maxStates(cls, *args, **kwargs): ...
    @classmethod
    def state(cls, *args, **kwargs): ...
    @classmethod
    def positionIndex(cls, *args, **kwargs): ...
    @classmethod
    def stateIndex(cls, *args, **kwargs): ...

class MFnToggleManip(MFnManip3D):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def connectToTogglePlug(cls, *args, **kwargs): ...
    @classmethod
    def startPoint(cls, *args, **kwargs): ...
    @classmethod
    def direction(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def toggle(cls, *args, **kwargs): ...
    @classmethod
    def startPointIndex(cls, *args, **kwargs): ...
    @classmethod
    def directionIndex(cls, *args, **kwargs): ...
    @classmethod
    def lengthIndex(cls, *args, **kwargs): ...
    @classmethod
    def toggleIndex(cls, *args, **kwargs): ...
    @classmethod
    def setStartPoint(cls, *args, **kwargs): ...
    @classmethod
    def setDirection(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def setToggle(cls, *args, **kwargs): ...

class MFnToolContext(maya.OpenMaya.MFnBase):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def title(cls, *args, **kwargs): ...

class MPanelCanvasInfo:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getViewportBounds(cls, *args, **kwargs): ...
    @classmethod
    def getViewportSize(cls, *args, **kwargs): ...
    @classmethod
    def setViewportBounds(cls, *args, **kwargs): ...
    @classmethod
    def supportsUIDrawing(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MGraphEditorInfo(MPanelCanvasInfo):
    kAnimCurveOutlinerOnly: ClassVar[int] = ...
    kAnimCurveHighlighted: ClassVar[int] = ...
    kAnimCurveSelected: ClassVar[int] = ...
    kAnimCurveAllKnown: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getAnimCurveNodes(cls, *args, **kwargs): ...
    @classmethod
    def isStackedViewportMode(cls, *args, **kwargs): ...
    @classmethod
    def isNormalizedViewportMode(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MHWShaderSwatchGenerator(maya.OpenMayaRender.MSwatchRenderBase):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def createObj(*args, **kwargs): ...
    @staticmethod
    def initialize(*args, **kwargs): ...
    @staticmethod
    def getSwatchBackgroundColor(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MManipData:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def isSimple(cls, *args, **kwargs): ...
    @classmethod
    def asBool(cls, *args, **kwargs): ...
    @classmethod
    def asShort(cls, *args, **kwargs): ...
    @classmethod
    def asLong(cls, *args, **kwargs): ...
    @classmethod
    def asUnsigned(cls, *args, **kwargs): ...
    @classmethod
    def asFloat(cls, *args, **kwargs): ...
    @classmethod
    def asDouble(cls, *args, **kwargs): ...
    @classmethod
    def asMObject(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MMaterial:
    __init__: ClassVar[Callable] = ...
    kColor: ClassVar[int] = ...
    kTransparency: ClassVar[int] = ...
    kAmbientColor: ClassVar[int] = ...
    kIncandescence: ClassVar[int] = ...
    kBumpMap: ClassVar[int] = ...
    kDiffuse: ClassVar[int] = ...
    kTransluscence: ClassVar[int] = ...
    kRoughness: ClassVar[int] = ...
    kHighlightSize: ClassVar[int] = ...
    kWhiteness: ClassVar[int] = ...
    kCosinePower: ClassVar[int] = ...
    kEccentricity: ClassVar[int] = ...
    kSpecularRollOff: ClassVar[int] = ...
    kSpecularColor: ClassVar[int] = ...
    kReflectivity: ClassVar[int] = ...
    kReflectedColor: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def evaluateMaterial(cls, *args, **kwargs): ...
    @classmethod
    def evaluateShininess(cls, *args, **kwargs): ...
    @classmethod
    def evaluateDiffuse(cls, *args, **kwargs): ...
    @classmethod
    def evaluateEmission(cls, *args, **kwargs): ...
    @classmethod
    def evaluateSpecular(cls, *args, **kwargs): ...
    @classmethod
    def evaluateTexture(cls, *args, **kwargs): ...
    @classmethod
    def materialIsTextured(cls, *args, **kwargs): ...
    @classmethod
    def setMaterial(cls, *args, **kwargs): ...
    @classmethod
    def getShininess(cls, *args, **kwargs): ...
    @classmethod
    def getDiffuse(cls, *args, **kwargs): ...
    @classmethod
    def getEmission(cls, *args, **kwargs): ...
    @classmethod
    def getSpecular(cls, *args, **kwargs): ...
    @classmethod
    def getHasTransparency(cls, *args, **kwargs): ...
    @classmethod
    def applyTexture(cls, *args, **kwargs): ...
    @classmethod
    def textureImage(cls, *args, **kwargs): ...
    @classmethod
    def getHwShaderNode(cls, *args, **kwargs): ...
    @staticmethod
    def defaultMaterial(*args, **kwargs): ...
    @classmethod
    def shadingEngine(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def evaluateTextureTransformation(cls, *args, **kwargs): ...
    @classmethod
    def getTextureTransformation(cls, *args, **kwargs): ...

class MMaterialArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MProgressWindow:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def reserve(*args, **kwargs): ...
    @staticmethod
    def startProgress(*args, **kwargs): ...
    @staticmethod
    def endProgress(*args, **kwargs): ...
    @staticmethod
    def setProgressRange(*args, **kwargs): ...
    @staticmethod
    def setProgressMin(*args, **kwargs): ...
    @staticmethod
    def setProgressMax(*args, **kwargs): ...
    @staticmethod
    def progressMin(*args, **kwargs): ...
    @staticmethod
    def progressMax(*args, **kwargs): ...
    @staticmethod
    def setProgress(*args, **kwargs): ...
    @staticmethod
    def advanceProgress(*args, **kwargs): ...
    @staticmethod
    def progress(*args, **kwargs): ...
    @staticmethod
    def setTitle(*args, **kwargs): ...
    @staticmethod
    def title(*args, **kwargs): ...
    @staticmethod
    def setProgressStatus(*args, **kwargs): ...
    @staticmethod
    def progressStatus(*args, **kwargs): ...
    @staticmethod
    def setInterruptable(*args, **kwargs): ...
    @staticmethod
    def isInterruptable(*args, **kwargs): ...
    @staticmethod
    def isCancelled(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MQtUtil:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def findControl(*args, **kwargs): ...
    @staticmethod
    def findLayout(*args, **kwargs): ...
    @staticmethod
    def findMenuItem(*args, **kwargs): ...
    @staticmethod
    def findWindow(*args, **kwargs): ...
    @staticmethod
    def fullName(*args, **kwargs): ...
    @staticmethod
    def getCurrentParent(*args, **kwargs): ...
    @staticmethod
    def createPixmap(*args, **kwargs): ...
    @staticmethod
    def createCursor(*args, **kwargs): ...
    @staticmethod
    def createIcon(*args, **kwargs): ...
    @staticmethod
    def getLayoutChildren(*args, **kwargs): ...
    @staticmethod
    def getParent(*args, **kwargs): ...
    @staticmethod
    def addWidgetToMayaLayout(*args, **kwargs): ...
    @staticmethod
    def registerUIType(*args, **kwargs): ...
    @staticmethod
    def deregisterUIType(*args, **kwargs): ...
    @staticmethod
    def mainWindow(*args, **kwargs): ...
    @staticmethod
    def resourceGLContext(*args, **kwargs): ...
    @staticmethod
    def nativeWindow(*args, **kwargs): ...
    @staticmethod
    def toMString(*args, **kwargs): ...
    @staticmethod
    def toQString(*args, **kwargs): ...
    @staticmethod
    def dpiScale(*args, **kwargs): ...
    @staticmethod
    def newClocaleValidator(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MSelectInfo(MDrawInfo):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def view(cls, *args, **kwargs): ...
    @classmethod
    def singleSelection(cls, *args, **kwargs): ...
    @classmethod
    def selectClosest(cls, *args, **kwargs): ...
    @classmethod
    def selectable(cls, *args, **kwargs): ...
    @classmethod
    def selectableComponent(cls, *args, **kwargs): ...
    @classmethod
    def selectRect(cls, *args, **kwargs): ...
    @classmethod
    def isRay(cls, *args, **kwargs): ...
    @classmethod
    def getAlignmentMatrix(cls, *args, **kwargs): ...
    @classmethod
    def getLocalRay(cls, *args, **kwargs): ...
    @classmethod
    def selectForHilite(cls, *args, **kwargs): ...
    @classmethod
    def selectOnHilitedOnly(cls, *args, **kwargs): ...
    @classmethod
    def highestPriority(cls, *args, **kwargs): ...
    @classmethod
    def setHighestPriority(cls, *args, **kwargs): ...
    @classmethod
    def addSelection(cls, *args, **kwargs): ...
    @classmethod
    def setSnapPoint(cls, *args, **kwargs): ...
    @classmethod
    def selectPath(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MTextureEditorDrawInfo:
    __init__: ClassVar[Callable] = ...
    kDrawFunctionFirst: ClassVar[int] = ...
    kDrawWireframe: ClassVar[int] = ...
    kDrawEverything: ClassVar[int] = ...
    kDrawVertexForSelect: ClassVar[int] = ...
    kDrawEdgeForSelect: ClassVar[int] = ...
    kDrawFacetForSelect: ClassVar[int] = ...
    kDrawUVForSelect: ClassVar[int] = ...
    kDrawFunctionLast: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def drawingFunction(cls, *args, **kwargs): ...
    @classmethod
    def setDrawingFunction(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MToolsInfo:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def setDirtyFlag(*args, **kwargs): ...
    @staticmethod
    def resetDirtyFlag(*args, **kwargs): ...
    @staticmethod
    def isDirty(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MUiMessage(maya.OpenMaya.MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addUiDeletedCallback(*args, **kwargs): ...
    @staticmethod
    def addCameraChangedCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewDestroyMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPreRenderMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPostRenderMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPreMultipleDrawPassMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPostMultipleDrawPassMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewRendererChangedCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewRenderOverrideChangedCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MPaintMessage(maya.OpenMaya.MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addVertexColorCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MObjectListFilter:
    __init__: ClassVar[Callable] = ...
    kInclusionList: ClassVar[int] = ...
    kExclusionList: ClassVar[int] = ...
    kNumberOfFilterTypes: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kAddRemoveObjects: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def requireListUpdate(cls, *args, **kwargs): ...
    @classmethod
    def getList(cls, *args, **kwargs): ...
    @classmethod
    def dependentOnSceneUpdates(cls, *args, **kwargs): ...
    @classmethod
    def setFilterType(cls, *args, **kwargs): ...
    @classmethod
    def filterType(cls, *args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def UIname(cls, *args, **kwargs): ...
    @classmethod
    def setUIName(cls, *args, **kwargs): ...
    @staticmethod
    def registerFilter(*args, **kwargs): ...
    @staticmethod
    def deregisterFilter(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MExternalDropCallback:
    kMayaDefault: ClassVar[int] = ...
    kNoMayaDefaultAndAccept: ClassVar[int] = ...
    kNoMayaDefaultAndNoAccept: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    __disown__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def externalDropCallback(cls, *args, **kwargs): ...
    @staticmethod
    def addCallback(*args, **kwargs): ...
    @staticmethod
    def removeCallback(*args, **kwargs): ...
    @staticmethod
    def addUFEItemCallback(*args, **kwargs): ...
    @staticmethod
    def removeUFEItemCallback(*args, **kwargs): ...
