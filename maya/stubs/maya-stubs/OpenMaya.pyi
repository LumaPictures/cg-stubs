from _typeshed import Incomplete
from typing import Callable, ClassVar

class _SwigNonDynamicMeta(type):
    __setattr__: ClassVar[Callable] = ...

class charPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class intPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class shortPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class floatPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class doublePtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class boolPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class uIntPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class uCharPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class array3dInt:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def getptr(cls, *args, **kwargs): ...

class array4dInt:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def getptr(cls, *args, **kwargs): ...

class array2dFloat:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def getptr(cls, *args, **kwargs): ...

class array3dFloat:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def getptr(cls, *args, **kwargs): ...

class array4dFloat:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def getptr(cls, *args, **kwargs): ...

class array2dDouble:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def getptr(cls, *args, **kwargs): ...

class array3dDouble:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def getptr(cls, *args, **kwargs): ...

class array4dDouble:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def getptr(cls, *args, **kwargs): ...

class MFn:
    __init__: ClassVar[Callable] = ...
    kInvalid: ClassVar[int] = ...
    kBase: ClassVar[int] = ...
    kNamedObject: ClassVar[int] = ...
    kModel: ClassVar[int] = ...
    kDependencyNode: ClassVar[int] = ...
    kAddDoubleLinear: ClassVar[int] = ...
    kAffect: ClassVar[int] = ...
    kAnimCurve: ClassVar[int] = ...
    kAnimCurveTimeToAngular: ClassVar[int] = ...
    kAnimCurveTimeToDistance: ClassVar[int] = ...
    kAnimCurveTimeToTime: ClassVar[int] = ...
    kAnimCurveTimeToUnitless: ClassVar[int] = ...
    kAnimCurveUnitlessToAngular: ClassVar[int] = ...
    kAnimCurveUnitlessToDistance: ClassVar[int] = ...
    kAnimCurveUnitlessToTime: ClassVar[int] = ...
    kAnimCurveUnitlessToUnitless: ClassVar[int] = ...
    kResultCurve: ClassVar[int] = ...
    kResultCurveTimeToAngular: ClassVar[int] = ...
    kResultCurveTimeToDistance: ClassVar[int] = ...
    kResultCurveTimeToTime: ClassVar[int] = ...
    kResultCurveTimeToUnitless: ClassVar[int] = ...
    kAngleBetween: ClassVar[int] = ...
    kAudio: ClassVar[int] = ...
    kBackground: ClassVar[int] = ...
    kColorBackground: ClassVar[int] = ...
    kFileBackground: ClassVar[int] = ...
    kRampBackground: ClassVar[int] = ...
    kBlend: ClassVar[int] = ...
    kBlendTwoAttr: ClassVar[int] = ...
    kBlendWeighted: ClassVar[int] = ...
    kBlendDevice: ClassVar[int] = ...
    kBlendColors: ClassVar[int] = ...
    kBump: ClassVar[int] = ...
    kBump3d: ClassVar[int] = ...
    kCameraView: ClassVar[int] = ...
    kChainToSpline: ClassVar[int] = ...
    kChoice: ClassVar[int] = ...
    kCondition: ClassVar[int] = ...
    kContrast: ClassVar[int] = ...
    kClampColor: ClassVar[int] = ...
    kCreate: ClassVar[int] = ...
    kAlignCurve: ClassVar[int] = ...
    kAlignSurface: ClassVar[int] = ...
    kAttachCurve: ClassVar[int] = ...
    kAttachSurface: ClassVar[int] = ...
    kAvgCurves: ClassVar[int] = ...
    kAvgSurfacePoints: ClassVar[int] = ...
    kAvgNurbsSurfacePoints: ClassVar[int] = ...
    kBevel: ClassVar[int] = ...
    kBirailSrf: ClassVar[int] = ...
    kDPbirailSrf: ClassVar[int] = ...
    kMPbirailSrf: ClassVar[int] = ...
    kSPbirailSrf: ClassVar[int] = ...
    kBoundary: ClassVar[int] = ...
    kCircle: ClassVar[int] = ...
    kCloseCurve: ClassVar[int] = ...
    kClosestPointOnSurface: ClassVar[int] = ...
    kCloseSurface: ClassVar[int] = ...
    kCurveFromSurface: ClassVar[int] = ...
    kCurveFromSurfaceBnd: ClassVar[int] = ...
    kCurveFromSurfaceCoS: ClassVar[int] = ...
    kCurveFromSurfaceIso: ClassVar[int] = ...
    kCurveInfo: ClassVar[int] = ...
    kDetachCurve: ClassVar[int] = ...
    kDetachSurface: ClassVar[int] = ...
    kExtendCurve: ClassVar[int] = ...
    kExtendSurface: ClassVar[int] = ...
    kExtrude: ClassVar[int] = ...
    kFFblendSrf: ClassVar[int] = ...
    kFFfilletSrf: ClassVar[int] = ...
    kFilletCurve: ClassVar[int] = ...
    kFitBspline: ClassVar[int] = ...
    kFlow: ClassVar[int] = ...
    kHardenPointCurve: ClassVar[int] = ...
    kIllustratorCurve: ClassVar[int] = ...
    kInsertKnotCrv: ClassVar[int] = ...
    kInsertKnotSrf: ClassVar[int] = ...
    kIntersectSurface: ClassVar[int] = ...
    kNurbsTesselate: ClassVar[int] = ...
    kNurbsPlane: ClassVar[int] = ...
    kNurbsCube: ClassVar[int] = ...
    kOffsetCos: ClassVar[int] = ...
    kOffsetCurve: ClassVar[int] = ...
    kPlanarTrimSrf: ClassVar[int] = ...
    kPointOnCurveInfo: ClassVar[int] = ...
    kPointOnSurfaceInfo: ClassVar[int] = ...
    kPrimitive: ClassVar[int] = ...
    kProjectCurve: ClassVar[int] = ...
    kProjectTangent: ClassVar[int] = ...
    kRBFsurface: ClassVar[int] = ...
    kRebuildCurve: ClassVar[int] = ...
    kRebuildSurface: ClassVar[int] = ...
    kReverseCurve: ClassVar[int] = ...
    kReverseSurface: ClassVar[int] = ...
    kRevolve: ClassVar[int] = ...
    kRevolvedPrimitive: ClassVar[int] = ...
    kCone: ClassVar[int] = ...
    kRenderCone: ClassVar[int] = ...
    kCylinder: ClassVar[int] = ...
    kSphere: ClassVar[int] = ...
    kSkin: ClassVar[int] = ...
    kStitchSrf: ClassVar[int] = ...
    kSubCurve: ClassVar[int] = ...
    kSurfaceInfo: ClassVar[int] = ...
    kTextCurves: ClassVar[int] = ...
    kTrim: ClassVar[int] = ...
    kUntrim: ClassVar[int] = ...
    kDagNode: ClassVar[int] = ...
    kProxy: ClassVar[int] = ...
    kUnderWorld: ClassVar[int] = ...
    kTransform: ClassVar[int] = ...
    kAimConstraint: ClassVar[int] = ...
    kLookAt: ClassVar[int] = ...
    kGeometryConstraint: ClassVar[int] = ...
    kGeometryVarGroup: ClassVar[int] = ...
    kAnyGeometryVarGroup: ClassVar[int] = ...
    kCurveVarGroup: ClassVar[int] = ...
    kMeshVarGroup: ClassVar[int] = ...
    kSurfaceVarGroup: ClassVar[int] = ...
    kIkEffector: ClassVar[int] = ...
    kIkHandle: ClassVar[int] = ...
    kJoint: ClassVar[int] = ...
    kManipulator3D: ClassVar[int] = ...
    kArrowManip: ClassVar[int] = ...
    kAxesActionManip: ClassVar[int] = ...
    kBallProjectionManip: ClassVar[int] = ...
    kCircleManip: ClassVar[int] = ...
    kScreenAlignedCircleManip: ClassVar[int] = ...
    kCircleSweepManip: ClassVar[int] = ...
    kConcentricProjectionManip: ClassVar[int] = ...
    kCubicProjectionManip: ClassVar[int] = ...
    kCylindricalProjectionManip: ClassVar[int] = ...
    kDiscManip: ClassVar[int] = ...
    kFreePointManip: ClassVar[int] = ...
    kCenterManip: ClassVar[int] = ...
    kLimitManip: ClassVar[int] = ...
    kEnableManip: ClassVar[int] = ...
    kFreePointTriadManip: ClassVar[int] = ...
    kPropMoveTriadManip: ClassVar[int] = ...
    kTowPointManip: ClassVar[int] = ...
    kPolyCreateToolManip: ClassVar[int] = ...
    kPolySplitToolManip: ClassVar[int] = ...
    kGeometryOnLineManip: ClassVar[int] = ...
    kCameraPlaneManip: ClassVar[int] = ...
    kToggleOnLineManip: ClassVar[int] = ...
    kStateManip: ClassVar[int] = ...
    kIsoparmManip: ClassVar[int] = ...
    kLineManip: ClassVar[int] = ...
    kManipContainer: ClassVar[int] = ...
    kAverageCurveManip: ClassVar[int] = ...
    kBarnDoorManip: ClassVar[int] = ...
    kBevelManip: ClassVar[int] = ...
    kBlendManip: ClassVar[int] = ...
    kButtonManip: ClassVar[int] = ...
    kCameraManip: ClassVar[int] = ...
    kCoiManip: ClassVar[int] = ...
    kCpManip: ClassVar[int] = ...
    kCreateCVManip: ClassVar[int] = ...
    kCreateEPManip: ClassVar[int] = ...
    kCurveEdManip: ClassVar[int] = ...
    kCurveSegmentManip: ClassVar[int] = ...
    kDirectionManip: ClassVar[int] = ...
    kDofManip: ClassVar[int] = ...
    kDropoffManip: ClassVar[int] = ...
    kExtendCurveDistanceManip: ClassVar[int] = ...
    kExtrudeManip: ClassVar[int] = ...
    kIkSplineManip: ClassVar[int] = ...
    kIkRPManip: ClassVar[int] = ...
    kJointClusterManip: ClassVar[int] = ...
    kLightManip: ClassVar[int] = ...
    kMotionPathManip: ClassVar[int] = ...
    kOffsetCosManip: ClassVar[int] = ...
    kOffsetCurveManip: ClassVar[int] = ...
    kProjectionManip: ClassVar[int] = ...
    kPolyProjectionManip: ClassVar[int] = ...
    kProjectionUVManip: ClassVar[int] = ...
    kProjectionMultiManip: ClassVar[int] = ...
    kProjectTangentManip: ClassVar[int] = ...
    kPropModManip: ClassVar[int] = ...
    kQuadPtOnLineManip: ClassVar[int] = ...
    kRbfSrfManip: ClassVar[int] = ...
    kReverseCurveManip: ClassVar[int] = ...
    kReverseCrvManip: ClassVar[int] = ...
    kReverseSurfaceManip: ClassVar[int] = ...
    kRevolveManip: ClassVar[int] = ...
    kRevolvedPrimitiveManip: ClassVar[int] = ...
    kSpotManip: ClassVar[int] = ...
    kSpotCylinderManip: ClassVar[int] = ...
    kTriplanarProjectionManip: ClassVar[int] = ...
    kTrsManip: ClassVar[int] = ...
    kDblTrsManip: ClassVar[int] = ...
    kPivotManip2D: ClassVar[int] = ...
    kManip2DContainer: ClassVar[int] = ...
    kPolyMoveUVManip: ClassVar[int] = ...
    kPolyMappingManip: ClassVar[int] = ...
    kPolyModifierManip: ClassVar[int] = ...
    kPolyMoveVertexManip: ClassVar[int] = ...
    kPolyVertexNormalManip: ClassVar[int] = ...
    kTexSmudgeUVManip: ClassVar[int] = ...
    kTexLatticeDeformManip: ClassVar[int] = ...
    kTexLattice: ClassVar[int] = ...
    kTexSmoothManip: ClassVar[int] = ...
    kTrsTransManip: ClassVar[int] = ...
    kTrsInsertManip: ClassVar[int] = ...
    kTrsXformManip: ClassVar[int] = ...
    kManipulator2D: ClassVar[int] = ...
    kTranslateManip2D: ClassVar[int] = ...
    kPlanarProjectionManip: ClassVar[int] = ...
    kPointOnCurveManip: ClassVar[int] = ...
    kTowPointOnCurveManip: ClassVar[int] = ...
    kMarkerManip: ClassVar[int] = ...
    kPointOnLineManip: ClassVar[int] = ...
    kPointOnSurfaceManip: ClassVar[int] = ...
    kTranslateUVManip: ClassVar[int] = ...
    kRotateBoxManip: ClassVar[int] = ...
    kRotateManip: ClassVar[int] = ...
    kHandleRotateManip: ClassVar[int] = ...
    kRotateLimitsManip: ClassVar[int] = ...
    kScaleLimitsManip: ClassVar[int] = ...
    kScaleManip: ClassVar[int] = ...
    kScalingBoxManip: ClassVar[int] = ...
    kScriptManip: ClassVar[int] = ...
    kSphericalProjectionManip: ClassVar[int] = ...
    kTextureManip3D: ClassVar[int] = ...
    kToggleManip: ClassVar[int] = ...
    kTranslateBoxManip: ClassVar[int] = ...
    kTranslateLimitsManip: ClassVar[int] = ...
    kTranslateManip: ClassVar[int] = ...
    kTrimManip: ClassVar[int] = ...
    kJointTranslateManip: ClassVar[int] = ...
    kManipulator: ClassVar[int] = ...
    kCirclePointManip: ClassVar[int] = ...
    kDimensionManip: ClassVar[int] = ...
    kFixedLineManip: ClassVar[int] = ...
    kLightProjectionGeometry: ClassVar[int] = ...
    kLineArrowManip: ClassVar[int] = ...
    kPointManip: ClassVar[int] = ...
    kTriadManip: ClassVar[int] = ...
    kNormalConstraint: ClassVar[int] = ...
    kOrientConstraint: ClassVar[int] = ...
    kPointConstraint: ClassVar[int] = ...
    kSymmetryConstraint: ClassVar[int] = ...
    kParentConstraint: ClassVar[int] = ...
    kPoleVectorConstraint: ClassVar[int] = ...
    kScaleConstraint: ClassVar[int] = ...
    kTangentConstraint: ClassVar[int] = ...
    kUnknownTransform: ClassVar[int] = ...
    kWorld: ClassVar[int] = ...
    kShape: ClassVar[int] = ...
    kBaseLattice: ClassVar[int] = ...
    kCamera: ClassVar[int] = ...
    kCluster: ClassVar[int] = ...
    kSoftMod: ClassVar[int] = ...
    kCollision: ClassVar[int] = ...
    kDummy: ClassVar[int] = ...
    kEmitter: ClassVar[int] = ...
    kField: ClassVar[int] = ...
    kAir: ClassVar[int] = ...
    kDrag: ClassVar[int] = ...
    kGravity: ClassVar[int] = ...
    kNewton: ClassVar[int] = ...
    kRadial: ClassVar[int] = ...
    kTurbulence: ClassVar[int] = ...
    kUniform: ClassVar[int] = ...
    kVortex: ClassVar[int] = ...
    kGeometric: ClassVar[int] = ...
    kCurve: ClassVar[int] = ...
    kNurbsCurve: ClassVar[int] = ...
    kNurbsCurveGeom: ClassVar[int] = ...
    kDimension: ClassVar[int] = ...
    kAngle: ClassVar[int] = ...
    kAnnotation: ClassVar[int] = ...
    kDistance: ClassVar[int] = ...
    kArcLength: ClassVar[int] = ...
    kRadius: ClassVar[int] = ...
    kParamDimension: ClassVar[int] = ...
    kDirectedDisc: ClassVar[int] = ...
    kRenderRect: ClassVar[int] = ...
    kEnvFogShape: ClassVar[int] = ...
    kLattice: ClassVar[int] = ...
    kLatticeGeom: ClassVar[int] = ...
    kLocator: ClassVar[int] = ...
    kDropoffLocator: ClassVar[int] = ...
    kMarker: ClassVar[int] = ...
    kOrientationMarker: ClassVar[int] = ...
    kPositionMarker: ClassVar[int] = ...
    kOrientationLocator: ClassVar[int] = ...
    kTrimLocator: ClassVar[int] = ...
    kPlane: ClassVar[int] = ...
    kSketchPlane: ClassVar[int] = ...
    kGroundPlane: ClassVar[int] = ...
    kOrthoGrid: ClassVar[int] = ...
    kSprite: ClassVar[int] = ...
    kSurface: ClassVar[int] = ...
    kNurbsSurface: ClassVar[int] = ...
    kNurbsSurfaceGeom: ClassVar[int] = ...
    kMesh: ClassVar[int] = ...
    kMeshGeom: ClassVar[int] = ...
    kRenderSphere: ClassVar[int] = ...
    kFlexor: ClassVar[int] = ...
    kClusterFlexor: ClassVar[int] = ...
    kGuideLine: ClassVar[int] = ...
    kLight: ClassVar[int] = ...
    kAmbientLight: ClassVar[int] = ...
    kNonAmbientLight: ClassVar[int] = ...
    kAreaLight: ClassVar[int] = ...
    kLinearLight: ClassVar[int] = ...
    kNonExtendedLight: ClassVar[int] = ...
    kDirectionalLight: ClassVar[int] = ...
    kPointLight: ClassVar[int] = ...
    kSpotLight: ClassVar[int] = ...
    kParticle: ClassVar[int] = ...
    kPolyToolFeedbackShape: ClassVar[int] = ...
    kRigidConstraint: ClassVar[int] = ...
    kRigid: ClassVar[int] = ...
    kSpring: ClassVar[int] = ...
    kUnknownDag: ClassVar[int] = ...
    kDefaultLightList: ClassVar[int] = ...
    kDeleteComponent: ClassVar[int] = ...
    kDispatchCompute: ClassVar[int] = ...
    kShadingEngine: ClassVar[int] = ...
    kDisplacementShader: ClassVar[int] = ...
    kDistanceBetween: ClassVar[int] = ...
    kDOF: ClassVar[int] = ...
    kDummyConnectable: ClassVar[int] = ...
    kDynamicsController: ClassVar[int] = ...
    kGeoConnectable: ClassVar[int] = ...
    kExpression: ClassVar[int] = ...
    kExtract: ClassVar[int] = ...
    kFilter: ClassVar[int] = ...
    kFilterClosestSample: ClassVar[int] = ...
    kFilterEuler: ClassVar[int] = ...
    kFilterSimplify: ClassVar[int] = ...
    kGammaCorrect: ClassVar[int] = ...
    kGeometryFilt: ClassVar[int] = ...
    kBendLattice: ClassVar[int] = ...
    kBlendShape: ClassVar[int] = ...
    kCombinationShape: ClassVar[int] = ...
    kBulgeLattice: ClassVar[int] = ...
    kFFD: ClassVar[int] = ...
    kFfdDualBase: ClassVar[int] = ...
    kRigidDeform: ClassVar[int] = ...
    kSculpt: ClassVar[int] = ...
    kTextureDeformer: ClassVar[int] = ...
    kTextureDeformerHandle: ClassVar[int] = ...
    kTweak: ClassVar[int] = ...
    kWeightGeometryFilt: ClassVar[int] = ...
    kClusterFilter: ClassVar[int] = ...
    kSoftModFilter: ClassVar[int] = ...
    kJointCluster: ClassVar[int] = ...
    kDeltaMush: ClassVar[int] = ...
    kTension: ClassVar[int] = ...
    kMorph: ClassVar[int] = ...
    kSolidify: ClassVar[int] = ...
    kProximityWrap: ClassVar[int] = ...
    kWire: ClassVar[int] = ...
    kGroupId: ClassVar[int] = ...
    kGroupParts: ClassVar[int] = ...
    kGuide: ClassVar[int] = ...
    kHsvToRgb: ClassVar[int] = ...
    kHyperGraphInfo: ClassVar[int] = ...
    kHyperLayout: ClassVar[int] = ...
    kHyperView: ClassVar[int] = ...
    kIkSolver: ClassVar[int] = ...
    kMCsolver: ClassVar[int] = ...
    kPASolver: ClassVar[int] = ...
    kSCsolver: ClassVar[int] = ...
    kRPsolver: ClassVar[int] = ...
    kSplineSolver: ClassVar[int] = ...
    kIkSystem: ClassVar[int] = ...
    kImagePlane: ClassVar[int] = ...
    kLambert: ClassVar[int] = ...
    kReflect: ClassVar[int] = ...
    kBlinn: ClassVar[int] = ...
    kPhong: ClassVar[int] = ...
    kPhongExplorer: ClassVar[int] = ...
    kLayeredShader: ClassVar[int] = ...
    kStandardSurface: ClassVar[int] = ...
    kLightInfo: ClassVar[int] = ...
    kLeastSquares: ClassVar[int] = ...
    kLightFogMaterial: ClassVar[int] = ...
    kEnvFogMaterial: ClassVar[int] = ...
    kLightList: ClassVar[int] = ...
    kLightSource: ClassVar[int] = ...
    kLuminance: ClassVar[int] = ...
    kMakeGroup: ClassVar[int] = ...
    kMaterial: ClassVar[int] = ...
    kDiffuseMaterial: ClassVar[int] = ...
    kLambertMaterial: ClassVar[int] = ...
    kBlinnMaterial: ClassVar[int] = ...
    kPhongMaterial: ClassVar[int] = ...
    kLightSourceMaterial: ClassVar[int] = ...
    kMaterialInfo: ClassVar[int] = ...
    kMaterialTemplate: ClassVar[int] = ...
    kMatrixAdd: ClassVar[int] = ...
    kMatrixHold: ClassVar[int] = ...
    kMatrixMult: ClassVar[int] = ...
    kMatrixPass: ClassVar[int] = ...
    kMatrixWtAdd: ClassVar[int] = ...
    kMidModifier: ClassVar[int] = ...
    kMidModifierWithMatrix: ClassVar[int] = ...
    kPolyBevel: ClassVar[int] = ...
    kPolyTweak: ClassVar[int] = ...
    kPolyAppend: ClassVar[int] = ...
    kPolyChipOff: ClassVar[int] = ...
    kPolyCloseBorder: ClassVar[int] = ...
    kPolyCollapseEdge: ClassVar[int] = ...
    kPolyCollapseF: ClassVar[int] = ...
    kPolyCylProj: ClassVar[int] = ...
    kPolyDelEdge: ClassVar[int] = ...
    kPolyDelFacet: ClassVar[int] = ...
    kPolyDelVertex: ClassVar[int] = ...
    kPolyExtrudeFacet: ClassVar[int] = ...
    kPolyMapCut: ClassVar[int] = ...
    kPolyMapDel: ClassVar[int] = ...
    kPolyMapSew: ClassVar[int] = ...
    kPolyMergeEdge: ClassVar[int] = ...
    kPolyMergeFacet: ClassVar[int] = ...
    kPolyMoveEdge: ClassVar[int] = ...
    kPolyMoveFacet: ClassVar[int] = ...
    kPolyMoveFacetUV: ClassVar[int] = ...
    kPolyMoveUV: ClassVar[int] = ...
    kPolyMoveVertex: ClassVar[int] = ...
    kPolyMoveVertexUV: ClassVar[int] = ...
    kPolyNormal: ClassVar[int] = ...
    kPolyPlanProj: ClassVar[int] = ...
    kPolyProj: ClassVar[int] = ...
    kPolyQuad: ClassVar[int] = ...
    kPolySmooth: ClassVar[int] = ...
    kPolySoftEdge: ClassVar[int] = ...
    kPolySphProj: ClassVar[int] = ...
    kPolySplit: ClassVar[int] = ...
    kPolySubdEdge: ClassVar[int] = ...
    kPolySubdFacet: ClassVar[int] = ...
    kPolyTriangulate: ClassVar[int] = ...
    kPolyCreator: ClassVar[int] = ...
    kPolyPrimitive: ClassVar[int] = ...
    kPolyCone: ClassVar[int] = ...
    kPolyCube: ClassVar[int] = ...
    kPolyCylinder: ClassVar[int] = ...
    kPolyMesh: ClassVar[int] = ...
    kPolySphere: ClassVar[int] = ...
    kPolyTorus: ClassVar[int] = ...
    kPolyCreateFacet: ClassVar[int] = ...
    kPolyUnite: ClassVar[int] = ...
    kMotionPath: ClassVar[int] = ...
    kPluginMotionPathNode: ClassVar[int] = ...
    kMultilisterLight: ClassVar[int] = ...
    kMultiplyDivide: ClassVar[int] = ...
    kOldGeometryConstraint: ClassVar[int] = ...
    kOpticalFX: ClassVar[int] = ...
    kParticleAgeMapper: ClassVar[int] = ...
    kParticleCloud: ClassVar[int] = ...
    kParticleColorMapper: ClassVar[int] = ...
    kParticleIncandecenceMapper: ClassVar[int] = ...
    kParticleTransparencyMapper: ClassVar[int] = ...
    kPartition: ClassVar[int] = ...
    kPlace2dTexture: ClassVar[int] = ...
    kPlace3dTexture: ClassVar[int] = ...
    kPluginDependNode: ClassVar[int] = ...
    kPluginLocatorNode: ClassVar[int] = ...
    kPlusMinusAverage: ClassVar[int] = ...
    kPointMatrixMult: ClassVar[int] = ...
    kPolySeparate: ClassVar[int] = ...
    kPostProcessList: ClassVar[int] = ...
    kProjection: ClassVar[int] = ...
    kRecord: ClassVar[int] = ...
    kRenderUtilityList: ClassVar[int] = ...
    kReverse: ClassVar[int] = ...
    kRgbToHsv: ClassVar[int] = ...
    kRigidSolver: ClassVar[int] = ...
    kSet: ClassVar[int] = ...
    kTextureBakeSet: ClassVar[int] = ...
    kVertexBakeSet: ClassVar[int] = ...
    kSetRange: ClassVar[int] = ...
    kShaderGlow: ClassVar[int] = ...
    kShaderList: ClassVar[int] = ...
    kShadingMap: ClassVar[int] = ...
    kSamplerInfo: ClassVar[int] = ...
    kShapeFragment: ClassVar[int] = ...
    kSimpleVolumeShader: ClassVar[int] = ...
    kSl60: ClassVar[int] = ...
    kSnapshot: ClassVar[int] = ...
    kStoryBoard: ClassVar[int] = ...
    kSummaryObject: ClassVar[int] = ...
    kSuper: ClassVar[int] = ...
    kControl: ClassVar[int] = ...
    kSurfaceLuminance: ClassVar[int] = ...
    kSurfaceShader: ClassVar[int] = ...
    kTextureList: ClassVar[int] = ...
    kTextureEnv: ClassVar[int] = ...
    kEnvBall: ClassVar[int] = ...
    kEnvCube: ClassVar[int] = ...
    kEnvChrome: ClassVar[int] = ...
    kEnvSky: ClassVar[int] = ...
    kEnvSphere: ClassVar[int] = ...
    kTexture2d: ClassVar[int] = ...
    kBulge: ClassVar[int] = ...
    kChecker: ClassVar[int] = ...
    kCloth: ClassVar[int] = ...
    kFileTexture: ClassVar[int] = ...
    kFractal: ClassVar[int] = ...
    kGrid: ClassVar[int] = ...
    kMountain: ClassVar[int] = ...
    kRamp: ClassVar[int] = ...
    kStencil: ClassVar[int] = ...
    kWater: ClassVar[int] = ...
    kTexture3d: ClassVar[int] = ...
    kBrownian: ClassVar[int] = ...
    kCloud: ClassVar[int] = ...
    kCrater: ClassVar[int] = ...
    kGranite: ClassVar[int] = ...
    kLeather: ClassVar[int] = ...
    kMarble: ClassVar[int] = ...
    kRock: ClassVar[int] = ...
    kSnow: ClassVar[int] = ...
    kSolidFractal: ClassVar[int] = ...
    kStucco: ClassVar[int] = ...
    kTxSl: ClassVar[int] = ...
    kWood: ClassVar[int] = ...
    kTime: ClassVar[int] = ...
    kTimeToUnitConversion: ClassVar[int] = ...
    kRenderSetup: ClassVar[int] = ...
    kRenderGlobals: ClassVar[int] = ...
    kRenderGlobalsList: ClassVar[int] = ...
    kRenderQuality: ClassVar[int] = ...
    kResolution: ClassVar[int] = ...
    kHardwareRenderGlobals: ClassVar[int] = ...
    kArrayMapper: ClassVar[int] = ...
    kUnitConversion: ClassVar[int] = ...
    kUnitToTimeConversion: ClassVar[int] = ...
    kUseBackground: ClassVar[int] = ...
    kUnknown: ClassVar[int] = ...
    kVectorProduct: ClassVar[int] = ...
    kVolumeShader: ClassVar[int] = ...
    kComponent: ClassVar[int] = ...
    kCurveCVComponent: ClassVar[int] = ...
    kCurveEPComponent: ClassVar[int] = ...
    kCurveKnotComponent: ClassVar[int] = ...
    kCurveParamComponent: ClassVar[int] = ...
    kIsoparmComponent: ClassVar[int] = ...
    kPivotComponent: ClassVar[int] = ...
    kSurfaceCVComponent: ClassVar[int] = ...
    kSurfaceEPComponent: ClassVar[int] = ...
    kSurfaceKnotComponent: ClassVar[int] = ...
    kEdgeComponent: ClassVar[int] = ...
    kLatticeComponent: ClassVar[int] = ...
    kSurfaceRangeComponent: ClassVar[int] = ...
    kDecayRegionCapComponent: ClassVar[int] = ...
    kDecayRegionComponent: ClassVar[int] = ...
    kMeshComponent: ClassVar[int] = ...
    kMeshEdgeComponent: ClassVar[int] = ...
    kMeshPolygonComponent: ClassVar[int] = ...
    kMeshFrEdgeComponent: ClassVar[int] = ...
    kMeshVertComponent: ClassVar[int] = ...
    kMeshFaceVertComponent: ClassVar[int] = ...
    kOrientationComponent: ClassVar[int] = ...
    kSubVertexComponent: ClassVar[int] = ...
    kMultiSubVertexComponent: ClassVar[int] = ...
    kSetGroupComponent: ClassVar[int] = ...
    kDynParticleSetComponent: ClassVar[int] = ...
    kSelectionItem: ClassVar[int] = ...
    kDagSelectionItem: ClassVar[int] = ...
    kNonDagSelectionItem: ClassVar[int] = ...
    kItemList: ClassVar[int] = ...
    kAttribute: ClassVar[int] = ...
    kNumericAttribute: ClassVar[int] = ...
    kDoubleAngleAttribute: ClassVar[int] = ...
    kFloatAngleAttribute: ClassVar[int] = ...
    kDoubleLinearAttribute: ClassVar[int] = ...
    kFloatLinearAttribute: ClassVar[int] = ...
    kTimeAttribute: ClassVar[int] = ...
    kEnumAttribute: ClassVar[int] = ...
    kUnitAttribute: ClassVar[int] = ...
    kTypedAttribute: ClassVar[int] = ...
    kCompoundAttribute: ClassVar[int] = ...
    kGenericAttribute: ClassVar[int] = ...
    kLightDataAttribute: ClassVar[int] = ...
    kMatrixAttribute: ClassVar[int] = ...
    kFloatMatrixAttribute: ClassVar[int] = ...
    kMessageAttribute: ClassVar[int] = ...
    kOpaqueAttribute: ClassVar[int] = ...
    kPlugin: ClassVar[int] = ...
    kData: ClassVar[int] = ...
    kComponentListData: ClassVar[int] = ...
    kDoubleArrayData: ClassVar[int] = ...
    kIntArrayData: ClassVar[int] = ...
    kUintArrayData: ClassVar[int] = ...
    kLatticeData: ClassVar[int] = ...
    kMatrixData: ClassVar[int] = ...
    kMeshData: ClassVar[int] = ...
    kNurbsSurfaceData: ClassVar[int] = ...
    kNurbsCurveData: ClassVar[int] = ...
    kNumericData: ClassVar[int] = ...
    kData2Double: ClassVar[int] = ...
    kData2Float: ClassVar[int] = ...
    kData2Int: ClassVar[int] = ...
    kData2Short: ClassVar[int] = ...
    kData3Double: ClassVar[int] = ...
    kData3Float: ClassVar[int] = ...
    kData3Int: ClassVar[int] = ...
    kData3Short: ClassVar[int] = ...
    kPluginData: ClassVar[int] = ...
    kPointArrayData: ClassVar[int] = ...
    kMatrixArrayData: ClassVar[int] = ...
    kSphereData: ClassVar[int] = ...
    kStringData: ClassVar[int] = ...
    kStringArrayData: ClassVar[int] = ...
    kVectorArrayData: ClassVar[int] = ...
    kSelectionList: ClassVar[int] = ...
    kTransformGeometry: ClassVar[int] = ...
    kCommEdgePtManip: ClassVar[int] = ...
    kCommEdgeOperManip: ClassVar[int] = ...
    kCommEdgeSegmentManip: ClassVar[int] = ...
    kCommCornerManip: ClassVar[int] = ...
    kCommCornerOperManip: ClassVar[int] = ...
    kPluginDeformerNode: ClassVar[int] = ...
    kTorus: ClassVar[int] = ...
    kPolyBoolOp: ClassVar[int] = ...
    kSingleShadingSwitch: ClassVar[int] = ...
    kDoubleShadingSwitch: ClassVar[int] = ...
    kTripleShadingSwitch: ClassVar[int] = ...
    kNurbsSquare: ClassVar[int] = ...
    kAnisotropy: ClassVar[int] = ...
    kNonLinear: ClassVar[int] = ...
    kDeformFunc: ClassVar[int] = ...
    kDeformBend: ClassVar[int] = ...
    kDeformTwist: ClassVar[int] = ...
    kDeformSquash: ClassVar[int] = ...
    kDeformFlare: ClassVar[int] = ...
    kDeformSine: ClassVar[int] = ...
    kDeformWave: ClassVar[int] = ...
    kDeformBendManip: ClassVar[int] = ...
    kDeformTwistManip: ClassVar[int] = ...
    kDeformSquashManip: ClassVar[int] = ...
    kDeformFlareManip: ClassVar[int] = ...
    kDeformSineManip: ClassVar[int] = ...
    kDeformWaveManip: ClassVar[int] = ...
    kSoftModManip: ClassVar[int] = ...
    kDistanceManip: ClassVar[int] = ...
    kScript: ClassVar[int] = ...
    kCurveFromMeshEdge: ClassVar[int] = ...
    kCurveCurveIntersect: ClassVar[int] = ...
    kNurbsCircular3PtArc: ClassVar[int] = ...
    kNurbsCircular2PtArc: ClassVar[int] = ...
    kOffsetSurface: ClassVar[int] = ...
    kRoundConstantRadius: ClassVar[int] = ...
    kRoundRadiusManip: ClassVar[int] = ...
    kRoundRadiusCrvManip: ClassVar[int] = ...
    kRoundConstantRadiusManip: ClassVar[int] = ...
    kThreePointArcManip: ClassVar[int] = ...
    kTwoPointArcManip: ClassVar[int] = ...
    kTextButtonManip: ClassVar[int] = ...
    kOffsetSurfaceManip: ClassVar[int] = ...
    kImageData: ClassVar[int] = ...
    kImageLoad: ClassVar[int] = ...
    kImageSave: ClassVar[int] = ...
    kImageNetSrc: ClassVar[int] = ...
    kImageNetDest: ClassVar[int] = ...
    kImageRender: ClassVar[int] = ...
    kImageAdd: ClassVar[int] = ...
    kImageDiff: ClassVar[int] = ...
    kImageMultiply: ClassVar[int] = ...
    kImageOver: ClassVar[int] = ...
    kImageUnder: ClassVar[int] = ...
    kImageColorCorrect: ClassVar[int] = ...
    kImageBlur: ClassVar[int] = ...
    kImageFilter: ClassVar[int] = ...
    kImageDepth: ClassVar[int] = ...
    kImageDisplay: ClassVar[int] = ...
    kImageView: ClassVar[int] = ...
    kImageMotionBlur: ClassVar[int] = ...
    kViewColorManager: ClassVar[int] = ...
    kMatrixFloatData: ClassVar[int] = ...
    kSkinShader: ClassVar[int] = ...
    kComponentManip: ClassVar[int] = ...
    kSelectionListData: ClassVar[int] = ...
    kObjectFilter: ClassVar[int] = ...
    kObjectMultiFilter: ClassVar[int] = ...
    kObjectNameFilter: ClassVar[int] = ...
    kObjectTypeFilter: ClassVar[int] = ...
    kObjectAttrFilter: ClassVar[int] = ...
    kObjectRenderFilter: ClassVar[int] = ...
    kObjectScriptFilter: ClassVar[int] = ...
    kSelectionListOperator: ClassVar[int] = ...
    kSubdiv: ClassVar[int] = ...
    kPolyToSubdiv: ClassVar[int] = ...
    kSkinClusterFilter: ClassVar[int] = ...
    kKeyingGroup: ClassVar[int] = ...
    kCharacter: ClassVar[int] = ...
    kCharacterOffset: ClassVar[int] = ...
    kDagPose: ClassVar[int] = ...
    kStitchAsNurbsShell: ClassVar[int] = ...
    kExplodeNurbsShell: ClassVar[int] = ...
    kNurbsBoolean: ClassVar[int] = ...
    kStitchSrfManip: ClassVar[int] = ...
    kForceUpdateManip: ClassVar[int] = ...
    kPluginManipContainer: ClassVar[int] = ...
    kPolySewEdge: ClassVar[int] = ...
    kPolyMergeVert: ClassVar[int] = ...
    kPolySmoothFacet: ClassVar[int] = ...
    kSmoothCurve: ClassVar[int] = ...
    kGlobalStitch: ClassVar[int] = ...
    kSubdivCVComponent: ClassVar[int] = ...
    kSubdivEdgeComponent: ClassVar[int] = ...
    kSubdivFaceComponent: ClassVar[int] = ...
    kUVManip2D: ClassVar[int] = ...
    kTranslateUVManip2D: ClassVar[int] = ...
    kRotateUVManip2D: ClassVar[int] = ...
    kScaleUVManip2D: ClassVar[int] = ...
    kPolyTweakUV: ClassVar[int] = ...
    kMoveUVShellManip2D: ClassVar[int] = ...
    kPluginShape: ClassVar[int] = ...
    kGeometryData: ClassVar[int] = ...
    kSingleIndexedComponent: ClassVar[int] = ...
    kDoubleIndexedComponent: ClassVar[int] = ...
    kTripleIndexedComponent: ClassVar[int] = ...
    kExtendSurfaceDistanceManip: ClassVar[int] = ...
    kSquareSrf: ClassVar[int] = ...
    kSquareSrfManip: ClassVar[int] = ...
    kSubdivToPoly: ClassVar[int] = ...
    kDynBase: ClassVar[int] = ...
    kDynEmitterManip: ClassVar[int] = ...
    kDynFieldsManip: ClassVar[int] = ...
    kDynBaseFieldManip: ClassVar[int] = ...
    kDynAirManip: ClassVar[int] = ...
    kDynNewtonManip: ClassVar[int] = ...
    kDynTurbulenceManip: ClassVar[int] = ...
    kDynSpreadManip: ClassVar[int] = ...
    kDynAttenuationManip: ClassVar[int] = ...
    kDynArrayAttrsData: ClassVar[int] = ...
    kPluginFieldNode: ClassVar[int] = ...
    kPluginEmitterNode: ClassVar[int] = ...
    kPluginSpringNode: ClassVar[int] = ...
    kDisplayLayer: ClassVar[int] = ...
    kDisplayLayerManager: ClassVar[int] = ...
    kPolyColorPerVertex: ClassVar[int] = ...
    kCreateColorSet: ClassVar[int] = ...
    kDeleteColorSet: ClassVar[int] = ...
    kCopyColorSet: ClassVar[int] = ...
    kBlendColorSet: ClassVar[int] = ...
    kPolyColorMod: ClassVar[int] = ...
    kPolyColorDel: ClassVar[int] = ...
    kCharacterMappingData: ClassVar[int] = ...
    kDynSweptGeometryData: ClassVar[int] = ...
    kWrapFilter: ClassVar[int] = ...
    kMeshVtxFaceComponent: ClassVar[int] = ...
    kBinaryData: ClassVar[int] = ...
    kAttribute2Double: ClassVar[int] = ...
    kAttribute2Float: ClassVar[int] = ...
    kAttribute2Short: ClassVar[int] = ...
    kAttribute2Int: ClassVar[int] = ...
    kAttribute3Double: ClassVar[int] = ...
    kAttribute3Float: ClassVar[int] = ...
    kAttribute3Short: ClassVar[int] = ...
    kAttribute3Int: ClassVar[int] = ...
    kReference: ClassVar[int] = ...
    kBlindData: ClassVar[int] = ...
    kBlindDataTemplate: ClassVar[int] = ...
    kPolyBlindData: ClassVar[int] = ...
    kPolyNormalPerVertex: ClassVar[int] = ...
    kNurbsToSubdiv: ClassVar[int] = ...
    kPluginIkSolver: ClassVar[int] = ...
    kInstancer: ClassVar[int] = ...
    kMoveVertexManip: ClassVar[int] = ...
    kStroke: ClassVar[int] = ...
    kBrush: ClassVar[int] = ...
    kStrokeGlobals: ClassVar[int] = ...
    kPluginGeometryData: ClassVar[int] = ...
    kLightLink: ClassVar[int] = ...
    kDynGlobals: ClassVar[int] = ...
    kPolyReduce: ClassVar[int] = ...
    kLodThresholds: ClassVar[int] = ...
    kChooser: ClassVar[int] = ...
    kLodGroup: ClassVar[int] = ...
    kMultDoubleLinear: ClassVar[int] = ...
    kFourByFourMatrix: ClassVar[int] = ...
    kTowPointOnSurfaceManip: ClassVar[int] = ...
    kSurfaceEdManip: ClassVar[int] = ...
    kSurfaceFaceComponent: ClassVar[int] = ...
    kClipScheduler: ClassVar[int] = ...
    kClipLibrary: ClassVar[int] = ...
    kSubSurface: ClassVar[int] = ...
    kSmoothTangentSrf: ClassVar[int] = ...
    kRenderPass: ClassVar[int] = ...
    kRenderPassSet: ClassVar[int] = ...
    kRenderLayer: ClassVar[int] = ...
    kRenderLayerManager: ClassVar[int] = ...
    kPassContributionMap: ClassVar[int] = ...
    kPrecompExport: ClassVar[int] = ...
    kRenderTarget: ClassVar[int] = ...
    kRenderedImageSource: ClassVar[int] = ...
    kImageSource: ClassVar[int] = ...
    kPolyFlipEdge: ClassVar[int] = ...
    kPolyExtrudeEdge: ClassVar[int] = ...
    kAnimBlend: ClassVar[int] = ...
    kAnimBlendInOut: ClassVar[int] = ...
    kPolyAppendVertex: ClassVar[int] = ...
    kUvChooser: ClassVar[int] = ...
    kSubdivCompId: ClassVar[int] = ...
    kVolumeAxis: ClassVar[int] = ...
    kDeleteUVSet: ClassVar[int] = ...
    kSubdHierBlind: ClassVar[int] = ...
    kSubdBlindData: ClassVar[int] = ...
    kCharacterMap: ClassVar[int] = ...
    kLayeredTexture: ClassVar[int] = ...
    kSubdivCollapse: ClassVar[int] = ...
    kParticleSamplerInfo: ClassVar[int] = ...
    kCopyUVSet: ClassVar[int] = ...
    kCreateUVSet: ClassVar[int] = ...
    kClip: ClassVar[int] = ...
    kPolySplitVert: ClassVar[int] = ...
    kSubdivData: ClassVar[int] = ...
    kSubdivGeom: ClassVar[int] = ...
    kUInt64ArrayData: ClassVar[int] = ...
    kInt64ArrayData: ClassVar[int] = ...
    kPolySplitEdge: ClassVar[int] = ...
    kSubdivReverseFaces: ClassVar[int] = ...
    kMeshMapComponent: ClassVar[int] = ...
    kSectionManip: ClassVar[int] = ...
    kXsectionSubdivEdit: ClassVar[int] = ...
    kSubdivToNurbs: ClassVar[int] = ...
    kEditCurve: ClassVar[int] = ...
    kEditCurveManip: ClassVar[int] = ...
    kCrossSectionManager: ClassVar[int] = ...
    kCreateSectionManip: ClassVar[int] = ...
    kCrossSectionEditManip: ClassVar[int] = ...
    kDropOffFunction: ClassVar[int] = ...
    kSubdBoolean: ClassVar[int] = ...
    kSubdModifyEdge: ClassVar[int] = ...
    kModifyEdgeCrvManip: ClassVar[int] = ...
    kModifyEdgeManip: ClassVar[int] = ...
    kScalePointManip: ClassVar[int] = ...
    kTransformBoxManip: ClassVar[int] = ...
    kSymmetryLocator: ClassVar[int] = ...
    kSymmetryMapVector: ClassVar[int] = ...
    kSymmetryMapCurve: ClassVar[int] = ...
    kCurveFromSubdivEdge: ClassVar[int] = ...
    kCreateBPManip: ClassVar[int] = ...
    kModifyEdgeBaseManip: ClassVar[int] = ...
    kSubdExtrudeFace: ClassVar[int] = ...
    kSubdivSurfaceVarGroup: ClassVar[int] = ...
    kSfRevolveManip: ClassVar[int] = ...
    kCurveFromSubdivFace: ClassVar[int] = ...
    kUnused1: ClassVar[int] = ...
    kUnused2: ClassVar[int] = ...
    kUnused3: ClassVar[int] = ...
    kUnused4: ClassVar[int] = ...
    kUnused5: ClassVar[int] = ...
    kUnused6: ClassVar[int] = ...
    kPolyTransfer: ClassVar[int] = ...
    kPolyAverageVertex: ClassVar[int] = ...
    kPolyAutoProj: ClassVar[int] = ...
    kPolyLayoutUV: ClassVar[int] = ...
    kPolyMapSewMove: ClassVar[int] = ...
    kSubdModifier: ClassVar[int] = ...
    kSubdMoveVertex: ClassVar[int] = ...
    kSubdMoveEdge: ClassVar[int] = ...
    kSubdMoveFace: ClassVar[int] = ...
    kSubdDelFace: ClassVar[int] = ...
    kSnapshotShape: ClassVar[int] = ...
    kSubdivMapComponent: ClassVar[int] = ...
    kJiggleDeformer: ClassVar[int] = ...
    kGlobalCacheControls: ClassVar[int] = ...
    kDiskCache: ClassVar[int] = ...
    kSubdCloseBorder: ClassVar[int] = ...
    kSubdMergeVert: ClassVar[int] = ...
    kBoxData: ClassVar[int] = ...
    kBox: ClassVar[int] = ...
    kRenderBox: ClassVar[int] = ...
    kSubdSplitFace: ClassVar[int] = ...
    kVolumeFog: ClassVar[int] = ...
    kSubdTweakUV: ClassVar[int] = ...
    kSubdMapCut: ClassVar[int] = ...
    kSubdLayoutUV: ClassVar[int] = ...
    kSubdMapSewMove: ClassVar[int] = ...
    kOcean: ClassVar[int] = ...
    kVolumeNoise: ClassVar[int] = ...
    kSubdAutoProj: ClassVar[int] = ...
    kSubdSubdivideFace: ClassVar[int] = ...
    kNoise: ClassVar[int] = ...
    kAttribute4Double: ClassVar[int] = ...
    kData4Double: ClassVar[int] = ...
    kSubdPlanProj: ClassVar[int] = ...
    kSubdTweak: ClassVar[int] = ...
    kSubdProjectionManip: ClassVar[int] = ...
    kSubdMappingManip: ClassVar[int] = ...
    kHardwareReflectionMap: ClassVar[int] = ...
    kPolyNormalizeUV: ClassVar[int] = ...
    kPolyFlipUV: ClassVar[int] = ...
    kHwShaderNode: ClassVar[int] = ...
    kPluginHardwareShader: ClassVar[int] = ...
    kPluginHwShaderNode: ClassVar[int] = ...
    kSubdAddTopology: ClassVar[int] = ...
    kSubdCleanTopology: ClassVar[int] = ...
    kImplicitCone: ClassVar[int] = ...
    kImplicitSphere: ClassVar[int] = ...
    kRampShader: ClassVar[int] = ...
    kVolumeLight: ClassVar[int] = ...
    kOceanShader: ClassVar[int] = ...
    kBevelPlus: ClassVar[int] = ...
    kStyleCurve: ClassVar[int] = ...
    kPolyCut: ClassVar[int] = ...
    kPolyPoke: ClassVar[int] = ...
    kPolyWedgeFace: ClassVar[int] = ...
    kPolyCutManipContainer: ClassVar[int] = ...
    kPolyCutManip: ClassVar[int] = ...
    kPolyMirrorManipContainer: ClassVar[int] = ...
    kPolyPokeManip: ClassVar[int] = ...
    kFluidTexture3D: ClassVar[int] = ...
    kFluidTexture2D: ClassVar[int] = ...
    kPolyMergeUV: ClassVar[int] = ...
    kPolyStraightenUVBorder: ClassVar[int] = ...
    kAlignManip: ClassVar[int] = ...
    kPluginTransformNode: ClassVar[int] = ...
    kFluid: ClassVar[int] = ...
    kFluidGeom: ClassVar[int] = ...
    kFluidData: ClassVar[int] = ...
    kSmear: ClassVar[int] = ...
    kStringShadingSwitch: ClassVar[int] = ...
    kStudioClearCoat: ClassVar[int] = ...
    kFluidEmitter: ClassVar[int] = ...
    kHeightField: ClassVar[int] = ...
    kGeoConnector: ClassVar[int] = ...
    kSnapshotPath: ClassVar[int] = ...
    kPluginObjectSet: ClassVar[int] = ...
    kQuadShadingSwitch: ClassVar[int] = ...
    kPolyExtrudeVertex: ClassVar[int] = ...
    kPairBlend: ClassVar[int] = ...
    kTextManip: ClassVar[int] = ...
    kViewManip: ClassVar[int] = ...
    kXformManip: ClassVar[int] = ...
    kMute: ClassVar[int] = ...
    kConstraint: ClassVar[int] = ...
    kTrimWithBoundaries: ClassVar[int] = ...
    kCurveFromMeshCoM: ClassVar[int] = ...
    kFollicle: ClassVar[int] = ...
    kHairSystem: ClassVar[int] = ...
    kRemapValue: ClassVar[int] = ...
    kRemapColor: ClassVar[int] = ...
    kRemapHsv: ClassVar[int] = ...
    kHairConstraint: ClassVar[int] = ...
    kTimeFunction: ClassVar[int] = ...
    kMentalRayTexture: ClassVar[int] = ...
    kObjectBinFilter: ClassVar[int] = ...
    kPolySmoothProxy: ClassVar[int] = ...
    kPfxGeometry: ClassVar[int] = ...
    kPfxHair: ClassVar[int] = ...
    kHairTubeShader: ClassVar[int] = ...
    kPsdFileTexture: ClassVar[int] = ...
    kKeyframeDelta: ClassVar[int] = ...
    kKeyframeDeltaMove: ClassVar[int] = ...
    kKeyframeDeltaScale: ClassVar[int] = ...
    kKeyframeDeltaAddRemove: ClassVar[int] = ...
    kKeyframeDeltaBlockAddRemove: ClassVar[int] = ...
    kKeyframeDeltaInfType: ClassVar[int] = ...
    kKeyframeDeltaTangent: ClassVar[int] = ...
    kKeyframeDeltaWeighted: ClassVar[int] = ...
    kKeyframeDeltaBreakdown: ClassVar[int] = ...
    kPolyMirror: ClassVar[int] = ...
    kPolyCreaseEdge: ClassVar[int] = ...
    kPolyPinUV: ClassVar[int] = ...
    kHikEffector: ClassVar[int] = ...
    kHikIKEffector: ClassVar[int] = ...
    kHikFKJoint: ClassVar[int] = ...
    kHikSolver: ClassVar[int] = ...
    kHikHandle: ClassVar[int] = ...
    kProxyManager: ClassVar[int] = ...
    kPolyAutoProjManip: ClassVar[int] = ...
    kPolyPrism: ClassVar[int] = ...
    kPolyPyramid: ClassVar[int] = ...
    kPolySplitRing: ClassVar[int] = ...
    kPfxToon: ClassVar[int] = ...
    kToonLineAttributes: ClassVar[int] = ...
    kPolyDuplicateEdge: ClassVar[int] = ...
    kFacade: ClassVar[int] = ...
    kMaterialFacade: ClassVar[int] = ...
    kEnvFacade: ClassVar[int] = ...
    kAISEnvFacade: ClassVar[int] = ...
    kLineModifier: ClassVar[int] = ...
    kPolyArrow: ClassVar[int] = ...
    kPolyPrimitiveMisc: ClassVar[int] = ...
    kPolyPlatonicSolid: ClassVar[int] = ...
    kPolyPipe: ClassVar[int] = ...
    kHikFloorContactMarker: ClassVar[int] = ...
    kHikGroundPlane: ClassVar[int] = ...
    kPolyComponentData: ClassVar[int] = ...
    kPolyHelix: ClassVar[int] = ...
    kCacheFile: ClassVar[int] = ...
    kHistorySwitch: ClassVar[int] = ...
    kClosestPointOnMesh: ClassVar[int] = ...
    kUVPin: ClassVar[int] = ...
    kProximityPin: ClassVar[int] = ...
    kTransferAttributes: ClassVar[int] = ...
    kDynamicConstraint: ClassVar[int] = ...
    kNComponent: ClassVar[int] = ...
    kPolyBridgeEdge: ClassVar[int] = ...
    kCacheableNode: ClassVar[int] = ...
    kNucleus: ClassVar[int] = ...
    kNBase: ClassVar[int] = ...
    kCacheBase: ClassVar[int] = ...
    kCacheBlend: ClassVar[int] = ...
    kCacheTrack: ClassVar[int] = ...
    kKeyframeRegionManip: ClassVar[int] = ...
    kCurveNormalizerAngle: ClassVar[int] = ...
    kCurveNormalizerLinear: ClassVar[int] = ...
    kHyperLayoutDG: ClassVar[int] = ...
    kPluginImagePlaneNode: ClassVar[int] = ...
    kNCloth: ClassVar[int] = ...
    kNParticle: ClassVar[int] = ...
    kNRigid: ClassVar[int] = ...
    kPluginParticleAttributeMapperNode: ClassVar[int] = ...
    kCameraSet: ClassVar[int] = ...
    kPluginCameraSet: ClassVar[int] = ...
    kContainer: ClassVar[int] = ...
    kFloatVectorArrayData: ClassVar[int] = ...
    kNObjectData: ClassVar[int] = ...
    kNObject: ClassVar[int] = ...
    kPluginConstraintNode: ClassVar[int] = ...
    kAsset: ClassVar[int] = ...
    kPolyEdgeToCurve: ClassVar[int] = ...
    kAnimLayer: ClassVar[int] = ...
    kBlendNodeBase: ClassVar[int] = ...
    kBlendNodeBoolean: ClassVar[int] = ...
    kBlendNodeDouble: ClassVar[int] = ...
    kBlendNodeDoubleAngle: ClassVar[int] = ...
    kBlendNodeDoubleLinear: ClassVar[int] = ...
    kBlendNodeEnum: ClassVar[int] = ...
    kBlendNodeFloat: ClassVar[int] = ...
    kBlendNodeFloatAngle: ClassVar[int] = ...
    kBlendNodeFloatLinear: ClassVar[int] = ...
    kBlendNodeInt16: ClassVar[int] = ...
    kBlendNodeInt32: ClassVar[int] = ...
    kBlendNodeAdditiveScale: ClassVar[int] = ...
    kBlendNodeAdditiveRotation: ClassVar[int] = ...
    kPluginManipulatorNode: ClassVar[int] = ...
    kNIdData: ClassVar[int] = ...
    kNId: ClassVar[int] = ...
    kFloatArrayData: ClassVar[int] = ...
    kMembrane: ClassVar[int] = ...
    kMergeVertsToolManip: ClassVar[int] = ...
    kUint64SingleIndexedComponent: ClassVar[int] = ...
    kPolyToolFeedbackManip: ClassVar[int] = ...
    kPolySelectEditFeedbackManip: ClassVar[int] = ...
    kWriteToFrameBuffer: ClassVar[int] = ...
    kWriteToColorBuffer: ClassVar[int] = ...
    kWriteToVectorBuffer: ClassVar[int] = ...
    kWriteToDepthBuffer: ClassVar[int] = ...
    kWriteToLabelBuffer: ClassVar[int] = ...
    kStereoCameraMaster: ClassVar[int] = ...
    kSequenceManager: ClassVar[int] = ...
    kSequencer: ClassVar[int] = ...
    kShot: ClassVar[int] = ...
    kBlendNodeTime: ClassVar[int] = ...
    kCreateBezierManip: ClassVar[int] = ...
    kBezierCurve: ClassVar[int] = ...
    kBezierCurveData: ClassVar[int] = ...
    kNurbsCurveToBezier: ClassVar[int] = ...
    kBezierCurveToNurbs: ClassVar[int] = ...
    kPolySpinEdge: ClassVar[int] = ...
    kPolyHoleFace: ClassVar[int] = ...
    kPointOnPolyConstraint: ClassVar[int] = ...
    kPolyConnectComponents: ClassVar[int] = ...
    kSkinBinding: ClassVar[int] = ...
    kVolumeBindManip: ClassVar[int] = ...
    kVertexWeightSet: ClassVar[int] = ...
    kNearestPointOnCurve: ClassVar[int] = ...
    kColorProfile: ClassVar[int] = ...
    kAdskMaterial: ClassVar[int] = ...
    kContainerBase: ClassVar[int] = ...
    kDagContainer: ClassVar[int] = ...
    kPolyUVRectangle: ClassVar[int] = ...
    kHardwareRenderingGlobals: ClassVar[int] = ...
    kPolyProjectCurve: ClassVar[int] = ...
    kRenderingList: ClassVar[int] = ...
    kPolyExtrudeManip: ClassVar[int] = ...
    kPolyExtrudeManipContainer: ClassVar[int] = ...
    kThreadedDevice: ClassVar[int] = ...
    kClientDevice: ClassVar[int] = ...
    kPluginClientDevice: ClassVar[int] = ...
    kPluginThreadedDevice: ClassVar[int] = ...
    kTimeWarp: ClassVar[int] = ...
    kAssembly: ClassVar[int] = ...
    kClipGhostShape: ClassVar[int] = ...
    kClipToGhostData: ClassVar[int] = ...
    kMandelbrot: ClassVar[int] = ...
    kMandelbrot3D: ClassVar[int] = ...
    kGreasePlane: ClassVar[int] = ...
    kGreasePlaneRenderShape: ClassVar[int] = ...
    kGreasePencilSequence: ClassVar[int] = ...
    kEditMetadata: ClassVar[int] = ...
    kCreaseSet: ClassVar[int] = ...
    kPolyEditEdgeFlow: ClassVar[int] = ...
    kFosterParent: ClassVar[int] = ...
    kSnapUVManip2D: ClassVar[int] = ...
    kToolContext: ClassVar[int] = ...
    kNLE: ClassVar[int] = ...
    kShrinkWrapFilter: ClassVar[int] = ...
    kEditsManager: ClassVar[int] = ...
    kPolyBevel2: ClassVar[int] = ...
    kPolyCBoolOp: ClassVar[int] = ...
    kGeomBind: ClassVar[int] = ...
    kColorMgtGlobals: ClassVar[int] = ...
    kPolyBevel3: ClassVar[int] = ...
    kTimeEditorClipBase: ClassVar[int] = ...
    kTimeEditorClipEvaluator: ClassVar[int] = ...
    kTimeEditorClip: ClassVar[int] = ...
    kTimeEditor: ClassVar[int] = ...
    kTimeEditorTracks: ClassVar[int] = ...
    kTimeEditorInterpolator: ClassVar[int] = ...
    kTimeEditorAnimSource: ClassVar[int] = ...
    kCaddyManipBase: ClassVar[int] = ...
    kPolyCaddyManip: ClassVar[int] = ...
    kPolyModifierManipContainer: ClassVar[int] = ...
    kPolyRemesh: ClassVar[int] = ...
    kPolyContourProj: ClassVar[int] = ...
    kContourProjectionManip: ClassVar[int] = ...
    kNodeGraphEditorInfo: ClassVar[int] = ...
    kNodeGraphEditorBookmarks: ClassVar[int] = ...
    kNodeGraphEditorBookmarkInfo: ClassVar[int] = ...
    kPluginSkinCluster: ClassVar[int] = ...
    kPluginGeometryFilter: ClassVar[int] = ...
    kPluginBlendShape: ClassVar[int] = ...
    kPolyPassThru: ClassVar[int] = ...
    kTrackInfoManager: ClassVar[int] = ...
    kPolyClean: ClassVar[int] = ...
    kShapeEditorManager: ClassVar[int] = ...
    kOceanDeformer: ClassVar[int] = ...
    kPoseInterpolatorManager: ClassVar[int] = ...
    kControllerTag: ClassVar[int] = ...
    kReForm: ClassVar[int] = ...
    kCustomEvaluatorClusterNode: ClassVar[int] = ...
    kPolyCircularize: ClassVar[int] = ...
    kArubaTesselate: ClassVar[int] = ...
    kReorderUVSet: ClassVar[int] = ...
    kUfeProxyTransform: ClassVar[int] = ...
    kDecomposeMatrix: ClassVar[int] = ...
    kComposeMatrix: ClassVar[int] = ...
    kBlendMatrix: ClassVar[int] = ...
    kPickMatrix: ClassVar[int] = ...
    kAimMatrix: ClassVar[int] = ...
    kPrimitiveFalloff: ClassVar[int] = ...
    kBlendFalloff: ClassVar[int] = ...
    kUniformFalloff: ClassVar[int] = ...
    kTransferFalloff: ClassVar[int] = ...
    kComponentFalloff: ClassVar[int] = ...
    kProximityFalloff: ClassVar[int] = ...
    kSubsetFalloff: ClassVar[int] = ...
    kWeightFunctionData: ClassVar[int] = ...
    kFalloffEval: ClassVar[int] = ...
    kComponentMatch: ClassVar[int] = ...
    kPolyUnsmooth: ClassVar[int] = ...
    kPolySmartExtrude: ClassVar[int] = ...
    kPolySmartExtrudeManip: ClassVar[int] = ...
    kPolyReFormManipContainer: ClassVar[int] = ...
    kPolyReFormManip: ClassVar[int] = ...
    kPolyAxis: ClassVar[int] = ...
    kAngleToDoubleNode: ClassVar[int] = ...
    kDoubleToAngleNode: ClassVar[int] = ...
    kAbsolute: ClassVar[int] = ...
    kACos: ClassVar[int] = ...
    kAnd: ClassVar[int] = ...
    kASin: ClassVar[int] = ...
    kATan: ClassVar[int] = ...
    kATan2: ClassVar[int] = ...
    kAverage: ClassVar[int] = ...
    kCeil: ClassVar[int] = ...
    kClampRange: ClassVar[int] = ...
    kCos: ClassVar[int] = ...
    kDeterminant: ClassVar[int] = ...
    kEqual: ClassVar[int] = ...
    kFloor: ClassVar[int] = ...
    kGreaterThan: ClassVar[int] = ...
    kInverseLinearInterpolation: ClassVar[int] = ...
    kLength: ClassVar[int] = ...
    kLessThan: ClassVar[int] = ...
    kLinearInterpolation: ClassVar[int] = ...
    kLog: ClassVar[int] = ...
    kMax: ClassVar[int] = ...
    kMin: ClassVar[int] = ...
    kModulo: ClassVar[int] = ...
    kMultiply: ClassVar[int] = ...
    kNegate: ClassVar[int] = ...
    kNormalize: ClassVar[int] = ...
    kNot: ClassVar[int] = ...
    kOr: ClassVar[int] = ...
    kPIConstant: ClassVar[int] = ...
    kPower: ClassVar[int] = ...
    kRotateVector: ClassVar[int] = ...
    kRound: ClassVar[int] = ...
    kSin: ClassVar[int] = ...
    kSmoothStep: ClassVar[int] = ...
    kSum: ClassVar[int] = ...
    kTan: ClassVar[int] = ...
    kTruncate: ClassVar[int] = ...
    kDotProduct: ClassVar[int] = ...
    kCrossProduct: ClassVar[int] = ...
    kMultiplyPointByMatrix: ClassVar[int] = ...
    kMultiplyVectorByMatrix: ClassVar[int] = ...
    kAxisFromMatrix: ClassVar[int] = ...
    kDivide: ClassVar[int] = ...
    kSubtract: ClassVar[int] = ...
    kTranslationFromMatrix: ClassVar[int] = ...
    kRowFromMatrix: ClassVar[int] = ...
    kColumnFromMatrix: ClassVar[int] = ...
    kScaleFromMatrix: ClassVar[int] = ...
    kRotationFromMatrix: ClassVar[int] = ...
    kParentMatrix: ClassVar[int] = ...
    kPolyBevelCutback: ClassVar[int] = ...
    kOpenPBRSurface: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kAttribute2Long: ClassVar[int] = ...
    kAttribute3Long: ClassVar[int] = ...
    kData2Long: ClassVar[int] = ...
    kData3Long: ClassVar[int] = ...
    thisown: Incomplete
    nodeType: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
MAYA_APP_VERSION: int
MAYA_API_VERSION: int
MAYA_CUSTOM_VERSION_MAJOR: int
MAYA_CUSTOM_VERSION_MINOR: int
MAYA_CUSTOM_VERSION_CLIENT: str
MAYA_CUSTOM_VERSION: int
STRICT: int
NULL: int

class MSpace:
    kInvalid: ClassVar[int] = ...
    kTransform: ClassVar[int] = ...
    kPreTransform: ClassVar[int] = ...
    kPostTransform: ClassVar[int] = ...
    kWorld: ClassVar[int] = ...
    kObject: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MObject:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    kNullObj: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def hasFn(cls, *args, **kwargs): ...
    @classmethod
    def isNull(cls, *args, **kwargs): ...
    @classmethod
    def apiType(cls, *args, **kwargs): ...
    @classmethod
    def apiTypeStr(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
cvar: swigvarlink  # type: ignore[name-defined]

class MAngle:
    kInvalid: ClassVar[int] = ...
    kRadians: ClassVar[int] = ...
    kDegrees: ClassVar[int] = ...
    kAngMinutes: ClassVar[int] = ...
    kAngSeconds: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def unit(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def setUnit(cls, *args, **kwargs): ...
    @classmethod
    def setValue(cls, *args, **kwargs): ...
    @classmethod
    def asUnits(cls, *args, **kwargs): ...
    @classmethod
    def asRadians(cls, *args, **kwargs): ...
    @classmethod
    def asDegrees(cls, *args, **kwargs): ...
    @classmethod
    def asAngMinutes(cls, *args, **kwargs): ...
    @classmethod
    def asAngSeconds(cls, *args, **kwargs): ...
    @staticmethod
    def uiUnit(*args, **kwargs): ...
    @staticmethod
    def setUIUnit(*args, **kwargs): ...
    @staticmethod
    def internalUnit(*args, **kwargs): ...
    @staticmethod
    def internalToUI(*args, **kwargs): ...
    @staticmethod
    def uiToInternal(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def setInternalUnit(*args, **kwargs): ...

class MArgParser:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def isFlagSet(cls, *args, **kwargs): ...
    @classmethod
    def isEdit(cls, *args, **kwargs): ...
    @classmethod
    def isQuery(cls, *args, **kwargs): ...
    @classmethod
    def numberOfFlagsUsed(cls, *args, **kwargs): ...
    @classmethod
    def numberOfFlagUses(cls, *args, **kwargs): ...
    @classmethod
    def flagArgumentBool(cls, *args, **kwargs): ...
    @classmethod
    def flagArgumentInt(cls, *args, **kwargs): ...
    @classmethod
    def flagArgumentDouble(cls, *args, **kwargs): ...
    @classmethod
    def flagArgumentString(cls, *args, **kwargs): ...
    @classmethod
    def flagArgumentMDistance(cls, *args, **kwargs): ...
    @classmethod
    def flagArgumentMAngle(cls, *args, **kwargs): ...
    @classmethod
    def flagArgumentMTime(cls, *args, **kwargs): ...
    @classmethod
    def getFlagArgumentPosition(cls, *args, **kwargs): ...
    @classmethod
    def getFlagArgumentList(cls, *args, **kwargs): ...
    @classmethod
    def commandArgumentBool(cls, *args, **kwargs): ...
    @classmethod
    def commandArgumentInt(cls, *args, **kwargs): ...
    @classmethod
    def commandArgumentDouble(cls, *args, **kwargs): ...
    @classmethod
    def commandArgumentString(cls, *args, **kwargs): ...
    @classmethod
    def commandArgumentMDistance(cls, *args, **kwargs): ...
    @classmethod
    def commandArgumentMAngle(cls, *args, **kwargs): ...
    @classmethod
    def commandArgumentMTime(cls, *args, **kwargs): ...
    @classmethod
    def getObjects(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MArgDatabase(MArgParser):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getFlagArgument(cls, *args, **kwargs): ...
    @classmethod
    def getCommandArgument(cls, *args, **kwargs): ...
    @classmethod
    def getObjects(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MArgList:
    __init__: ClassVar[Callable] = ...
    kInvalidArgIndex: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def asBool(cls, *args, **kwargs): ...
    @classmethod
    def asInt(cls, *args, **kwargs): ...
    @classmethod
    def asDouble(cls, *args, **kwargs): ...
    @classmethod
    def asString(cls, *args, **kwargs): ...
    @classmethod
    def asDistance(cls, *args, **kwargs): ...
    @classmethod
    def asAngle(cls, *args, **kwargs): ...
    @classmethod
    def asTime(cls, *args, **kwargs): ...
    @classmethod
    def asVector(cls, *args, **kwargs): ...
    @classmethod
    def asPoint(cls, *args, **kwargs): ...
    @classmethod
    def asMatrix(cls, *args, **kwargs): ...
    @classmethod
    def asIntArray(cls, *args, **kwargs): ...
    @classmethod
    def asDoubleArray(cls, *args, **kwargs): ...
    @classmethod
    def asStringArray(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def flagIndex(cls, *args, **kwargs): ...
    @classmethod
    def addArg(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MArrayDataBuilder:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def addLast(cls, *args, **kwargs): ...
    @classmethod
    def addElement(cls, *args, **kwargs): ...
    @classmethod
    def addLastArray(cls, *args, **kwargs): ...
    @classmethod
    def addElementArray(cls, *args, **kwargs): ...
    @classmethod
    def removeElement(cls, *args, **kwargs): ...
    @classmethod
    def elementCount(cls, *args, **kwargs): ...
    @classmethod
    def growArray(cls, *args, **kwargs): ...
    @classmethod
    def setGrowSize(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MArrayDataHandle:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def inputValue(cls, *args, **kwargs): ...
    @classmethod
    def outputValue(cls, *args, **kwargs): ...
    @classmethod
    def inputArrayValue(cls, *args, **kwargs): ...
    @classmethod
    def outputArrayValue(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def elementCount(cls, *args, **kwargs): ...
    @classmethod
    def elementIndex(cls, *args, **kwargs): ...
    @classmethod
    def jumpToElement(cls, *args, **kwargs): ...
    @classmethod
    def jumpToArrayElement(cls, *args, **kwargs): ...
    @classmethod
    def setClean(cls, *args, **kwargs): ...
    @classmethod
    def setAllClean(cls, *args, **kwargs): ...
    @classmethod
    def builder(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MAttributeIndex:
    kInteger: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def type(cls, *args, **kwargs): ...
    @classmethod
    def hasRange(cls, *args, **kwargs): ...
    @classmethod
    def hasValidRange(cls, *args, **kwargs): ...
    @classmethod
    def hasLowerBound(cls, *args, **kwargs): ...
    @classmethod
    def hasUpperBound(cls, *args, **kwargs): ...
    @classmethod
    def getLower(cls, *args, **kwargs): ...
    @classmethod
    def getUpper(cls, *args, **kwargs): ...
    @classmethod
    def isBounded(cls, *args, **kwargs): ...
    @classmethod
    def getValue(cls, *args, **kwargs): ...
    @classmethod
    def setType(cls, *args, **kwargs): ...
    @classmethod
    def setValue(cls, *args, **kwargs): ...
    @classmethod
    def setLower(cls, *args, **kwargs): ...
    @classmethod
    def setUpper(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @staticmethod
    def className(*args, **kwargs): ...

class MAttributeSpecArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MAttributeSpec:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def dimensions(cls, *args, **kwargs): ...
    @classmethod
    def setName(cls, *args, **kwargs): ...
    @classmethod
    def setDimensions(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @staticmethod
    def className(*args, **kwargs): ...

class MAttributePattern:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def findPattern(*args, **kwargs): ...
    @staticmethod
    def attrPatternCount(*args, **kwargs): ...
    @staticmethod
    def attrPattern(*args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def rootAttrCount(cls, *args, **kwargs): ...
    @classmethod
    def rootAttr(cls, *args, **kwargs): ...
    @classmethod
    def removeRootAttr(cls, *args, **kwargs): ...
    @classmethod
    def addRootAttr(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MAttributePatternArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MBoundingBox:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def transformUsing(cls, *args, **kwargs): ...
    @classmethod
    def expand(cls, *args, **kwargs): ...
    @classmethod
    def contains(cls, *args, **kwargs): ...
    @classmethod
    def intersects(cls, *args, **kwargs): ...
    @classmethod
    def width(cls, *args, **kwargs): ...
    @classmethod
    def height(cls, *args, **kwargs): ...
    @classmethod
    def depth(cls, *args, **kwargs): ...
    @classmethod
    def center(cls, *args, **kwargs): ...
    @classmethod
    def min(cls, *args, **kwargs): ...
    @classmethod
    def max(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...

class MCacheConfigRuleRegistry:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def registerFilter(*args, **kwargs): ...
    @staticmethod
    def unregisterFilter(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def setRegisteringCallableScript(*args, **kwargs): ...
    @staticmethod
    def registeringCallableScript(*args, **kwargs): ...

class MCacheFormatDescription:
    __init__: ClassVar[Callable] = ...
    kNoFile: ClassVar[int] = ...
    kOneFile: ClassVar[int] = ...
    kOneFilePerFrame: ClassVar[int] = ...
    kUnknownData: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    kDoubleArray: ClassVar[int] = ...
    kDoubleVectorArray: ClassVar[int] = ...
    kInt32Array: ClassVar[int] = ...
    kFloatArray: ClassVar[int] = ...
    kFloatVectorArray: ClassVar[int] = ...
    kRegular: ClassVar[int] = ...
    kIrregular: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def setDistribution(cls, *args, **kwargs): ...
    @classmethod
    def setTimePerFrame(cls, *args, **kwargs): ...
    @classmethod
    def addDescriptionInfo(cls, *args, **kwargs): ...
    @classmethod
    def addChannel(cls, *args, **kwargs): ...
    @classmethod
    def getDistribution(cls, *args, **kwargs): ...
    @classmethod
    def getTimePerFrame(cls, *args, **kwargs): ...
    @classmethod
    def getStartAndEndTimes(cls, *args, **kwargs): ...
    @classmethod
    def getDescriptionInfo(cls, *args, **kwargs): ...
    @classmethod
    def getNumChannels(cls, *args, **kwargs): ...
    @classmethod
    def getChannelName(cls, *args, **kwargs): ...
    @classmethod
    def getChannelInterpretation(cls, *args, **kwargs): ...
    @classmethod
    def getChannelDataType(cls, *args, **kwargs): ...
    @classmethod
    def getChannelSamplingType(cls, *args, **kwargs): ...
    @classmethod
    def getChannelSamplingRate(cls, *args, **kwargs): ...
    @classmethod
    def getChannelStartTime(cls, *args, **kwargs): ...
    @classmethod
    def getChannelEndTime(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MCacheSchemaAttributesIteratorSentinel:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MCacheSchemaAttributesIterator:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def done(cls, *args, **kwargs): ...
    @classmethod
    def advance(cls, *args, **kwargs): ...

class MCacheSchemaAttributesRange:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def begin(cls, *args, **kwargs): ...
    @classmethod
    def end(cls, *args, **kwargs): ...

class MCacheSchema:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def attributes(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def add(cls, *args, **kwargs): ...

class MCallbackIdArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MMessageNode:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    fClientPtr: Incomplete
    fServerPtr: Incomplete
    fSubClientPtr: Incomplete
    fId: Incomplete
    fNextNode: Incomplete
    fHeadNode: Incomplete
    isValid: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MMessage:
    kDefaultAction: ClassVar[int] = ...
    kDoNotDoAction: ClassVar[int] = ...
    kDoAction: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def removeCallback(*args, **kwargs): ...
    @staticmethod
    def removeCallbacks(*args, **kwargs): ...
    @staticmethod
    def currentCallbackId(*args, **kwargs): ...
    @staticmethod
    def nodeCallbacks(*args, **kwargs): ...
    @staticmethod
    def setRegisteringCallableScript(*args, **kwargs): ...
    @staticmethod
    def registeringCallableScript(*args, **kwargs): ...
    @staticmethod
    def stopRegisteringCallableScript(*args, **kwargs): ...
    @staticmethod
    def setCallableInfo(*args, **kwargs): ...
    @staticmethod
    def getCallableInfo(*args, **kwargs): ...
    @staticmethod
    def stealCallableInfo(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MCloudWebService:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def login(*args, **kwargs): ...
    @staticmethod
    def logout(*args, **kwargs): ...
    @staticmethod
    def isLoggedIn(*args, **kwargs): ...
    @staticmethod
    def isLoginValid(*args, **kwargs): ...
    @staticmethod
    def getLoginUserName(*args, **kwargs): ...
    @staticmethod
    def getOxygenID(*args, **kwargs): ...
    @staticmethod
    def getUserEmail(*args, **kwargs): ...
    @staticmethod
    def initializeWebServices(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def removeCallback(*args, **kwargs): ...
    @staticmethod
    def getOAuth2AccessToken(*args, **kwargs): ...
    @staticmethod
    def setCallback(*args, **kwargs): ...

class MColorArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MColor:
    kRGB: ClassVar[int] = ...
    kHSV: ClassVar[int] = ...
    kCMY: ClassVar[int] = ...
    kCMYK: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    __itruediv__: ClassVar[Callable] = ...
    __idiv__: ClassVar[Callable] = ...
    __truediv__: ClassVar[Callable] = ...
    __div__: ClassVar[Callable] = ...
    kOpaqueBlack: ClassVar[MColor] = ...
    thisown: Incomplete
    r: Incomplete
    g: Incomplete
    b: Incomplete
    a: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __call__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __neg__(cls): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...

class MCommandMessage(MMessage):
    kHistory: ClassVar[int] = ...
    kDisplay: ClassVar[int] = ...
    kInfo: ClassVar[int] = ...
    kWarning: ClassVar[int] = ...
    kError: ClassVar[int] = ...
    kResult: ClassVar[int] = ...
    kStackTrace: ClassVar[int] = ...
    kMELProc: ClassVar[int] = ...
    kMELCommand: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addCommandCallback(*args, **kwargs): ...
    @staticmethod
    def addCommandOutputCallback(*args, **kwargs): ...
    @staticmethod
    def addCommandOutputFilterCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def addProcCallback(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MCommandResult:
    kInvalid: ClassVar[int] = ...
    kInt: ClassVar[int] = ...
    kInt64: ClassVar[int] = ...
    kIntArray: ClassVar[int] = ...
    kInt64Array: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    kDoubleArray: ClassVar[int] = ...
    kString: ClassVar[int] = ...
    kStringArray: ClassVar[int] = ...
    kVector: ClassVar[int] = ...
    kVectorArray: ClassVar[int] = ...
    kMatrix: ClassVar[int] = ...
    kMatrixArray: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def resultType(cls, *args, **kwargs): ...
    @classmethod
    def stringResult(cls, *args, **kwargs): ...
    @classmethod
    def getResult(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MComputation:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def beginComputation(cls, *args, **kwargs): ...
    @classmethod
    def isInterruptRequested(cls, *args, **kwargs): ...
    @classmethod
    def endComputation(cls, *args, **kwargs): ...
    @classmethod
    def setProgressRange(cls, *args, **kwargs): ...
    @classmethod
    def progressMin(cls, *args, **kwargs): ...
    @classmethod
    def progressMax(cls, *args, **kwargs): ...
    @classmethod
    def setProgress(cls, *args, **kwargs): ...
    @classmethod
    def progress(cls, *args, **kwargs): ...
    @classmethod
    def setProgressStatus(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MConditionMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addConditionCallback(*args, **kwargs): ...
    @staticmethod
    def getConditionNames(*args, **kwargs): ...
    @staticmethod
    def getConditionState(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MContainerMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addPublishAttrCallback(*args, **kwargs): ...
    @staticmethod
    def addBoundAttrCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MCurveAttribute:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getNumEntries(cls, *args, **kwargs): ...
    @classmethod
    def getEntries(cls, *args, **kwargs): ...
    @classmethod
    def addEntries(cls, *args, **kwargs): ...
    @classmethod
    def deleteEntries(cls, *args, **kwargs): ...
    @classmethod
    def setValueAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def setPositionAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def getValuesAtPositions(cls, *args, **kwargs): ...
    @classmethod
    def getValueAtPosition(cls, *args, **kwargs): ...
    @classmethod
    def sampleValueCurve(cls, *args, **kwargs): ...
    @classmethod
    def hasIndex(cls, *args, **kwargs): ...
    @classmethod
    def sort(cls, *args, **kwargs): ...
    @classmethod
    def pack(cls, *args, **kwargs): ...
    @classmethod
    def setCurve(cls, *args, **kwargs): ...
    @staticmethod
    def createCurveAttr(*args, **kwargs): ...
    @staticmethod
    def createCurve(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDagMessage(MMessage):
    kInvalidMsg: ClassVar[int] = ...
    kParentAdded: ClassVar[int] = ...
    kParentRemoved: ClassVar[int] = ...
    kChildAdded: ClassVar[int] = ...
    kChildRemoved: ClassVar[int] = ...
    kChildReordered: ClassVar[int] = ...
    kInstanceAdded: ClassVar[int] = ...
    kInstanceRemoved: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kScaleX: ClassVar[int] = ...
    kScaleY: ClassVar[int] = ...
    kScaleZ: ClassVar[int] = ...
    kShearXY: ClassVar[int] = ...
    kShearXZ: ClassVar[int] = ...
    kShearYZ: ClassVar[int] = ...
    kRotateX: ClassVar[int] = ...
    kRotateY: ClassVar[int] = ...
    kRotateZ: ClassVar[int] = ...
    kTranslateX: ClassVar[int] = ...
    kTranslateY: ClassVar[int] = ...
    kTranslateZ: ClassVar[int] = ...
    kScalePivotX: ClassVar[int] = ...
    kScalePivotY: ClassVar[int] = ...
    kScalePivotZ: ClassVar[int] = ...
    kRotatePivotX: ClassVar[int] = ...
    kRotatePivotY: ClassVar[int] = ...
    kRotatePivotZ: ClassVar[int] = ...
    kScaleTransX: ClassVar[int] = ...
    kScaleTransY: ClassVar[int] = ...
    kScaleTransZ: ClassVar[int] = ...
    kRotateTransX: ClassVar[int] = ...
    kRotateTransY: ClassVar[int] = ...
    kRotateTransZ: ClassVar[int] = ...
    kRotateOrientX: ClassVar[int] = ...
    kRotateOrientY: ClassVar[int] = ...
    kRotateOrientZ: ClassVar[int] = ...
    kRotateOrder: ClassVar[int] = ...
    kAll: ClassVar[int] = ...
    kScale: ClassVar[int] = ...
    kShear: ClassVar[int] = ...
    kRotation: ClassVar[int] = ...
    kTranslation: ClassVar[int] = ...
    kScalePivot: ClassVar[int] = ...
    kRotatePivot: ClassVar[int] = ...
    kScalePivotTrans: ClassVar[int] = ...
    kRotatePivotTrans: ClassVar[int] = ...
    kRotateOrient: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addParentAddedCallback(*args, **kwargs): ...
    @staticmethod
    def addParentAddedDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addParentRemovedCallback(*args, **kwargs): ...
    @staticmethod
    def addParentRemovedDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addChildAddedCallback(*args, **kwargs): ...
    @staticmethod
    def addChildAddedDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addChildRemovedCallback(*args, **kwargs): ...
    @staticmethod
    def addChildRemovedDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addChildReorderedCallback(*args, **kwargs): ...
    @staticmethod
    def addChildReorderedDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addDagCallback(*args, **kwargs): ...
    @staticmethod
    def addDagDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addAllDagChangesCallback(*args, **kwargs): ...
    @staticmethod
    def addAllDagChangesDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addInstanceAddedCallback(*args, **kwargs): ...
    @staticmethod
    def addInstanceAddedDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addInstanceRemovedCallback(*args, **kwargs): ...
    @staticmethod
    def addInstanceRemovedDagPathCallback(*args, **kwargs): ...
    @staticmethod
    def addMatrixModifiedCallback(*args, **kwargs): ...
    @staticmethod
    def addWorldMatrixModifiedCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MMeshIntersector:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def isCreated(cls, *args, **kwargs): ...
    @classmethod
    def getClosestPoint(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MPointOnMesh:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def getPoint(cls, *args, **kwargs): ...
    @classmethod
    def getNormal(cls, *args, **kwargs): ...
    @classmethod
    def getBarycentricCoords(cls, *args, **kwargs): ...
    @classmethod
    def faceIndex(cls, *args, **kwargs): ...
    @classmethod
    def triangleIndex(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MMeshSmoothOptions:
    __init__: ClassVar[Callable] = ...
    kInvalidSubdivision: ClassVar[int] = ...
    kCatmullClark: ClassVar[int] = ...
    kOpenSubdivCatmullClarkUniform: ClassVar[int] = ...
    kOpenSubdivCatmullClarkAdaptive: ClassVar[int] = ...
    kLastSubdivision: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kLegacy: ClassVar[int] = ...
    kCreaseAll: ClassVar[int] = ...
    kCreaseEdge: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kInvalidBoundary: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kSharpEdgesAndCorners: ClassVar[int] = ...
    kSharpEdges: ClassVar[int] = ...
    kAlwaysSharp: ClassVar[int] = ...
    kLastBoundary: ClassVar[int] = ...
    kInvalidCreaseMethod: ClassVar[int] = ...
    kNormal: ClassVar[int] = ...
    kChaikin: ClassVar[int] = ...
    kLastCreaseMethod: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def setDivisions(cls, *args, **kwargs): ...
    @classmethod
    def divisions(cls, *args, **kwargs): ...
    @classmethod
    def setSmoothness(cls, *args, **kwargs): ...
    @classmethod
    def smoothness(cls, *args, **kwargs): ...
    @classmethod
    def setSmoothUVs(cls, *args, **kwargs): ...
    @classmethod
    def smoothUVs(cls, *args, **kwargs): ...
    @classmethod
    def setPropEdgeHardness(cls, *args, **kwargs): ...
    @classmethod
    def propEdgeHardness(cls, *args, **kwargs): ...
    @classmethod
    def setKeepBorderEdge(cls, *args, **kwargs): ...
    @classmethod
    def keepBorderEdge(cls, *args, **kwargs): ...
    @classmethod
    def setKeepHardEdge(cls, *args, **kwargs): ...
    @classmethod
    def keepHardEdge(cls, *args, **kwargs): ...
    @classmethod
    def setBoundaryRule(cls, *args, **kwargs): ...
    @classmethod
    def boundaryRule(cls, *args, **kwargs): ...
    @classmethod
    def setOpenSubdivVertexBoundary(cls, *args, **kwargs): ...
    @classmethod
    def openSubdivVertexBoundary(cls, *args, **kwargs): ...
    @classmethod
    def setOpenSubdivFaceVaryingBoundary(cls, *args, **kwargs): ...
    @classmethod
    def openSubdivFaceVaryingBoundary(cls, *args, **kwargs): ...
    @classmethod
    def setOpenSubdivSmoothTriangles(cls, *args, **kwargs): ...
    @classmethod
    def openSubdivSmoothTriangles(cls, *args, **kwargs): ...
    @classmethod
    def setOpenSubdivCreaseMethod(cls, *args, **kwargs): ...
    @classmethod
    def openSubdivCreaseMethod(cls, *args, **kwargs): ...
    @classmethod
    def setSubdivisionType(cls, *args, **kwargs): ...
    @classmethod
    def subdivisionType(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDGModifier:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def createNode(cls, *args, **kwargs): ...
    @classmethod
    def deleteNode(cls, *args, **kwargs): ...
    @classmethod
    def renameNode(cls, *args, **kwargs): ...
    @classmethod
    def setNodeLockState(cls, *args, **kwargs): ...
    @classmethod
    def connect(cls, *args, **kwargs): ...
    @classmethod
    def disconnect(cls, *args, **kwargs): ...
    @classmethod
    def renameAttribute(cls, *args, **kwargs): ...
    @classmethod
    def addExtensionAttribute(cls, *args, **kwargs): ...
    @classmethod
    def removeExtensionAttribute(cls, *args, **kwargs): ...
    @classmethod
    def removeExtensionAttributeIfUnset(cls, *args, **kwargs): ...
    @classmethod
    def linkExtensionAttributeToPlugin(cls, *args, **kwargs): ...
    @classmethod
    def unlinkExtensionAttributeFromPlugin(cls, *args, **kwargs): ...
    @classmethod
    def commandToExecute(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValue(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueBool(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueChar(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueDouble(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueFloat(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueInt(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueInt64(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueMAngle(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueMDistance(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueMTime(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueShort(cls, *args, **kwargs): ...
    @classmethod
    def newPlugValueString(cls, *args, **kwargs): ...
    @classmethod
    def removeMultiInstance(cls, *args, **kwargs): ...
    @classmethod
    def setMetadata(cls, *args, **kwargs): ...
    @classmethod
    def deleteMetadata(cls, *args, **kwargs): ...
    @classmethod
    def doIt(cls, *args, **kwargs): ...
    @classmethod
    def undoIt(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def addAttribute(cls, *args, **kwargs): ...
    @classmethod
    def removeAttribute(cls, *args, **kwargs): ...
    @classmethod
    def pythonCommandToExecute(cls, *args, **kwargs): ...

class MDagModifier(MDGModifier):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def createNode(cls, *args, **kwargs): ...
    @classmethod
    def reparentNode(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDagPathArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDAGDrawOverrideInfo:
    kDisplayTypeNormal: ClassVar[int] = ...
    kDisplayTypeReference: ClassVar[int] = ...
    kDisplayTypeTemplate: ClassVar[int] = ...
    kLODFull: ClassVar[int] = ...
    kLODBoundingBox: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    fOverrideEnabled: Incomplete
    fDisplayType: Incomplete
    fLOD: Incomplete
    fEnableShading: Incomplete
    fEnableTexturing: Incomplete
    fEnableVisible: Incomplete
    fPlaybackVisible: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MDagPath:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def getAllPathsTo(*args, **kwargs): ...
    @staticmethod
    def matchTransform(*args, **kwargs): ...
    @classmethod
    def getAllPathsBelow(cls, *args, **kwargs): ...
    @classmethod
    def hasFn(cls, *args, **kwargs): ...
    @classmethod
    def apiType(cls, *args, **kwargs): ...
    @classmethod
    def isValid(cls, *args, **kwargs): ...
    @classmethod
    def node(cls, *args, **kwargs): ...
    @classmethod
    def transform(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def extendToShape(cls, *args, **kwargs): ...
    @classmethod
    def extendToShapeDirectlyBelow(cls, *args, **kwargs): ...
    @classmethod
    def numberOfShapesDirectlyBelow(cls, *args, **kwargs): ...
    @classmethod
    def push(cls, *args, **kwargs): ...
    @classmethod
    def pop(cls, *args, **kwargs): ...
    @classmethod
    def childCount(cls, *args, **kwargs): ...
    @classmethod
    def child(cls, *args, **kwargs): ...
    @classmethod
    def inclusiveMatrix(cls, *args, **kwargs): ...
    @classmethod
    def exclusiveMatrix(cls, *args, **kwargs): ...
    @classmethod
    def inclusiveMatrixInverse(cls, *args, **kwargs): ...
    @classmethod
    def exclusiveMatrixInverse(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def pathCount(cls, *args, **kwargs): ...
    @classmethod
    def getPath(cls, *args, **kwargs): ...
    @classmethod
    def fullPathName(cls, *args, **kwargs): ...
    @classmethod
    def partialPathName(cls, *args, **kwargs): ...
    @classmethod
    def isInstanced(cls, *args, **kwargs): ...
    @classmethod
    def instanceNumber(cls, *args, **kwargs): ...
    @classmethod
    def isVisible(cls, *args, **kwargs): ...
    @classmethod
    def isTemplated(cls, *args, **kwargs): ...
    @classmethod
    def getDrawOverrideInfo(cls, *args, **kwargs): ...
    @classmethod
    def getDisplayStatus(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def getAPathTo(*args, **kwargs): ...

class MDataBlock:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def inputValue(cls, *args, **kwargs): ...
    @classmethod
    def outputValue(cls, *args, **kwargs): ...
    @classmethod
    def inputArrayValue(cls, *args, **kwargs): ...
    @classmethod
    def outputArrayValue(cls, *args, **kwargs): ...
    @classmethod
    def setClean(cls, *args, **kwargs): ...
    @classmethod
    def isClean(cls, *args, **kwargs): ...
    @classmethod
    def context(cls, *args, **kwargs): ...
    @classmethod
    def setContext(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDGContext:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    fsNormal: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isNormal(cls, *args, **kwargs): ...
    @classmethod
    def getTime(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def current(*args, **kwargs): ...
    @classmethod
    def isCurrent(cls, *args, **kwargs): ...
    @classmethod
    def makeCurrent(cls, *args, **kwargs): ...

class MDGContextGuard:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
kDefaultNodeType: str

class MDGMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addTimeChangeCallback(*args, **kwargs): ...
    @staticmethod
    def addDelayedTimeChangeCallback(*args, **kwargs): ...
    @staticmethod
    def addDelayedTimeChangeRunupCallback(*args, **kwargs): ...
    @staticmethod
    def addForceUpdateCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeAddedCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeRemovedCallback(*args, **kwargs): ...
    @staticmethod
    def addConnectionCallback(*args, **kwargs): ...
    @staticmethod
    def addPreConnectionCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeChangeUuidCheckCallback(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MCameraSetMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addCameraLayerCallback(*args, **kwargs): ...
    @staticmethod
    def addCameraChangedCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MCameraMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addBeginManipulationCallback(*args, **kwargs): ...
    @staticmethod
    def addEndManipulationCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MDistance:
    kInvalid: ClassVar[int] = ...
    kInches: ClassVar[int] = ...
    kFeet: ClassVar[int] = ...
    kYards: ClassVar[int] = ...
    kMiles: ClassVar[int] = ...
    kMillimeters: ClassVar[int] = ...
    kCentimeters: ClassVar[int] = ...
    kKilometers: ClassVar[int] = ...
    kMeters: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def unit(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def setUnit(cls, *args, **kwargs): ...
    @classmethod
    def setValue(cls, *args, **kwargs): ...
    @classmethod
    def asUnits(cls, *args, **kwargs): ...
    @classmethod
    def asInches(cls, *args, **kwargs): ...
    @classmethod
    def asFeet(cls, *args, **kwargs): ...
    @classmethod
    def asYards(cls, *args, **kwargs): ...
    @classmethod
    def asMiles(cls, *args, **kwargs): ...
    @classmethod
    def asMillimeters(cls, *args, **kwargs): ...
    @classmethod
    def asCentimeters(cls, *args, **kwargs): ...
    @classmethod
    def asKilometers(cls, *args, **kwargs): ...
    @classmethod
    def asMeters(cls, *args, **kwargs): ...
    @staticmethod
    def uiUnit(*args, **kwargs): ...
    @staticmethod
    def setUIUnit(*args, **kwargs): ...
    @staticmethod
    def internalUnit(*args, **kwargs): ...
    @staticmethod
    def internalToUI(*args, **kwargs): ...
    @staticmethod
    def uiToInternal(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def setInternalUnit(*args, **kwargs): ...

class MDoubleArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __setitem__(cls, index, object) -> None: ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __delitem__(cls, other) -> None: ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __radd__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
kEulerRotationEpsilon: float

class MEulerRotation:
    kXYZ: ClassVar[int] = ...
    kYZX: ClassVar[int] = ...
    kZXY: ClassVar[int] = ...
    kXZY: ClassVar[int] = ...
    kYXZ: ClassVar[int] = ...
    kZYX: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    identity: ClassVar[MEulerRotation] = ...
    thisown: Incomplete
    x: Incomplete
    y: Incomplete
    z: Incomplete
    order: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def setValue(cls, *args, **kwargs): ...
    @classmethod
    def asQuaternion(cls, *args, **kwargs): ...
    @classmethod
    def asMatrix(cls, *args, **kwargs): ...
    @classmethod
    def asVector(cls, *args, **kwargs): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __isub__(cls, other): ...
    @classmethod
    def __neg__(cls): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @classmethod
    def isZero(cls, *args, **kwargs): ...
    @classmethod
    def incrementalRotateBy(cls, *args, **kwargs): ...
    @classmethod
    def inverse(cls, *args, **kwargs): ...
    @classmethod
    def invertIt(cls, *args, **kwargs): ...
    @classmethod
    def reorder(cls, *args, **kwargs): ...
    @classmethod
    def reorderIt(cls, *args, **kwargs): ...
    @classmethod
    def bound(cls, *args, **kwargs): ...
    @classmethod
    def boundIt(cls, *args, **kwargs): ...
    @classmethod
    def alternateSolution(cls, *args, **kwargs): ...
    @classmethod
    def setToAlternateSolution(cls, *args, **kwargs): ...
    @classmethod
    def closestSolution(cls, *args, **kwargs): ...
    @classmethod
    def setToClosestSolution(cls, *args, **kwargs): ...
    @classmethod
    def closestCut(cls, *args, **kwargs): ...
    @classmethod
    def setToClosestCut(cls, *args, **kwargs): ...
    @staticmethod
    def decompose(*args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __getitem__(cls, index): ...

class MEventMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addEventCallback(*args, **kwargs): ...
    @staticmethod
    def getEventNames(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MEvaluationManager:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def graphConstructionActive(*args, **kwargs): ...
    @staticmethod
    def evaluationManagerActive(*args, **kwargs): ...
    @staticmethod
    def evaluationInExecution(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MEvaluationNode:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def parentCount(cls, *args, **kwargs): ...
    @classmethod
    def parent(cls, *args, **kwargs): ...
    @classmethod
    def childCount(cls, *args, **kwargs): ...
    @classmethod
    def child(cls, *args, **kwargs): ...
    @classmethod
    def iterator(cls, *args, **kwargs): ...
    @classmethod
    def dirtyPlugExists(cls, *args, **kwargs): ...
    @classmethod
    def dirtyPlug(cls, *args, **kwargs): ...
    @classmethod
    def dependencyNode(cls, *args, **kwargs): ...
    @classmethod
    def datablock(cls, *args, **kwargs): ...
    @classmethod
    def connect(cls, *args, **kwargs): ...
    @classmethod
    def skipEvaluation(cls, *args, **kwargs): ...
    @classmethod
    def skippingEvaluation(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MEvaluationNodeIterator:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def plug(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MFileIO:
    kLoadDefault: ClassVar[int] = ...
    kLoadAllReferences: ClassVar[int] = ...
    kLoadNoReferences: ClassVar[int] = ...
    kVersion4_0: ClassVar[int] = ...
    kVersion4_5: ClassVar[int] = ...
    kVersion5_0: ClassVar[int] = ...
    kVersion6_0: ClassVar[int] = ...
    kVersion6_5: ClassVar[int] = ...
    kVersion7_0: ClassVar[int] = ...
    kVersion8_0: ClassVar[int] = ...
    kVersion8_5: ClassVar[int] = ...
    kVersion2008: ClassVar[int] = ...
    kVersion2009: ClassVar[int] = ...
    kVersion2010: ClassVar[int] = ...
    kVersion2011: ClassVar[int] = ...
    kVersion2012: ClassVar[int] = ...
    kVersion2013: ClassVar[int] = ...
    kVersion2014: ClassVar[int] = ...
    kVersion2015: ClassVar[int] = ...
    kVersion2016: ClassVar[int] = ...
    kVersion2016R2: ClassVar[int] = ...
    kVersion2017: ClassVar[int] = ...
    kVersion2017Update3: ClassVar[int] = ...
    kVersion2017Update4: ClassVar[int] = ...
    kVersion2018: ClassVar[int] = ...
    kVersion2018Update2: ClassVar[int] = ...
    kVersion2018Update3: ClassVar[int] = ...
    kVersion2018Update4: ClassVar[int] = ...
    kVersion2019: ClassVar[int] = ...
    kVersion2020: ClassVar[int] = ...
    kVersion2022: ClassVar[int] = ...
    kVersion2023: ClassVar[int] = ...
    kVersion2024: ClassVar[int] = ...
    kVersion2025: ClassVar[int] = ...
    kRemoveNamespaceIfEmpty: ClassVar[int] = ...
    kMergeNamespaceWithRootNamespace: ClassVar[int] = ...
    kMergeNamespaceWithParentNamespace: ClassVar[int] = ...
    kForceDeleteNamespaceContent: ClassVar[int] = ...
    kExportTypeAll: ClassVar[int] = ...
    kExportTypeSelected: ClassVar[int] = ...
    kExportTypeAnim: ClassVar[int] = ...
    kExportTypeAnimFromReference: ClassVar[int] = ...
    kExportTypeAsReference: ClassVar[int] = ...
    kExportTypeEdits: ClassVar[int] = ...
    kExportTypePrefObjects: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def currentFile(*args, **kwargs): ...
    @staticmethod
    def setCurrentFile(*args, **kwargs): ...
    @staticmethod
    def fileType(*args, **kwargs): ...
    @staticmethod
    def getFileTypes(*args, **kwargs): ...
    @staticmethod
    def newFile(*args, **kwargs): ...
    @staticmethod
    def open(*args, **kwargs): ...
    @staticmethod
    def save(*args, **kwargs): ...
    @staticmethod
    def saveAs(*args, **kwargs): ...
    @staticmethod
    def importFile(*args, **kwargs): ...
    @staticmethod
    def exportSelected(*args, **kwargs): ...
    @staticmethod
    def exportAll(*args, **kwargs): ...
    @staticmethod
    def exportAnimFromReference(*args, **kwargs): ...
    @staticmethod
    def exportSelectedAnimFromReference(*args, **kwargs): ...
    @staticmethod
    def exportAnim(*args, **kwargs): ...
    @staticmethod
    def exportSelectedAnim(*args, **kwargs): ...
    @staticmethod
    def exportAsReference(*args, **kwargs): ...
    @staticmethod
    def getReferences(*args, **kwargs): ...
    @staticmethod
    def getFiles(*args, **kwargs): ...
    @staticmethod
    def getReferenceNodes(*args, **kwargs): ...
    @staticmethod
    def getReferenceConnectionsMade(*args, **kwargs): ...
    @staticmethod
    def getReferenceConnectionsBroken(*args, **kwargs): ...
    @staticmethod
    def reference(*args, **kwargs): ...
    @staticmethod
    def removeReference(*args, **kwargs): ...
    @staticmethod
    def isReadingFile(*args, **kwargs): ...
    @staticmethod
    def isWritingFile(*args, **kwargs): ...
    @staticmethod
    def isOpeningFile(*args, **kwargs): ...
    @staticmethod
    def isNewingFile(*args, **kwargs): ...
    @staticmethod
    def isSavingReference(*args, **kwargs): ...
    @staticmethod
    def mustRenameToSave(*args, **kwargs): ...
    @staticmethod
    def setMustRenameToSave(*args, **kwargs): ...
    @staticmethod
    def mustRenameToSaveMsg(*args, **kwargs): ...
    @staticmethod
    def setMustRenameToSaveMsg(*args, **kwargs): ...
    @staticmethod
    def beforeOpenFilename(*args, **kwargs): ...
    @staticmethod
    def beforeImportFilename(*args, **kwargs): ...
    @staticmethod
    def beforeSaveFilename(*args, **kwargs): ...
    @staticmethod
    def beforeExportFilename(*args, **kwargs): ...
    @staticmethod
    def beforeReferenceFilename(*args, **kwargs): ...
    @staticmethod
    def beforeOpenUserFileTranslator(*args, **kwargs): ...
    @staticmethod
    def beforeImportUserFileTranslator(*args, **kwargs): ...
    @staticmethod
    def beforeSaveUserFileTranslator(*args, **kwargs): ...
    @staticmethod
    def beforeExportUserFileTranslator(*args, **kwargs): ...
    @staticmethod
    def beforeReferenceUserFileTranslator(*args, **kwargs): ...
    @staticmethod
    def exportType(*args, **kwargs): ...
    @staticmethod
    def getLastTempFile(*args, **kwargs): ...
    @staticmethod
    def getErrorStatus(*args, **kwargs): ...
    @staticmethod
    def resetError(*args, **kwargs): ...
    @staticmethod
    def setError(*args, **kwargs): ...
    @staticmethod
    def loadReference(*args, **kwargs): ...
    @staticmethod
    def loadReferenceByNode(*args, **kwargs): ...
    @staticmethod
    def unloadReference(*args, **kwargs): ...
    @staticmethod
    def unloadReferenceByNode(*args, **kwargs): ...
    @staticmethod
    def getReferenceFileByNode(*args, **kwargs): ...
    @staticmethod
    def cleanReference(*args, **kwargs): ...
    @staticmethod
    def saveReference(*args, **kwargs): ...
    @staticmethod
    def fileCurrentlyLoading(*args, **kwargs): ...
    @staticmethod
    def isImportingFile(*args, **kwargs): ...
    @staticmethod
    def isReferencingFile(*args, **kwargs): ...
    @staticmethod
    def currentlyReadingFileVersion(*args, **kwargs): ...
    @staticmethod
    def latestMayaFileVersion(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MFileObject:
    __init__: ClassVar[Callable] = ...
    kNone: ClassVar[int] = ...
    kExact: ClassVar[int] = ...
    kDirMap: ClassVar[int] = ...
    kReferenceMappings: ClassVar[int] = ...
    kRelative: ClassVar[int] = ...
    kBaseName: ClassVar[int] = ...
    kInputFile: ClassVar[int] = ...
    kInputReference: ClassVar[int] = ...
    kStrict: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def setRawName(cls, *args, **kwargs): ...
    @classmethod
    def setRawPath(cls, *args, **kwargs): ...
    @classmethod
    def setRawFullName(cls, *args, **kwargs): ...
    @classmethod
    def setRawURI(cls, *args, **kwargs): ...
    @classmethod
    def overrideResolvedFullName(cls, *args, **kwargs): ...
    @classmethod
    def rawName(cls, *args, **kwargs): ...
    @classmethod
    def rawPath(cls, *args, **kwargs): ...
    @classmethod
    def rawFullName(cls, *args, **kwargs): ...
    @classmethod
    def rawURI(cls, *args, **kwargs): ...
    @classmethod
    def expandedPath(cls, *args, **kwargs): ...
    @classmethod
    def expandedFullName(cls, *args, **kwargs): ...
    @classmethod
    def resolvedName(cls, *args, **kwargs): ...
    @classmethod
    def resolvedPath(cls, *args, **kwargs): ...
    @classmethod
    def resolvedFullName(cls, *args, **kwargs): ...
    @classmethod
    def pathCount(cls, *args, **kwargs): ...
    @classmethod
    def ithPath(cls, *args, **kwargs): ...
    @classmethod
    def ithFullName(cls, *args, **kwargs): ...
    @classmethod
    def exists(cls, *args, **kwargs): ...
    @classmethod
    def isSet(cls, *args, **kwargs): ...
    @classmethod
    def setResolveMethod(cls, *args, **kwargs): ...
    @classmethod
    def resolveMethod(cls, *args, **kwargs): ...
    @classmethod
    def setName(cls, *args, **kwargs): ...
    @classmethod
    def setFullName(cls, *args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def path(cls, *args, **kwargs): ...
    @classmethod
    def fullName(cls, *args, **kwargs): ...
    @staticmethod
    def isAbsolutePath(*args, **kwargs): ...
    @staticmethod
    def getResolvedFullName(*args, **kwargs): ...

class MFloatArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __setitem__(cls, index, object) -> None: ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __delitem__(cls, other) -> None: ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __radd__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
MFloatMatrix_kTol: float

class MFloatMatrix:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    matrix: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __call__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def transpose(cls, *args, **kwargs): ...
    @classmethod
    def setToIdentity(cls, *args, **kwargs): ...
    @classmethod
    def setToProduct(cls, *args, **kwargs): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __isub__(cls, other): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def inverse(cls, *args, **kwargs): ...
    @classmethod
    def adjoint(cls, *args, **kwargs): ...
    @classmethod
    def homogenize(cls, *args, **kwargs): ...
    @classmethod
    def det4x4(cls, *args, **kwargs): ...
    @classmethod
    def det3x3(cls, *args, **kwargs): ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MFloatPointArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
MFloatPoint_kTol: float

class MFloatPoint:
    __init__: ClassVar[Callable] = ...
    __truediv__: ClassVar[Callable] = ...
    __div__: ClassVar[Callable] = ...
    origin: ClassVar[MFloatPoint] = ...
    thisown: Incomplete
    x: Incomplete
    y: Incomplete
    z: Incomplete
    w: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setCast(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __call__(cls, *args, **kwargs): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __isub__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def cartesianize(cls, *args, **kwargs): ...
    @classmethod
    def rationalize(cls, *args, **kwargs): ...
    @classmethod
    def homogenize(cls, *args, **kwargs): ...
    @classmethod
    def distanceTo(cls, *args, **kwargs): ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __getitem__(cls, index): ...

class MFloatVectorArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
MFloatVector_kTol: float

class MFloatVector:
    __init__: ClassVar[Callable] = ...
    __itruediv__: ClassVar[Callable] = ...
    __idiv__: ClassVar[Callable] = ...
    __truediv__: ClassVar[Callable] = ...
    __div__: ClassVar[Callable] = ...
    zero: ClassVar[MFloatVector] = ...
    one: ClassVar[MFloatVector] = ...
    xAxis: ClassVar[MFloatVector] = ...
    yAxis: ClassVar[MFloatVector] = ...
    zAxis: ClassVar[MFloatVector] = ...
    xNegAxis: ClassVar[MFloatVector] = ...
    yNegAxis: ClassVar[MFloatVector] = ...
    zNegAxis: ClassVar[MFloatVector] = ...
    thisown: Incomplete
    x: Incomplete
    y: Incomplete
    z: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __call__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __xor__(cls, other): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __neg__(cls): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __isub__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def normal(cls, *args, **kwargs): ...
    @classmethod
    def normalize(cls, *args, **kwargs): ...
    @classmethod
    def angle(cls, *args, **kwargs): ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @classmethod
    def isParallel(cls, *args, **kwargs): ...

class MFnBase:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def type(cls, *args, **kwargs): ...
    @classmethod
    def hasObj(cls, *args, **kwargs): ...
    @classmethod
    def object(cls, *args, **kwargs): ...
    @classmethod
    def setObject(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def typeString(*args, **kwargs): ...
    @staticmethod
    def isValid(*args, **kwargs): ...

class MFnDependencyNode(MFnBase):
    __init__: ClassVar[Callable] = ...
    kLocalDynamicAttr: ClassVar[int] = ...
    kNormalAttr: ClassVar[int] = ...
    kExtensionAttr: ClassVar[int] = ...
    kInvalidAttr: ClassVar[int] = ...
    kTimerOff: ClassVar[int] = ...
    kTimerOn: ClassVar[int] = ...
    kTimerUninitialized: ClassVar[int] = ...
    kTimerInvalidState: ClassVar[int] = ...
    kTimerMetric_callback: ClassVar[int] = ...
    kTimerMetric_compute: ClassVar[int] = ...
    kTimerMetric_dirty: ClassVar[int] = ...
    kTimerMetric_draw: ClassVar[int] = ...
    kTimerMetric_fetch: ClassVar[int] = ...
    kTimerMetric_callbackViaAPI: ClassVar[int] = ...
    kTimerMetric_callbackNotViaAPI: ClassVar[int] = ...
    kTimerMetric_computeDuringCallback: ClassVar[int] = ...
    kTimerMetric_computeNotDuringCallback: ClassVar[int] = ...
    kTimerMetrics: ClassVar[int] = ...
    kTimerType_self: ClassVar[int] = ...
    kTimerType_inclusive: ClassVar[int] = ...
    kTimerType_count: ClassVar[int] = ...
    kTimerTypes: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def typeId(cls, *args, **kwargs): ...
    @classmethod
    def typeName(cls, *args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def absoluteName(cls, *args, **kwargs): ...
    @classmethod
    def uniqueName(cls, *args, **kwargs): ...
    @classmethod
    def pluginName(cls, *args, **kwargs): ...
    @classmethod
    def setName(cls, *args, **kwargs): ...
    @classmethod
    def uuid(cls, *args, **kwargs): ...
    @classmethod
    def setUuid(cls, *args, **kwargs): ...
    @classmethod
    def getConnections(cls, *args, **kwargs): ...
    @classmethod
    def attributeCount(cls, *args, **kwargs): ...
    @classmethod
    def reorderedAttribute(cls, *args, **kwargs): ...
    @classmethod
    def attribute(cls, *args, **kwargs): ...
    @classmethod
    def attributeClass(cls, *args, **kwargs): ...
    @classmethod
    def getAffectedAttributes(cls, *args, **kwargs): ...
    @classmethod
    def getAffectedByAttributes(cls, *args, **kwargs): ...
    @classmethod
    def findPlug(cls, *args, **kwargs): ...
    @classmethod
    def userNode(cls, *args, **kwargs): ...
    @classmethod
    def isFromReferencedFile(cls, *args, **kwargs): ...
    @classmethod
    def isShared(cls, *args, **kwargs): ...
    @classmethod
    def isTrackingEdits(cls, *args, **kwargs): ...
    @classmethod
    def hasUniqueName(cls, *args, **kwargs): ...
    @classmethod
    def parentNamespace(cls, *args, **kwargs): ...
    @classmethod
    def isLocked(cls, *args, **kwargs): ...
    @classmethod
    def setLocked(cls, *args, **kwargs): ...
    @staticmethod
    def classification(*args, **kwargs): ...
    @classmethod
    def isNewAttribute(cls, *args, **kwargs): ...
    @staticmethod
    def allocateFlag(*args, **kwargs): ...
    @staticmethod
    def deallocateFlag(*args, **kwargs): ...
    @staticmethod
    def deallocateAllFlags(*args, **kwargs): ...
    @classmethod
    def setFlag(cls, *args, **kwargs): ...
    @classmethod
    def isFlagSet(cls, *args, **kwargs): ...
    @classmethod
    def isDefaultNode(cls, *args, **kwargs): ...
    @classmethod
    def setDoNotWrite(cls, *args, **kwargs): ...
    @classmethod
    def canBeWritten(cls, *args, **kwargs): ...
    @classmethod
    def hasAttribute(cls, *args, **kwargs): ...
    @classmethod
    def getAliasAttr(cls, *args, **kwargs): ...
    @classmethod
    def setAlias(cls, *args, **kwargs): ...
    @classmethod
    def findAlias(cls, *args, **kwargs): ...
    @classmethod
    def getAliasList(cls, *args, **kwargs): ...
    @classmethod
    def plugsAlias(cls, *args, **kwargs): ...
    @classmethod
    def setIcon(cls, *args, **kwargs): ...
    @classmethod
    def icon(cls, *args, **kwargs): ...
    @classmethod
    def getExternalContent(cls, *args, **kwargs): ...
    @classmethod
    def addExternalContentForFileAttr(cls, *args, **kwargs): ...
    @classmethod
    def setExternalContentForFileAttr(cls, *args, **kwargs): ...
    @classmethod
    def setExternalContent(cls, *args, **kwargs): ...
    @classmethod
    def affectsAnimation(cls, *args, **kwargs): ...
    @classmethod
    def setAffectsAnimation(cls, *args, **kwargs): ...
    @staticmethod
    def enableDGTiming(*args, **kwargs): ...
    @classmethod
    def dgTimerOn(cls, *args, **kwargs): ...
    @classmethod
    def dgTimerOff(cls, *args, **kwargs): ...
    @classmethod
    def dgTimerQueryState(cls, *args, **kwargs): ...
    @classmethod
    def dgTimerReset(cls, *args, **kwargs): ...
    @classmethod
    def dgTimer(cls, *args, **kwargs): ...
    @classmethod
    def dgCallbacks(cls, *args, **kwargs): ...
    @classmethod
    def dgCallbackIds(cls, *args, **kwargs): ...
    @classmethod
    def addAttribute(cls, *args, **kwargs): ...
    @classmethod
    def removeAttribute(cls, *args, **kwargs): ...

class MFnDagNode(MFnDependencyNode):
    kNextPos: ClassVar[int] = ...
    kUseDefaultColor: ClassVar[int] = ...
    kUseIndexColor: ClassVar[int] = ...
    kUseRGBColor: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def parentCount(cls, *args, **kwargs): ...
    @classmethod
    def parent(cls, *args, **kwargs): ...
    @classmethod
    def addChild(cls, *args, **kwargs): ...
    @classmethod
    def removeChild(cls, *args, **kwargs): ...
    @classmethod
    def removeChildAt(cls, *args, **kwargs): ...
    @classmethod
    def childCount(cls, *args, **kwargs): ...
    @classmethod
    def child(cls, *args, **kwargs): ...
    @classmethod
    def dagRoot(cls, *args, **kwargs): ...
    @classmethod
    def hasParent(cls, *args, **kwargs): ...
    @classmethod
    def hasChild(cls, *args, **kwargs): ...
    @classmethod
    def isChildOf(cls, *args, **kwargs): ...
    @classmethod
    def isParentOf(cls, *args, **kwargs): ...
    @classmethod
    def inUnderWorld(cls, *args, **kwargs): ...
    @classmethod
    def inModel(cls, *args, **kwargs): ...
    @classmethod
    def isInstanceable(cls, *args, **kwargs): ...
    @classmethod
    def setInstanceable(cls, *args, **kwargs): ...
    @classmethod
    def isInstanced(cls, *args, **kwargs): ...
    @classmethod
    def isInstancedAttribute(cls, *args, **kwargs): ...
    @classmethod
    def instanceCount(cls, *args, **kwargs): ...
    @classmethod
    def duplicate(cls, *args, **kwargs): ...
    @classmethod
    def getPath(cls, *args, **kwargs): ...
    @classmethod
    def getAllPaths(cls, *args, **kwargs): ...
    @classmethod
    def fullPathName(cls, *args, **kwargs): ...
    @classmethod
    def partialPathName(cls, *args, **kwargs): ...
    @classmethod
    def transformationMatrix(cls, *args, **kwargs): ...
    @classmethod
    def isIntermediateObject(cls, *args, **kwargs): ...
    @classmethod
    def setIntermediateObject(cls, *args, **kwargs): ...
    @classmethod
    def objectColor(cls, *args, **kwargs): ...
    @classmethod
    def usingObjectColor(cls, *args, **kwargs): ...
    @classmethod
    def setUseObjectColor(cls, *args, **kwargs): ...
    @classmethod
    def objectColorType(cls, *args, **kwargs): ...
    @classmethod
    def setObjectColorType(cls, *args, **kwargs): ...
    @classmethod
    def setObjectColor(cls, *args, **kwargs): ...
    @classmethod
    def objectColorRGB(cls, *args, **kwargs): ...
    @classmethod
    def objectColorIndex(cls, *args, **kwargs): ...
    @classmethod
    def hiliteColor(cls, *args, **kwargs): ...
    @classmethod
    def usingHiliteColor(cls, *args, **kwargs): ...
    @classmethod
    def dormantColor(cls, *args, **kwargs): ...
    @classmethod
    def activeColor(cls, *args, **kwargs): ...
    @classmethod
    def drawOverrideEnabled(cls, *args, **kwargs): ...
    @classmethod
    def drawOverrideIsReference(cls, *args, **kwargs): ...
    @classmethod
    def drawOverrideIsTemplate(cls, *args, **kwargs): ...
    @classmethod
    def drawOverrideColor(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedSetsAndMembers(cls, *args, **kwargs): ...
    @classmethod
    def boundingBox(cls, *args, **kwargs): ...
    @classmethod
    def dagPath(cls, *args, **kwargs): ...
    @classmethod
    def setObject(cls, *args, **kwargs): ...
    @classmethod
    def model(cls, *args, **kwargs): ...
    @classmethod
    def objectGroupComponent(cls, *args, **kwargs): ...

class MFnAssembly(MFnDagNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def getTopLevelAssemblies(*args, **kwargs): ...
    @classmethod
    def createRepresentation(cls, *args, **kwargs): ...
    @classmethod
    def postLoad(cls, *args, **kwargs): ...
    @classmethod
    def activate(cls, *args, **kwargs): ...
    @classmethod
    def getActive(cls, *args, **kwargs): ...
    @classmethod
    def activateNonRecursive(cls, *args, **kwargs): ...
    @classmethod
    def canActivate(cls, *args, **kwargs): ...
    @classmethod
    def isActive(cls, *args, **kwargs): ...
    @classmethod
    def getInitialRep(cls, *args, **kwargs): ...
    @classmethod
    def getRepresentations(cls, *args, **kwargs): ...
    @classmethod
    def getRepType(cls, *args, **kwargs): ...
    @classmethod
    def getRepLabel(cls, *args, **kwargs): ...
    @classmethod
    def repTypes(cls, *args, **kwargs): ...
    @classmethod
    def deleteRepresentation(cls, *args, **kwargs): ...
    @classmethod
    def deleteAllRepresentations(cls, *args, **kwargs): ...
    @classmethod
    def getRepNamespace(cls, *args, **kwargs): ...
    @classmethod
    def setRepName(cls, *args, **kwargs): ...
    @classmethod
    def setRepLabel(cls, *args, **kwargs): ...
    @classmethod
    def importFile(cls, *args, **kwargs): ...
    @classmethod
    def getAbsoluteRepNamespace(cls, *args, **kwargs): ...
    @classmethod
    def isTopLevel(cls, *args, **kwargs): ...
    @classmethod
    def supportsEdits(cls, *args, **kwargs): ...
    @classmethod
    def supportsMemberChanges(cls, *args, **kwargs): ...
    @classmethod
    def canRepApplyEdits(cls, *args, **kwargs): ...
    @classmethod
    def handlesAddEdits(cls, *args, **kwargs): ...
    @classmethod
    def getParentAssembly(cls, *args, **kwargs): ...
    @classmethod
    def getSubAssemblies(cls, *args, **kwargs): ...

class MFnTransform(MFnDagNode):
    __init__: ClassVar[Callable] = ...
    kScaleMinX: ClassVar[int] = ...
    kScaleMaxX: ClassVar[int] = ...
    kScaleMinY: ClassVar[int] = ...
    kScaleMaxY: ClassVar[int] = ...
    kScaleMinZ: ClassVar[int] = ...
    kScaleMaxZ: ClassVar[int] = ...
    kShearMinXY: ClassVar[int] = ...
    kShearMaxXY: ClassVar[int] = ...
    kShearMinXZ: ClassVar[int] = ...
    kShearMaxXZ: ClassVar[int] = ...
    kShearMinYZ: ClassVar[int] = ...
    kShearMaxYZ: ClassVar[int] = ...
    kRotateMinX: ClassVar[int] = ...
    kRotateMaxX: ClassVar[int] = ...
    kRotateMinY: ClassVar[int] = ...
    kRotateMaxY: ClassVar[int] = ...
    kRotateMinZ: ClassVar[int] = ...
    kRotateMaxZ: ClassVar[int] = ...
    kTranslateMinX: ClassVar[int] = ...
    kTranslateMaxX: ClassVar[int] = ...
    kTranslateMinY: ClassVar[int] = ...
    kTranslateMaxY: ClassVar[int] = ...
    kTranslateMinZ: ClassVar[int] = ...
    kTranslateMaxZ: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def transformation(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def resetTransformation(cls, *args, **kwargs): ...
    @classmethod
    def getTranslation(cls, *args, **kwargs): ...
    @classmethod
    def setTranslation(cls, *args, **kwargs): ...
    @classmethod
    def translateBy(cls, *args, **kwargs): ...
    @classmethod
    def getScale(cls, *args, **kwargs): ...
    @classmethod
    def setScale(cls, *args, **kwargs): ...
    @classmethod
    def scaleBy(cls, *args, **kwargs): ...
    @classmethod
    def scalePivot(cls, *args, **kwargs): ...
    @classmethod
    def setScalePivot(cls, *args, **kwargs): ...
    @classmethod
    def scalePivotTranslation(cls, *args, **kwargs): ...
    @classmethod
    def setScalePivotTranslation(cls, *args, **kwargs): ...
    @classmethod
    def getShear(cls, *args, **kwargs): ...
    @classmethod
    def setShear(cls, *args, **kwargs): ...
    @classmethod
    def shearBy(cls, *args, **kwargs): ...
    @classmethod
    def rotatePivot(cls, *args, **kwargs): ...
    @classmethod
    def setRotatePivot(cls, *args, **kwargs): ...
    @classmethod
    def rotatePivotTranslation(cls, *args, **kwargs): ...
    @classmethod
    def setRotatePivotTranslation(cls, *args, **kwargs): ...
    @classmethod
    def getRotationQuaternion(cls, *args, **kwargs): ...
    @classmethod
    def setRotationQuaternion(cls, *args, **kwargs): ...
    @classmethod
    def rotateByQuaternion(cls, *args, **kwargs): ...
    @classmethod
    def rotateBy(cls, *args, **kwargs): ...
    @classmethod
    def rotateOrientation(cls, *args, **kwargs): ...
    @classmethod
    def setRotateOrientation(cls, *args, **kwargs): ...
    @classmethod
    def rotationOrder(cls, *args, **kwargs): ...
    @classmethod
    def setRotationOrder(cls, *args, **kwargs): ...
    @classmethod
    def restPosition(cls, *args, **kwargs): ...
    @classmethod
    def setRestPosition(cls, *args, **kwargs): ...
    @classmethod
    def resetFromRestPosition(cls, *args, **kwargs): ...
    @classmethod
    def clearRestPosition(cls, *args, **kwargs): ...
    @classmethod
    def isLimited(cls, *args, **kwargs): ...
    @classmethod
    def limitValue(cls, *args, **kwargs): ...
    @classmethod
    def setLimit(cls, *args, **kwargs): ...
    @classmethod
    def enableLimit(cls, *args, **kwargs): ...
    @staticmethod
    def balanceTransformation(*args, **kwargs): ...
    @classmethod
    def getRotation(cls, *args, **kwargs): ...
    @classmethod
    def setRotation(cls, *args, **kwargs): ...
    @classmethod
    def translation(cls, *args, **kwargs): ...

class MFnContainerNode(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    kParentAnchor: ClassVar[int] = ...
    kChildAnchor: ClassVar[int] = ...
    kGeneric: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def getPublishedPlugs(cls, *args, **kwargs): ...
    @classmethod
    def getPublishedNames(cls, *args, **kwargs): ...
    @classmethod
    def getMembers(cls, *args, **kwargs): ...
    @classmethod
    def getSubcontainers(cls, *args, **kwargs): ...
    @classmethod
    def getParentContainer(cls, *args, **kwargs): ...
    @classmethod
    def getRootTransform(cls, *args, **kwargs): ...
    @classmethod
    def getPublishedNodes(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def makeCurrent(cls, *args, **kwargs): ...
    @classmethod
    def isCurrent(cls, *args, **kwargs): ...
    @staticmethod
    def getCurrentAsMObject(*args, **kwargs): ...

class MFnLight(MFnDagNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def color(cls, *args, **kwargs): ...
    @classmethod
    def setColor(cls, *args, **kwargs): ...
    @classmethod
    def intensity(cls, *args, **kwargs): ...
    @classmethod
    def setIntensity(cls, *args, **kwargs): ...
    @classmethod
    def useRayTraceShadows(cls, *args, **kwargs): ...
    @classmethod
    def setUseRayTraceShadows(cls, *args, **kwargs): ...
    @classmethod
    def shadowColor(cls, *args, **kwargs): ...
    @classmethod
    def setShadowColor(cls, *args, **kwargs): ...
    @classmethod
    def centerOfIllumination(cls, *args, **kwargs): ...
    @classmethod
    def setCenterOfIllumination(cls, *args, **kwargs): ...
    @classmethod
    def numShadowSamples(cls, *args, **kwargs): ...
    @classmethod
    def setNumShadowSamples(cls, *args, **kwargs): ...
    @classmethod
    def rayDepthLimit(cls, *args, **kwargs): ...
    @classmethod
    def setRayDepthLimit(cls, *args, **kwargs): ...
    @classmethod
    def opticalFXvisibility(cls, *args, **kwargs): ...
    @classmethod
    def setOpticalFXvisibility(cls, *args, **kwargs): ...
    @classmethod
    def lightIntensity(cls, *args, **kwargs): ...
    @classmethod
    def lightDirection(cls, *args, **kwargs): ...
    @classmethod
    def lightAmbient(cls, *args, **kwargs): ...
    @classmethod
    def lightDiffuse(cls, *args, **kwargs): ...
    @classmethod
    def lightSpecular(cls, *args, **kwargs): ...

class MFnAmbientLight(MFnLight):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def ambientShade(cls, *args, **kwargs): ...
    @classmethod
    def setAmbientShade(cls, *args, **kwargs): ...
    @classmethod
    def castSoftShadows(cls, *args, **kwargs): ...
    @classmethod
    def setCastSoftShadows(cls, *args, **kwargs): ...
    @classmethod
    def shadowRadius(cls, *args, **kwargs): ...
    @classmethod
    def setShadowRadius(cls, *args, **kwargs): ...

class MFnAnisotropyShader(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def tangentUCamera(cls, *args, **kwargs): ...
    @classmethod
    def setTangentUCamera(cls, *args, **kwargs): ...
    @classmethod
    def tangentVCamera(cls, *args, **kwargs): ...
    @classmethod
    def setTangentVCamera(cls, *args, **kwargs): ...
    @classmethod
    def correlationX(cls, *args, **kwargs): ...
    @classmethod
    def setCorrelationX(cls, *args, **kwargs): ...
    @classmethod
    def correlationY(cls, *args, **kwargs): ...
    @classmethod
    def setCorrelationY(cls, *args, **kwargs): ...
    @classmethod
    def roughness(cls, *args, **kwargs): ...
    @classmethod
    def setRoughness(cls, *args, **kwargs): ...
    @classmethod
    def rotateAngle(cls, *args, **kwargs): ...
    @classmethod
    def setRotateAngle(cls, *args, **kwargs): ...
    @classmethod
    def refractiveIndex(cls, *args, **kwargs): ...
    @classmethod
    def setRefractiveIndex(cls, *args, **kwargs): ...
    @classmethod
    def anisotropicReflectivity(cls, *args, **kwargs): ...
    @classmethod
    def setAnisotropicReflectivity(cls, *args, **kwargs): ...

class MFnNonAmbientLight(MFnLight):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def decayRate(cls, *args, **kwargs): ...
    @classmethod
    def setDecayRate(cls, *args, **kwargs): ...

class MFnNonExtendedLight(MFnNonAmbientLight):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def shadowRadius(cls, *args, **kwargs): ...
    @classmethod
    def setShadowRadius(cls, *args, **kwargs): ...
    @classmethod
    def castSoftShadows(cls, *args, **kwargs): ...
    @classmethod
    def setCastSoftShadows(cls, *args, **kwargs): ...
    @classmethod
    def useDepthMapShadows(cls, *args, **kwargs): ...
    @classmethod
    def setUseDepthMapShadows(cls, *args, **kwargs): ...
    @classmethod
    def depthMapFilterSize(cls, *args, **kwargs): ...
    @classmethod
    def setDepthMapFilterSize(cls, *args, **kwargs): ...
    @classmethod
    def depthMapResolution(cls, *args, **kwargs): ...
    @classmethod
    def setDepthMapResolution(cls, *args, **kwargs): ...
    @classmethod
    def depthMapBias(cls, *args, **kwargs): ...
    @classmethod
    def setDepthMapBias(cls, *args, **kwargs): ...
    @classmethod
    def useDepthMapAutoFocus(cls, *args, **kwargs): ...
    @classmethod
    def setUseDepthMapAutoFocus(cls, *args, **kwargs): ...
    @classmethod
    def depthMapWidthFocus(cls, *args, **kwargs): ...
    @classmethod
    def setDepthMapWidthFocus(cls, *args, **kwargs): ...
    @classmethod
    def depthMapFocus(cls, *args, **kwargs): ...
    @classmethod
    def setDepthMapFocus(cls, *args, **kwargs): ...

class MFnAreaLight(MFnNonExtendedLight):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnData(MFnBase):
    __init__: ClassVar[Callable] = ...
    kInvalid: ClassVar[int] = ...
    kNumeric: ClassVar[int] = ...
    kPlugin: ClassVar[int] = ...
    kPluginGeometry: ClassVar[int] = ...
    kString: ClassVar[int] = ...
    kMatrix: ClassVar[int] = ...
    kStringArray: ClassVar[int] = ...
    kDoubleArray: ClassVar[int] = ...
    kFloatArray: ClassVar[int] = ...
    kIntArray: ClassVar[int] = ...
    kPointArray: ClassVar[int] = ...
    kVectorArray: ClassVar[int] = ...
    kMatrixArray: ClassVar[int] = ...
    kComponentList: ClassVar[int] = ...
    kMesh: ClassVar[int] = ...
    kLattice: ClassVar[int] = ...
    kNurbsCurve: ClassVar[int] = ...
    kNurbsSurface: ClassVar[int] = ...
    kSphere: ClassVar[int] = ...
    kDynArrayAttrs: ClassVar[int] = ...
    kDynSweptGeometry: ClassVar[int] = ...
    kSubdSurface: ClassVar[int] = ...
    kNObject: ClassVar[int] = ...
    kNId: ClassVar[int] = ...
    kAny: ClassVar[int] = ...
    kFalloffFunction: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MFnArrayAttrsData(MFnData):
    __init__: ClassVar[Callable] = ...
    kInvalid: ClassVar[int] = ...
    kVectorArray: ClassVar[int] = ...
    kDoubleArray: ClassVar[int] = ...
    kIntArray: ClassVar[int] = ...
    kStringArray: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def count(cls, *args, **kwargs): ...
    @classmethod
    def list(cls, *args, **kwargs): ...
    @classmethod
    def checkArrayExist(cls, *args, **kwargs): ...
    @classmethod
    def vectorArray(cls, *args, **kwargs): ...
    @classmethod
    def doubleArray(cls, *args, **kwargs): ...
    @classmethod
    def intArray(cls, *args, **kwargs): ...
    @classmethod
    def stringArray(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def getVectorData(cls, *args, **kwargs): ...
    @classmethod
    def getDoubleData(cls, *args, **kwargs): ...
    @classmethod
    def getIntData(cls, *args, **kwargs): ...
    @classmethod
    def getStringData(cls, *args, **kwargs): ...

class MFnAttribute(MFnBase):
    __init__: ClassVar[Callable] = ...
    kDelete: ClassVar[int] = ...
    kReset: ClassVar[int] = ...
    kNothing: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def isReadable(cls, *args, **kwargs): ...
    @classmethod
    def isWritable(cls, *args, **kwargs): ...
    @classmethod
    def isConnectable(cls, *args, **kwargs): ...
    @classmethod
    def isStorable(cls, *args, **kwargs): ...
    @classmethod
    def isCached(cls, *args, **kwargs): ...
    @classmethod
    def isArray(cls, *args, **kwargs): ...
    @classmethod
    def indexMatters(cls, *args, **kwargs): ...
    @classmethod
    def isKeyable(cls, *args, **kwargs): ...
    @classmethod
    def isChannelBoxFlagSet(cls, *args, **kwargs): ...
    @classmethod
    def isHidden(cls, *args, **kwargs): ...
    @classmethod
    def isUsedAsColor(cls, *args, **kwargs): ...
    @classmethod
    def isIndeterminant(cls, *args, **kwargs): ...
    @classmethod
    def isRenderSource(cls, *args, **kwargs): ...
    @classmethod
    def isDynamic(cls, *args, **kwargs): ...
    @classmethod
    def isExtension(cls, *args, **kwargs): ...
    @classmethod
    def isWorldSpace(cls, *args, **kwargs): ...
    @classmethod
    def isAffectsWorldSpace(cls, *args, **kwargs): ...
    @classmethod
    def isUsedAsFilename(cls, *args, **kwargs): ...
    @classmethod
    def affectsAppearance(cls, *args, **kwargs): ...
    @classmethod
    def isProxyAttribute(cls, *args, **kwargs): ...
    @classmethod
    def isEnforcingUniqueName(cls, *args, **kwargs): ...
    @classmethod
    def disconnectBehavior(cls, *args, **kwargs): ...
    @classmethod
    def usesArrayDataBuilder(cls, *args, **kwargs): ...
    @classmethod
    def internal(cls, *args, **kwargs): ...
    @classmethod
    def setReadable(cls, *args, **kwargs): ...
    @classmethod
    def setWritable(cls, *args, **kwargs): ...
    @classmethod
    def setConnectable(cls, *args, **kwargs): ...
    @classmethod
    def setStorable(cls, *args, **kwargs): ...
    @classmethod
    def setCached(cls, *args, **kwargs): ...
    @classmethod
    def setArray(cls, *args, **kwargs): ...
    @classmethod
    def setIndexMatters(cls, *args, **kwargs): ...
    @classmethod
    def setKeyable(cls, *args, **kwargs): ...
    @classmethod
    def setChannelBox(cls, *args, **kwargs): ...
    @classmethod
    def setHidden(cls, *args, **kwargs): ...
    @classmethod
    def setUsedAsColor(cls, *args, **kwargs): ...
    @classmethod
    def setIndeterminant(cls, *args, **kwargs): ...
    @classmethod
    def setRenderSource(cls, *args, **kwargs): ...
    @classmethod
    def setWorldSpace(cls, *args, **kwargs): ...
    @classmethod
    def setAffectsWorldSpace(cls, *args, **kwargs): ...
    @classmethod
    def setUsedAsFilename(cls, *args, **kwargs): ...
    @classmethod
    def setAffectsAppearance(cls, *args, **kwargs): ...
    @classmethod
    def setProxyAttribute(cls, *args, **kwargs): ...
    @classmethod
    def setEnforcingUniqueName(cls, *args, **kwargs): ...
    @classmethod
    def setDisconnectBehavior(cls, *args, **kwargs): ...
    @classmethod
    def setUsesArrayDataBuilder(cls, *args, **kwargs): ...
    @classmethod
    def setInternal(cls, *args, **kwargs): ...
    @classmethod
    def setNiceNameOverride(cls, *args, **kwargs): ...
    @classmethod
    def acceptsAttribute(cls, *args, **kwargs): ...
    @classmethod
    def accepts(cls, *args, **kwargs): ...
    @classmethod
    def parent(cls, *args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def shortName(cls, *args, **kwargs): ...
    @classmethod
    def pathName(cls, *args, **kwargs): ...
    @classmethod
    def getAddAttrCmd(cls, *args, **kwargs): ...
    @classmethod
    def addToCategory(cls, *args, **kwargs): ...
    @classmethod
    def removeFromCategory(cls, *args, **kwargs): ...
    @classmethod
    def hasCategory(cls, *args, **kwargs): ...
    @classmethod
    def getCategories(cls, *args, **kwargs): ...

class MFnLambertShader(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def refractedRayDepthLimit(cls, *args, **kwargs): ...
    @classmethod
    def setRefractedRayDepthLimit(cls, *args, **kwargs): ...
    @classmethod
    def refractiveIndex(cls, *args, **kwargs): ...
    @classmethod
    def setRefractiveIndex(cls, *args, **kwargs): ...
    @classmethod
    def rtRefractedColor(cls, *args, **kwargs): ...
    @classmethod
    def setRtRefractedColor(cls, *args, **kwargs): ...
    @classmethod
    def diffuseCoeff(cls, *args, **kwargs): ...
    @classmethod
    def setDiffuseCoeff(cls, *args, **kwargs): ...
    @classmethod
    def color(cls, *args, **kwargs): ...
    @classmethod
    def setColor(cls, *args, **kwargs): ...
    @classmethod
    def transparency(cls, *args, **kwargs): ...
    @classmethod
    def setTransparency(cls, *args, **kwargs): ...
    @classmethod
    def ambientColor(cls, *args, **kwargs): ...
    @classmethod
    def setAmbientColor(cls, *args, **kwargs): ...
    @classmethod
    def incandescence(cls, *args, **kwargs): ...
    @classmethod
    def setIncandescence(cls, *args, **kwargs): ...
    @classmethod
    def translucenceCoeff(cls, *args, **kwargs): ...
    @classmethod
    def setTranslucenceCoeff(cls, *args, **kwargs): ...
    @classmethod
    def glowIntensity(cls, *args, **kwargs): ...
    @classmethod
    def setGlowIntensity(cls, *args, **kwargs): ...
    @classmethod
    def hideSource(cls, *args, **kwargs): ...
    @classmethod
    def setHideSource(cls, *args, **kwargs): ...

class MFnReflectShader(MFnLambertShader):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def reflectedRayDepthLimit(cls, *args, **kwargs): ...
    @classmethod
    def setReflectedRayDepthLimit(cls, *args, **kwargs): ...
    @classmethod
    def specularColor(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularColor(cls, *args, **kwargs): ...
    @classmethod
    def reflectivity(cls, *args, **kwargs): ...
    @classmethod
    def setReflectivity(cls, *args, **kwargs): ...
    @classmethod
    def reflectedColor(cls, *args, **kwargs): ...
    @classmethod
    def setReflectedColor(cls, *args, **kwargs): ...

class MFnBlinnShader(MFnReflectShader):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def eccentricity(cls, *args, **kwargs): ...
    @classmethod
    def setEccentricity(cls, *args, **kwargs): ...
    @classmethod
    def specularRollOff(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularRollOff(cls, *args, **kwargs): ...

class MFnReference(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def isValidReference(cls, *args, **kwargs): ...
    @classmethod
    def fileName(cls, *args, **kwargs): ...
    @classmethod
    def associatedNamespace(cls, *args, **kwargs): ...
    @classmethod
    def parentFileName(cls, *args, **kwargs): ...
    @classmethod
    def parentReference(cls, *args, **kwargs): ...
    @classmethod
    def parentAssembly(cls, *args, **kwargs): ...
    @classmethod
    def containsNode(cls, *args, **kwargs): ...
    @classmethod
    def containsNodeExactly(cls, *args, **kwargs): ...
    @classmethod
    def nodes(cls, *args, **kwargs): ...
    @classmethod
    def isLoaded(cls, *args, **kwargs): ...
    @classmethod
    def isLocked(cls, *args, **kwargs): ...
    @classmethod
    def isExportEditsFile(cls, *args, **kwargs): ...
    @staticmethod
    def ignoreReferenceEdits(*args, **kwargs): ...
    @staticmethod
    def setIgnoreReferenceEdits(*args, **kwargs): ...

class MFnCamera(MFnDagNode):
    __init__: ClassVar[Callable] = ...
    kFillFilmFit: ClassVar[int] = ...
    kHorizontalFilmFit: ClassVar[int] = ...
    kVerticalFilmFit: ClassVar[int] = ...
    kOverscanFilmFit: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kRotateTranslate: ClassVar[int] = ...
    kTranslateRotate: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def eyePoint(cls, *args, **kwargs): ...
    @classmethod
    def viewDirection(cls, *args, **kwargs): ...
    @classmethod
    def upDirection(cls, *args, **kwargs): ...
    @classmethod
    def rightDirection(cls, *args, **kwargs): ...
    @classmethod
    def centerOfInterestPoint(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setEyePoint(cls, *args, **kwargs): ...
    @classmethod
    def setCenterOfInterestPoint(cls, *args, **kwargs): ...
    @classmethod
    def hasSamePerspective(cls, *args, **kwargs): ...
    @classmethod
    def copyViewFrom(cls, *args, **kwargs): ...
    @classmethod
    def getFilmFrustum(cls, *args, **kwargs): ...
    @classmethod
    def getPortFieldOfView(cls, *args, **kwargs): ...
    @classmethod
    def getViewParameters(cls, *args, **kwargs): ...
    @classmethod
    def getViewingFrustum(cls, *args, **kwargs): ...
    @classmethod
    def getRenderingFrustum(cls, *args, **kwargs): ...
    @classmethod
    def setHorizontalFilmAperture(cls, *args, **kwargs): ...
    @classmethod
    def horizontalFilmAperture(cls, *args, **kwargs): ...
    @classmethod
    def setVerticalFilmAperture(cls, *args, **kwargs): ...
    @classmethod
    def verticalFilmAperture(cls, *args, **kwargs): ...
    @classmethod
    def getFilmApertureLimits(cls, *args, **kwargs): ...
    @classmethod
    def setAspectRatio(cls, *args, **kwargs): ...
    @classmethod
    def aspectRatio(cls, *args, **kwargs): ...
    @classmethod
    def getAspectRatioLimits(cls, *args, **kwargs): ...
    @classmethod
    def setVerticalLock(cls, *args, **kwargs): ...
    @classmethod
    def isVerticalLock(cls, *args, **kwargs): ...
    @classmethod
    def horizontalFilmOffset(cls, *args, **kwargs): ...
    @classmethod
    def setHorizontalFilmOffset(cls, *args, **kwargs): ...
    @classmethod
    def verticalFilmOffset(cls, *args, **kwargs): ...
    @classmethod
    def setVerticalFilmOffset(cls, *args, **kwargs): ...
    @classmethod
    def shakeEnabled(cls, *args, **kwargs): ...
    @classmethod
    def setShakeEnabled(cls, *args, **kwargs): ...
    @classmethod
    def horizontalShake(cls, *args, **kwargs): ...
    @classmethod
    def setHorizontalShake(cls, *args, **kwargs): ...
    @classmethod
    def verticalShake(cls, *args, **kwargs): ...
    @classmethod
    def setVerticalShake(cls, *args, **kwargs): ...
    @classmethod
    def shakeOverscanEnabled(cls, *args, **kwargs): ...
    @classmethod
    def setShakeOverscanEnabled(cls, *args, **kwargs): ...
    @classmethod
    def shakeOverscan(cls, *args, **kwargs): ...
    @classmethod
    def setShakeOverscan(cls, *args, **kwargs): ...
    @classmethod
    def panZoomEnabled(cls, *args, **kwargs): ...
    @classmethod
    def setPanZoomEnabled(cls, *args, **kwargs): ...
    @classmethod
    def renderPanZoom(cls, *args, **kwargs): ...
    @classmethod
    def setRenderPanZoom(cls, *args, **kwargs): ...
    @classmethod
    def horizontalPan(cls, *args, **kwargs): ...
    @classmethod
    def setHorizontalPan(cls, *args, **kwargs): ...
    @classmethod
    def verticalPan(cls, *args, **kwargs): ...
    @classmethod
    def setVerticalPan(cls, *args, **kwargs): ...
    @classmethod
    def zoom(cls, *args, **kwargs): ...
    @classmethod
    def setZoom(cls, *args, **kwargs): ...
    @classmethod
    def stereoHITEnabled(cls, *args, **kwargs): ...
    @classmethod
    def setStereoHITEnabled(cls, *args, **kwargs): ...
    @classmethod
    def stereoHIT(cls, *args, **kwargs): ...
    @classmethod
    def setStereoHIT(cls, *args, **kwargs): ...
    @classmethod
    def setFilmFit(cls, *args, **kwargs): ...
    @classmethod
    def filmFit(cls, *args, **kwargs): ...
    @classmethod
    def setFilmFitOffset(cls, *args, **kwargs): ...
    @classmethod
    def filmFitOffset(cls, *args, **kwargs): ...
    @classmethod
    def setOverscan(cls, *args, **kwargs): ...
    @classmethod
    def overscan(cls, *args, **kwargs): ...
    @classmethod
    def setHorizontalRollPivot(cls, *args, **kwargs): ...
    @classmethod
    def horizontalRollPivot(cls, *args, **kwargs): ...
    @classmethod
    def setVerticalRollPivot(cls, *args, **kwargs): ...
    @classmethod
    def verticalRollPivot(cls, *args, **kwargs): ...
    @classmethod
    def setFilmRollValue(cls, *args, **kwargs): ...
    @classmethod
    def filmRollValue(cls, *args, **kwargs): ...
    @classmethod
    def setFilmRollOrder(cls, *args, **kwargs): ...
    @classmethod
    def filmRollOrder(cls, *args, **kwargs): ...
    @classmethod
    def setPreScale(cls, *args, **kwargs): ...
    @classmethod
    def preScale(cls, *args, **kwargs): ...
    @classmethod
    def setPostScale(cls, *args, **kwargs): ...
    @classmethod
    def postScale(cls, *args, **kwargs): ...
    @classmethod
    def setFilmTranslateH(cls, *args, **kwargs): ...
    @classmethod
    def filmTranslateH(cls, *args, **kwargs): ...
    @classmethod
    def setFilmTranslateV(cls, *args, **kwargs): ...
    @classmethod
    def filmTranslateV(cls, *args, **kwargs): ...
    @classmethod
    def setDisplayGateMask(cls, *args, **kwargs): ...
    @classmethod
    def isDisplayGateMask(cls, *args, **kwargs): ...
    @classmethod
    def setDisplayFilmGate(cls, *args, **kwargs): ...
    @classmethod
    def isDisplayFilmGate(cls, *args, **kwargs): ...
    @classmethod
    def setHorizontalFieldOfView(cls, *args, **kwargs): ...
    @classmethod
    def horizontalFieldOfView(cls, *args, **kwargs): ...
    @classmethod
    def setVerticalFieldOfView(cls, *args, **kwargs): ...
    @classmethod
    def verticalFieldOfView(cls, *args, **kwargs): ...
    @classmethod
    def setFocalLength(cls, *args, **kwargs): ...
    @classmethod
    def focalLength(cls, *args, **kwargs): ...
    @classmethod
    def getFocalLengthLimits(cls, *args, **kwargs): ...
    @classmethod
    def setLensSqueezeRatio(cls, *args, **kwargs): ...
    @classmethod
    def lensSqueezeRatio(cls, *args, **kwargs): ...
    @classmethod
    def setClippingPlanes(cls, *args, **kwargs): ...
    @classmethod
    def isClippingPlanes(cls, *args, **kwargs): ...
    @classmethod
    def setNearClippingPlane(cls, *args, **kwargs): ...
    @classmethod
    def nearClippingPlane(cls, *args, **kwargs): ...
    @classmethod
    def setFarClippingPlane(cls, *args, **kwargs): ...
    @classmethod
    def farClippingPlane(cls, *args, **kwargs): ...
    @classmethod
    def setNearFarClippingPlanes(cls, *args, **kwargs): ...
    @classmethod
    def setDepthOfField(cls, *args, **kwargs): ...
    @classmethod
    def isDepthOfField(cls, *args, **kwargs): ...
    @classmethod
    def setFStop(cls, *args, **kwargs): ...
    @classmethod
    def fStop(cls, *args, **kwargs): ...
    @classmethod
    def setFocusDistance(cls, *args, **kwargs): ...
    @classmethod
    def focusDistance(cls, *args, **kwargs): ...
    @classmethod
    def setNearFocusDistance(cls, *args, **kwargs): ...
    @classmethod
    def nearFocusDistance(cls, *args, **kwargs): ...
    @classmethod
    def setFarFocusDistance(cls, *args, **kwargs): ...
    @classmethod
    def farFocusDistance(cls, *args, **kwargs): ...
    @classmethod
    def computeDepthOfField(cls, *args, **kwargs): ...
    @classmethod
    def setMotionBlur(cls, *args, **kwargs): ...
    @classmethod
    def isMotionBlur(cls, *args, **kwargs): ...
    @classmethod
    def setShutterAngle(cls, *args, **kwargs): ...
    @classmethod
    def shutterAngle(cls, *args, **kwargs): ...
    @classmethod
    def setCenterOfInterest(cls, *args, **kwargs): ...
    @classmethod
    def centerOfInterest(cls, *args, **kwargs): ...
    @classmethod
    def setIsOrtho(cls, *args, **kwargs): ...
    @classmethod
    def isOrtho(cls, *args, **kwargs): ...
    @classmethod
    def setOrthoWidth(cls, *args, **kwargs): ...
    @classmethod
    def orthoWidth(cls, *args, **kwargs): ...
    @classmethod
    def setCameraScale(cls, *args, **kwargs): ...
    @classmethod
    def cameraScale(cls, *args, **kwargs): ...
    @classmethod
    def setTumblePivot(cls, *args, **kwargs): ...
    @classmethod
    def tumblePivot(cls, *args, **kwargs): ...
    @classmethod
    def unnormalizedNearClippingPlane(cls, *args, **kwargs): ...
    @classmethod
    def unnormalizedFarClippingPlane(cls, *args, **kwargs): ...
    @classmethod
    def setUsePivotAsLocalSpace(cls, *args, **kwargs): ...
    @classmethod
    def usePivotAsLocalSpace(cls, *args, **kwargs): ...
    @classmethod
    def postProjectionMatrix(cls, *args, **kwargs): ...
    @classmethod
    def projectionMatrix(cls, *args, **kwargs): ...

class MFnComponent(MFnBase):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def elementCount(cls, *args, **kwargs): ...
    @classmethod
    def componentType(cls, *args, **kwargs): ...
    @classmethod
    def isEmpty(cls, *args, **kwargs): ...
    @classmethod
    def isEqual(cls, *args, **kwargs): ...
    @classmethod
    def isComplete(cls, *args, **kwargs): ...
    @classmethod
    def setComplete(cls, *args, **kwargs): ...
    @classmethod
    def hasWeights(cls, *args, **kwargs): ...
    @classmethod
    def weight(cls, *args, **kwargs): ...
    @classmethod
    def setWeight(cls, *args, **kwargs): ...
    @classmethod
    def setWeights(cls, *args, **kwargs): ...

class MFnComponentListData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def has(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def add(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnCompoundAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addChild(cls, *args, **kwargs): ...
    @classmethod
    def removeChild(cls, *args, **kwargs): ...
    @classmethod
    def numChildren(cls, *args, **kwargs): ...
    @classmethod
    def child(cls, *args, **kwargs): ...
    @classmethod
    def getAddAttrCmds(cls, *args, **kwargs): ...

class MFnDirectionalLight(MFnNonExtendedLight):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def shadowAngle(cls, *args, **kwargs): ...
    @classmethod
    def setShadowAngle(cls, *args, **kwargs): ...
    @classmethod
    def useLightPosition(cls, *args, **kwargs): ...
    @classmethod
    def setUseLightPosition(cls, *args, **kwargs): ...

class MFnCameraSet(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def appendLayer(cls, *args, **kwargs): ...
    @classmethod
    def insertLayer(cls, *args, **kwargs): ...
    @classmethod
    def deleteLayer(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def getNumLayers(cls, *args, **kwargs): ...
    @classmethod
    def setLayerCamera(cls, *args, **kwargs): ...
    @classmethod
    def getLayerCamera(cls, *args, **kwargs): ...
    @classmethod
    def setLayerSceneData(cls, *args, **kwargs): ...
    @classmethod
    def getLayerSceneData(cls, *args, **kwargs): ...
    @classmethod
    def setLayerActive(cls, *args, **kwargs): ...
    @classmethod
    def isLayerActive(cls, *args, **kwargs): ...
    @classmethod
    def setLayerOrder(cls, *args, **kwargs): ...
    @classmethod
    def getLayerOrder(cls, *args, **kwargs): ...
    @classmethod
    def getSortedIndices(cls, *args, **kwargs): ...
    @classmethod
    def setLayerClearDepthValue(cls, *args, **kwargs): ...
    @classmethod
    def getLayerClearDepthValue(cls, *args, **kwargs): ...

class MFnDoubleArrayData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def copyTo(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnDoubleIndexedComponent(MFnComponent):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addElement(cls, *args, **kwargs): ...
    @classmethod
    def addElements(cls, *args, **kwargs): ...
    @classmethod
    def getElement(cls, *args, **kwargs): ...
    @classmethod
    def getElements(cls, *args, **kwargs): ...
    @classmethod
    def setCompleteData(cls, *args, **kwargs): ...
    @classmethod
    def getCompleteData(cls, *args, **kwargs): ...

class MFnEnumAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addField(cls, *args, **kwargs): ...
    @classmethod
    def fieldName(cls, *args, **kwargs): ...
    @classmethod
    def fieldIndex(cls, *args, **kwargs): ...
    @classmethod
    def getMin(cls, *args, **kwargs): ...
    @classmethod
    def getMax(cls, *args, **kwargs): ...
    @classmethod
    def setDefault(cls, *args, **kwargs): ...
    @classmethod
    def getDefault(cls, *args, **kwargs): ...
    @classmethod
    def defaultValue(cls, *args, **kwargs): ...

class MFnExpression(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    kAll: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kAngularOnly: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def expression(cls, *args, **kwargs): ...
    @classmethod
    def setExpression(cls, *args, **kwargs): ...
    @classmethod
    def getDefaultObject(cls, *args, **kwargs): ...
    @classmethod
    def setDefaultObject(cls, *args, **kwargs): ...
    @classmethod
    def isAnimated(cls, *args, **kwargs): ...
    @classmethod
    def setAnimated(cls, *args, **kwargs): ...
    @classmethod
    def evaluate(cls, *args, **kwargs): ...
    @classmethod
    def unitConversion(cls, *args, **kwargs): ...
    @classmethod
    def setUnitConversion(cls, *args, **kwargs): ...

class MFnFloatArrayData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def copyTo(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnGenericAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addDataAccept(cls, *args, **kwargs): ...
    @classmethod
    def addNumericDataAccept(cls, *args, **kwargs): ...
    @classmethod
    def addAccept(cls, *args, **kwargs): ...
    @classmethod
    def removeDataAccept(cls, *args, **kwargs): ...
    @classmethod
    def removeNumericDataAccept(cls, *args, **kwargs): ...
    @classmethod
    def removeAccept(cls, *args, **kwargs): ...

class MFnGeometryData(MFnData):
    __init__: ClassVar[Callable] = ...
    kAuto: ClassVar[int] = ...
    kNull: ClassVar[int] = ...
    kVerts: ClassVar[int] = ...
    kEdges: ClassVar[int] = ...
    kFaces: ClassVar[int] = ...
    kUnsupported: ClassVar[int] = ...
    kInvalidGroup: ClassVar[int] = ...
    kEmptyGroup: ClassVar[int] = ...
    kCompleteGroup: ClassVar[int] = ...
    kPartialGroup: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def setMatrix(cls, *args, **kwargs): ...
    @classmethod
    def getMatrix(cls, *args, **kwargs): ...
    @classmethod
    def matrixIsIdentity(cls, *args, **kwargs): ...
    @classmethod
    def matrixIsNotIdentity(cls, *args, **kwargs): ...
    @classmethod
    def hasObjectGroup(cls, *args, **kwargs): ...
    @classmethod
    def addObjectGroup(cls, *args, **kwargs): ...
    @classmethod
    def removeObjectGroup(cls, *args, **kwargs): ...
    @classmethod
    def changeObjectGroupId(cls, *args, **kwargs): ...
    @classmethod
    def objectGroupCount(cls, *args, **kwargs): ...
    @classmethod
    def objectGroup(cls, *args, **kwargs): ...
    @classmethod
    def objectGroupType(cls, *args, **kwargs): ...
    @classmethod
    def objectGroupComponent(cls, *args, **kwargs): ...
    @classmethod
    def setObjectGroupComponent(cls, *args, **kwargs): ...
    @classmethod
    def addObjectGroupComponent(cls, *args, **kwargs): ...
    @classmethod
    def removeObjectGroupComponent(cls, *args, **kwargs): ...
    @classmethod
    def objectGroupSubsetState(cls, *args, **kwargs): ...
    @classmethod
    def copyObjectGroups(cls, *args, **kwargs): ...
    @classmethod
    def componentTags(cls, *args, **kwargs): ...
    @classmethod
    def hasComponentTag(cls, *args, **kwargs): ...
    @classmethod
    def addComponentTag(cls, *args, **kwargs): ...
    @classmethod
    def removeComponentTag(cls, *args, **kwargs): ...
    @classmethod
    def renameComponentTag(cls, *args, **kwargs): ...
    @classmethod
    def componentTagContents(cls, *args, **kwargs): ...
    @classmethod
    def setComponentTagContents(cls, *args, **kwargs): ...
    @classmethod
    def componentTagType(cls, *args, **kwargs): ...
    @classmethod
    def componentTagCategory(cls, *args, **kwargs): ...
    @classmethod
    def componentTagExpressionSubsetState(cls, *args, **kwargs): ...
    @classmethod
    def resolveComponentTagExpression(cls, *args, **kwargs): ...

class MFnIntArrayData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def copyTo(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnLatticeData(MFnGeometryData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def lattice(cls, *args, **kwargs): ...

class MFnLayeredShader(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def compositingFlag(cls, *args, **kwargs): ...
    @classmethod
    def setCompositingFlag(cls, *args, **kwargs): ...
    @classmethod
    def color(cls, *args, **kwargs): ...
    @classmethod
    def setColor(cls, *args, **kwargs): ...
    @classmethod
    def transparency(cls, *args, **kwargs): ...
    @classmethod
    def setTransparency(cls, *args, **kwargs): ...
    @classmethod
    def glowColor(cls, *args, **kwargs): ...
    @classmethod
    def setGlowColor(cls, *args, **kwargs): ...
    @classmethod
    def hardwareColor(cls, *args, **kwargs): ...
    @classmethod
    def setHardwareColor(cls, *args, **kwargs): ...
    @classmethod
    def hardwareShader(cls, *args, **kwargs): ...
    @classmethod
    def setHardwareShader(cls, *args, **kwargs): ...

class MFnLightDataAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def getDefault(cls, *args, **kwargs): ...
    @classmethod
    def setDefault(cls, *args, **kwargs): ...
    @classmethod
    def child(cls, *args, **kwargs): ...

class MFnMatrixArrayData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def copyTo(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnMatrixAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    kFloat: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def getDefault(cls, *args, **kwargs): ...
    @classmethod
    def setDefault(cls, *args, **kwargs): ...

class MFnMatrixData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def isTransformation(cls, *args, **kwargs): ...
    @classmethod
    def transformation(cls, *args, **kwargs): ...
    @classmethod
    def matrix(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnMeshData(MFnGeometryData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
kMFnMeshTolerance: float
kMFnMeshPointTolerance: float
kMFnMeshInstanceUnspecified: int

class MFnMesh(MFnDagNode):
    __init__: ClassVar[Callable] = ...
    kAlpha: ClassVar[int] = ...
    kRGB: ClassVar[int] = ...
    kRGBA: ClassVar[int] = ...
    kOnEdge: ClassVar[int] = ...
    kInternalPoint: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kUnion: ClassVar[int] = ...
    kDifference: ClassVar[int] = ...
    kIntersection: ClassVar[int] = ...
    kEdgeClassification: ClassVar[int] = ...
    kNormalClassification: ClassVar[int] = ...
    kGeomBorder: ClassVar[int] = ...
    kUVBorder: ClassVar[int] = ...
    kSharedUV: ClassVar[int] = ...
    kUnsharedUV: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def getSmoothMeshDisplayOptions(cls, *args, **kwargs): ...
    @classmethod
    def setSmoothMeshDisplayOptions(cls, *args, **kwargs): ...
    @classmethod
    def addPolygon(cls, *args, **kwargs): ...
    @classmethod
    def addHoles(cls, *args, **kwargs): ...
    @classmethod
    def deleteFace(cls, *args, **kwargs): ...
    @classmethod
    def deleteEdge(cls, *args, **kwargs): ...
    @classmethod
    def deleteVertex(cls, *args, **kwargs): ...
    @classmethod
    def split(cls, *args, **kwargs): ...
    @classmethod
    def subdivideFaces(cls, *args, **kwargs): ...
    @classmethod
    def subdivideEdges(cls, *args, **kwargs): ...
    @classmethod
    def extrudeFaces(cls, *args, **kwargs): ...
    @classmethod
    def extrudeEdges(cls, *args, **kwargs): ...
    @classmethod
    def duplicateFaces(cls, *args, **kwargs): ...
    @classmethod
    def extractFaces(cls, *args, **kwargs): ...
    @classmethod
    def collapseFaces(cls, *args, **kwargs): ...
    @classmethod
    def collapseEdges(cls, *args, **kwargs): ...
    @classmethod
    def numVertices(cls, *args, **kwargs): ...
    @classmethod
    def numEdges(cls, *args, **kwargs): ...
    @classmethod
    def numPolygons(cls, *args, **kwargs): ...
    @classmethod
    def numFaceVertices(cls, *args, **kwargs): ...
    @classmethod
    def polygonVertexCount(cls, *args, **kwargs): ...
    @classmethod
    def numUVs(cls, *args, **kwargs): ...
    @classmethod
    def numColors(cls, *args, **kwargs): ...
    @classmethod
    def numNormals(cls, *args, **kwargs): ...
    @classmethod
    def hasColorChannels(cls, *args, **kwargs): ...
    @classmethod
    def hasAlphaChannels(cls, *args, **kwargs): ...
    @classmethod
    def getColorRepresentation(cls, *args, **kwargs): ...
    @classmethod
    def isColorClamped(cls, *args, **kwargs): ...
    @classmethod
    def setIsColorClamped(cls, *args, **kwargs): ...
    @classmethod
    def getTriangles(cls, *args, **kwargs): ...
    @classmethod
    def getTriangleOffsets(cls, *args, **kwargs): ...
    @classmethod
    def booleanOp(cls, *args, **kwargs): ...
    @classmethod
    def booleanOps(cls, *args, **kwargs): ...
    @staticmethod
    def uniformGridParams(*args, **kwargs): ...
    @staticmethod
    def autoUniformGridParams(*args, **kwargs): ...
    @classmethod
    def closestIntersection(cls, *args, **kwargs): ...
    @classmethod
    def anyIntersection(cls, *args, **kwargs): ...
    @classmethod
    def allIntersections(cls, *args, **kwargs): ...
    @classmethod
    def sortIntersectionFaceTriIds(cls, *args, **kwargs): ...
    @classmethod
    def freeCachedIntersectionAccelerator(cls, *args, **kwargs): ...
    @classmethod
    def cachedIntersectionAcceleratorInfo(cls, *args, **kwargs): ...
    @staticmethod
    def globalIntersectionAcceleratorsInfo(*args, **kwargs): ...
    @staticmethod
    def clearGlobalIntersectionAcceleratorInfo(*args, **kwargs): ...
    @classmethod
    def intersect(cls, *args, **kwargs): ...
    @classmethod
    def getClosestPointAndNormal(cls, *args, **kwargs): ...
    @classmethod
    def getClosestPoint(cls, *args, **kwargs): ...
    @classmethod
    def getClosestNormal(cls, *args, **kwargs): ...
    @classmethod
    def getClosestUVs(cls, *args, **kwargs): ...
    @classmethod
    def intersectFaceAtUV(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedShaders(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def updateSurface(cls, *args, **kwargs): ...
    @classmethod
    def syncObject(cls, *args, **kwargs): ...
    @classmethod
    def getRawPoints(cls, *args, **kwargs): ...
    @classmethod
    def getRawDoublePoints(cls, *args, **kwargs): ...
    @classmethod
    def getRawNormals(cls, *args, **kwargs): ...
    @classmethod
    def getRawUVs(cls, *args, **kwargs): ...
    @classmethod
    def getPoints(cls, *args, **kwargs): ...
    @classmethod
    def setPoints(cls, *args, **kwargs): ...
    @classmethod
    def getVertices(cls, *args, **kwargs): ...
    @classmethod
    def getPolygonVertices(cls, *args, **kwargs): ...
    @classmethod
    def getPolygonTriangleVertices(cls, *args, **kwargs): ...
    @classmethod
    def setPoint(cls, *args, **kwargs): ...
    @classmethod
    def getPoint(cls, *args, **kwargs): ...
    @classmethod
    def getNormals(cls, *args, **kwargs): ...
    @classmethod
    def setNormals(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexNormal(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexNormals(cls, *args, **kwargs): ...
    @classmethod
    def getNormalIds(cls, *args, **kwargs): ...
    @classmethod
    def getFaceNormalIds(cls, *args, **kwargs): ...
    @classmethod
    def setFaceVertexNormal(cls, *args, **kwargs): ...
    @classmethod
    def setVertexNormal(cls, *args, **kwargs): ...
    @classmethod
    def setFaceVertexNormals(cls, *args, **kwargs): ...
    @classmethod
    def setVertexNormals(cls, *args, **kwargs): ...
    @classmethod
    def getVertexNormal(cls, *args, **kwargs): ...
    @classmethod
    def getVertexNormals(cls, *args, **kwargs): ...
    @classmethod
    def getPolygonNormal(cls, *args, **kwargs): ...
    @classmethod
    def isNormalLocked(cls, *args, **kwargs): ...
    @classmethod
    def lockVertexNormals(cls, *args, **kwargs): ...
    @classmethod
    def lockFaceVertexNormals(cls, *args, **kwargs): ...
    @classmethod
    def unlockVertexNormals(cls, *args, **kwargs): ...
    @classmethod
    def unlockFaceVertexNormals(cls, *args, **kwargs): ...
    @classmethod
    def getTangentId(cls, *args, **kwargs): ...
    @classmethod
    def getTangents(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexTangent(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexTangents(cls, *args, **kwargs): ...
    @classmethod
    def getBinormals(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexBinormal(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexBinormals(cls, *args, **kwargs): ...
    @classmethod
    def isRightHandedTangent(cls, *args, **kwargs): ...
    @classmethod
    def isPolygonConvex(cls, *args, **kwargs): ...
    @classmethod
    def edgeBorderInfo(cls, *args, **kwargs): ...
    @classmethod
    def getUVBorderEdges(cls, *args, **kwargs): ...
    @classmethod
    def getEdgeVertices(cls, *args, **kwargs): ...
    @classmethod
    def isEdgeSmooth(cls, *args, **kwargs): ...
    @classmethod
    def setEdgeSmoothing(cls, *args, **kwargs): ...
    @classmethod
    def setEdgeSmoothings(cls, *args, **kwargs): ...
    @classmethod
    def cleanupEdgeSmoothing(cls, *args, **kwargs): ...
    @classmethod
    def getCreaseEdges(cls, *args, **kwargs): ...
    @classmethod
    def setCreaseEdges(cls, *args, **kwargs): ...
    @classmethod
    def getInvisibleFaces(cls, *args, **kwargs): ...
    @classmethod
    def setInvisibleFaces(cls, *args, **kwargs): ...
    @classmethod
    def getCreaseVertices(cls, *args, **kwargs): ...
    @classmethod
    def setCreaseVertices(cls, *args, **kwargs): ...
    @classmethod
    def numUVSets(cls, *args, **kwargs): ...
    @classmethod
    def createUVSetWithName(cls, *args, **kwargs): ...
    @classmethod
    def createUVSetDataMeshWithName(cls, *args, **kwargs): ...
    @classmethod
    def copyUVSetWithName(cls, *args, **kwargs): ...
    @classmethod
    def renameUVSet(cls, *args, **kwargs): ...
    @classmethod
    def deleteUVSet(cls, *args, **kwargs): ...
    @classmethod
    def setCurrentUVSetName(cls, *args, **kwargs): ...
    @classmethod
    def currentUVSetName(cls, *args, **kwargs): ...
    @classmethod
    def getUVSetNames(cls, *args, **kwargs): ...
    @classmethod
    def getUVSetFamilyNames(cls, *args, **kwargs): ...
    @classmethod
    def getUVSetsInFamily(cls, *args, **kwargs): ...
    @classmethod
    def isUVSetPerInstance(cls, *args, **kwargs): ...
    @classmethod
    def getFaceUVSetNames(cls, *args, **kwargs): ...
    @classmethod
    def getAssociatedUVSetTextures(cls, *args, **kwargs): ...
    @classmethod
    def getAssociatedUVSetInstances(cls, *args, **kwargs): ...
    @classmethod
    def setUVs(cls, *args, **kwargs): ...
    @classmethod
    def setSomeUVs(cls, *args, **kwargs): ...
    @classmethod
    def getUVs(cls, *args, **kwargs): ...
    @classmethod
    def setUV(cls, *args, **kwargs): ...
    @classmethod
    def getUV(cls, *args, **kwargs): ...
    @classmethod
    def getPointAtUV(cls, *args, **kwargs): ...
    @classmethod
    def getPointsAtUV(cls, *args, **kwargs): ...
    @classmethod
    def getUVAtPoint(cls, *args, **kwargs): ...
    @classmethod
    def getAxisAtPoint(cls, *args, **kwargs): ...
    @classmethod
    def getPolygonUV(cls, *args, **kwargs): ...
    @classmethod
    def getPolygonUVid(cls, *args, **kwargs): ...
    @classmethod
    def assignUV(cls, *args, **kwargs): ...
    @classmethod
    def assignUVs(cls, *args, **kwargs): ...
    @classmethod
    def clearUVs(cls, *args, **kwargs): ...
    @classmethod
    def getAssignedUVs(cls, *args, **kwargs): ...
    @classmethod
    def getUvShellsIds(cls, *args, **kwargs): ...
    @classmethod
    def getMeshShellsIds(cls, *args, **kwargs): ...
    @classmethod
    def getPinUVs(cls, *args, **kwargs): ...
    @classmethod
    def setPinUVs(cls, *args, **kwargs): ...
    @classmethod
    def isPolygonUVReversed(cls, *args, **kwargs): ...
    @classmethod
    def numColorSets(cls, *args, **kwargs): ...
    @classmethod
    def deleteColorSet(cls, *args, **kwargs): ...
    @classmethod
    def setCurrentColorSetName(cls, *args, **kwargs): ...
    @classmethod
    def currentColorSetName(cls, *args, **kwargs): ...
    @classmethod
    def getColorSetNames(cls, *args, **kwargs): ...
    @classmethod
    def getColorSetFamilyNames(cls, *args, **kwargs): ...
    @classmethod
    def getColorSetsInFamily(cls, *args, **kwargs): ...
    @classmethod
    def isColorSetPerInstance(cls, *args, **kwargs): ...
    @classmethod
    def getAssociatedColorSetInstances(cls, *args, **kwargs): ...
    @classmethod
    def setFaceColor(cls, *args, **kwargs): ...
    @classmethod
    def setVertexColor(cls, *args, **kwargs): ...
    @classmethod
    def setFaceVertexColor(cls, *args, **kwargs): ...
    @classmethod
    def setFaceColors(cls, *args, **kwargs): ...
    @classmethod
    def setVertexColors(cls, *args, **kwargs): ...
    @classmethod
    def setFaceVertexColors(cls, *args, **kwargs): ...
    @classmethod
    def removeFaceColors(cls, *args, **kwargs): ...
    @classmethod
    def removeVertexColors(cls, *args, **kwargs): ...
    @classmethod
    def removeFaceVertexColors(cls, *args, **kwargs): ...
    @classmethod
    def getVertexColors(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexColors(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexColorIndex(cls, *args, **kwargs): ...
    @classmethod
    def setColors(cls, *args, **kwargs): ...
    @classmethod
    def setSomeColors(cls, *args, **kwargs): ...
    @classmethod
    def getColors(cls, *args, **kwargs): ...
    @classmethod
    def getColorIndex(cls, *args, **kwargs): ...
    @classmethod
    def setColor(cls, *args, **kwargs): ...
    @classmethod
    def getColor(cls, *args, **kwargs): ...
    @classmethod
    def assignColor(cls, *args, **kwargs): ...
    @classmethod
    def assignColors(cls, *args, **kwargs): ...
    @classmethod
    def clearColors(cls, *args, **kwargs): ...
    @classmethod
    def displayColors(cls, *args, **kwargs): ...
    @classmethod
    def setDisplayColors(cls, *args, **kwargs): ...
    @classmethod
    def getHoles(cls, *args, **kwargs): ...
    @classmethod
    def onBoundary(cls, *args, **kwargs): ...
    @classmethod
    def isBlindDataTypeUsed(cls, *args, **kwargs): ...
    @classmethod
    def createBlindDataType(cls, *args, **kwargs): ...
    @classmethod
    def hasBlindDataComponentId(cls, *args, **kwargs): ...
    @classmethod
    def hasBlindData(cls, *args, **kwargs): ...
    @classmethod
    def getBlindDataTypes(cls, *args, **kwargs): ...
    @classmethod
    def getBlindDataAttrNames(cls, *args, **kwargs): ...
    @classmethod
    def getFaceVertexBlindDataIndex(cls, *args, **kwargs): ...
    @classmethod
    def getBlindDataFaceVertexIndices(cls, *args, **kwargs): ...
    @classmethod
    def getIntBlindData(cls, *args, **kwargs): ...
    @classmethod
    def getFloatBlindData(cls, *args, **kwargs): ...
    @classmethod
    def getDoubleBlindData(cls, *args, **kwargs): ...
    @classmethod
    def getBoolBlindData(cls, *args, **kwargs): ...
    @classmethod
    def stringBlindDataComponentId(cls, *args, **kwargs): ...
    @classmethod
    def getStringBlindData(cls, *args, **kwargs): ...
    @classmethod
    def binaryBlindDataComponentId(cls, *args, **kwargs): ...
    @classmethod
    def getBinaryBlindData(cls, *args, **kwargs): ...
    @classmethod
    def setIntBlindData(cls, *args, **kwargs): ...
    @classmethod
    def setFloatBlindData(cls, *args, **kwargs): ...
    @classmethod
    def setDoubleBlindData(cls, *args, **kwargs): ...
    @classmethod
    def setBoolBlindData(cls, *args, **kwargs): ...
    @classmethod
    def setStringBlindData(cls, *args, **kwargs): ...
    @classmethod
    def setBinaryBlindData(cls, *args, **kwargs): ...
    @classmethod
    def clearBlindData(cls, *args, **kwargs): ...
    @staticmethod
    def componentTypeName(*args, **kwargs): ...
    @staticmethod
    def componentTypeFromName(*args, **kwargs): ...
    @classmethod
    def setCheckSamePointTwice(cls, *args, **kwargs): ...
    @classmethod
    def getCheckSamePointTwice(cls, *args, **kwargs): ...
    @classmethod
    def copyInPlace(cls, *args, **kwargs): ...
    @staticmethod
    def polyTriangulate(*args, **kwargs): ...
    @classmethod
    def createColorSetWithName(cls, *args, **kwargs): ...
    @classmethod
    def generateSmoothMesh(cls, *args, **kwargs): ...
    @classmethod
    def createColorSetDataMesh(cls, *args, **kwargs): ...
    @classmethod
    def createColorSetWithNameDataMesh(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def createInPlace(cls, *args, **kwargs): ...

class MMeshIsectAccelParams:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MFnMessageAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnNumericAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def createColor(cls, *args, **kwargs): ...
    @classmethod
    def createPoint(cls, *args, **kwargs): ...
    @classmethod
    def createAddr(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def unitType(cls, *args, **kwargs): ...
    @classmethod
    def child(cls, *args, **kwargs): ...
    @classmethod
    def hasMin(cls, *args, **kwargs): ...
    @classmethod
    def hasMax(cls, *args, **kwargs): ...
    @classmethod
    def hasSoftMin(cls, *args, **kwargs): ...
    @classmethod
    def hasSoftMax(cls, *args, **kwargs): ...
    @classmethod
    def getMin(cls, *args, **kwargs): ...
    @classmethod
    def getMax(cls, *args, **kwargs): ...
    @classmethod
    def getSoftMin(cls, *args, **kwargs): ...
    @classmethod
    def getSoftMax(cls, *args, **kwargs): ...
    @classmethod
    def setMin(cls, *args, **kwargs): ...
    @classmethod
    def setMax(cls, *args, **kwargs): ...
    @classmethod
    def setSoftMin(cls, *args, **kwargs): ...
    @classmethod
    def setSoftMax(cls, *args, **kwargs): ...
    @classmethod
    def getDefault(cls, *args, **kwargs): ...
    @classmethod
    def setDefault(cls, *args, **kwargs): ...

class MFnNumericData(MFnData):
    __init__: ClassVar[Callable] = ...
    kInvalid: ClassVar[int] = ...
    kBoolean: ClassVar[int] = ...
    kByte: ClassVar[int] = ...
    kChar: ClassVar[int] = ...
    kShort: ClassVar[int] = ...
    k2Short: ClassVar[int] = ...
    k3Short: ClassVar[int] = ...
    kLong: ClassVar[int] = ...
    kInt: ClassVar[int] = ...
    k2Long: ClassVar[int] = ...
    k2Int: ClassVar[int] = ...
    k3Long: ClassVar[int] = ...
    k3Int: ClassVar[int] = ...
    kInt64: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    k2Float: ClassVar[int] = ...
    k3Float: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    k2Double: ClassVar[int] = ...
    k3Double: ClassVar[int] = ...
    k4Double: ClassVar[int] = ...
    kAddr: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def numericType(cls, *args, **kwargs): ...
    @classmethod
    def getData2Short(cls, *args, **kwargs): ...
    @classmethod
    def getData2Int(cls, *args, **kwargs): ...
    @classmethod
    def getData2Float(cls, *args, **kwargs): ...
    @classmethod
    def getData2Double(cls, *args, **kwargs): ...
    @classmethod
    def getData3Short(cls, *args, **kwargs): ...
    @classmethod
    def getData3Int(cls, *args, **kwargs): ...
    @classmethod
    def getData3Float(cls, *args, **kwargs): ...
    @classmethod
    def getData3Double(cls, *args, **kwargs): ...
    @classmethod
    def getData4Double(cls, *args, **kwargs): ...
    @classmethod
    def setData2Short(cls, *args, **kwargs): ...
    @classmethod
    def setData2Int(cls, *args, **kwargs): ...
    @classmethod
    def setData2Float(cls, *args, **kwargs): ...
    @classmethod
    def setData2Double(cls, *args, **kwargs): ...
    @classmethod
    def setData3Short(cls, *args, **kwargs): ...
    @classmethod
    def setData3Int(cls, *args, **kwargs): ...
    @classmethod
    def setData3Float(cls, *args, **kwargs): ...
    @classmethod
    def setData3Double(cls, *args, **kwargs): ...
    @classmethod
    def setData4Double(cls, *args, **kwargs): ...

class MFnNurbsCurveData(MFnGeometryData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
kMFnNurbsEpsilon: float

class MFnNurbsCurve(MFnDagNode):
    __init__: ClassVar[Callable] = ...
    kInvalid: ClassVar[int] = ...
    kOpen: ClassVar[int] = ...
    kClosed: ClassVar[int] = ...
    kPeriodic: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def createWithEditPoints(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def reverse(cls, *args, **kwargs): ...
    @classmethod
    def makeMultipleEndKnots(cls, *args, **kwargs): ...
    @classmethod
    def cv(cls, *args, **kwargs): ...
    @classmethod
    def getCV(cls, *args, **kwargs): ...
    @classmethod
    def setCV(cls, *args, **kwargs): ...
    @classmethod
    def form(cls, *args, **kwargs): ...
    @classmethod
    def degree(cls, *args, **kwargs): ...
    @classmethod
    def numCVs(cls, *args, **kwargs): ...
    @classmethod
    def numSpans(cls, *args, **kwargs): ...
    @classmethod
    def numKnots(cls, *args, **kwargs): ...
    @classmethod
    def getKnotDomain(cls, *args, **kwargs): ...
    @classmethod
    def getKnots(cls, *args, **kwargs): ...
    @classmethod
    def setKnots(cls, *args, **kwargs): ...
    @classmethod
    def setKnot(cls, *args, **kwargs): ...
    @classmethod
    def cvs(cls, *args, **kwargs): ...
    @classmethod
    def getCVs(cls, *args, **kwargs): ...
    @classmethod
    def setCVs(cls, *args, **kwargs): ...
    @classmethod
    def knot(cls, *args, **kwargs): ...
    @classmethod
    def removeKnot(cls, *args, **kwargs): ...
    @classmethod
    def isPointOnCurve(cls, *args, **kwargs): ...
    @classmethod
    def getPointAtParam(cls, *args, **kwargs): ...
    @classmethod
    def getParamAtPoint(cls, *args, **kwargs): ...
    @classmethod
    def isParamOnCurve(cls, *args, **kwargs): ...
    @classmethod
    def normal(cls, *args, **kwargs): ...
    @classmethod
    def tangent(cls, *args, **kwargs): ...
    @classmethod
    def getDerivativesAtParm(cls, *args, **kwargs): ...
    @classmethod
    def isPlanar(cls, *args, **kwargs): ...
    @classmethod
    def closestPoint(cls, *args, **kwargs): ...
    @classmethod
    def distanceToPoint(cls, *args, **kwargs): ...
    @classmethod
    def area(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def findParamFromLength(cls, *args, **kwargs): ...
    @classmethod
    def findLengthFromParam(cls, *args, **kwargs): ...
    @classmethod
    def hasHistoryOnCreate(cls, *args, **kwargs): ...
    @classmethod
    def updateCurve(cls, *args, **kwargs): ...
    @classmethod
    def rebuild(cls, *args, **kwargs): ...

class MFnNurbsSurfaceData(MFnGeometryData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnNurbsSurface(MFnDagNode):
    __init__: ClassVar[Callable] = ...
    kInvalid: ClassVar[int] = ...
    kOpen: ClassVar[int] = ...
    kClosed: ClassVar[int] = ...
    kPeriodic: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kInvalidBoundary: ClassVar[int] = ...
    kOuter: ClassVar[int] = ...
    kInner: ClassVar[int] = ...
    kSegment: ClassVar[int] = ...
    kClosedSegment: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def getDataObject(cls, *args, **kwargs): ...
    @classmethod
    def cv(cls, *args, **kwargs): ...
    @classmethod
    def cvsInU(cls, *args, **kwargs): ...
    @classmethod
    def cvsInV(cls, *args, **kwargs): ...
    @classmethod
    def getCVs(cls, *args, **kwargs): ...
    @classmethod
    def setCVs(cls, *args, **kwargs): ...
    @classmethod
    def getCV(cls, *args, **kwargs): ...
    @classmethod
    def setCV(cls, *args, **kwargs): ...
    @classmethod
    def formInU(cls, *args, **kwargs): ...
    @classmethod
    def formInV(cls, *args, **kwargs): ...
    @classmethod
    def isBezier(cls, *args, **kwargs): ...
    @classmethod
    def isUniform(cls, *args, **kwargs): ...
    @classmethod
    def isKnotU(cls, *args, **kwargs): ...
    @classmethod
    def isKnotV(cls, *args, **kwargs): ...
    @classmethod
    def isParamOnSurface(cls, *args, **kwargs): ...
    @classmethod
    def getKnotDomain(cls, *args, **kwargs): ...
    @classmethod
    def degreeU(cls, *args, **kwargs): ...
    @classmethod
    def degreeV(cls, *args, **kwargs): ...
    @classmethod
    def numSpansInU(cls, *args, **kwargs): ...
    @classmethod
    def numSpansInV(cls, *args, **kwargs): ...
    @classmethod
    def numNonZeroSpansInU(cls, *args, **kwargs): ...
    @classmethod
    def numNonZeroSpansInV(cls, *args, **kwargs): ...
    @classmethod
    def numCVsInU(cls, *args, **kwargs): ...
    @classmethod
    def numCVsInV(cls, *args, **kwargs): ...
    @classmethod
    def numKnotsInU(cls, *args, **kwargs): ...
    @classmethod
    def numKnotsInV(cls, *args, **kwargs): ...
    @classmethod
    def getKnotsInU(cls, *args, **kwargs): ...
    @classmethod
    def getKnotsInV(cls, *args, **kwargs): ...
    @classmethod
    def setKnotsInU(cls, *args, **kwargs): ...
    @classmethod
    def setKnotsInV(cls, *args, **kwargs): ...
    @classmethod
    def knotInU(cls, *args, **kwargs): ...
    @classmethod
    def knotInV(cls, *args, **kwargs): ...
    @classmethod
    def setKnotInU(cls, *args, **kwargs): ...
    @classmethod
    def setKnotInV(cls, *args, **kwargs): ...
    @classmethod
    def removeKnotInU(cls, *args, **kwargs): ...
    @classmethod
    def removeKnotInV(cls, *args, **kwargs): ...
    @classmethod
    def removeOneKnotInU(cls, *args, **kwargs): ...
    @classmethod
    def removeOneKnotInV(cls, *args, **kwargs): ...
    @classmethod
    def normal(cls, *args, **kwargs): ...
    @classmethod
    def getTangents(cls, *args, **kwargs): ...
    @classmethod
    def getDerivativesAtParm(cls, *args, **kwargs): ...
    @classmethod
    def isFoldedOnBispan(cls, *args, **kwargs): ...
    @classmethod
    def area(cls, *args, **kwargs): ...
    @classmethod
    def closestPoint(cls, *args, **kwargs): ...
    @classmethod
    def isPointOnSurface(cls, *args, **kwargs): ...
    @classmethod
    def getPointAtParam(cls, *args, **kwargs): ...
    @classmethod
    def distanceToPoint(cls, *args, **kwargs): ...
    @classmethod
    def intersect(cls, *args, **kwargs): ...
    @classmethod
    def hasHistoryOnCreate(cls, *args, **kwargs): ...
    @classmethod
    def updateSurface(cls, *args, **kwargs): ...
    @classmethod
    def isTrimmedSurface(cls, *args, **kwargs): ...
    @classmethod
    def numRegions(cls, *args, **kwargs): ...
    @classmethod
    def isFlipNorm(cls, *args, **kwargs): ...
    @classmethod
    def numBoundaries(cls, *args, **kwargs): ...
    @classmethod
    def boundaryType(cls, *args, **kwargs): ...
    @classmethod
    def numEdges(cls, *args, **kwargs): ...
    @classmethod
    def edge(cls, *args, **kwargs): ...
    @classmethod
    def isPointInTrimmedRegion(cls, *args, **kwargs): ...
    @classmethod
    def getTrimBoundaries(cls, *args, **kwargs): ...
    @classmethod
    def trimWithBoundaries(cls, *args, **kwargs): ...
    @classmethod
    def projectCurve(cls, *args, **kwargs): ...
    @classmethod
    def trim(cls, *args, **kwargs): ...
    @classmethod
    def numPatches(cls, *args, **kwargs): ...
    @classmethod
    def numPatchesInU(cls, *args, **kwargs): ...
    @classmethod
    def numPatchesInV(cls, *args, **kwargs): ...
    @classmethod
    def numUVs(cls, *args, **kwargs): ...
    @classmethod
    def setUVs(cls, *args, **kwargs): ...
    @classmethod
    def getUVs(cls, *args, **kwargs): ...
    @classmethod
    def setUV(cls, *args, **kwargs): ...
    @classmethod
    def getUV(cls, *args, **kwargs): ...
    @classmethod
    def getPatchUV(cls, *args, **kwargs): ...
    @classmethod
    def getPatchUVs(cls, *args, **kwargs): ...
    @classmethod
    def getPatchUVid(cls, *args, **kwargs): ...
    @classmethod
    def assignUV(cls, *args, **kwargs): ...
    @classmethod
    def assignUVs(cls, *args, **kwargs): ...
    @classmethod
    def clearUVs(cls, *args, **kwargs): ...
    @classmethod
    def getAssignedUVs(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedShaders(cls, *args, **kwargs): ...
    @classmethod
    def getParamAtPoint(cls, *args, **kwargs): ...
    @classmethod
    def tesselate(cls, *args, **kwargs): ...

class MFnPartition(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    kNone: ClassVar[int] = ...
    kVerticesOnly: ClassVar[int] = ...
    kEdgesOnly: ClassVar[int] = ...
    kFacetsOnly: ClassVar[int] = ...
    kEditPointsOnly: ClassVar[int] = ...
    kRenderableOnly: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def isRenderPartition(cls, *args, **kwargs): ...
    @classmethod
    def addMember(cls, *args, **kwargs): ...
    @classmethod
    def removeMember(cls, *args, **kwargs): ...

class MFnPhongEShader(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def roughness(cls, *args, **kwargs): ...
    @classmethod
    def setRoughness(cls, *args, **kwargs): ...
    @classmethod
    def highlightSize(cls, *args, **kwargs): ...
    @classmethod
    def setHighlightSize(cls, *args, **kwargs): ...
    @classmethod
    def whiteness(cls, *args, **kwargs): ...
    @classmethod
    def setWhiteness(cls, *args, **kwargs): ...

class MFnPhongShader(MFnReflectShader):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def cosPower(cls, *args, **kwargs): ...
    @classmethod
    def setCosPower(cls, *args, **kwargs): ...

class MFnPluginData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def typeId(cls, *args, **kwargs): ...
    @classmethod
    def data(cls, *args, **kwargs): ...
    @classmethod
    def constData(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnPointArrayData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def copyTo(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnPointLight(MFnNonExtendedLight):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnSet(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    kNone: ClassVar[int] = ...
    kVerticesOnly: ClassVar[int] = ...
    kEdgesOnly: ClassVar[int] = ...
    kFacetsOnly: ClassVar[int] = ...
    kEditPointsOnly: ClassVar[int] = ...
    kRenderableOnly: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def getUnion(cls, *args, **kwargs): ...
    @classmethod
    def getIntersection(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def getMembers(cls, *args, **kwargs): ...
    @classmethod
    def addMember(cls, *args, **kwargs): ...
    @classmethod
    def addMembers(cls, *args, **kwargs): ...
    @classmethod
    def removeMember(cls, *args, **kwargs): ...
    @classmethod
    def removeMembers(cls, *args, **kwargs): ...
    @classmethod
    def isMember(cls, *args, **kwargs): ...
    @classmethod
    def intersectsWith(cls, *args, **kwargs): ...
    @classmethod
    def hasRestrictions(cls, *args, **kwargs): ...
    @classmethod
    def restriction(cls, *args, **kwargs): ...
    @classmethod
    def annotation(cls, *args, **kwargs): ...
    @classmethod
    def setAnnotation(cls, *args, **kwargs): ...
    @classmethod
    def getMemberPaths(cls, *args, **kwargs): ...

class MFnSingleIndexedComponent(MFnComponent):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addElement(cls, *args, **kwargs): ...
    @classmethod
    def addElements(cls, *args, **kwargs): ...
    @classmethod
    def elementMax(cls, *args, **kwargs): ...
    @classmethod
    def element(cls, *args, **kwargs): ...
    @classmethod
    def getElements(cls, *args, **kwargs): ...
    @classmethod
    def setCompleteData(cls, *args, **kwargs): ...
    @classmethod
    def getCompleteData(cls, *args, **kwargs): ...

class MFnSphereData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def radius(cls, *args, **kwargs): ...
    @classmethod
    def setRadius(cls, *args, **kwargs): ...

class MFnSpotLight(MFnNonExtendedLight):
    __init__: ClassVar[Callable] = ...
    kLeft: ClassVar[int] = ...
    kRight: ClassVar[int] = ...
    kTop: ClassVar[int] = ...
    kBottom: ClassVar[int] = ...
    kFirst: ClassVar[int] = ...
    kSecond: ClassVar[int] = ...
    kThird: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def coneAngle(cls, *args, **kwargs): ...
    @classmethod
    def setConeAngle(cls, *args, **kwargs): ...
    @classmethod
    def penumbraAngle(cls, *args, **kwargs): ...
    @classmethod
    def setPenumbraAngle(cls, *args, **kwargs): ...
    @classmethod
    def dropOff(cls, *args, **kwargs): ...
    @classmethod
    def setDropOff(cls, *args, **kwargs): ...
    @classmethod
    def barnDoors(cls, *args, **kwargs): ...
    @classmethod
    def setBarnDoors(cls, *args, **kwargs): ...
    @classmethod
    def barnDoorAngle(cls, *args, **kwargs): ...
    @classmethod
    def setBarnDoorAngle(cls, *args, **kwargs): ...
    @classmethod
    def useDecayRegions(cls, *args, **kwargs): ...
    @classmethod
    def setUseDecayRegions(cls, *args, **kwargs): ...
    @classmethod
    def startDistance(cls, *args, **kwargs): ...
    @classmethod
    def setStartDistance(cls, *args, **kwargs): ...
    @classmethod
    def endDistance(cls, *args, **kwargs): ...
    @classmethod
    def setEndDistance(cls, *args, **kwargs): ...

class MFnStandardSurfaceShader(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def base(cls, *args, **kwargs): ...
    @classmethod
    def setBase(cls, *args, **kwargs): ...
    @classmethod
    def baseColor(cls, *args, **kwargs): ...
    @classmethod
    def setBaseColor(cls, *args, **kwargs): ...
    @classmethod
    def diffuseRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setDiffuseRoughness(cls, *args, **kwargs): ...
    @classmethod
    def metalness(cls, *args, **kwargs): ...
    @classmethod
    def setMetalness(cls, *args, **kwargs): ...
    @classmethod
    def specular(cls, *args, **kwargs): ...
    @classmethod
    def setSpecular(cls, *args, **kwargs): ...
    @classmethod
    def specularColor(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularColor(cls, *args, **kwargs): ...
    @classmethod
    def specularRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularRoughness(cls, *args, **kwargs): ...
    @classmethod
    def specularIOR(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularIOR(cls, *args, **kwargs): ...
    @classmethod
    def specularAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def specularRotation(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularRotation(cls, *args, **kwargs): ...
    @classmethod
    def transmission(cls, *args, **kwargs): ...
    @classmethod
    def setTransmission(cls, *args, **kwargs): ...
    @classmethod
    def transmissionColor(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionColor(cls, *args, **kwargs): ...
    @classmethod
    def transmissionDepth(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionDepth(cls, *args, **kwargs): ...
    @classmethod
    def transmissionScatter(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionScatter(cls, *args, **kwargs): ...
    @classmethod
    def transmissionScatterAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionScatterAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def transmissionDispersion(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionDispersion(cls, *args, **kwargs): ...
    @classmethod
    def transmissionExtraRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionExtraRoughness(cls, *args, **kwargs): ...
    @classmethod
    def subsurface(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurface(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceColor(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceColor(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceRadius(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceRadius(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceScale(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceScale(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def coat(cls, *args, **kwargs): ...
    @classmethod
    def setCoat(cls, *args, **kwargs): ...
    @classmethod
    def coatColor(cls, *args, **kwargs): ...
    @classmethod
    def setCoatColor(cls, *args, **kwargs): ...
    @classmethod
    def coatRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setCoatRoughness(cls, *args, **kwargs): ...
    @classmethod
    def coatIOR(cls, *args, **kwargs): ...
    @classmethod
    def setCoatIOR(cls, *args, **kwargs): ...
    @classmethod
    def coatAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def setCoatAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def coatRotation(cls, *args, **kwargs): ...
    @classmethod
    def setCoatRotation(cls, *args, **kwargs): ...
    @classmethod
    def coatAffectColor(cls, *args, **kwargs): ...
    @classmethod
    def setCoatAffectColor(cls, *args, **kwargs): ...
    @classmethod
    def coatAffectRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setCoatAffectRoughness(cls, *args, **kwargs): ...
    @classmethod
    def sheen(cls, *args, **kwargs): ...
    @classmethod
    def setSheen(cls, *args, **kwargs): ...
    @classmethod
    def sheenColor(cls, *args, **kwargs): ...
    @classmethod
    def setSheenColor(cls, *args, **kwargs): ...
    @classmethod
    def sheenRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setSheenRoughness(cls, *args, **kwargs): ...
    @classmethod
    def emission(cls, *args, **kwargs): ...
    @classmethod
    def setEmission(cls, *args, **kwargs): ...
    @classmethod
    def emissionColor(cls, *args, **kwargs): ...
    @classmethod
    def setEmissionColor(cls, *args, **kwargs): ...
    @classmethod
    def thinFilmThickness(cls, *args, **kwargs): ...
    @classmethod
    def setThinFilmThickness(cls, *args, **kwargs): ...
    @classmethod
    def thinFilmIOR(cls, *args, **kwargs): ...
    @classmethod
    def setThinFilmIOR(cls, *args, **kwargs): ...
    @classmethod
    def thinWalled(cls, *args, **kwargs): ...
    @classmethod
    def setThinWalled(cls, *args, **kwargs): ...
    @classmethod
    def opacity(cls, *args, **kwargs): ...
    @classmethod
    def setOpacity(cls, *args, **kwargs): ...

class MFnOpenPBRSurfaceShader(MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def baseWeight(cls, *args, **kwargs): ...
    @classmethod
    def setBaseWeight(cls, *args, **kwargs): ...
    @classmethod
    def baseColor(cls, *args, **kwargs): ...
    @classmethod
    def setBaseColor(cls, *args, **kwargs): ...
    @classmethod
    def baseDiffuseRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setBaseDiffuseRoughness(cls, *args, **kwargs): ...
    @classmethod
    def baseMetalness(cls, *args, **kwargs): ...
    @classmethod
    def setBaseMetalness(cls, *args, **kwargs): ...
    @classmethod
    def specularWeight(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularWeight(cls, *args, **kwargs): ...
    @classmethod
    def specularColor(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularColor(cls, *args, **kwargs): ...
    @classmethod
    def specularRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularRoughness(cls, *args, **kwargs): ...
    @classmethod
    def specularIOR(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularIOR(cls, *args, **kwargs): ...
    @classmethod
    def specularRoughnessAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def setSpecularRoughnessAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def transmissionWeight(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionWeight(cls, *args, **kwargs): ...
    @classmethod
    def transmissionColor(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionColor(cls, *args, **kwargs): ...
    @classmethod
    def transmissionDepth(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionDepth(cls, *args, **kwargs): ...
    @classmethod
    def transmissionScatter(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionScatter(cls, *args, **kwargs): ...
    @classmethod
    def transmissionScatterAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionScatterAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def transmissionDispersionScale(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionDispersionScale(cls, *args, **kwargs): ...
    @classmethod
    def transmissionDispersionAbbeNumber(cls, *args, **kwargs): ...
    @classmethod
    def setTransmissionDispersionAbbeNumber(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceWeight(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceWeight(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceColor(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceColor(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceRadius(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceRadius(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceRadiusScale(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceRadiusScale(cls, *args, **kwargs): ...
    @classmethod
    def subsurfaceScatterAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def setSubsurfaceScatterAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def fuzzWeight(cls, *args, **kwargs): ...
    @classmethod
    def setFuzzWeight(cls, *args, **kwargs): ...
    @classmethod
    def fuzzColor(cls, *args, **kwargs): ...
    @classmethod
    def setFuzzColor(cls, *args, **kwargs): ...
    @classmethod
    def fuzzRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setFuzzRoughness(cls, *args, **kwargs): ...
    @classmethod
    def coatWeight(cls, *args, **kwargs): ...
    @classmethod
    def setCoatWeight(cls, *args, **kwargs): ...
    @classmethod
    def coatColor(cls, *args, **kwargs): ...
    @classmethod
    def setCoatColor(cls, *args, **kwargs): ...
    @classmethod
    def coatRoughness(cls, *args, **kwargs): ...
    @classmethod
    def setCoatRoughness(cls, *args, **kwargs): ...
    @classmethod
    def coatRoughnessAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def setCoatRoughnessAnisotropy(cls, *args, **kwargs): ...
    @classmethod
    def coatIOR(cls, *args, **kwargs): ...
    @classmethod
    def setCoatIOR(cls, *args, **kwargs): ...
    @classmethod
    def coatDarkening(cls, *args, **kwargs): ...
    @classmethod
    def setCoatDarkening(cls, *args, **kwargs): ...
    @classmethod
    def thinFilmWeight(cls, *args, **kwargs): ...
    @classmethod
    def setThinFilmWeight(cls, *args, **kwargs): ...
    @classmethod
    def thinFilmThickness(cls, *args, **kwargs): ...
    @classmethod
    def setThinFilmThickness(cls, *args, **kwargs): ...
    @classmethod
    def thinFilmIOR(cls, *args, **kwargs): ...
    @classmethod
    def setThinFilmIOR(cls, *args, **kwargs): ...
    @classmethod
    def emissionLuminance(cls, *args, **kwargs): ...
    @classmethod
    def setEmissionLuminance(cls, *args, **kwargs): ...
    @classmethod
    def emissionColor(cls, *args, **kwargs): ...
    @classmethod
    def setEmissionColor(cls, *args, **kwargs): ...
    @classmethod
    def geometryOpacity(cls, *args, **kwargs): ...
    @classmethod
    def setGeometryOpacity(cls, *args, **kwargs): ...
    @classmethod
    def geometryThinWalled(cls, *args, **kwargs): ...
    @classmethod
    def setGeometryThinWalled(cls, *args, **kwargs): ...

class MFnStringArrayData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def copyTo(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...

class MFnStringData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def string(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnSubdData(MFnGeometryData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
kMFnSubdTolerance: float
kMFnSubdPointTolerance: float

class MFnSubd(MFnDagNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def createBaseMesh(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def collapse(cls, *args, **kwargs): ...
    @classmethod
    def vertexBaseMeshAdd(cls, *args, **kwargs): ...
    @classmethod
    def polygonBaseMeshAdd(cls, *args, **kwargs): ...
    @classmethod
    def polygonBaseMeshAddWithUVs(cls, *args, **kwargs): ...
    @classmethod
    def editsPending(cls, *args, **kwargs): ...
    @classmethod
    def editsUpdateAll(cls, *args, **kwargs): ...
    @classmethod
    def levelMaxCurrent(cls, *args, **kwargs): ...
    @classmethod
    def levelMaxAllowed(cls, *args, **kwargs): ...
    @classmethod
    def levelFullySubdivideTo(cls, *args, **kwargs): ...
    @classmethod
    def vertexCount(cls, *args, **kwargs): ...
    @classmethod
    def vertexIdFromBaseVertexIndex(cls, *args, **kwargs): ...
    @classmethod
    def vertexBaseIndexFromVertexId(cls, *args, **kwargs): ...
    @classmethod
    def vertexEditsGetAllNonBase(cls, *args, **kwargs): ...
    @classmethod
    def vertexEditsSetAllNonBase(cls, *args, **kwargs): ...
    @classmethod
    def vertexEditsClearAllNonBase(cls, *args, **kwargs): ...
    @classmethod
    def vertexPositionGet(cls, *args, **kwargs): ...
    @classmethod
    def vertexEditGet(cls, *args, **kwargs): ...
    @classmethod
    def vertexPositionGetNoEdit(cls, *args, **kwargs): ...
    @classmethod
    def vertexPositionSet(cls, *args, **kwargs): ...
    @classmethod
    def vertexEditSet(cls, *args, **kwargs): ...
    @classmethod
    def vertexBaseMeshGet(cls, *args, **kwargs): ...
    @classmethod
    def vertexBaseMeshSet(cls, *args, **kwargs): ...
    @classmethod
    def vertexBaseMeshGetWithId(cls, *args, **kwargs): ...
    @classmethod
    def vertexBaseMeshSetWithId(cls, *args, **kwargs): ...
    @classmethod
    def vertexValence(cls, *args, **kwargs): ...
    @classmethod
    def vertexNormal(cls, *args, **kwargs): ...
    @classmethod
    def vertexAdjacentVertices(cls, *args, **kwargs): ...
    @classmethod
    def vertexIncidentEdges(cls, *args, **kwargs): ...
    @classmethod
    def vertexIncidentPolygons(cls, *args, **kwargs): ...
    @classmethod
    def vertexIsBoundary(cls, *args, **kwargs): ...
    @classmethod
    def vertexIsValid(cls, *args, **kwargs): ...
    @classmethod
    def vertexIsCreased(cls, *args, **kwargs): ...
    @classmethod
    def vertexCreaseRelevant(cls, *args, **kwargs): ...
    @classmethod
    def vertexSetCrease(cls, *args, **kwargs): ...
    @classmethod
    def vertexChildren(cls, *args, **kwargs): ...
    @classmethod
    def creasesGetAll(cls, *args, **kwargs): ...
    @classmethod
    def creasesSetAll(cls, *args, **kwargs): ...
    @classmethod
    def creasesClearAll(cls, *args, **kwargs): ...
    @classmethod
    def updateAllEditsAndCreases(cls, *args, **kwargs): ...
    @classmethod
    def edgeCount(cls, *args, **kwargs): ...
    @classmethod
    def edgeBetween(cls, *args, **kwargs): ...
    @classmethod
    def edgeVertices(cls, *args, **kwargs): ...
    @classmethod
    def edgeAdjacentPolygon(cls, *args, **kwargs): ...
    @classmethod
    def edgeIsBoundary(cls, *args, **kwargs): ...
    @classmethod
    def edgeIsValid(cls, *args, **kwargs): ...
    @classmethod
    def edgeIsCreased(cls, *args, **kwargs): ...
    @classmethod
    def edgeCreaseRelevant(cls, *args, **kwargs): ...
    @classmethod
    def edgeSetCrease(cls, *args, **kwargs): ...
    @classmethod
    def edgeChildren(cls, *args, **kwargs): ...
    @classmethod
    def polygonCount(cls, *args, **kwargs): ...
    @classmethod
    def polygonCountMaxWithGivenBaseMesh(cls, *args, **kwargs): ...
    @classmethod
    def polygonVertexCount(cls, *args, **kwargs): ...
    @classmethod
    def polygonVertices(cls, *args, **kwargs): ...
    @classmethod
    def polygonEdgeCount(cls, *args, **kwargs): ...
    @classmethod
    def polygonEdges(cls, *args, **kwargs): ...
    @classmethod
    def polygonIsValid(cls, *args, **kwargs): ...
    @classmethod
    def polygonHasChildren(cls, *args, **kwargs): ...
    @classmethod
    def polygonChildren(cls, *args, **kwargs): ...
    @classmethod
    def polygonSubdivide(cls, *args, **kwargs): ...
    @classmethod
    def polygonSetUseUVs(cls, *args, **kwargs): ...
    @classmethod
    def polygonHasVertexUVs(cls, *args, **kwargs): ...
    @classmethod
    def polygonGetVertexUVs(cls, *args, **kwargs): ...
    @classmethod
    def polygonSetVertexUVs(cls, *args, **kwargs): ...
    @classmethod
    def polygonGetCenterUV(cls, *args, **kwargs): ...
    @classmethod
    def evaluatePosition(cls, *args, **kwargs): ...
    @classmethod
    def evaluateNormal(cls, *args, **kwargs): ...
    @classmethod
    def evaluatePositionAndNormal(cls, *args, **kwargs): ...
    @classmethod
    def getCubicSpline(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedShaders(cls, *args, **kwargs): ...
    @classmethod
    def tesselate(cls, *args, **kwargs): ...
    @classmethod
    def tessellateViaNurbs(cls, *args, **kwargs): ...
    @classmethod
    def convertToNurbs(cls, *args, **kwargs): ...
    @classmethod
    def updateSubdSurface(cls, *args, **kwargs): ...
    @classmethod
    def vertexBaseMeshAddWithIndex(cls, *args, **kwargs): ...

class MFnSubdNames:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def base(*args, **kwargs): ...
    @staticmethod
    def first(*args, **kwargs): ...
    @staticmethod
    def level(*args, **kwargs): ...
    @staticmethod
    def path(*args, **kwargs): ...
    @staticmethod
    def corner(*args, **kwargs): ...
    @staticmethod
    def fromMUint64(*args, **kwargs): ...
    @staticmethod
    def toMUint64(*args, **kwargs): ...
    @staticmethod
    def baseFaceId(*args, **kwargs): ...
    @staticmethod
    def baseFaceIndex(*args, **kwargs): ...
    @staticmethod
    def baseFaceIndexFromId(*args, **kwargs): ...
    @staticmethod
    def levelOneFaceId(*args, **kwargs): ...
    @staticmethod
    def levelOneFaceAsLong(*args, **kwargs): ...
    @staticmethod
    def levelOneFaceIndexFromId(*args, **kwargs): ...
    @staticmethod
    def levelOneFaceIdFromLong(*args, **kwargs): ...
    @staticmethod
    def levelOneFaceIdFromIndex(*args, **kwargs): ...
    @staticmethod
    def baseFaceIdFromLong(*args, **kwargs): ...
    @staticmethod
    def baseFaceIdFromIndex(*args, **kwargs): ...
    @staticmethod
    def parentFaceId(*args, **kwargs): ...
    @staticmethod
    def nonBaseFaceVertices(*args, **kwargs): ...
    @staticmethod
    def nonBaseFaceEdges(*args, **kwargs): ...
    @staticmethod
    def fromSelectionIndices(*args, **kwargs): ...
    @staticmethod
    def toSelectionIndices(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MFnTripleIndexedComponent(MFnComponent):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addElement(cls, *args, **kwargs): ...
    @classmethod
    def addElements(cls, *args, **kwargs): ...
    @classmethod
    def getElement(cls, *args, **kwargs): ...
    @classmethod
    def getElements(cls, *args, **kwargs): ...
    @classmethod
    def setCompleteData(cls, *args, **kwargs): ...
    @classmethod
    def getCompleteData(cls, *args, **kwargs): ...

class MFnTypedAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def attrType(cls, *args, **kwargs): ...
    @classmethod
    def getDefault(cls, *args, **kwargs): ...
    @classmethod
    def setDefault(cls, *args, **kwargs): ...

class MFnUInt64ArrayData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def copyTo(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnUint64SingleIndexedComponent(MFnComponent):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addElement(cls, *args, **kwargs): ...
    @classmethod
    def addElements(cls, *args, **kwargs): ...
    @classmethod
    def element(cls, *args, **kwargs): ...
    @classmethod
    def getElements(cls, *args, **kwargs): ...
    @classmethod
    def setCompleteData(cls, *args, **kwargs): ...
    @classmethod
    def getCompleteData(cls, *args, **kwargs): ...

class MFnUnitAttribute(MFnAttribute):
    __init__: ClassVar[Callable] = ...
    kInvalid: ClassVar[int] = ...
    kAngle: ClassVar[int] = ...
    kDistance: ClassVar[int] = ...
    kTime: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def unitType(cls, *args, **kwargs): ...
    @classmethod
    def hasMin(cls, *args, **kwargs): ...
    @classmethod
    def hasMax(cls, *args, **kwargs): ...
    @classmethod
    def hasSoftMin(cls, *args, **kwargs): ...
    @classmethod
    def hasSoftMax(cls, *args, **kwargs): ...
    @classmethod
    def getMin(cls, *args, **kwargs): ...
    @classmethod
    def getMax(cls, *args, **kwargs): ...
    @classmethod
    def getSoftMin(cls, *args, **kwargs): ...
    @classmethod
    def getSoftMax(cls, *args, **kwargs): ...
    @classmethod
    def setMin(cls, *args, **kwargs): ...
    @classmethod
    def setMax(cls, *args, **kwargs): ...
    @classmethod
    def setSoftMin(cls, *args, **kwargs): ...
    @classmethod
    def setSoftMax(cls, *args, **kwargs): ...
    @classmethod
    def getDefault(cls, *args, **kwargs): ...
    @classmethod
    def setDefault(cls, *args, **kwargs): ...

class MFnVectorArrayData(MFnData):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def copyTo(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnVolumeLight(MFnPointLight):
    __init__: ClassVar[Callable] = ...
    kBoxVolume: ClassVar[int] = ...
    kSphereVolume: ClassVar[int] = ...
    kCylinderVolume: ClassVar[int] = ...
    kConeVolume: ClassVar[int] = ...
    kOutward: ClassVar[int] = ...
    kInward: ClassVar[int] = ...
    kDownAxis: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def lightShape(cls, *args, **kwargs): ...
    @classmethod
    def setLightShape(cls, *args, **kwargs): ...
    @classmethod
    def volumeLightDirection(cls, *args, **kwargs): ...
    @classmethod
    def setVolumeLightDirection(cls, *args, **kwargs): ...
    @classmethod
    def arc(cls, *args, **kwargs): ...
    @classmethod
    def setArc(cls, *args, **kwargs): ...
    @classmethod
    def coneEndRadius(cls, *args, **kwargs): ...
    @classmethod
    def setConeEndRadius(cls, *args, **kwargs): ...
    @classmethod
    def emitAmbient(cls, *args, **kwargs): ...
    @classmethod
    def setEmitAmbient(cls, *args, **kwargs): ...
    @classmethod
    def colorRamp(cls, *args, **kwargs): ...
    @classmethod
    def penumbraRamp(cls, *args, **kwargs): ...
    @classmethod
    def shadowAngle(cls, *args, **kwargs): ...
    @classmethod
    def setShadowAngle(cls, *args, **kwargs): ...

class MGlobal:
    kComplete: ClassVar[int] = ...
    kRestricted: ClassVar[int] = ...
    kInteractive: ClassVar[int] = ...
    kBatch: ClassVar[int] = ...
    kLibraryApp: ClassVar[int] = ...
    kBaseUIMode: ClassVar[int] = ...
    kReplaceList: ClassVar[int] = ...
    kXORWithList: ClassVar[int] = ...
    kAddToList: ClassVar[int] = ...
    kRemoveFromList: ClassVar[int] = ...
    kAddToHeadOfList: ClassVar[int] = ...
    kSurfaceSelectMethod: ClassVar[int] = ...
    kWireframeSelectMethod: ClassVar[int] = ...
    kSelectObjectMode: ClassVar[int] = ...
    kSelectComponentMode: ClassVar[int] = ...
    kSelectRootMode: ClassVar[int] = ...
    kSelectLeafMode: ClassVar[int] = ...
    kSelectTemplateMode: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def mayaName(*args, **kwargs): ...
    @staticmethod
    def mayaVersion(*args, **kwargs): ...
    @staticmethod
    def apiVersion(*args, **kwargs): ...
    @staticmethod
    def isCustomVersion(*args, **kwargs): ...
    @staticmethod
    def mayaFeatureSet(*args, **kwargs): ...
    @staticmethod
    def customVersionString(*args, **kwargs): ...
    @staticmethod
    def customVersionMajor(*args, **kwargs): ...
    @staticmethod
    def customVersionMinor(*args, **kwargs): ...
    @staticmethod
    def customVersionClient(*args, **kwargs): ...
    @staticmethod
    def customVersion(*args, **kwargs): ...
    @staticmethod
    def getAbsolutePathToResources(*args, **kwargs): ...
    @staticmethod
    def isDefaultLanguage(*args, **kwargs): ...
    @staticmethod
    def getUILanguage(*args, **kwargs): ...
    @staticmethod
    def mayaState(*args, **kwargs): ...
    @staticmethod
    def isInCrashHandler(*args, **kwargs): ...
    @staticmethod
    def getFunctionSetList(*args, **kwargs): ...
    @staticmethod
    def getAssociatedSets(*args, **kwargs): ...
    @staticmethod
    def getSelectionListByName(*args, **kwargs): ...
    @staticmethod
    def getActiveSelectionList(*args, **kwargs): ...
    @staticmethod
    def getRichSelection(*args, **kwargs): ...
    @staticmethod
    def getLiveList(*args, **kwargs): ...
    @staticmethod
    def getHiliteList(*args, **kwargs): ...
    @staticmethod
    def setHiliteList(*args, **kwargs): ...
    @staticmethod
    def setActiveSelectionList(*args, **kwargs): ...
    @staticmethod
    def setRichSelection(*args, **kwargs): ...
    @staticmethod
    def setDisplayCVs(*args, **kwargs): ...
    @staticmethod
    def selectCommand(*args, **kwargs): ...
    @staticmethod
    def selectByName(*args, **kwargs): ...
    @staticmethod
    def unselectByName(*args, **kwargs): ...
    @staticmethod
    def select(*args, **kwargs): ...
    @staticmethod
    def unselect(*args, **kwargs): ...
    @staticmethod
    def selectFromScreen(*args, **kwargs): ...
    @staticmethod
    def selectionMethod(*args, **kwargs): ...
    @staticmethod
    def selectionMode(*args, **kwargs): ...
    @staticmethod
    def setSelectionMode(*args, **kwargs): ...
    @staticmethod
    def objectSelectionMask(*args, **kwargs): ...
    @staticmethod
    def setObjectSelectionMask(*args, **kwargs): ...
    @staticmethod
    def componentSelectionMask(*args, **kwargs): ...
    @staticmethod
    def setComponentSelectionMask(*args, **kwargs): ...
    @staticmethod
    def animSelectionMask(*args, **kwargs): ...
    @staticmethod
    def setAnimSelectionMask(*args, **kwargs): ...
    @staticmethod
    def miscSelectionMask(*args, **kwargs): ...
    @staticmethod
    def setMiscSelectionMask(*args, **kwargs): ...
    @staticmethod
    def clearSelectionList(*args, **kwargs): ...
    @staticmethod
    def isSelected(*args, **kwargs): ...
    @staticmethod
    def trackSelectionOrderEnabled(*args, **kwargs): ...
    @staticmethod
    def setTrackSelectionOrderEnabled(*args, **kwargs): ...
    @staticmethod
    def getPreselectionHiliteList(*args, **kwargs): ...
    @staticmethod
    def setPreselectionHiliteList(*args, **kwargs): ...
    @staticmethod
    def currentToolContext(*args, **kwargs): ...
    @staticmethod
    def viewFrame(*args, **kwargs): ...
    @staticmethod
    def sourceFile(*args, **kwargs): ...
    @staticmethod
    def executeCommandOnIdle(*args, **kwargs): ...
    @staticmethod
    def executeCommand(*args, **kwargs): ...
    @staticmethod
    def executeCommandStringResult(*args, **kwargs): ...
    @staticmethod
    def executePythonCommandStringResult(*args, **kwargs): ...
    @staticmethod
    def executePythonCommand(*args, **kwargs): ...
    @staticmethod
    def executePythonCommandOnIdle(*args, **kwargs): ...
    @staticmethod
    def addToModel(*args, **kwargs): ...
    @staticmethod
    def addToModelAt(*args, **kwargs): ...
    @staticmethod
    def removeFromModel(*args, **kwargs): ...
    @staticmethod
    def deleteNode(*args, **kwargs): ...
    @staticmethod
    def setYAxisUp(*args, **kwargs): ...
    @staticmethod
    def setZAxisUp(*args, **kwargs): ...
    @staticmethod
    def isYAxisUp(*args, **kwargs): ...
    @staticmethod
    def isZAxisUp(*args, **kwargs): ...
    @staticmethod
    def upAxis(*args, **kwargs): ...
    @staticmethod
    def displayInfo(*args, **kwargs): ...
    @staticmethod
    def displayWarning(*args, **kwargs): ...
    @staticmethod
    def displayError(*args, **kwargs): ...
    @staticmethod
    def setDisableStow(*args, **kwargs): ...
    @staticmethod
    def disableStow(*args, **kwargs): ...
    @staticmethod
    def optionVarIntValue(*args, **kwargs): ...
    @staticmethod
    def optionVarDoubleValue(*args, **kwargs): ...
    @staticmethod
    def optionVarStringValue(*args, **kwargs): ...
    @staticmethod
    def setOptionVarValue(*args, **kwargs): ...
    @staticmethod
    def initOptionVar(*args, **kwargs): ...
    @staticmethod
    def removeOptionVar(*args, **kwargs): ...
    @staticmethod
    def optionVarExists(*args, **kwargs): ...
    @staticmethod
    def defaultErrorLogPathName(*args, **kwargs): ...
    @staticmethod
    def resetToDefaultErrorLogPathName(*args, **kwargs): ...
    @staticmethod
    def setErrorLogPathName(*args, **kwargs): ...
    @staticmethod
    def errorLogPathName(*args, **kwargs): ...
    @staticmethod
    def startErrorLogging(*args, **kwargs): ...
    @staticmethod
    def errorLoggingIsOn(*args, **kwargs): ...
    @staticmethod
    def stopErrorLogging(*args, **kwargs): ...
    @staticmethod
    def closeErrorLog(*args, **kwargs): ...
    @staticmethod
    def doErrorLogEntry(*args, **kwargs): ...
    @staticmethod
    def isUndoing(*args, **kwargs): ...
    @staticmethod
    def isRedoing(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MIffFile:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def open(cls, *args, **kwargs): ...
    @classmethod
    def close(cls, *args, **kwargs): ...
    @classmethod
    def isActive(cls, *args, **kwargs): ...
    @classmethod
    def beginReadGroup(cls, *args, **kwargs): ...
    @classmethod
    def endReadGroup(cls, *args, **kwargs): ...
    @classmethod
    def getChunk(cls, *args, **kwargs): ...
    @classmethod
    def beginGet(cls, *args, **kwargs): ...
    @classmethod
    def endGet(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def iffGetShort(cls, *args, **kwargs): ...
    @classmethod
    def iffGetInt(cls, *args, **kwargs): ...
    @classmethod
    def iffGetFloat(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MIffTag:
    __init__: ClassVar[Callable] = ...
    kFORM: ClassVar[MIffTag] = ...
    kCAT: ClassVar[MIffTag] = ...
    kLIST: ClassVar[MIffTag] = ...
    kPROP: ClassVar[MIffTag] = ...
    kFOR4: ClassVar[MIffTag] = ...
    kFOR8: ClassVar[MIffTag] = ...
    kCAT4: ClassVar[MIffTag] = ...
    kCAT8: ClassVar[MIffTag] = ...
    kLIS4: ClassVar[MIffTag] = ...
    kLIS8: ClassVar[MIffTag] = ...
    kPRO4: ClassVar[MIffTag] = ...
    kPRO8: ClassVar[MIffTag] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...

class MImageFileInfo:
    kHwTextureUnknown: ClassVar[int] = ...
    kHwTexture1D: ClassVar[int] = ...
    kHwTexture2D: ClassVar[int] = ...
    kHwTexture3D: ClassVar[int] = ...
    kHwTextureRectangle: ClassVar[int] = ...
    kHwTextureCubeMap: ClassVar[int] = ...
    kImageTypeUnknown: ClassVar[int] = ...
    kImageTypeColor: ClassVar[int] = ...
    kImageTypeNormal: ClassVar[int] = ...
    kImageTypeBump: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def width(cls, *args, **kwargs): ...
    @classmethod
    def height(cls, *args, **kwargs): ...
    @classmethod
    def channels(cls, *args, **kwargs): ...
    @classmethod
    def numberOfImages(cls, *args, **kwargs): ...
    @classmethod
    def pixelType(cls, *args, **kwargs): ...
    @classmethod
    def imageType(cls, *args, **kwargs): ...
    @classmethod
    def hardwareType(cls, *args, **kwargs): ...
    @classmethod
    def hasAlpha(cls, *args, **kwargs): ...
    @classmethod
    def hasMipMaps(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MImage:
    kNoFormat: ClassVar[int] = ...
    kHeightFieldBumpFormat: ClassVar[int] = ...
    kNormalMapBumpFormat: ClassVar[int] = ...
    kUnknownFormat: ClassVar[int] = ...
    kUnknown: ClassVar[int] = ...
    kByte: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def readFromFile(cls, *args, **kwargs): ...
    @classmethod
    def readFromTextureNode(cls, *args, **kwargs): ...
    @classmethod
    def getSize(cls, *args, **kwargs): ...
    @classmethod
    def pixelType(cls, *args, **kwargs): ...
    @classmethod
    def pixels(cls, *args, **kwargs): ...
    @classmethod
    def floatPixels(cls, *args, **kwargs): ...
    @classmethod
    def setPixels(cls, *args, **kwargs): ...
    @classmethod
    def setFloatPixels(cls, *args, **kwargs): ...
    @classmethod
    def depth(cls, *args, **kwargs): ...
    @classmethod
    def getDepthMapSize(cls, *args, **kwargs): ...
    @classmethod
    def getDepthMapRange(cls, *args, **kwargs): ...
    @classmethod
    def setDepthMap(cls, *args, **kwargs): ...
    @classmethod
    def depthMap(cls, *args, **kwargs): ...
    @classmethod
    def readDepthMap(cls, *args, **kwargs): ...
    @classmethod
    def resize(cls, *args, **kwargs): ...
    @staticmethod
    def filterExists(*args, **kwargs): ...
    @classmethod
    def filter(cls, *args, **kwargs): ...
    @classmethod
    def writeToFile(cls, *args, **kwargs): ...
    @classmethod
    def writeToFileWithDepth(cls, *args, **kwargs): ...
    @classmethod
    def release(cls, *args, **kwargs): ...
    @classmethod
    def verticalFlip(cls, *args, **kwargs): ...
    @classmethod
    def setRGBA(cls, *args, **kwargs): ...
    @classmethod
    def isRGBA(cls, *args, **kwargs): ...
    @classmethod
    def haveDepth(cls, *args, **kwargs): ...
    @classmethod
    def convertPixelFormat(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MIntArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __setitem__(cls, index, object) -> None: ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __delitem__(cls, other) -> None: ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __radd__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...

class MInt64Array:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __setitem__(cls, index, object) -> None: ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __delitem__(cls, other) -> None: ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __radd__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...

class MItCurveCV:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def position(cls, *args, **kwargs): ...
    @classmethod
    def setPosition(cls, *args, **kwargs): ...
    @classmethod
    def translateBy(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @classmethod
    def cv(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def hasHistoryOnCreate(cls, *args, **kwargs): ...
    @classmethod
    def updateCurve(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItDag:
    kInvalidType: ClassVar[int] = ...
    kDepthFirst: ClassVar[int] = ...
    kBreadthFirst: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def item(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def prune(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def root(cls, *args, **kwargs): ...
    @classmethod
    def depth(cls, *args, **kwargs): ...
    @classmethod
    def getType(cls, *args, **kwargs): ...
    @classmethod
    def getPath(cls, *args, **kwargs): ...
    @classmethod
    def getAllPaths(cls, *args, **kwargs): ...
    @classmethod
    def fullPathName(cls, *args, **kwargs): ...
    @classmethod
    def partialPathName(cls, *args, **kwargs): ...
    @classmethod
    def isInstanced(cls, *args, **kwargs): ...
    @classmethod
    def instanceCount(cls, *args, **kwargs): ...
    @classmethod
    def traverseUnderWorld(cls, *args, **kwargs): ...
    @classmethod
    def willTraverseUnderWorld(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItDependencyGraph:
    kDownstream: ClassVar[int] = ...
    kUpstream: ClassVar[int] = ...
    kDepthFirst: ClassVar[int] = ...
    kBreadthFirst: ClassVar[int] = ...
    kNodeLevel: ClassVar[int] = ...
    kPlugLevel: ClassVar[int] = ...
    kDependsOn: ClassVar[int] = ...
    kConnectedTo: ClassVar[int] = ...
    kEvaluationGraph: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def resetTo(cls, *args, **kwargs): ...
    @classmethod
    def rootNode(cls, *args, **kwargs): ...
    @classmethod
    def rootPlug(cls, *args, **kwargs): ...
    @classmethod
    def currentFilter(cls, *args, **kwargs): ...
    @classmethod
    def setCurrentFilter(cls, *args, **kwargs): ...
    @classmethod
    def resetFilter(cls, *args, **kwargs): ...
    @classmethod
    def isPruningOnFilter(cls, *args, **kwargs): ...
    @classmethod
    def enablePruningOnFilter(cls, *args, **kwargs): ...
    @classmethod
    def disablePruningOnFilter(cls, *args, **kwargs): ...
    @classmethod
    def isDirectionDownStream(cls, *args, **kwargs): ...
    @classmethod
    def currentDirection(cls, *args, **kwargs): ...
    @classmethod
    def toggleDirection(cls, *args, **kwargs): ...
    @classmethod
    def isTraversalDepthFirst(cls, *args, **kwargs): ...
    @classmethod
    def currentTraversal(cls, *args, **kwargs): ...
    @classmethod
    def toggleTraversal(cls, *args, **kwargs): ...
    @classmethod
    def atNodeLevel(cls, *args, **kwargs): ...
    @classmethod
    def currentLevel(cls, *args, **kwargs): ...
    @classmethod
    def currentRelationship(cls, *args, **kwargs): ...
    @classmethod
    def setCurrentRelationship(cls, *args, **kwargs): ...
    @classmethod
    def setTraversalOverWorldSpaceDependents(cls, *args, **kwargs): ...
    @classmethod
    def isTraversingOverWorldSpaceDependents(cls, *args, **kwargs): ...
    @classmethod
    def toggleLevel(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def prune(cls, *args, **kwargs): ...
    @classmethod
    def thisNode(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def thisNodeHasUnknownType(cls, *args, **kwargs): ...
    @classmethod
    def thisPlug(cls, *args, **kwargs): ...
    @classmethod
    def previousPlug(cls, *args, **kwargs): ...
    @classmethod
    def getNodesVisited(cls, *args, **kwargs): ...
    @classmethod
    def getPlugsVisited(cls, *args, **kwargs): ...
    @classmethod
    def getNodePath(cls, *args, **kwargs): ...
    @classmethod
    def getPlugPath(cls, *args, **kwargs): ...
    @classmethod
    def nodeDepth(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItDependencyNodes:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def thisNode(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def item(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItEdits:
    SUCCESSFUL_EDITS: ClassVar[int] = ...
    ALL_EDITS: ClassVar[int] = ...
    kForward: ClassVar[int] = ...
    kReverse: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def isReverse(cls, *args, **kwargs): ...
    @classmethod
    def currentEditString(cls, *args, **kwargs): ...
    @classmethod
    def currentEditType(cls, *args, **kwargs): ...
    @classmethod
    def removeCurrentEdit(cls, *args, **kwargs): ...
    @classmethod
    def edit(cls, *args, **kwargs): ...
    @classmethod
    def addRemoveAttrEdit(cls, *args, **kwargs): ...
    @classmethod
    def setAttrEdit(cls, *args, **kwargs): ...
    @classmethod
    def parentingEdit(cls, *args, **kwargs): ...
    @classmethod
    def fcurveEdit(cls, *args, **kwargs): ...
    @classmethod
    def connectDisconnectEdit(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MIteratorType:
    kMObject: ClassVar[int] = ...
    kMDagPathObject: ClassVar[int] = ...
    kMPlugObject: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def setFilterType(cls, *args, **kwargs): ...
    @classmethod
    def setFilterList(cls, *args, **kwargs): ...
    @classmethod
    def setObjectType(cls, *args, **kwargs): ...
    @classmethod
    def getFilterType(cls, *args, **kwargs): ...
    @classmethod
    def getFilterList(cls, *args, **kwargs): ...
    @classmethod
    def getObjectType(cls, *args, **kwargs): ...
    @classmethod
    def filterListEnabled(cls, *args, **kwargs): ...

class MItGeometry:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def position(cls, *args, **kwargs): ...
    @classmethod
    def normal(cls, *args, **kwargs): ...
    @classmethod
    def setPosition(cls, *args, **kwargs): ...
    @classmethod
    def weight(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @classmethod
    def positionIndex(cls, *args, **kwargs): ...
    @classmethod
    def component(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def count(cls, *args, **kwargs): ...
    @classmethod
    def exactCount(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def allPositions(cls, *args, **kwargs): ...
    @classmethod
    def setAllPositions(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItInstancer:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def nextParticle(cls, *args, **kwargs): ...
    @classmethod
    def nextInstancer(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def instancer(cls, *args, **kwargs): ...
    @classmethod
    def instancerPath(cls, *args, **kwargs): ...
    @classmethod
    def path(cls, *args, **kwargs): ...
    @classmethod
    def matrix(cls, *args, **kwargs): ...
    @classmethod
    def instancerId(cls, *args, **kwargs): ...
    @classmethod
    def particleId(cls, *args, **kwargs): ...
    @classmethod
    def pathId(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItMeshEdge:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def count(cls, *args, **kwargs): ...
    @classmethod
    def center(cls, *args, **kwargs): ...
    @classmethod
    def point(cls, *args, **kwargs): ...
    @classmethod
    def setPoint(cls, *args, **kwargs): ...
    @classmethod
    def isSmooth(cls, *args, **kwargs): ...
    @classmethod
    def setSmoothing(cls, *args, **kwargs): ...
    @classmethod
    def cleanupSmoothing(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @classmethod
    def edge(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def updateSurface(cls, *args, **kwargs): ...
    @classmethod
    def geomChanged(cls, *args, **kwargs): ...
    @classmethod
    def setIndex(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedFaces(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedEdges(cls, *args, **kwargs): ...
    @classmethod
    def numConnectedFaces(cls, *args, **kwargs): ...
    @classmethod
    def numConnectedEdges(cls, *args, **kwargs): ...
    @classmethod
    def connectedToFace(cls, *args, **kwargs): ...
    @classmethod
    def connectedToEdge(cls, *args, **kwargs): ...
    @classmethod
    def onBoundary(cls, *args, **kwargs): ...
    @classmethod
    def getLength(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItMeshFaceVertex:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def vertId(cls, *args, **kwargs): ...
    @classmethod
    def faceId(cls, *args, **kwargs): ...
    @classmethod
    def faceVertId(cls, *args, **kwargs): ...
    @classmethod
    def faceVertex(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def position(cls, *args, **kwargs): ...
    @classmethod
    def getNormal(cls, *args, **kwargs): ...
    @classmethod
    def normalId(cls, *args, **kwargs): ...
    @classmethod
    def tangentId(cls, *args, **kwargs): ...
    @classmethod
    def getTangent(cls, *args, **kwargs): ...
    @classmethod
    def getBinormal(cls, *args, **kwargs): ...
    @classmethod
    def hasUVs(cls, *args, **kwargs): ...
    @classmethod
    def getUV(cls, *args, **kwargs): ...
    @classmethod
    def getUVIndex(cls, *args, **kwargs): ...
    @classmethod
    def hasColor(cls, *args, **kwargs): ...
    @classmethod
    def getColor(cls, *args, **kwargs): ...
    @classmethod
    def getColorIndex(cls, *args, **kwargs): ...
    @classmethod
    def updateSurface(cls, *args, **kwargs): ...
    @classmethod
    def geomChanged(cls, *args, **kwargs): ...
    @classmethod
    def setIndex(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItMeshPolygon:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def count(cls, *args, **kwargs): ...
    @classmethod
    def polygonVertexCount(cls, *args, **kwargs): ...
    @classmethod
    def center(cls, *args, **kwargs): ...
    @classmethod
    def polygon(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @classmethod
    def setIndex(cls, *args, **kwargs): ...
    @classmethod
    def vertexIndex(cls, *args, **kwargs): ...
    @classmethod
    def getVertices(cls, *args, **kwargs): ...
    @classmethod
    def point(cls, *args, **kwargs): ...
    @classmethod
    def getPoints(cls, *args, **kwargs): ...
    @classmethod
    def setPoint(cls, *args, **kwargs): ...
    @classmethod
    def setPoints(cls, *args, **kwargs): ...
    @classmethod
    def normalIndex(cls, *args, **kwargs): ...
    @classmethod
    def getNormal(cls, *args, **kwargs): ...
    @classmethod
    def getNormals(cls, *args, **kwargs): ...
    @classmethod
    def tangentIndex(cls, *args, **kwargs): ...
    @classmethod
    def hasUVs(cls, *args, **kwargs): ...
    @classmethod
    def setUV(cls, *args, **kwargs): ...
    @classmethod
    def getUV(cls, *args, **kwargs): ...
    @classmethod
    def setUVs(cls, *args, **kwargs): ...
    @classmethod
    def getUVs(cls, *args, **kwargs): ...
    @classmethod
    def getPointAtUV(cls, *args, **kwargs): ...
    @classmethod
    def getAxisAtUV(cls, *args, **kwargs): ...
    @classmethod
    def getUVAtPoint(cls, *args, **kwargs): ...
    @classmethod
    def getUVIndex(cls, *args, **kwargs): ...
    @classmethod
    def getUVSetNames(cls, *args, **kwargs): ...
    @classmethod
    def hasColor(cls, *args, **kwargs): ...
    @classmethod
    def getColor(cls, *args, **kwargs): ...
    @classmethod
    def getColors(cls, *args, **kwargs): ...
    @classmethod
    def numColors(cls, *args, **kwargs): ...
    @classmethod
    def getColorIndex(cls, *args, **kwargs): ...
    @classmethod
    def getColorIndices(cls, *args, **kwargs): ...
    @classmethod
    def hasValidTriangulation(cls, *args, **kwargs): ...
    @classmethod
    def numTriangles(cls, *args, **kwargs): ...
    @classmethod
    def getTriangle(cls, *args, **kwargs): ...
    @classmethod
    def getTriangles(cls, *args, **kwargs): ...
    @classmethod
    def updateSurface(cls, *args, **kwargs): ...
    @classmethod
    def geomChanged(cls, *args, **kwargs): ...
    @classmethod
    def getEdges(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedFaces(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedEdges(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedVertices(cls, *args, **kwargs): ...
    @classmethod
    def isConnectedToFace(cls, *args, **kwargs): ...
    @classmethod
    def isConnectedToEdge(cls, *args, **kwargs): ...
    @classmethod
    def isConnectedToVertex(cls, *args, **kwargs): ...
    @classmethod
    def numConnectedFaces(cls, *args, **kwargs): ...
    @classmethod
    def numConnectedEdges(cls, *args, **kwargs): ...
    @classmethod
    def onBoundary(cls, *args, **kwargs): ...
    @classmethod
    def getArea(cls, *args, **kwargs): ...
    @classmethod
    def zeroArea(cls, *args, **kwargs): ...
    @classmethod
    def getUVArea(cls, *args, **kwargs): ...
    @classmethod
    def zeroUVArea(cls, *args, **kwargs): ...
    @classmethod
    def isConvex(cls, *args, **kwargs): ...
    @classmethod
    def isStarlike(cls, *args, **kwargs): ...
    @classmethod
    def isLamina(cls, *args, **kwargs): ...
    @classmethod
    def isHoled(cls, *args, **kwargs): ...
    @classmethod
    def isPlanar(cls, *args, **kwargs): ...
    @classmethod
    def isUVReversed(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItMeshVertex:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def count(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @classmethod
    def vertex(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def position(cls, *args, **kwargs): ...
    @classmethod
    def setPosition(cls, *args, **kwargs): ...
    @classmethod
    def translateBy(cls, *args, **kwargs): ...
    @classmethod
    def getNormal(cls, *args, **kwargs): ...
    @classmethod
    def getNormals(cls, *args, **kwargs): ...
    @classmethod
    def getNormalIndices(cls, *args, **kwargs): ...
    @classmethod
    def numUVs(cls, *args, **kwargs): ...
    @classmethod
    def setUV(cls, *args, **kwargs): ...
    @classmethod
    def getUV(cls, *args, **kwargs): ...
    @classmethod
    def setUVs(cls, *args, **kwargs): ...
    @classmethod
    def getUVs(cls, *args, **kwargs): ...
    @classmethod
    def getUVIndices(cls, *args, **kwargs): ...
    @classmethod
    def updateSurface(cls, *args, **kwargs): ...
    @classmethod
    def geomChanged(cls, *args, **kwargs): ...
    @classmethod
    def setIndex(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedFaces(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedEdges(cls, *args, **kwargs): ...
    @classmethod
    def getConnectedVertices(cls, *args, **kwargs): ...
    @classmethod
    def numConnectedFaces(cls, *args, **kwargs): ...
    @classmethod
    def numConnectedEdges(cls, *args, **kwargs): ...
    @classmethod
    def connectedToFace(cls, *args, **kwargs): ...
    @classmethod
    def connectedToEdge(cls, *args, **kwargs): ...
    @classmethod
    def getOppositeVertex(cls, *args, **kwargs): ...
    @classmethod
    def onBoundary(cls, *args, **kwargs): ...
    @classmethod
    def hasColor(cls, *args, **kwargs): ...
    @classmethod
    def getColor(cls, *args, **kwargs): ...
    @classmethod
    def getColors(cls, *args, **kwargs): ...
    @classmethod
    def getColorIndices(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItSelectionList:
    kUnknownItem: ClassVar[int] = ...
    kDagSelectionItem: ClassVar[int] = ...
    kAnimSelectionItem: ClassVar[int] = ...
    kDNselectionItem: ClassVar[int] = ...
    kPlugSelectionItem: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def getDependNode(cls, *args, **kwargs): ...
    @classmethod
    def getDagPath(cls, *args, **kwargs): ...
    @classmethod
    def getPlug(cls, *args, **kwargs): ...
    @classmethod
    def getStrings(cls, *args, **kwargs): ...
    @classmethod
    def itemType(cls, *args, **kwargs): ...
    @classmethod
    def setFilter(cls, *args, **kwargs): ...
    @classmethod
    def hasComponents(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItSubdEdge:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def isValid(cls, *args, **kwargs): ...
    @classmethod
    def level(cls, *args, **kwargs): ...
    @classmethod
    def setLevel(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @classmethod
    def isSharp(cls, *args, **kwargs): ...
    @classmethod
    def setSharpness(cls, *args, **kwargs): ...
    @classmethod
    def isBoundary(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItSubdFace:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def isValid(cls, *args, **kwargs): ...
    @classmethod
    def level(cls, *args, **kwargs): ...
    @classmethod
    def setLevel(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItSubdVertex:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def level(cls, *args, **kwargs): ...
    @classmethod
    def setLevel(cls, *args, **kwargs): ...
    @classmethod
    def isValid(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MItSurfaceCV:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def isRowDone(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def nextRow(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def position(cls, *args, **kwargs): ...
    @classmethod
    def setPosition(cls, *args, **kwargs): ...
    @classmethod
    def translateBy(cls, *args, **kwargs): ...
    @classmethod
    def index(cls, *args, **kwargs): ...
    @classmethod
    def getIndex(cls, *args, **kwargs): ...
    @classmethod
    def cv(cls, *args, **kwargs): ...
    @classmethod
    def currentItem(cls, *args, **kwargs): ...
    @classmethod
    def hasHistoryOnCreate(cls, *args, **kwargs): ...
    @classmethod
    def updateSurface(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...

class MLockMessage(MMessage):
    kInvalidPlug: ClassVar[int] = ...
    kPlugLockAttr: ClassVar[int] = ...
    kPlugUnlockAttr: ClassVar[int] = ...
    kPlugAttrValChange: ClassVar[int] = ...
    kPlugRemoveAttr: ClassVar[int] = ...
    kPlugRenameAttr: ClassVar[int] = ...
    kPlugConnect: ClassVar[int] = ...
    kPlugDisconnect: ClassVar[int] = ...
    kLastPlug: ClassVar[int] = ...
    kInvalidDAG: ClassVar[int] = ...
    kGroup: ClassVar[int] = ...
    kUnGroup: ClassVar[int] = ...
    kReparent: ClassVar[int] = ...
    kChildReorder: ClassVar[int] = ...
    kCreateNodeInstance: ClassVar[int] = ...
    kCreateChildInstance: ClassVar[int] = ...
    kCreateParentInstance: ClassVar[int] = ...
    kLastDAG: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kRename: ClassVar[int] = ...
    kDelete: ClassVar[int] = ...
    kLockNode: ClassVar[int] = ...
    kUnlockNode: ClassVar[int] = ...
    kAddAttr: ClassVar[int] = ...
    kRemoveAttr: ClassVar[int] = ...
    kRenameAttr: ClassVar[int] = ...
    kUnlockAttr: ClassVar[int] = ...
    kLockAttr: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def setNodeLockQueryCallback(*args, **kwargs): ...
    @staticmethod
    def setNodeLockDAGQueryCallback(*args, **kwargs): ...
    @staticmethod
    def setPlugLockQueryCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
MMatrix_kTol: float

class MMatrix:
    __init__: ClassVar[Callable] = ...
    identity: ClassVar[MMatrix] = ...
    thisown: Incomplete
    matrix: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __call__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def transpose(cls, *args, **kwargs): ...
    @classmethod
    def setToIdentity(cls, *args, **kwargs): ...
    @classmethod
    def setToProduct(cls, *args, **kwargs): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __isub__(cls, other): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def inverse(cls, *args, **kwargs): ...
    @classmethod
    def adjoint(cls, *args, **kwargs): ...
    @classmethod
    def homogenize(cls, *args, **kwargs): ...
    @classmethod
    def det4x4(cls, *args, **kwargs): ...
    @classmethod
    def det3x3(cls, *args, **kwargs): ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @classmethod
    def isSingular(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MMatrixArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MModelMessage(MMessage):
    kActiveListModified: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addCallback(*args, **kwargs): ...
    @staticmethod
    def addBeforeDuplicateCallback(*args, **kwargs): ...
    @staticmethod
    def addPostDuplicateNodeListCallback(*args, **kwargs): ...
    @staticmethod
    def addAfterDuplicateCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeAddedToModelCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeRemovedFromModelCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MNamespace:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addNamespace(*args, **kwargs): ...
    @staticmethod
    def validateName(*args, **kwargs): ...
    @staticmethod
    def currentNamespace(*args, **kwargs): ...
    @staticmethod
    def setCurrentNamespace(*args, **kwargs): ...
    @staticmethod
    def getNamespaces(*args, **kwargs): ...
    @staticmethod
    def namespaceExists(*args, **kwargs): ...
    @staticmethod
    def parentNamespace(*args, **kwargs): ...
    @staticmethod
    def removeNamespace(*args, **kwargs): ...
    @staticmethod
    def renameNamespace(*args, **kwargs): ...
    @staticmethod
    def getNamespaceObjects(*args, **kwargs): ...
    @staticmethod
    def moveNamespace(*args, **kwargs): ...
    @staticmethod
    def rootNamespace(*args, **kwargs): ...
    @staticmethod
    def relativeNames(*args, **kwargs): ...
    @staticmethod
    def setRelativeNames(*args, **kwargs): ...
    @staticmethod
    def getNamespaceFromName(*args, **kwargs): ...
    @staticmethod
    def stripNamespaceFromName(*args, **kwargs): ...
    @staticmethod
    def makeNamepathAbsolute(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MNodeCacheDisablingInfo:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def setCacheDisabled(cls, *args, **kwargs): ...
    @classmethod
    def getCacheDisabled(cls, *args, **kwargs): ...
    @classmethod
    def setReason(cls, *args, **kwargs): ...
    @classmethod
    def setMitigation(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...

class MNodeCacheDisablingInfoHelper:
    kTestDirtyPlug: ClassVar[int] = ...
    kTestHierarchy: ClassVar[int] = ...
    kTestPlug: ClassVar[int] = ...
    kLastConnectionTest: ClassVar[int] = ...
    kTestDefaultValue: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def setUnsafeNode(*args, **kwargs): ...
    @staticmethod
    def setUnsafeValue(*args, **kwargs): ...
    @staticmethod
    def testAnimatedAttribute(*args, **kwargs): ...
    @staticmethod
    def testBooleanAttribute(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MNodeCacheSetupInfo:
    __init__: ClassVar[Callable] = ...
    kWantToCacheByDefault: ClassVar[int] = ...
    kLastPreference: ClassVar[int] = ...
    kSimulationSupport: ClassVar[int] = ...
    kLastRequirement: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def setPreference(cls, *args, **kwargs): ...
    @classmethod
    def getPreference(cls, *args, **kwargs): ...
    @classmethod
    def setRequirement(cls, *args, **kwargs): ...
    @classmethod
    def getRequirement(cls, *args, **kwargs): ...

class MNodeClass:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def typeId(cls, *args, **kwargs): ...
    @classmethod
    def typeName(cls, *args, **kwargs): ...
    @classmethod
    def classification(cls, *args, **kwargs): ...
    @classmethod
    def addToClassification(cls, *args, **kwargs): ...
    @classmethod
    def removeFromClassification(cls, *args, **kwargs): ...
    @classmethod
    def pluginName(cls, *args, **kwargs): ...
    @classmethod
    def addExtensionAttribute(cls, *args, **kwargs): ...
    @classmethod
    def removeExtensionAttribute(cls, *args, **kwargs): ...
    @classmethod
    def removeExtensionAttributeIfUnset(cls, *args, **kwargs): ...
    @classmethod
    def getAttributes(cls, *args, **kwargs): ...
    @classmethod
    def attributeCount(cls, *args, **kwargs): ...
    @classmethod
    def attribute(cls, *args, **kwargs): ...
    @classmethod
    def hasAttribute(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MNodeMessage(MMessage):
    kConnectionMade: ClassVar[int] = ...
    kConnectionBroken: ClassVar[int] = ...
    kAttributeEval: ClassVar[int] = ...
    kAttributeSet: ClassVar[int] = ...
    kAttributeLocked: ClassVar[int] = ...
    kAttributeUnlocked: ClassVar[int] = ...
    kAttributeAdded: ClassVar[int] = ...
    kAttributeRemoved: ClassVar[int] = ...
    kAttributeRenamed: ClassVar[int] = ...
    kAttributeKeyable: ClassVar[int] = ...
    kAttributeUnkeyable: ClassVar[int] = ...
    kIncomingDirection: ClassVar[int] = ...
    kAttributeArrayAdded: ClassVar[int] = ...
    kAttributeArrayRemoved: ClassVar[int] = ...
    kOtherPlugSet: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kKeyChangeInvalid: ClassVar[int] = ...
    kMakeKeyable: ClassVar[int] = ...
    kMakeUnkeyable: ClassVar[int] = ...
    kKeyChangeLast: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addAttributeChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addAttributeAddedOrRemovedCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeDirtyCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeDirtyPlugCallback(*args, **kwargs): ...
    @staticmethod
    def addNameChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addUuidChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeAboutToDeleteCallback(*args, **kwargs): ...
    @staticmethod
    def addNodePreRemovalCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeDestroyedCallback(*args, **kwargs): ...
    @staticmethod
    def addKeyableChangeOverride(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MNurbsIntersector:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def isCreated(cls, *args, **kwargs): ...
    @classmethod
    def getClosestPoint(cls, *args, **kwargs): ...
    @classmethod
    def getIntersects(cls, *args, **kwargs): ...
    @classmethod
    def getIntersect(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MPointOnNurbs:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def getPoint(cls, *args, **kwargs): ...
    @classmethod
    def getUV(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MObjectArray:
    __init__: ClassVar[Callable] = ...
    __getitem__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MObjectHandle:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def object(cls, *args, **kwargs): ...
    @classmethod
    def objectRef(cls, *args, **kwargs): ...
    @classmethod
    def hashCode(cls, *args, **kwargs): ...
    @classmethod
    def isValid(cls, *args, **kwargs): ...
    @classmethod
    def isAlive(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...  # type: ignore[valid-type]
    @classmethod
    def __ne__(cls, other: object) -> bool: ...  # type: ignore[valid-type]
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @staticmethod
    def objectHashCode(*args, **kwargs): ...
    @classmethod
    def __hash__(cls) -> int: ...

class MObjectSetMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addSetMembersModifiedCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MPlugArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MPlug:
    __init__: ClassVar[Callable] = ...
    kAll: ClassVar[int] = ...
    kNonDefault: ClassVar[int] = ...
    kChanged: ClassVar[int] = ...
    kLastAttrSelector: ClassVar[int] = ...
    kFreeToChange: ClassVar[int] = ...
    kNotFreeToChange: ClassVar[int] = ...
    kChildrenNotFreeToChange: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def setAttribute(cls, *args, **kwargs): ...
    @classmethod
    def attribute(cls, *args, **kwargs): ...
    @classmethod
    def node(cls, *args, **kwargs): ...
    @classmethod
    def name(cls, *args, **kwargs): ...
    @classmethod
    def partialName(cls, *args, **kwargs): ...
    @classmethod
    def getSetAttrCmds(cls, *args, **kwargs): ...
    @classmethod
    def isNetworked(cls, *args, **kwargs): ...
    @classmethod
    def isArray(cls, *args, **kwargs): ...
    @classmethod
    def isElement(cls, *args, **kwargs): ...
    @classmethod
    def isCompound(cls, *args, **kwargs): ...
    @classmethod
    def isChild(cls, *args, **kwargs): ...
    @classmethod
    def isProcedural(cls, *args, **kwargs): ...
    @classmethod
    def logicalIndex(cls, *args, **kwargs): ...
    @classmethod
    def isProxy(cls, *args, **kwargs): ...
    @classmethod
    def selectAncestorLogicalIndex(cls, *args, **kwargs): ...
    @classmethod
    def getExistingArrayAttributeIndices(cls, *args, **kwargs): ...
    @classmethod
    def numElements(cls, *args, **kwargs): ...
    @classmethod
    def evaluateNumElements(cls, *args, **kwargs): ...
    @classmethod
    def numChildren(cls, *args, **kwargs): ...
    @classmethod
    def numConnectedElements(cls, *args, **kwargs): ...
    @classmethod
    def numConnectedChildren(cls, *args, **kwargs): ...
    @classmethod
    def child(cls, *args, **kwargs): ...
    @classmethod
    def parent(cls, *args, **kwargs): ...
    @classmethod
    def array(cls, *args, **kwargs): ...
    @classmethod
    def elementByLogicalIndex(cls, *args, **kwargs): ...
    @classmethod
    def elementByPhysicalIndex(cls, *args, **kwargs): ...
    @classmethod
    def connectionByPhysicalIndex(cls, *args, **kwargs): ...
    @classmethod
    def connectedTo(cls, *args, **kwargs): ...
    @classmethod
    def isConnected(cls, *args, **kwargs): ...
    @classmethod
    def source(cls, *args, **kwargs): ...
    @classmethod
    def destinations(cls, *args, **kwargs): ...
    @classmethod
    def sourceWithConversion(cls, *args, **kwargs): ...
    @classmethod
    def destinationsWithConversions(cls, *args, **kwargs): ...
    @classmethod
    def isKeyable(cls, *args, **kwargs): ...
    @classmethod
    def setKeyable(cls, *args, **kwargs): ...
    @classmethod
    def isLocked(cls, *args, **kwargs): ...
    @classmethod
    def setLocked(cls, *args, **kwargs): ...
    @classmethod
    def isChannelBoxFlagSet(cls, *args, **kwargs): ...
    @classmethod
    def setChannelBox(cls, *args, **kwargs): ...
    @classmethod
    def isCachingFlagSet(cls, *args, **kwargs): ...
    @classmethod
    def setCaching(cls, *args, **kwargs): ...
    @classmethod
    def isNull(cls, *args, **kwargs): ...
    @classmethod
    def info(cls, *args, **kwargs): ...
    @classmethod
    def isFromReferencedFile(cls, *args, **kwargs): ...
    @classmethod
    def isDynamic(cls, *args, **kwargs): ...
    @classmethod
    def isIgnoredWhenRendering(cls, *args, **kwargs): ...
    @classmethod
    def isDefaultValue(cls, *args, **kwargs): ...
    @classmethod
    def isFreeToChange(cls, *args, **kwargs): ...
    @classmethod
    def constructHandle(cls, *args, **kwargs): ...
    @classmethod
    def destructHandle(cls, *args, **kwargs): ...
    @classmethod
    def setMObject(cls, *args, **kwargs): ...
    @classmethod
    def setMPxData(cls, *args, **kwargs): ...
    @classmethod
    def setMDataHandle(cls, *args, **kwargs): ...
    @classmethod
    def setDouble(cls, *args, **kwargs): ...
    @classmethod
    def setFloat(cls, *args, **kwargs): ...
    @classmethod
    def setInt64(cls, *args, **kwargs): ...
    @classmethod
    def setInt(cls, *args, **kwargs): ...
    @classmethod
    def setShort(cls, *args, **kwargs): ...
    @classmethod
    def setBool(cls, *args, **kwargs): ...
    @classmethod
    def setMDistance(cls, *args, **kwargs): ...
    @classmethod
    def setMAngle(cls, *args, **kwargs): ...
    @classmethod
    def setMTime(cls, *args, **kwargs): ...
    @classmethod
    def setChar(cls, *args, **kwargs): ...
    @classmethod
    def setString(cls, *args, **kwargs): ...
    @classmethod
    def proxied(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def isExactlyEqual(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def setNumElements(cls, *args, **kwargs): ...
    @classmethod
    def isSource(cls, *args, **kwargs): ...
    @classmethod
    def isDestination(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def asMObject(cls, *args, **kwargs): ...
    @classmethod
    def asMDataHandle(cls, *args, **kwargs): ...
    @classmethod
    def asDouble(cls, *args, **kwargs): ...
    @classmethod
    def asFloat(cls, *args, **kwargs): ...
    @classmethod
    def asInt64(cls, *args, **kwargs): ...
    @classmethod
    def asInt(cls, *args, **kwargs): ...
    @classmethod
    def asShort(cls, *args, **kwargs): ...
    @classmethod
    def asBool(cls, *args, **kwargs): ...
    @classmethod
    def asMDistance(cls, *args, **kwargs): ...
    @classmethod
    def asMAngle(cls, *args, **kwargs): ...
    @classmethod
    def asMTime(cls, *args, **kwargs): ...
    @classmethod
    def asChar(cls, *args, **kwargs): ...
    @classmethod
    def asString(cls, *args, **kwargs): ...

class MPlane:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def normal(cls, *args, **kwargs): ...
    @classmethod
    def setPlane(cls, *args, **kwargs): ...
    @classmethod
    def distance(cls, *args, **kwargs): ...
    @classmethod
    def directedDistance(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MPointArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
MPoint_kTol: float

class MPoint:
    __init__: ClassVar[Callable] = ...
    __truediv__: ClassVar[Callable] = ...
    __div__: ClassVar[Callable] = ...
    origin: ClassVar[MPoint] = ...
    thisown: Incomplete
    x: Incomplete
    y: Incomplete
    z: Incomplete
    w: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def __call__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __isub__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def cartesianize(cls, *args, **kwargs): ...
    @classmethod
    def rationalize(cls, *args, **kwargs): ...
    @classmethod
    def homogenize(cls, *args, **kwargs): ...
    @classmethod
    def distanceTo(cls, *args, **kwargs): ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __getitem__(cls, index): ...

class MPolyMessage(MMessage):
    kVertexIndex: ClassVar[int] = ...
    kEdgeIndex: ClassVar[int] = ...
    kFaceIndex: ClassVar[int] = ...
    kLastErrorIndex: ClassVar[int] = ...
    kUVSetAdded: ClassVar[int] = ...
    kUVSetDeleted: ClassVar[int] = ...
    kCurrentUVSetChanged: ClassVar[int] = ...
    kColorSetAdded: ClassVar[int] = ...
    kColorSetDeleted: ClassVar[int] = ...
    kCurrentColorSetChanged: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addPolyComponentIdChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addPolyTopologyChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addUVSetChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addColorSetChangedCallback(*args, **kwargs): ...
    @staticmethod
    def deletedId(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MScriptUtil:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def createFromInt(cls, *args, **kwargs): ...
    @classmethod
    def createFromDouble(cls, *args, **kwargs): ...
    @classmethod
    def createFromList(cls, *args, **kwargs): ...
    @classmethod
    def asInt(cls, *args, **kwargs): ...
    @classmethod
    def asShort(cls, *args, **kwargs): ...
    @classmethod
    def asFloat(cls, *args, **kwargs): ...
    @classmethod
    def asDouble(cls, *args, **kwargs): ...
    @classmethod
    def asUint(cls, *args, **kwargs): ...
    @classmethod
    def asBool(cls, *args, **kwargs): ...
    @classmethod
    def asIntPtr(cls, *args, **kwargs): ...
    @classmethod
    def asShortPtr(cls, *args, **kwargs): ...
    @classmethod
    def asUshortPtr(cls, *args, **kwargs): ...
    @classmethod
    def asFloatPtr(cls, *args, **kwargs): ...
    @classmethod
    def asDoublePtr(cls, *args, **kwargs): ...
    @classmethod
    def asUintPtr(cls, *args, **kwargs): ...
    @classmethod
    def asBoolPtr(cls, *args, **kwargs): ...
    @classmethod
    def asCharPtr(cls, *args, **kwargs): ...
    @classmethod
    def asUcharPtr(cls, *args, **kwargs): ...
    @classmethod
    def asInt2Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asInt3Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asInt4Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asShort2Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asShort3Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asShort4Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asFloat2Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asFloat3Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asFloat4Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asDouble2Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asDouble3Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asDouble4Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asUint2Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asUint3Ptr(cls, *args, **kwargs): ...
    @classmethod
    def asUint4Ptr(cls, *args, **kwargs): ...
    @staticmethod
    def setInt(*args, **kwargs): ...
    @staticmethod
    def setShort(*args, **kwargs): ...
    @staticmethod
    def setFloat(*args, **kwargs): ...
    @staticmethod
    def setDouble(*args, **kwargs): ...
    @staticmethod
    def setUint(*args, **kwargs): ...
    @staticmethod
    def setBool(*args, **kwargs): ...
    @staticmethod
    def setChar(*args, **kwargs): ...
    @staticmethod
    def setUchar(*args, **kwargs): ...
    @staticmethod
    def getInt(*args, **kwargs): ...
    @staticmethod
    def getShort(*args, **kwargs): ...
    @staticmethod
    def getFloat(*args, **kwargs): ...
    @staticmethod
    def getDouble(*args, **kwargs): ...
    @staticmethod
    def getUint(*args, **kwargs): ...
    @staticmethod
    def getBool(*args, **kwargs): ...
    @staticmethod
    def getChar(*args, **kwargs): ...
    @staticmethod
    def getUchar(*args, **kwargs): ...
    @staticmethod
    def setIntArray(*args, **kwargs): ...
    @staticmethod
    def setShortArray(*args, **kwargs): ...
    @staticmethod
    def setFloatArray(*args, **kwargs): ...
    @staticmethod
    def setDoubleArray(*args, **kwargs): ...
    @staticmethod
    def setUintArray(*args, **kwargs): ...
    @staticmethod
    def setUshortArray(*args, **kwargs): ...
    @staticmethod
    def setBoolArray(*args, **kwargs): ...
    @staticmethod
    def setCharArray(*args, **kwargs): ...
    @staticmethod
    def setUcharArray(*args, **kwargs): ...
    @staticmethod
    def getIntArrayItem(*args, **kwargs): ...
    @staticmethod
    def getShortArrayItem(*args, **kwargs): ...
    @staticmethod
    def getFloatArrayItem(*args, **kwargs): ...
    @staticmethod
    def getDoubleArrayItem(*args, **kwargs): ...
    @staticmethod
    def getUintArrayItem(*args, **kwargs): ...
    @staticmethod
    def getUshortArrayItem(*args, **kwargs): ...
    @staticmethod
    def getBoolArrayItem(*args, **kwargs): ...
    @staticmethod
    def getCharArrayItem(*args, **kwargs): ...
    @staticmethod
    def getUcharArrayItem(*args, **kwargs): ...
    @staticmethod
    def createMatrixFromList(*args, **kwargs): ...
    @staticmethod
    def createFloatMatrixFromList(*args, **kwargs): ...
    @staticmethod
    def createIntArrayFromList(*args, **kwargs): ...
    @staticmethod
    def createFloatArrayFromList(*args, **kwargs): ...
    @staticmethod
    def getInt2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setInt2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getInt3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setInt3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getInt4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setInt4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getShort2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setShort2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getShort3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setShort3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getShort4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setShort4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getFloat2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setFloat2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getFloat3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setFloat3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getFloat4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setFloat4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getDouble2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setDouble2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getDouble3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setDouble3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getDouble4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setDouble4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getUint2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setUint2ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getUint3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setUint3ArrayItem(*args, **kwargs): ...
    @staticmethod
    def getUint4ArrayItem(*args, **kwargs): ...
    @staticmethod
    def setUint4ArrayItem(*args, **kwargs): ...
kQuaternionEpsilon: float

class MQuaternion:
    __init__: ClassVar[Callable] = ...
    identity: ClassVar[MQuaternion] = ...
    thisown: Incomplete
    x: Incomplete
    y: Incomplete
    z: Incomplete
    w: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def asMatrix(cls, *args, **kwargs): ...
    @classmethod
    def asEulerRotation(cls, *args, **kwargs): ...
    @classmethod
    def setAxisAngle(cls, *args, **kwargs): ...
    @classmethod
    def getAxisAngle(cls, *args, **kwargs): ...
    @classmethod
    def setToXAxis(cls, *args, **kwargs): ...
    @classmethod
    def setToYAxis(cls, *args, **kwargs): ...
    @classmethod
    def setToZAxis(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __neg__(cls): ...
    @classmethod
    def negateIt(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @classmethod
    def scaleIt(cls, *args, **kwargs): ...
    @classmethod
    def normal(cls, *args, **kwargs): ...
    @classmethod
    def normalizeIt(cls, *args, **kwargs): ...
    @classmethod
    def conjugate(cls, *args, **kwargs): ...
    @classmethod
    def conjugateIt(cls, *args, **kwargs): ...
    @classmethod
    def inverse(cls, *args, **kwargs): ...
    @classmethod
    def invertIt(cls, *args, **kwargs): ...
    @classmethod
    def log(cls, *args, **kwargs): ...
    @classmethod
    def exp(cls, *args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __getitem__(cls, index): ...

class MRampAttribute:
    __init__: ClassVar[Callable] = ...
    kNone: ClassVar[int] = ...
    kLinear: ClassVar[int] = ...
    kSmooth: ClassVar[int] = ...
    kSpline: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getNumEntries(cls, *args, **kwargs): ...
    @classmethod
    def getEntries(cls, *args, **kwargs): ...
    @classmethod
    def addEntries(cls, *args, **kwargs): ...
    @classmethod
    def deleteEntries(cls, *args, **kwargs): ...
    @classmethod
    def setColorAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def setValueAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def setPositionAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def setInterpolationAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def isColorRamp(cls, *args, **kwargs): ...
    @classmethod
    def isCurveRamp(cls, *args, **kwargs): ...
    @classmethod
    def hasIndex(cls, *args, **kwargs): ...
    @classmethod
    def sort(cls, *args, **kwargs): ...
    @classmethod
    def pack(cls, *args, **kwargs): ...
    @classmethod
    def setRamp(cls, *args, **kwargs): ...
    @staticmethod
    def createCurveRamp(*args, **kwargs): ...
    @staticmethod
    def createColorRamp(*args, **kwargs): ...
    @staticmethod
    def createRamp(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def getColorAtPosition(cls, *args, **kwargs): ...
    @classmethod
    def getValueAtPosition(cls, *args, **kwargs): ...
    @classmethod
    def sampleColorRamp(cls, *args, **kwargs): ...
    @classmethod
    def sampleValueRamp(cls, *args, **kwargs): ...

class MRenderPassDef:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getImplementation(cls, *args, **kwargs): ...
    @classmethod
    def getID(cls, *args, **kwargs): ...
    @classmethod
    def getName(cls, *args, **kwargs): ...
    @classmethod
    def getGroup(cls, *args, **kwargs): ...
    @classmethod
    def getDescription(cls, *args, **kwargs): ...
    @classmethod
    def getAttributeType(cls, *args, **kwargs): ...
    @classmethod
    def addFloatParameter(cls, *args, **kwargs): ...
    @classmethod
    def addDoubleParameter(cls, *args, **kwargs): ...
    @classmethod
    def addIntParameter(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MRenderPassRegistry:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def getRenderPassDefinition(*args, **kwargs): ...
    @staticmethod
    def registerRenderPassDefinition(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MEdit:
    __init__: ClassVar[Callable] = ...
    kNullEdit: ClassVar[int] = ...
    kSetAttrEdit: ClassVar[int] = ...
    kConnectDisconnectEdit: ClassVar[int] = ...
    kAddRemoveAttrEdit: ClassVar[int] = ...
    kParentEdit: ClassVar[int] = ...
    kFcurveEdit: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def editType(cls, *args, **kwargs): ...
    @classmethod
    def getString(cls, *args, **kwargs): ...
    @classmethod
    def isApplied(cls, *args, **kwargs): ...
    @classmethod
    def isFailed(cls, *args, **kwargs): ...
    @classmethod
    def isTopLevel(cls, *args, **kwargs): ...
    @classmethod
    def setApplied(cls, *args, **kwargs): ...
    @classmethod
    def setFailed(cls, *args, **kwargs): ...
    @classmethod
    def hasEditData(cls, *args, **kwargs): ...
    @classmethod
    def matches(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MAddRemoveAttrEdit(MEdit):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def node(cls, *args, **kwargs): ...
    @classmethod
    def attributeName(cls, *args, **kwargs): ...
    @classmethod
    def nodeName(cls, *args, **kwargs): ...
    @classmethod
    def isAttributeAdded(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MConnectDisconnectAttrEdit(MEdit):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def srcPlug(cls, *args, **kwargs): ...
    @classmethod
    def dstPlug(cls, *args, **kwargs): ...
    @classmethod
    def srcPlugName(cls, *args, **kwargs): ...
    @classmethod
    def dstPlugName(cls, *args, **kwargs): ...
    @classmethod
    def isConnection(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MFcurveEdit(MEdit):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def fcurve(cls, *args, **kwargs): ...
    @classmethod
    def fcurveName(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MRichSelection:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def getSelection(cls, *args, **kwargs): ...
    @classmethod
    def getSymmetry(cls, *args, **kwargs): ...
    @classmethod
    def getSymmetryMatrix(cls, *args, **kwargs): ...
    @classmethod
    def getSymmetryPlane(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSelection(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...

class MSceneMessage(MMessage):
    kSceneUpdate: ClassVar[int] = ...
    kBeforeNew: ClassVar[int] = ...
    kAfterNew: ClassVar[int] = ...
    kBeforeImport: ClassVar[int] = ...
    kAfterImport: ClassVar[int] = ...
    kBeforeOpen: ClassVar[int] = ...
    kAfterOpen: ClassVar[int] = ...
    kBeforeFileRead: ClassVar[int] = ...
    kAfterFileRead: ClassVar[int] = ...
    kAfterSceneReadAndRecordEdits: ClassVar[int] = ...
    kBeforeExport: ClassVar[int] = ...
    kAfterExport: ClassVar[int] = ...
    kBeforeSave: ClassVar[int] = ...
    kAfterSave: ClassVar[int] = ...
    kBeforeReference: ClassVar[int] = ...
    kAfterReference: ClassVar[int] = ...
    kBeforeRemoveReference: ClassVar[int] = ...
    kAfterRemoveReference: ClassVar[int] = ...
    kBeforeImportReference: ClassVar[int] = ...
    kAfterImportReference: ClassVar[int] = ...
    kBeforeExportReference: ClassVar[int] = ...
    kAfterExportReference: ClassVar[int] = ...
    kBeforeUnloadReference: ClassVar[int] = ...
    kAfterUnloadReference: ClassVar[int] = ...
    kBeforeSoftwareRender: ClassVar[int] = ...
    kAfterSoftwareRender: ClassVar[int] = ...
    kBeforeSoftwareFrameRender: ClassVar[int] = ...
    kAfterSoftwareFrameRender: ClassVar[int] = ...
    kSoftwareRenderInterrupted: ClassVar[int] = ...
    kMayaInitialized: ClassVar[int] = ...
    kMayaExiting: ClassVar[int] = ...
    kBeforeNewCheck: ClassVar[int] = ...
    kBeforeOpenCheck: ClassVar[int] = ...
    kBeforeSaveCheck: ClassVar[int] = ...
    kBeforeImportCheck: ClassVar[int] = ...
    kBeforeExportCheck: ClassVar[int] = ...
    kBeforeLoadReference: ClassVar[int] = ...
    kAfterLoadReference: ClassVar[int] = ...
    kBeforeLoadReferenceCheck: ClassVar[int] = ...
    kBeforeReferenceCheck: ClassVar[int] = ...
    kBeforeCreateReferenceCheck: ClassVar[int] = ...
    kBeforePluginLoad: ClassVar[int] = ...
    kAfterPluginLoad: ClassVar[int] = ...
    kBeforePluginUnload: ClassVar[int] = ...
    kAfterPluginUnload: ClassVar[int] = ...
    kBeforeCreateReference: ClassVar[int] = ...
    kAfterCreateReference: ClassVar[int] = ...
    kExportStarted: ClassVar[int] = ...
    kBeforeLoadReferenceAndRecordEdits: ClassVar[int] = ...
    kAfterLoadReferenceAndRecordEdits: ClassVar[int] = ...
    kBeforeCreateReferenceAndRecordEdits: ClassVar[int] = ...
    kAfterCreateReferenceAndRecordEdits: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addCallback(*args, **kwargs): ...
    @staticmethod
    def addCheckCallback(*args, **kwargs): ...
    @staticmethod
    def addCheckFileCallback(*args, **kwargs): ...
    @staticmethod
    def addStringArrayCallback(*args, **kwargs): ...
    @staticmethod
    def addReferenceCallback(*args, **kwargs): ...
    @staticmethod
    def addCheckReferenceCallback(*args, **kwargs): ...
    @staticmethod
    def addConnectionFailedCallback(*args, **kwargs): ...
    @staticmethod
    def addNamespaceRenamedCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MSelectionList:
    kMergeNormal: ClassVar[int] = ...
    kXORWithList: ClassVar[int] = ...
    kRemoveFromList: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def isEmpty(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def getDependNode(cls, *args, **kwargs): ...
    @classmethod
    def getDagPath(cls, *args, **kwargs): ...
    @classmethod
    def getPlug(cls, *args, **kwargs): ...
    @classmethod
    def add(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def replace(cls, *args, **kwargs): ...
    @classmethod
    def hasItem(cls, *args, **kwargs): ...
    @classmethod
    def hasItemPartly(cls, *args, **kwargs): ...
    @classmethod
    def toggle(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def merge(cls, *args, **kwargs): ...
    @classmethod
    def intersect(cls, *args, **kwargs): ...
    @classmethod
    def getSelectionStrings(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MSelectionMask:
    kSelectHandles: ClassVar[int] = ...
    kSelectLocalAxis: ClassVar[int] = ...
    kSelectIkHandles: ClassVar[int] = ...
    kSelectIkEndEffectors: ClassVar[int] = ...
    kSelectJoints: ClassVar[int] = ...
    kSelectLights: ClassVar[int] = ...
    kSelectCameras: ClassVar[int] = ...
    kSelectLattices: ClassVar[int] = ...
    kSelectClusters: ClassVar[int] = ...
    kSelectSculpts: ClassVar[int] = ...
    kSelectNurbsCurves: ClassVar[int] = ...
    kSelectNurbsSurfaces: ClassVar[int] = ...
    kSelectMeshes: ClassVar[int] = ...
    kSelectSubdiv: ClassVar[int] = ...
    kSelectSketchPlanes: ClassVar[int] = ...
    kSelectParticleShapes: ClassVar[int] = ...
    kSelectEmitters: ClassVar[int] = ...
    kSelectFields: ClassVar[int] = ...
    kSelectSprings: ClassVar[int] = ...
    kSelectRigidBodies: ClassVar[int] = ...
    kSelectRigidConstraints: ClassVar[int] = ...
    kSelectCollisionModels: ClassVar[int] = ...
    kSelectXYZLocators: ClassVar[int] = ...
    kSelectOrientationLocators: ClassVar[int] = ...
    kSelectUVLocators: ClassVar[int] = ...
    kSelectTextures: ClassVar[int] = ...
    kSelectCurves: ClassVar[int] = ...
    kSelectSurfaces: ClassVar[int] = ...
    kSelectLocators: ClassVar[int] = ...
    kSelectObjectsMask: ClassVar[int] = ...
    kSelectCVs: ClassVar[int] = ...
    kSelectHulls: ClassVar[int] = ...
    kSelectEditPoints: ClassVar[int] = ...
    kSelectMeshVerts: ClassVar[int] = ...
    kSelectMeshEdges: ClassVar[int] = ...
    kSelectMeshFreeEdges: ClassVar[int] = ...
    kSelectMeshFaces: ClassVar[int] = ...
    kSelectSubdivMeshPoints: ClassVar[int] = ...
    kSelectSubdivMeshEdges: ClassVar[int] = ...
    kSelectSubdivMeshFaces: ClassVar[int] = ...
    kSelectMeshUVs: ClassVar[int] = ...
    kSelectVertices: ClassVar[int] = ...
    kSelectEdges: ClassVar[int] = ...
    kSelectFacets: ClassVar[int] = ...
    kSelectMeshLines: ClassVar[int] = ...
    kSelectMeshComponents: ClassVar[int] = ...
    kSelectCurveParmPoints: ClassVar[int] = ...
    kSelectCurveKnots: ClassVar[int] = ...
    kSelectSurfaceParmPoints: ClassVar[int] = ...
    kSelectSurfaceKnots: ClassVar[int] = ...
    kSelectSurfaceRange: ClassVar[int] = ...
    kSelectSurfaceEdge: ClassVar[int] = ...
    kSelectIsoparms: ClassVar[int] = ...
    kSelectCurvesOnSurfaces: ClassVar[int] = ...
    kSelectPPStrokes: ClassVar[int] = ...
    kSelectLatticePoints: ClassVar[int] = ...
    kSelectParticles: ClassVar[int] = ...
    kSelectJointPivots: ClassVar[int] = ...
    kSelectScalePivots: ClassVar[int] = ...
    kSelectRotatePivots: ClassVar[int] = ...
    kSelectPivots: ClassVar[int] = ...
    kSelectSelectHandles: ClassVar[int] = ...
    kSelectComponentsMask: ClassVar[int] = ...
    kSelectAnimCurves: ClassVar[int] = ...
    kSelectAnimKeyframes: ClassVar[int] = ...
    kSelectAnimInTangents: ClassVar[int] = ...
    kSelectAnimOutTangents: ClassVar[int] = ...
    kSelectAnimMask: ClassVar[int] = ...
    kSelectAnimAny: ClassVar[int] = ...
    kSelectTemplates: ClassVar[int] = ...
    kSelectManipulators: ClassVar[int] = ...
    kSelectGuideLines: ClassVar[int] = ...
    kSelectPointsForGravity: ClassVar[int] = ...
    kSelectPointsOnCurvesForGravity: ClassVar[int] = ...
    kSelectPointsOnSurfacesForGravity: ClassVar[int] = ...
    kSelectObjectGroups: ClassVar[int] = ...
    kSelectSubdivMeshMaps: ClassVar[int] = ...
    kSelectFluids: ClassVar[int] = ...
    kSelectHairSystems: ClassVar[int] = ...
    kSelectFollicles: ClassVar[int] = ...
    kSelectNCloths: ClassVar[int] = ...
    kSelectNRigids: ClassVar[int] = ...
    kSelectDynamicConstraints: ClassVar[int] = ...
    kSelectNParticles: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def setMask(cls, *args, **kwargs): ...
    @classmethod
    def addMask(cls, *args, **kwargs): ...
    @classmethod
    def intersects(cls, *args, **kwargs): ...
    @classmethod
    def __or__(cls, other): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @staticmethod
    def registerSelectionType(*args, **kwargs): ...
    @staticmethod
    def deregisterSelectionType(*args, **kwargs): ...
    @staticmethod
    def getSelectionTypePriority(*args, **kwargs): ...

class MParentingEdit(MEdit):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def parentedObject(cls, *args, **kwargs): ...
    @classmethod
    def parent(cls, *args, **kwargs): ...
    @classmethod
    def parentedObjectName(cls, *args, **kwargs): ...
    @classmethod
    def parentName(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MSetAttrEdit(MEdit):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def plug(cls, *args, **kwargs): ...
    @classmethod
    def plugName(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MStreamUtils:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def stdErrorStream(*args, **kwargs): ...
    @staticmethod
    def stdOutStream(*args, **kwargs): ...
    @staticmethod
    def writeChar(*args, **kwargs): ...
    @staticmethod
    def writeCharBuffer(*args, **kwargs): ...
    @staticmethod
    def writeInt(*args, **kwargs): ...
    @staticmethod
    def writeFloat(*args, **kwargs): ...
    @staticmethod
    def writeDouble(*args, **kwargs): ...
    @staticmethod
    def readChar(*args, **kwargs): ...
    @staticmethod
    def readCharBuffer(*args, **kwargs): ...
    @staticmethod
    def readInt(*args, **kwargs): ...
    @staticmethod
    def readFloat(*args, **kwargs): ...
    @staticmethod
    def readDouble(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MSyntax:
    kInvalidArgType: ClassVar[int] = ...
    kNoArg: ClassVar[int] = ...
    kBoolean: ClassVar[int] = ...
    kLong: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    kString: ClassVar[int] = ...
    kUnsigned: ClassVar[int] = ...
    kDistance: ClassVar[int] = ...
    kAngle: ClassVar[int] = ...
    kTime: ClassVar[int] = ...
    kSelectionItem: ClassVar[int] = ...
    kLastArgType: ClassVar[int] = ...
    kInvalidObjectFormat: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kStringObjects: ClassVar[int] = ...
    kSelectionList: ClassVar[int] = ...
    kLastObjectFormat: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def addFlag(cls, *args, **kwargs): ...
    @classmethod
    def makeFlagMultiUse(cls, *args, **kwargs): ...
    @classmethod
    def makeFlagQueryWithFullArgs(cls, *args, **kwargs): ...
    @classmethod
    def addArg(cls, *args, **kwargs): ...
    @classmethod
    def useSelectionAsDefault(cls, *args, **kwargs): ...
    @classmethod
    def setObjectType(cls, *args, **kwargs): ...
    @classmethod
    def setMinObjects(cls, *args, **kwargs): ...
    @classmethod
    def setMaxObjects(cls, *args, **kwargs): ...
    @classmethod
    def enableQuery(cls, *args, **kwargs): ...
    @classmethod
    def enableEdit(cls, *args, **kwargs): ...
    @classmethod
    def minObjects(cls, *args, **kwargs): ...
    @classmethod
    def maxObjects(cls, *args, **kwargs): ...
    @classmethod
    def canQuery(cls, *args, **kwargs): ...
    @classmethod
    def canEdit(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MTesselationParams:
    kTriangleCountFormat: ClassVar[int] = ...
    kStandardFitFormat: ClassVar[int] = ...
    kGeneralFormat: ClassVar[int] = ...
    kTriangles: ClassVar[int] = ...
    kQuads: ClassVar[int] = ...
    kSurface3DDistance: ClassVar[int] = ...
    kSurface3DEquiSpaced: ClassVar[int] = ...
    kSurfaceEquiSpaced: ClassVar[int] = ...
    kSpanEquiSpaced: ClassVar[int] = ...
    kUseFractionalTolerance: ClassVar[int] = ...
    kUseChordHeightRatio: ClassVar[int] = ...
    kUseMinEdgeLength: ClassVar[int] = ...
    kUseMaxEdgeLength: ClassVar[int] = ...
    kUseMaxNumberPolys: ClassVar[int] = ...
    kUseMaxSubdivisionLevel: ClassVar[int] = ...
    kUseMinScreenSize: ClassVar[int] = ...
    kUseMaxUVRectangleSize: ClassVar[int] = ...
    kUseTriangleEdgeSwapping: ClassVar[int] = ...
    kUseRelativeTolerance: ClassVar[int] = ...
    kUseEdgeSmooth: ClassVar[int] = ...
    kLastFlag: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    fsDefaultTesselationParams: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def setFormatType(cls, *args, **kwargs): ...
    @classmethod
    def setOutputType(cls, *args, **kwargs): ...
    @classmethod
    def setTriangleCount(cls, *args, **kwargs): ...
    @classmethod
    def setStdChordHeightRatio(cls, *args, **kwargs): ...
    @classmethod
    def setStdFractionalTolerance(cls, *args, **kwargs): ...
    @classmethod
    def setStdMinEdgeLength(cls, *args, **kwargs): ...
    @classmethod
    def setSubdivisionFlag(cls, *args, **kwargs): ...
    @classmethod
    def setFitTolerance(cls, *args, **kwargs): ...
    @classmethod
    def setChordHeightRatio(cls, *args, **kwargs): ...
    @classmethod
    def setMinEdgeLength(cls, *args, **kwargs): ...
    @classmethod
    def setMaxEdgeLength(cls, *args, **kwargs): ...
    @classmethod
    def setMaxNumberPolys(cls, *args, **kwargs): ...
    @classmethod
    def setMaxSubdivisionLevel(cls, *args, **kwargs): ...
    @classmethod
    def setMinScreenSize(cls, *args, **kwargs): ...
    @classmethod
    def setWorldspaceToScreenTransform(cls, *args, **kwargs): ...
    @classmethod
    def setMaxUVRectangleSize(cls, *args, **kwargs): ...
    @classmethod
    def setRelativeFitTolerance(cls, *args, **kwargs): ...
    @classmethod
    def setEdgeSmoothFactor(cls, *args, **kwargs): ...
    @classmethod
    def set3DDelta(cls, *args, **kwargs): ...
    @classmethod
    def setUIsoparmType(cls, *args, **kwargs): ...
    @classmethod
    def setVIsoparmType(cls, *args, **kwargs): ...
    @classmethod
    def setUNumber(cls, *args, **kwargs): ...
    @classmethod
    def setVNumber(cls, *args, **kwargs): ...
    @classmethod
    def setBoundingBoxDiagonal(cls, *args, **kwargs): ...
    @classmethod
    def setUDistanceFraction(cls, *args, **kwargs): ...
    @classmethod
    def setVDistanceFraction(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MTimeArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MTime:
    kInvalid: ClassVar[int] = ...
    kHours: ClassVar[int] = ...
    kMinutes: ClassVar[int] = ...
    kSeconds: ClassVar[int] = ...
    kMilliseconds: ClassVar[int] = ...
    kGames: ClassVar[int] = ...
    k15FPS: ClassVar[int] = ...
    kFilm: ClassVar[int] = ...
    k24FPS: ClassVar[int] = ...
    kPALFrame: ClassVar[int] = ...
    k25FPS: ClassVar[int] = ...
    kNTSCFrame: ClassVar[int] = ...
    k30FPS: ClassVar[int] = ...
    kShowScan: ClassVar[int] = ...
    k48FPS: ClassVar[int] = ...
    kPALField: ClassVar[int] = ...
    k50FPS: ClassVar[int] = ...
    kNTSCField: ClassVar[int] = ...
    k60FPS: ClassVar[int] = ...
    k2FPS: ClassVar[int] = ...
    k3FPS: ClassVar[int] = ...
    k4FPS: ClassVar[int] = ...
    k5FPS: ClassVar[int] = ...
    k6FPS: ClassVar[int] = ...
    k8FPS: ClassVar[int] = ...
    k10FPS: ClassVar[int] = ...
    k12FPS: ClassVar[int] = ...
    k16FPS: ClassVar[int] = ...
    k20FPS: ClassVar[int] = ...
    k40FPS: ClassVar[int] = ...
    k75FPS: ClassVar[int] = ...
    k80FPS: ClassVar[int] = ...
    k100FPS: ClassVar[int] = ...
    k120FPS: ClassVar[int] = ...
    k125FPS: ClassVar[int] = ...
    k150FPS: ClassVar[int] = ...
    k200FPS: ClassVar[int] = ...
    k240FPS: ClassVar[int] = ...
    k250FPS: ClassVar[int] = ...
    k300FPS: ClassVar[int] = ...
    k375FPS: ClassVar[int] = ...
    k400FPS: ClassVar[int] = ...
    k500FPS: ClassVar[int] = ...
    k600FPS: ClassVar[int] = ...
    k750FPS: ClassVar[int] = ...
    k1200FPS: ClassVar[int] = ...
    k1500FPS: ClassVar[int] = ...
    k2000FPS: ClassVar[int] = ...
    k3000FPS: ClassVar[int] = ...
    k6000FPS: ClassVar[int] = ...
    k23_976FPS: ClassVar[int] = ...
    k29_97FPS: ClassVar[int] = ...
    k29_97DF: ClassVar[int] = ...
    k47_952FPS: ClassVar[int] = ...
    k59_94FPS: ClassVar[int] = ...
    k44100FPS: ClassVar[int] = ...
    k48000FPS: ClassVar[int] = ...
    k90FPS: ClassVar[int] = ...
    k119_88FPS: ClassVar[int] = ...
    kUserDef: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    __truediv__: ClassVar[Callable] = ...
    __div__: ClassVar[Callable] = ...
    __itruediv__: ClassVar[Callable] = ...
    __idiv__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def unit(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def setUnit(cls, *args, **kwargs): ...
    @classmethod
    def setValue(cls, *args, **kwargs): ...
    @classmethod
    def asUnits(cls, *args, **kwargs): ...
    @staticmethod
    def uiUnit(*args, **kwargs): ...
    @staticmethod
    def setUIUnit(*args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __le__(cls, other: object) -> bool: ...
    @classmethod
    def __ge__(cls, other: object) -> bool: ...
    @classmethod
    def __lt__(cls, other: object) -> bool: ...
    @classmethod
    def __gt__(cls, other: object) -> bool: ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __isub__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def ticksPerSecond(*args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...

class MTimer:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def beginTimer(cls, *args, **kwargs): ...
    @classmethod
    def endTimer(cls, *args, **kwargs): ...
    @classmethod
    def elapsedTime(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def clear(cls, *args, **kwargs): ...

class MClosedTimeInterval:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    min: Incomplete
    max: Incomplete
    @classmethod
    def empty(cls, *args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MTimeRange:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def contains(cls, *args, **kwargs): ...
    @classmethod
    def intersects(cls, *args, **kwargs): ...
    @classmethod
    def empty(cls, *args, **kwargs): ...
    @classmethod
    def bounds(cls, *args, **kwargs): ...
    @classmethod
    def __or__(cls, other): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...

class MTimerMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addTimerCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def setSleepCallback(*args, **kwargs): ...
    @staticmethod
    def sleepCallback(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
MTransformationMatrix_kTol: float

class MTransformationMatrix:
    kInvalid: ClassVar[int] = ...
    kXYZ: ClassVar[int] = ...
    kYZX: ClassVar[int] = ...
    kZXY: ClassVar[int] = ...
    kXZY: ClassVar[int] = ...
    kYXZ: ClassVar[int] = ...
    kZYX: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    identity: ClassVar[MTransformationMatrix] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def asMatrix(cls, *args, **kwargs): ...
    @classmethod
    def asMatrixInverse(cls, *args, **kwargs): ...
    @classmethod
    def asScaleMatrix(cls, *args, **kwargs): ...
    @classmethod
    def asRotateMatrix(cls, *args, **kwargs): ...
    @classmethod
    def getScale(cls, *args, **kwargs): ...
    @classmethod
    def setScale(cls, *args, **kwargs): ...
    @classmethod
    def addScale(cls, *args, **kwargs): ...
    @classmethod
    def rotation(cls, *args, **kwargs): ...
    @classmethod
    def eulerRotation(cls, *args, **kwargs): ...
    @classmethod
    def rotateTo(cls, *args, **kwargs): ...
    @classmethod
    def rotateBy(cls, *args, **kwargs): ...
    @classmethod
    def addRotationQuaternion(cls, *args, **kwargs): ...
    @classmethod
    def addRotation(cls, *args, **kwargs): ...
    @classmethod
    def rotationOrder(cls, *args, **kwargs): ...
    @classmethod
    def reorderRotation(cls, *args, **kwargs): ...
    @classmethod
    def setToRotationAxis(cls, *args, **kwargs): ...
    @classmethod
    def rotationOrientation(cls, *args, **kwargs): ...
    @classmethod
    def setRotationOrientation(cls, *args, **kwargs): ...
    @classmethod
    def getTranslation(cls, *args, **kwargs): ...
    @classmethod
    def setTranslation(cls, *args, **kwargs): ...
    @classmethod
    def addTranslation(cls, *args, **kwargs): ...
    @classmethod
    def setShear(cls, *args, **kwargs): ...
    @classmethod
    def getShear(cls, *args, **kwargs): ...
    @classmethod
    def addShear(cls, *args, **kwargs): ...
    @classmethod
    def scalePivot(cls, *args, **kwargs): ...
    @classmethod
    def setScalePivot(cls, *args, **kwargs): ...
    @classmethod
    def scalePivotTranslation(cls, *args, **kwargs): ...
    @classmethod
    def setScalePivotTranslation(cls, *args, **kwargs): ...
    @classmethod
    def rotatePivot(cls, *args, **kwargs): ...
    @classmethod
    def setRotatePivot(cls, *args, **kwargs): ...
    @classmethod
    def rotatePivotTranslation(cls, *args, **kwargs): ...
    @classmethod
    def setRotatePivotTranslation(cls, *args, **kwargs): ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def getRotation(cls, *args, **kwargs): ...
    @classmethod
    def setRotation(cls, *args, **kwargs): ...
    @classmethod
    def getRotationQuaternion(cls, *args, **kwargs): ...
    @classmethod
    def setRotationQuaternion(cls, *args, **kwargs): ...
    @classmethod
    def translation(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MTrimBoundaryArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def reserve(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def size(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def getMergedBoundary(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MTypeId:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def id(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MUint64Array:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __setitem__(cls, index, object) -> None: ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __delitem__(cls, other) -> None: ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __radd__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...

class MUintArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def __len__(cls) -> int: ...
    @classmethod
    def __setitem__(cls, index, object) -> None: ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __delitem__(cls, other) -> None: ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __radd__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MURI:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def setURI(cls, *args, **kwargs): ...
    @classmethod
    def setScheme(cls, *args, **kwargs): ...
    @classmethod
    def setPath(cls, *args, **kwargs): ...
    @classmethod
    def setFragment(cls, *args, **kwargs): ...
    @classmethod
    def setFileName(cls, *args, **kwargs): ...
    @classmethod
    def setDirectory(cls, *args, **kwargs): ...
    @classmethod
    def setAuthority(cls, *args, **kwargs): ...
    @classmethod
    def setUserInfo(cls, *args, **kwargs): ...
    @classmethod
    def setUserName(cls, *args, **kwargs): ...
    @classmethod
    def setPassword(cls, *args, **kwargs): ...
    @classmethod
    def setHost(cls, *args, **kwargs): ...
    @classmethod
    def setPort(cls, *args, **kwargs): ...
    @classmethod
    def addQueryItem(cls, *args, **kwargs): ...
    @classmethod
    def setQueryDelimiters(cls, *args, **kwargs): ...
    @classmethod
    def asString(cls, *args, **kwargs): ...
    @classmethod
    def getScheme(cls, *args, **kwargs): ...
    @classmethod
    def getPath(cls, *args, **kwargs): ...
    @classmethod
    def getFragment(cls, *args, **kwargs): ...
    @classmethod
    def getFileName(cls, *args, **kwargs): ...
    @classmethod
    def getDirectory(cls, *args, **kwargs): ...
    @classmethod
    def getAuthority(cls, *args, **kwargs): ...
    @classmethod
    def getUserInfo(cls, *args, **kwargs): ...
    @classmethod
    def getUserName(cls, *args, **kwargs): ...
    @classmethod
    def getPassword(cls, *args, **kwargs): ...
    @classmethod
    def getHost(cls, *args, **kwargs): ...
    @classmethod
    def getPort(cls, *args, **kwargs): ...
    @classmethod
    def getAllQueryItemKeys(cls, *args, **kwargs): ...
    @classmethod
    def getQueryItemValue(cls, *args, **kwargs): ...
    @classmethod
    def getAllQueryItemValues(cls, *args, **kwargs): ...
    @classmethod
    def getQueryValueDelimiter(cls, *args, **kwargs): ...
    @classmethod
    def getQueryPairDelimiter(cls, *args, **kwargs): ...
    @classmethod
    def removeQueryItem(cls, *args, **kwargs): ...
    @classmethod
    def removeAllQueryItems(cls, *args, **kwargs): ...
    @classmethod
    def isEmpty(cls, *args, **kwargs): ...
    @classmethod
    def isValid(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @staticmethod
    def isValidURI(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MUserData:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def deleteAfterUse(cls, *args, **kwargs): ...
    @classmethod
    def setDeleteAfterUse(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MUserEventMessage(MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def registerUserEvent(*args, **kwargs): ...
    @staticmethod
    def isUserEvent(*args, **kwargs): ...
    @staticmethod
    def deregisterUserEvent(*args, **kwargs): ...
    @staticmethod
    def addUserEventCallback(*args, **kwargs): ...
    @staticmethod
    def postUserEvent(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MUuid:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def asString(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def valid(cls, *args, **kwargs): ...
    @classmethod
    def generate(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MVectorArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
MVector_kTol: float

class MVector:
    kXaxis: ClassVar[int] = ...
    kYaxis: ClassVar[int] = ...
    kZaxis: ClassVar[int] = ...
    kWaxis: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    __itruediv__: ClassVar[Callable] = ...
    __idiv__: ClassVar[Callable] = ...
    __truediv__: ClassVar[Callable] = ...
    __div__: ClassVar[Callable] = ...
    zero: ClassVar[MVector] = ...
    one: ClassVar[MVector] = ...
    xAxis: ClassVar[MVector] = ...
    yAxis: ClassVar[MVector] = ...
    zAxis: ClassVar[MVector] = ...
    xNegAxis: ClassVar[MVector] = ...
    yNegAxis: ClassVar[MVector] = ...
    zNegAxis: ClassVar[MVector] = ...
    thisown: Incomplete
    x: Incomplete
    y: Incomplete
    z: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __call__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def __xor__(cls, other): ...
    @classmethod
    def __add__(cls, other): ...
    @classmethod
    def __iadd__(cls, other): ...
    @classmethod
    def __neg__(cls): ...
    @classmethod
    def __isub__(cls, other): ...
    @classmethod
    def __sub__(cls, other): ...
    @classmethod
    def __mul__(cls, other): ...
    @classmethod
    def __imul__(cls, other): ...
    @classmethod
    def __ne__(cls, other: object) -> bool: ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @classmethod
    def rotateBy(cls, *args, **kwargs): ...
    @classmethod
    def rotateTo(cls, *args, **kwargs): ...
    @classmethod
    def get(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def normal(cls, *args, **kwargs): ...
    @classmethod
    def normalize(cls, *args, **kwargs): ...
    @classmethod
    def angle(cls, *args, **kwargs): ...
    @classmethod
    def isEquivalent(cls, *args, **kwargs): ...
    @classmethod
    def isParallel(cls, *args, **kwargs): ...
    @classmethod
    def transformAsNormal(cls, *args, **kwargs): ...

class MWeight:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def influence(cls, *args, **kwargs): ...
    @classmethod
    def seam(cls, *args, **kwargs): ...
    @classmethod
    def setInfluence(cls, *args, **kwargs): ...
    @classmethod
    def setSeam(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MDataHandle:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def isNumeric(cls, *args, **kwargs): ...
    @classmethod
    def isGeneric(cls, *args, **kwargs): ...
    @classmethod
    def numericType(cls, *args, **kwargs): ...
    @classmethod
    def type(cls, *args, **kwargs): ...
    @classmethod
    def typeId(cls, *args, **kwargs): ...
    @classmethod
    def acceptedTypeIds(cls, *args, **kwargs): ...
    @classmethod
    def data(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @classmethod
    def copyWritable(cls, *args, **kwargs): ...
    @classmethod
    def attribute(cls, *args, **kwargs): ...
    @classmethod
    def setClean(cls, *args, **kwargs): ...
    @classmethod
    def asBool(cls, *args, **kwargs): ...
    @classmethod
    def asChar(cls, *args, **kwargs): ...
    @classmethod
    def asUChar(cls, *args, **kwargs): ...
    @classmethod
    def asShort(cls, *args, **kwargs): ...
    @classmethod
    def asLong(cls, *args, **kwargs): ...
    @classmethod
    def asInt(cls, *args, **kwargs): ...
    @classmethod
    def asInt64(cls, *args, **kwargs): ...
    @classmethod
    def asAddr(cls, *args, **kwargs): ...
    @classmethod
    def asFloat(cls, *args, **kwargs): ...
    @classmethod
    def asDouble(cls, *args, **kwargs): ...
    @classmethod
    def asDistance(cls, *args, **kwargs): ...
    @classmethod
    def asAngle(cls, *args, **kwargs): ...
    @classmethod
    def asTime(cls, *args, **kwargs): ...
    @classmethod
    def asShort2(cls, *args, **kwargs): ...
    @classmethod
    def asLong2(cls, *args, **kwargs): ...
    @classmethod
    def asInt2(cls, *args, **kwargs): ...
    @classmethod
    def asFloat2(cls, *args, **kwargs): ...
    @classmethod
    def asDouble2(cls, *args, **kwargs): ...
    @classmethod
    def asShort3(cls, *args, **kwargs): ...
    @classmethod
    def asLong3(cls, *args, **kwargs): ...
    @classmethod
    def asInt3(cls, *args, **kwargs): ...
    @classmethod
    def asFloat3(cls, *args, **kwargs): ...
    @classmethod
    def asDouble3(cls, *args, **kwargs): ...
    @classmethod
    def asDouble4(cls, *args, **kwargs): ...
    @classmethod
    def asVector(cls, *args, **kwargs): ...
    @classmethod
    def asFloatVector(cls, *args, **kwargs): ...
    @classmethod
    def asMatrix(cls, *args, **kwargs): ...
    @classmethod
    def asFloatMatrix(cls, *args, **kwargs): ...
    @classmethod
    def asString(cls, *args, **kwargs): ...
    @classmethod
    def asNurbsCurve(cls, *args, **kwargs): ...
    @classmethod
    def asNurbsSurface(cls, *args, **kwargs): ...
    @classmethod
    def asMesh(cls, *args, **kwargs): ...
    @classmethod
    def asSubdSurface(cls, *args, **kwargs): ...
    @classmethod
    def asNurbsCurveTransformed(cls, *args, **kwargs): ...
    @classmethod
    def asNurbsSurfaceTransformed(cls, *args, **kwargs): ...
    @classmethod
    def asMeshTransformed(cls, *args, **kwargs): ...
    @classmethod
    def asSubdSurfaceTransformed(cls, *args, **kwargs): ...
    @classmethod
    def asFalloffFunction(cls, *args, **kwargs): ...
    @classmethod
    def geometryTransformMatrix(cls, *args, **kwargs): ...
    @classmethod
    def asPluginData(cls, *args, **kwargs): ...
    @classmethod
    def setBool(cls, *args, **kwargs): ...
    @classmethod
    def setChar(cls, *args, **kwargs): ...
    @classmethod
    def setShort(cls, *args, **kwargs): ...
    @classmethod
    def setInt(cls, *args, **kwargs): ...
    @classmethod
    def setInt64(cls, *args, **kwargs): ...
    @classmethod
    def setFloat(cls, *args, **kwargs): ...
    @classmethod
    def setDouble(cls, *args, **kwargs): ...
    @classmethod
    def setMMatrix(cls, *args, **kwargs): ...
    @classmethod
    def setMFloatMatrix(cls, *args, **kwargs): ...
    @classmethod
    def setMVector(cls, *args, **kwargs): ...
    @classmethod
    def setMFloatVector(cls, *args, **kwargs): ...
    @classmethod
    def setMDistance(cls, *args, **kwargs): ...
    @classmethod
    def setMAngle(cls, *args, **kwargs): ...
    @classmethod
    def setMTime(cls, *args, **kwargs): ...
    @classmethod
    def set2Short(cls, *args, **kwargs): ...
    @classmethod
    def set2Int(cls, *args, **kwargs): ...
    @classmethod
    def set2Float(cls, *args, **kwargs): ...
    @classmethod
    def set2Double(cls, *args, **kwargs): ...
    @classmethod
    def set3Short(cls, *args, **kwargs): ...
    @classmethod
    def set3Int(cls, *args, **kwargs): ...
    @classmethod
    def set3Float(cls, *args, **kwargs): ...
    @classmethod
    def set3Double(cls, *args, **kwargs): ...
    @classmethod
    def set4Double(cls, *args, **kwargs): ...
    @classmethod
    def setString(cls, *args, **kwargs): ...
    @classmethod
    def setMObject(cls, *args, **kwargs): ...
    @classmethod
    def setMPxData(cls, *args, **kwargs): ...
    @classmethod
    def asGenericBool(cls, *args, **kwargs): ...
    @classmethod
    def asGenericChar(cls, *args, **kwargs): ...
    @classmethod
    def asGenericDouble(cls, *args, **kwargs): ...
    @classmethod
    def asGenericFloat(cls, *args, **kwargs): ...
    @classmethod
    def asGenericShort(cls, *args, **kwargs): ...
    @classmethod
    def asGenericInt(cls, *args, **kwargs): ...
    @classmethod
    def asGenericInt64(cls, *args, **kwargs): ...
    @classmethod
    def setGenericBool(cls, *args, **kwargs): ...
    @classmethod
    def setGenericChar(cls, *args, **kwargs): ...
    @classmethod
    def setGenericDouble(cls, *args, **kwargs): ...
    @classmethod
    def setGenericFloat(cls, *args, **kwargs): ...
    @classmethod
    def setGenericShort(cls, *args, **kwargs): ...
    @classmethod
    def setGenericInt(cls, *args, **kwargs): ...
    @classmethod
    def setGenericInt64(cls, *args, **kwargs): ...
    @classmethod
    def child(cls, *args, **kwargs): ...
    @classmethod
    def datablock(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MProfiler:
    __init__: ClassVar[Callable] = ...
    kColorA_L1: ClassVar[int] = ...
    kColorA_L2: ClassVar[int] = ...
    kColorA_L3: ClassVar[int] = ...
    kColorB_L1: ClassVar[int] = ...
    kColorB_L2: ClassVar[int] = ...
    kColorB_L3: ClassVar[int] = ...
    kColorC_L1: ClassVar[int] = ...
    kColorC_L2: ClassVar[int] = ...
    kColorC_L3: ClassVar[int] = ...
    kColorD_L1: ClassVar[int] = ...
    kColorD_L2: ClassVar[int] = ...
    kColorD_L3: ClassVar[int] = ...
    kColorE_L1: ClassVar[int] = ...
    kColorE_L2: ClassVar[int] = ...
    kColorE_L3: ClassVar[int] = ...
    kColorG_L1: ClassVar[int] = ...
    kColorG_L2: ClassVar[int] = ...
    kColorG_L3: ClassVar[int] = ...
    kColorCount: ClassVar[int] = ...
    thisown: Incomplete
    @staticmethod
    def removeCategory(*args, **kwargs): ...
    @staticmethod
    def getCategoryIndex(*args, **kwargs): ...
    @staticmethod
    def getCategoryName(*args, **kwargs): ...
    @staticmethod
    def getCategoryInfo(*args, **kwargs): ...
    @staticmethod
    def categoryRecording(*args, **kwargs): ...
    @staticmethod
    def setCategoryRecording(*args, **kwargs): ...
    @staticmethod
    def signalEvent(*args, **kwargs): ...
    @staticmethod
    def eventEnd(*args, **kwargs): ...
    @staticmethod
    def getEventCount(*args, **kwargs): ...
    @staticmethod
    def getEventTime(*args, **kwargs): ...
    @staticmethod
    def getEventDuration(*args, **kwargs): ...
    @staticmethod
    def getEventName(*args, **kwargs): ...
    @staticmethod
    def getDescription(*args, **kwargs): ...
    @staticmethod
    def getEventCategory(*args, **kwargs): ...
    @staticmethod
    def getThreadId(*args, **kwargs): ...
    @staticmethod
    def getCPUId(*args, **kwargs): ...
    @staticmethod
    def isSignalEvent(*args, **kwargs): ...
    @staticmethod
    def getColor(*args, **kwargs): ...
    @staticmethod
    def getThreadDuration(*args, **kwargs): ...
    @staticmethod
    def getBufferSize(*args, **kwargs): ...
    @staticmethod
    def setBufferSize(*args, **kwargs): ...
    @staticmethod
    def recordingActive(*args, **kwargs): ...
    @staticmethod
    def eventDataAvailable(*args, **kwargs): ...
    @staticmethod
    def resetRecording(*args, **kwargs): ...
    @staticmethod
    def setRecordingActive(*args, **kwargs): ...
    @staticmethod
    def saveRecording(*args, **kwargs): ...
    @staticmethod
    def loadRecording(*args, **kwargs): ...
    @staticmethod
    def isDataFromFile(*args, **kwargs): ...
    @staticmethod
    def getNumberOfCPUs(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def addCategory(*args, **kwargs): ...
    @staticmethod
    def getAllCategories(*args, **kwargs): ...
    @staticmethod
    def eventBegin(*args, **kwargs): ...

class MProfilingScope:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
kUnknownParameter: str
def intRefValue(ptr): ...
def shortRefValue(ptr): ...
def floatRefValue(ptr): ...
def doubleRefValue(ptr): ...
def charRefValue(ptr): ...
def boolRefValue(ptr): ...
def uIntRefValue(ptr): ...
def uCharRefValue(ptr): ...
def setRefValue(refObject, value): ...
def createIntRef(): ...
def createShortRef(): ...
def createFloatRef(): ...
def createDoubleRef(): ...
def createCharRef(): ...
def createBoolRef(): ...
def createUIntRef(): ...
def createUCharRef(): ...
def MProfilingContextManager(*args, **kwds): ...
