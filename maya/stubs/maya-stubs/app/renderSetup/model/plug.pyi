import maya.api.OpenMaya as OpenMaya
from _typeshed import Incomplete
from collections.abc import Generator

kPlugHasConnectedParent: Incomplete
kPlugHasNotSettableChild: Incomplete
kUnsupportedAttribute: Incomplete
kUnknownType: Incomplete
kArityMismatch: Incomplete
kNotOverridablePlug: Incomplete
kPlugWithoutLimits: Incomplete
kAddAttributePrivate: Incomplete
kVectorTypeStr: Incomplete
kCompoundTypeStr: Incomplete
kNotUndoable: int
kUndoable: int

def isSettable(plug): ...
def findPlug(node, attr: Incomplete | None = None): ...
def value(mPlug): ...
def toUiUnits(type, value): ...
def toInternalUnits(type, value): ...
def relatives(plg): ...

class UnlockedGuard:
    plg: Incomplete
    lockedState: Incomplete
    def __init__(self, plg) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

class Plug:
    kInvalid: int
    kFloat: int
    kDouble: int
    kInt: int
    kByte: int
    kBool: int
    kColor: int
    kEnum: int
    kString: int
    kObject: int
    kMessage: int
    kTime: int
    kAngle: int
    kDistance: int
    kArray: int
    kFilename: int
    kLast: int
    def __init__(self, plugOrNode, attrName: Incomplete | None = None) -> None: ...
    def copyValue(self, other) -> None: ...
    @staticmethod
    def getNames(plugName): ...
    @property
    def name(self): ...
    @property
    def attributeName(self): ...
    @property
    def nodeName(self): ...
    @property
    def plug(self): ...
    def node(self): ...
    def isOvrSupported(self): ...
    def overrideType(self, overType): ...
    def availableOverrides(self): ...
    def acceptsOverrideType(self, typeId): ...
    def applyOverrideType(self, overType): ...
    @property
    def uiUnitValue(self): ...
    @uiUnitValue.setter
    def uiUnitValue(self, value) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    def parent(self): ...
    def children(self) -> Generator[Incomplete]: ...
    @property
    def type(self): ...
    @property
    def isValid(self): ...
    def localizedTypeString(self): ...
    @property
    def isLocked(self): ...
    @property
    def isConnectable(self): ...
    @property
    def isKeyable(self): ...
    def attribute(self): ...
    def accepts(self, other): ...
    @property
    def isVector(self): ...
    @property
    def isUnit(self): ...
    @property
    def isNumeric(self): ...
    @property
    def hasLimits(self): ...
    @staticmethod
    def createAttribute(nodeObj, longName, shortName, dict, undoable=...): ...
    def cloneAttribute(self, nodeObj, longName, shortName, undoable=...): ...
    def createAttributeFrom(self, nodeObj, longName, shortName, limits: Incomplete | None = None): ...
    def getAttributeLimits(self): ...
    def setAttributeLimits(self, limits) -> None: ...

class AddDynamicAttribute(OpenMaya.MPxCommand):
    kCmdName: str
    node: Incomplete
    attribute: Incomplete
    mdgModifier: Incomplete
    def isUndoable(self): ...
    def doIt(self, args) -> None: ...
    @staticmethod
    def execute(node, attribute) -> None: ...
    @staticmethod
    def creator(): ...
    def __init__(self, node, attribute, mdgModifier) -> None: ...
    def redoIt(self) -> None: ...
    def undoIt(self) -> None: ...
