import maya.app.renderSetup.model.childNode as childNode
import maya.app.renderSetup.model.context as context
import maya.app.renderSetup.model.namespace as namespace
import maya.app.renderSetup.model.nodeList as nodeList
from _typeshed import Incomplete
from collections.abc import Generator

kInvalidChildName: Incomplete
kUnknownChild: Incomplete
kChildAttached: Incomplete
kChildDetached: Incomplete
kSet: Incomplete

class Container(nodeList.ListBase, childNode.TreeOrderedItem, childNode.ChildNode):
    kTypeId: Incomplete
    kTypeName: str
    kGroupTypeName: str
    kCollectionTypeName: str
    childLowest: Incomplete
    childHighest: Incomplete
    children: Incomplete
    enabled: Incomplete
    selfEnabled: Incomplete
    parentEnabled: Incomplete
    isolateSelected: Incomplete
    numIsolatedChildren: Incomplete
    numIsolatedAncestors: Incomplete
    @staticmethod
    def initializer() -> None: ...
    def isGroup(self): ...
    def isCollection(self): ...
    def getRenderLayer(self): ...
    def itemChangedRecursive(self) -> None: ...
    def setIsolateSelected(self, value) -> None: ...
    def isIsolateSelected(self, dataBlock: Incomplete | None = None): ...
    def getLayerNumIsolatedChildren(self): ...
    def getNumIsolatedChildren(self, includeSelf: bool = False): ...
    def getNumIsolatedAncestors(self): ...
    def createGroup(self, groupName, typeName=...): ...
    def createCollection(self, collectionName, typeName=...): ...
    def getChildren(self, cls=...): ...
    def getContainers(self): ...
    def hasChildren(self): ...
    def findChild(self, predicate, creator: Incomplete | None = None): ...
    def getChild(self, childName, cls=...): ...
    def acceptImport(self) -> None: ...
    def detachChild(self, child) -> None: ...
    def hasIsolatedAncestors(self, dataBlock: Incomplete | None = None): ...
    def hasIsolatedChildren(self, dataBlock: Incomplete | None = None): ...
    def compute(self, plug, dataBlock): ...
    def enabledChanged(self) -> None: ...
    def isEnabled(self, dataBlock: Incomplete | None = None): ...
    def isSelfEnabled(self, dataBlock: Incomplete | None = None): ...
    def setSelfEnabled(self, value) -> None: ...
    @context.applyContainer
    def apply(self) -> None: ...
    @context.applyContainer
    def postApply(self) -> None: ...
    @context.unapplyContainer
    def unapply(self) -> None: ...
    @context.updateContainer
    def update(self) -> None: ...
    def activate(self) -> None: ...
    def deactivate(self) -> None: ...
    def overridesConnections(self): ...
    def isAcceptableChild(self, modelOrData): ...
    def isSelfAcceptableChild(self): ...
    def isTopLevel(self): ...
    def isEmptyRecursive(self): ...
    def isTraversingConnections(self): ...
    def hasOverridesRecursive(self): ...
    def ancestorContainers(self) -> Generator[Incomplete]: ...

@namespace.root
def create(name, nodeType, parent: Incomplete | None = None, **selArgs): ...
def delete(container) -> None: ...
def unapply(container) -> None: ...
def getAllContainerClasses(): ...
def containers(c): ...
