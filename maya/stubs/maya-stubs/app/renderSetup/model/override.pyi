import maya.api.OpenMaya as OpenMaya
import maya.app.renderSetup.model.childNode as childNode
import maya.app.renderSetup.model.context as context
import maya.app.renderSetup.model.namespace as namespace
from _typeshed import Incomplete
from maya.app.renderSetup.model.renderSetupPrivate import PostApplyCmd as PostApplyCmd
from typing import NamedTuple

kUnapplyCmdPrivate: Incomplete
kUnconnectableAttr: Incomplete
kUnfinalized: Incomplete
kMissingDependencies: Incomplete

def fillVector(value, dimension): ...

class Property(NamedTuple('Property', [('name', Incomplete), ('encode', Incomplete), ('decode', Incomplete)])):
    def __new__(cls, attr, encode, decode): ...

class LeafClass:
    def isAbstractClass(self): ...

def valid(f): ...
def attributeToPlug(f): ...
def finalizationChanged(f): ...

class OverridePlugHandle:
    kModeClone: int
    kModeOffset: int
    kModeMultiply: int
    ovr: Incomplete
    handle: Incomplete
    longName: Incomplete
    shortName: Incomplete
    attrChangedID: Incomplete
    def __init__(self, ovr, longName, shortName, mode=...) -> None: ...
    def update(self) -> None: ...
    @property
    def attr(self): ...
    @property
    def attrDependency(self): ...
    def node(self): ...
    def name(self): ...
    def getPlug(self): ...
    def isFinalized(self): ...
    isValid = isFinalized
    def hasMissingDependency(self): ...
    def getMissingDependency(self): ...
    def setMissingDependency(self, source) -> None: ...
    def getSource(self): ...
    def setSource(self, source) -> None: ...
    def encode(self, dict) -> None: ...
    def decode(self, dict) -> None: ...
    def finalize(self, plg): ...

class Override(childNode.TreeOrderedItem, childNode.ChildNode):
    kTypeId: Incomplete
    kTypeName: str
    enabled: Incomplete
    selfEnabled: Incomplete
    parentEnabled: Incomplete
    attrName: Incomplete
    attrLocal: Incomplete
    @classmethod
    def creator(cls): ...
    @staticmethod
    def initializer() -> None: ...
    def isGroup(self): ...
    def isCollection(self): ...
    def isAbstractClass(self): ...
    def typeId(self): ...
    def typeName(self): ...
    def attributeName(self): ...
    def setAttributeName(self, attributeName) -> None: ...
    def attrValuePlugName(self): ...
    def enabledChanged(self) -> None: ...
    def isEnabled(self): ...
    def isLocalRender(self, dataBlock: Incomplete | None = None): ...
    def setLocalRender(self, value) -> None: ...
    def itemChangedRecursive(self) -> None: ...
    def isSelfEnabled(self, dataBlock: Incomplete | None = None): ...
    def setSelfEnabled(self, value) -> None: ...
    def isValid(self): ...
    def isApplied(self): ...
    def getRenderLayer(self): ...
    def hasApplyOverrides(self): ...
    def getApplyOverrides(self): ...
    def isAcceptableChild(self, model): ...
    def compute(self, plug, dataBlock): ...

class ValueOverride(Override):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def initializer() -> None: ...
    missingMultiName: Incomplete
    def __init__(self) -> None: ...
    def applyInsertOne(self, node, attr, nextOvr: Incomplete | None = None) -> None: ...
    @valid
    @context.applyOverride
    def apply(self, selectedNodeNames: Incomplete | None = None) -> None: ...
    @valid
    @context.applyOverride
    def reapply(self, overridden) -> None: ...
    @valid
    @context.applyOverride
    def postApply(self) -> None: ...
    @context.unapplyOverride
    def unapply(self) -> None: ...
    @context.updateOverride
    def update(self) -> None: ...
    def overridesConnections(self): ...
    def getOverridden(self): ...
    @attributeToPlug
    def acceptsAttr(self, plugName): ...

class AbsOverride(LeafClass, ValueOverride):
    kTypeId: Incomplete
    kTypeName: str
    kAttrValueLong: str
    kAttrValueShort: str
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def isValid(self): ...
    def isFinalized(self): ...
    def hasMissingDependencies(self): ...
    def status(self): ...
    def getAttrValue(self): ...
    def setAttrValue(self, value) -> None: ...
    @finalizationChanged
    @attributeToPlug
    def finalize(self, plugName) -> None: ...
    def compute(self, plg, dataBlock): ...

class RelOverride(LeafClass, ValueOverride):
    kTypeId: Incomplete
    kTypeName: str
    kMultiplyLong: str
    kMultiplyShort: str
    kOffsetLong: str
    kOffsetShort: str
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def isValid(self): ...
    def status(self): ...
    def getMultiply(self): ...
    def setMultiply(self, value) -> None: ...
    def getOffset(self): ...
    def setOffset(self, value) -> None: ...
    def multiplyPlugName(self): ...
    def offsetPlugName(self): ...
    @finalizationChanged
    @attributeToPlug
    def finalize(self, plugName) -> None: ...
    def isFinalized(self): ...
    def compute(self, plug, dataBlock): ...

class UniqueOverride:
    kTargetNodeName: Incomplete
    @classmethod
    def addTargetAttribute(cls) -> None: ...
    @finalizationChanged
    @attributeToPlug
    def finalize(self, plugName) -> None: ...
    def targetNodeName(self, dataBlock: Incomplete | None = None): ...
    def setTargetNodeName(self, nodeName) -> None: ...

class AbsUniqueOverride(UniqueOverride, AbsOverride):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def initializer() -> None: ...

class RelUniqueOverride(UniqueOverride, RelOverride):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def initializer() -> None: ...

@namespace.root
def create(name, nodeType): ...
def delete(override) -> None: ...

class UnapplyCmd(OpenMaya.MPxCommand):
    kCmdName: str
    override: Incomplete
    def isUndoable(self): ...
    def doIt(self, args) -> None: ...
    @staticmethod
    def execute(override) -> None: ...
    @staticmethod
    def creator(): ...
    overridden: Incomplete
    def __init__(self, override) -> None: ...
    def redoIt(self) -> None: ...
    def undoIt(self) -> None: ...
