from _typeshed import Incomplete
from collections.abc import Generator

class BlackList:
    @staticmethod
    def add(names) -> None: ...
    @staticmethod
    def remove(names) -> None: ...
    @staticmethod
    def accepts(override): ...
    @staticmethod
    def names(): ...

class BlackListGuard:
    names: Incomplete
    def __init__(self, names) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def getSelectors(collections): ...
def getCollections(layers) -> Generator[Incomplete]: ...
def getContainers(layers) -> Generator[Incomplete]: ...
def getRenderLayers(): ...
def stateGuards(ignoreReferenceEdit: bool = True, enableSceneObservers: bool = False): ...

class PivotGuard:
    pivot: Incomplete
    containers: Incomplete
    def __init__(self, pivot) -> None: ...
    def enter(self) -> None: ...
    def exit(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

class StackContext:
    stack: Incomplete
    @staticmethod
    def empty(): ...
    element: Incomplete
    custom: Incomplete
    def __init__(self, element) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def initiate(self) -> None: ...
    def conclude(self) -> None: ...

class PivotContext(StackContext):
    changed: Incomplete
    guard: Incomplete
    layer: Incomplete
    neededUpdate: Incomplete
    def __init__(self, element) -> None: ...
    def initiate(self) -> None: ...
    def conclude(self): ...

def selectionChanged(f): ...

class ApplyLayerContext(StackContext):
    def initiate(self) -> None: ...
    def conclude(self) -> None: ...

def applyLayer(f): ...

class UnapplyLayerContext(StackContext):
    def initiate(self) -> None: ...
    def conclude(self) -> None: ...

def unapplyLayer(f): ...
UpdateLayerContext = ApplyLayerContext

class UpdateLayerContext(PivotContext):
    def initiate(self) -> None: ...
    def conclude(self) -> None: ...

def updateLayer(f): ...

class ApplyContainerContext(PivotContext):
    def __enter__(self) -> None: ...
    def initiate(self) -> None: ...
    def conclude(self) -> None: ...

def applyContainer(f): ...

class UnapplyContainerContext(PivotContext):
    def initiate(self) -> None: ...
    def conclude(self) -> None: ...

def unapplyContainer(f): ...
UpdateContainerContext = ApplyContainerContext

def updateContainer(f): ...
ApplyOverrideContext = PivotContext

def applyOverride(f): ...
UnapplyOverrideContext = PivotContext

def unapplyOverride(f): ...
UpdateOverrideContext = PivotContext

def updateOverride(f): ...
def applyApplyOverride(f): ...
def unapplyApplyOverride(f): ...
def updateApplyOverride(f): ...
def beforeEnabled(node): ...
def afterEnabled(node): ...
def beforeIsolated(node): ...
def afterIsolated(node): ...
