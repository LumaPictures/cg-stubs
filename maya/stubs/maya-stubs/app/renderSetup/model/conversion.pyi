from maya.app.renderSetup.model.selector import *
from _typeshed import Incomplete
from maya.app.renderSetup.model.issue import Issue as Issue
from maya.app.renderSetup.model.jsonTranslatorGlobals import DECODE_AND_MERGE as DECODE_AND_MERGE

kRelativeHelpLink: str
kConvertTitle: Incomplete
kConvertMessage: Incomplete
kConvertYes: Incomplete
kConvertNo: Incomplete
kConvertHelp: Incomplete
kIssueShortDescription: Incomplete
kConvertBatchError: Incomplete
kConversionCompletedTitle: Incomplete
kConversionCompletedMessage: Incomplete
kConversionCompletedForMessage: str
kConversionFailedTitle: Incomplete
kConversionCompletedWithErrorsMessage: Incomplete
kConversionFailedForMessage: str
kConversionCompletedOk: Incomplete

def sceneHasBasicSelector(): ...

class Issue2016R2Collection(Issue):
    def __init__(self, resolveCallback: Incomplete | None = None) -> None: ...

def convertCollection(collection) -> None: ...
def convert2016R2(encodedData) -> None: ...

class ConvertDialog:
    checked: bool
    answer: bool
    def __init__(self) -> None: ...
    def onYes(self, *args) -> None: ...
    def onNo(self, *args) -> None: ...
    def onHelp(self, *args) -> None: ...
    def prompt(self): ...

kOptionVarAutoConvert: str

def hasAutoConvertFlag(): ...
def getAutoConvertFlag(): ...
def setAutoConvertFlag(value) -> None: ...
def removeAutoConvertFlag() -> None: ...

class ConversionFailed(Exception): ...

class Observer2016R2:
    @staticmethod
    def instance(): ...
    isResolving: bool
    def __init__(self) -> None: ...
    def activate(self) -> None: ...
    def deactivate(self) -> None: ...
    def resolve(self) -> None: ...
    def autoResolve(self) -> None: ...
    def assistedResolve(self): ...
