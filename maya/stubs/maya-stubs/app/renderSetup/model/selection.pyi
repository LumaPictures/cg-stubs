from _typeshed import Incomplete
from collections.abc import Generator

def createProgram(e): ...
def createNameFilter(expressions): ...

class Node:
    obj: Incomplete
    def __init__(self, obj) -> None: ...
    def object(self): ...
    def __hash__(self): ...
    def __eq__(self, o): ...

class Selection:
    def __init__(self, items: Incomplete | None = None) -> None: ...
    def sets(self): ...
    def dagNodes(self): ...
    def nonDagNodes(self): ...
    def nodes(self): ...
    def paths(self) -> Generator[Incomplete]: ...
    def hierarchy(self): ...
    def shapes(self): ...
    def names(self, allPaths: bool = True): ...
    def ls(self, patterns): ...
    def clear(self) -> None: ...
    def add(self, item) -> None: ...
    def update(self, items) -> None: ...
    def __contains__(self, item) -> bool: ...
