import maya.api.OpenMaya as OpenMaya
import maya.app.renderSetup.model.nodeList as nodeList
import maya.app.renderSetup.model.nodeNotes as nodeNotes
import maya.app.renderSetup.model.observable as observable
import maya.app.renderSetup.model.serializableNode as serializableNode
from _typeshed import Incomplete
from collections.abc import Generator

DECODE_AND_OVERWRITE: Incomplete
DECODE_AND_MERGE: Incomplete
DECODE_AND_RENAME: Incomplete
kInvalidRenderLayerName: Incomplete
kUnknownRenderLayer: Incomplete
kUnknownLegacyRenderLayer: Incomplete
kRenderSetupNodeTypeMismatch: Incomplete
kRenderSetupNodeNameMismatch: Incomplete
kSyncingActiveLayerMessage: Incomplete
kFileRefCbFailed: Incomplete
kBefore: Incomplete
kAfter: Incomplete
kLoading: Incomplete
kUnloading: Incomplete
kRegisterFailed: Incomplete
kUnregisterFailed: Incomplete
kRenderSetupCleanupFailed: Incomplete

class InMasterLayerCtxMgr:
    counter: int
    prevVisibleRenderLayer: Incomplete
    def __init__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def inMasterLayer(f): ...
def availableOverrides(nodeName, attrName): ...
def canOverride(nodeName, attrName): ...
def hasOverrideApplied(nodeName, attrName): ...

class RenderSetup(nodeList.ListBase, nodeNotes.NodeNotes, serializableNode.SerializableNode, OpenMaya.MPxNode):
    kTypeId: Incomplete
    kTypeName: Incomplete
    firstRenderLayer: Incomplete
    lastRenderLayer: Incomplete
    renderLayers: Incomplete
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    activeLayerChangeObservable: Incomplete
    visibleLayerBeforeUnloadReference: Incomplete
    def __init__(self) -> None: ...
    def isCollection(self): ...
    def isGroup(self): ...
    def hasSelector(self): ...
    def dispose(self) -> None: ...
    def typeName(self): ...
    def parent(self) -> None: ...
    def ancestors(self): ...
    def createRenderLayer(self, renderLayerName): ...
    def getRenderLayer(self, renderLayerName): ...
    def getRenderLayers(self): ...
    def appendRenderLayer(self, renderLayer) -> None: ...
    def attachRenderLayer(self, pos, renderLayer) -> None: ...
    def detachRenderLayer(self, renderLayer) -> None: ...
    appendChild = appendRenderLayer
    attachChild = attachRenderLayer
    detachChild = detachRenderLayer
    getChildren = getRenderLayers
    def switchToLayer(self, rLayer) -> None: ...
    def switchToLayerUsingLegacyName(self, renderLayerName) -> None: ...
    def addActiveLayerObserver(self, obsMethod) -> None: ...
    def removeActiveLayerObserver(self, obsMethod) -> None: ...
    def hasActiveLayerObserver(self, obsMethod): ...
    def getDefaultRenderLayer(self): ...
    def getVisibleRenderLayer(self): ...
    def clearAll(self) -> None: ...
    def nodes(self) -> Generator[Incomplete]: ...
    def decode(self, encodedData, behavior=..., prependToName: Incomplete | None = None) -> None: ...
    @inMasterLayer
    def encode(self, notes: Incomplete | None = None, includeSceneSettings: bool = True): ...
    def acceptImport(self) -> None: ...
    def importAllFromFile(self, filePath, behavior, prependToName) -> None: ...
    def isAcceptableChild(self, modelOrData): ...
    def addOpaqueData(self, key, data) -> None: ...
    def removeOpaqueData(self, key) -> None: ...
    def getOpaqueData(self, key): ...
    def hasOpaqueData(self, key): ...

class RenderSetupIssuesObservable(observable.Observable):
    def __init__(self) -> None: ...
    @staticmethod
    def instance(): ...
    def hasIssues(self): ...
    def addIssue(self, issue) -> None: ...
    def getIssue(self): ...
    def removeIssue(self, issue) -> None: ...
    def resolveIssue(self) -> None: ...
    def clear(self) -> None: ...

def hasInstance(): ...
def instance(): ...

class _Subject:
    def __init__(self) -> None: ...
    def finalize(self) -> None: ...
    def addObserver(self, obs) -> None: ...
    def removeObserver(self, obs) -> None: ...
    def clearObservers(self) -> None: ...

@inMasterLayer
def setDefaultPreset() -> None: ...
def initialize() -> None: ...
def finalize() -> None: ...
def addObserver(obs) -> None: ...
def removeObserver(obs) -> None: ...
def getClassification(type): ...
def setPluginObject(mplugin) -> None: ...
def registerNode(type) -> None: ...
def unregisterNode(type) -> None: ...
def delete(rsNode) -> None: ...
