import maya.api.OpenMaya as OpenMaya
import maya.app.renderSetup.model.context as context
from _typeshed import Incomplete
from maya.app.renderSetup.common.devtools import abstractmethod as abstractmethod
from maya.app.renderSetup.model.dagPath import DagPath as DagPath
from maya.app.renderSetup.model.selection import Selection as Selection

logger: Incomplete
kSet: Incomplete
kNodeNotInStaticSelection: str
kNodeToAbsoluteNameFailure: str
kParentMissing: Incomplete
kInvalidParent: Incomplete
kHasMissingObjects: Incomplete
rsIncludes: Incomplete

def populateDependencies(object_iter): ...
def getRSIncludes(): ...
def createTypeFilter(types): ...
def createCustomFilter(customs): ...
def createClassificationFilter(classification): ...
def isFilterLightsAndTransforms(name): ...

class Filters:
    kAll: int
    kTransforms: int
    kShapes: int
    kShaders: int
    kLights: int
    kSets: int
    kTransformsAndShapes: int
    kCameras: int
    kCustom: int
    kTransformsShapesShaders: int
    kGenerators: int
    kShadingEngines: int
    kLightsAndTransforms: int
    names: Incomplete
    @staticmethod
    def filterName(ftype): ...
    @staticmethod
    def filterUIName(ftype): ...
    @staticmethod
    def filterTypes(ftype): ...
    @staticmethod
    def filterFunction(ftype): ...
    @staticmethod
    def getFiltersFor(typeName): ...
    @staticmethod
    def acceptsSetsContent(ftype): ...
    @staticmethod
    def acceptsSets(ftype): ...

def selectionToAbsoluteNames(selection, permissive: bool = False): ...
def isRenderSetupOrLegacyRenderLayerNode(node): ...
def ls(patterns, types: Incomplete | None = None): ...

class Selector(OpenMaya.MPxNode):
    kTypeId: Incomplete
    kTypeName: str
    aIn: Incomplete
    aOut: Incomplete
    collection: Incomplete
    onNodeAdded: Incomplete
    onNodeRemoved: Incomplete
    onNodeRenamed: Incomplete
    onNodeReparented: Incomplete
    onConnectionChanged: Incomplete
    kDagOnly: int
    kNonDagOnly: int
    kDagOrNonDag: int
    @abstractmethod
    def contentType(self) -> None: ...
    def hasDagNodes(self): ...
    @staticmethod
    def synced(f): ...
    @classmethod
    def create(cls, name): ...
    @classmethod
    def creator(cls): ...
    @staticmethod
    def createInput(attr, args): ...
    @classmethod
    def affectsOutput(cls, attr) -> None: ...
    @staticmethod
    def initializer(): ...
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def isAbstractClass(self): ...
    def beforeBulkChange(self, *args, **kwargs) -> None: ...
    def onBulkChange(self, *args, **kwargs) -> None: ...
    def onFileOpened(self) -> None: ...
    def isActivated(self): ...
    def activate(self) -> None: ...
    def deactivate(self) -> None: ...
    def parent(self): ...
    def setParent(self, parent) -> None: ...
    def isTraversingConnections(self): ...
    def nodes(self): ...
    def paths(self): ...
    def names(self): ...
    def members(self): ...
    def templateNodeName(self): ...
    def status(self) -> None: ...
    def minimalClone(self, other) -> None: ...
    def isDirty(self): ...
    @context.selectionChanged
    def selectionChanged(self) -> None: ...
    def compute(self, plug, dataBlock): ...
    def owner(self): ...
    def getAbsoluteNames(self): ...
    def getSelectionStandIn(self, nodeName) -> None: ...

class StaticSelection:
    def __init__(self, selector) -> None: ...
    def set(self, selection) -> None: ...
    def setWithoutExistenceCheck(self, selection) -> None: ...
    def addOnlyLightsToSelection(self, selection) -> None: ...
    def add(self, selection) -> None: ...
    def remove(self, selection) -> None: ...
    def __iter__(self): ...
    def __contains__(self, node) -> bool: ...
    def __len__(self) -> int: ...
    def asList(self): ...
    def setCache(self, names) -> None: ...
    def asSet(self): ...
    def isMissing(self, node): ...
    def isFilteredOut(self, node): ...
    def hasMissingObjects(self): ...
    def hasFilteredOutObjects(self): ...
    def encode(self): ...
    def decode(self, string) -> None: ...
    def dirtySelectionCB(self) -> None: ...
    def dirtyFilterCB(self) -> None: ...
    def dirtyMissingCB(self) -> None: ...
    def onNodeAdded(self, obj): ...
    def onNodeRemoved(self, obj): ...
    def onNodeRenamed(self, obj, oldName): ...
    def onNodeReparented(self, msgType, child, parent): ...

class Strategy:
    @abstractmethod
    def create(cls, filterType, customs) -> None: ...
    @abstractmethod
    def items(self, selection) -> None: ...
    @abstractmethod
    def onConnectionChanged(self, selector, srcPlug, dstPlug, made) -> None: ...
    @abstractmethod
    def isTraversingConnections(self) -> None: ...
    def members(self, selector): ...
    @abstractmethod
    def contentType(self) -> None: ...

class NonDagStrategy(Strategy):
    @staticmethod
    def create(filterType, customs): ...
    def items(self, selection): ...
    def onConnectionChanged(self, selector, srcPlug, dstPlug, made) -> None: ...
    def isTraversingConnections(self): ...
    def contentType(self): ...

class DagStrategy(Strategy):
    shapesOnly: Incomplete
    filterFunct: Incomplete
    def __init__(self, filterType) -> None: ...
    @staticmethod
    def create(filterType, customs): ...
    def items(self, selection): ...
    def onConnectionChanged(self, selector, srcPlug, dstPlug, made) -> None: ...
    def isTraversingConnections(self): ...
    def contentType(self): ...

class TraversingConnectionStrategy(Strategy):
    def isTraversingConnections(self): ...

class ShadingEngineStrategy(TraversingConnectionStrategy):
    @staticmethod
    def create(filterType, customs): ...
    def items(self, selection): ...
    def onConnectionChanged(self, selector, srcPlug, dstPlug, made) -> None: ...
    def contentType(self): ...

class ShadingStrategy(TraversingConnectionStrategy):
    surface: Incomplete
    displace: Incomplete
    volume: Incomplete
    network: Incomplete
    def __init__(self, surface, displace, volume, network) -> None: ...
    @staticmethod
    def create(filterType, customs): ...
    def items(self, selection): ...
    def onConnectionChanged(self, selector, srcPlug, dstPlug, made) -> None: ...
    def contentType(self): ...

class GeneratorStrategy(TraversingConnectionStrategy):
    @staticmethod
    def create(filterType, customs): ...
    def items(self, selection): ...
    def onConnectionChanged(self, selector, srcPlug, dstPlug, made): ...
    def contentType(self): ...

class SetStrategy(TraversingConnectionStrategy):
    @staticmethod
    def create(filterType, customs): ...
    def items(self, selection): ...
    def onConnectionChanged(self, selector, srcPlug, dstPlug, made) -> None: ...
    def members(self, selector): ...
    def contentType(self): ...

class CompositeStrategy(Strategy):
    def __init__(self, strategies) -> None: ...
    def items(self, selection): ...
    def onConnectionChanged(self, selector, srcPlug, dstPlug, made) -> None: ...
    def isTraversingConnections(self): ...
    def members(self, selector): ...
    def contentType(self): ...

class SimpleSelector(Selector):
    kTypeId: Incomplete
    kTypeName: str
    aPattern: Incomplete
    aPrevPattern: Incomplete
    aStaticSelection: Incomplete
    aTypeFilter: Incomplete
    aCustomFilterValue: Incomplete
    @classmethod
    def getDefaultFilter(cls): ...
    @classmethod
    def getAvailableFilters(cls): ...
    def contentType(self): ...
    def isAbstractClass(self): ...
    def isTraversingConnections(self): ...
    @classmethod
    def initializer(cls) -> None: ...
    def __init__(self) -> None: ...
    def onNodeAdded(self, obj) -> None: ...
    def onNodeRenamed(self, obj, oldName) -> None: ...
    def onNodeRemoved(self, obj) -> None: ...
    def onNodeReparented(self, msgType, child, parent) -> None: ...
    def onBulkChange(self, *args, **kwargs) -> None: ...
    def onConnectionChanged(self, srcPlug, dstPlug, made) -> None: ...
    def isEmpty(self): ...
    def getPattern(self, dataBlock: Incomplete | None = None): ...
    def setPattern(self, val) -> None: ...
    def setPreviousPattern(self, val) -> None: ...
    def getPreviousPattern(self, dataBlock: Incomplete | None = None): ...
    def getFilterType(self, dataBlock: Incomplete | None = None): ...
    def setFilterType(self, val) -> None: ...
    def getCustomFilterValue(self, dataBlock: Incomplete | None = None): ...
    def setCustomFilterValue(self, val) -> None: ...
    def patterns(self, dataBlock: Incomplete | None = None): ...
    def getTypeFilters(self, dataBlock: Incomplete | None = None): ...
    @property
    def staticSelection(self): ...
    def minimalClone(self, other) -> None: ...
    def strategy(self, dataBlock: Incomplete | None = None): ...
    def acceptsType(self, typeName, dataBlock: Incomplete | None = None): ...
    def acceptsTypeOrIsSet(self, typeName, dataBlock: Incomplete | None = None): ...
    def templateNodeName(self): ...
    def containsSets(self): ...
    def containsSet(self, node): ...
    def selection(self): ...
    @Selector.synced
    def paths(self): ...
    @Selector.synced
    def shapes(self): ...
    @Selector.synced
    def nodes(self): ...
    @Selector.synced
    def names(self): ...
    @Selector.synced
    def members(self): ...
    @Selector.synced
    def getStaticNames(self): ...
    @Selector.synced
    def getDynamicNames(self): ...
    def getInvalidFilters(self, dataBlock: Incomplete | None = None): ...
    def status(self, dataBlock: Incomplete | None = None): ...
    def setStaticSelection(self, ss): ...
    def getStaticSelection(self): ...
    def hasMissingObjects(self): ...
    def hasFilteredOutObjects(self): ...

class LightsCollectionSelector(SimpleSelector):
    kTypeId: Incomplete
    kTypeName: str
    @classmethod
    def initializer(cls) -> None: ...
    def __init__(self) -> None: ...
    def typeId(self): ...
    def typeName(self): ...
    def isAbstractClass(self): ...
    def isTraversingConnections(self): ...
    def onConnectionChanged(self, srcPlug, dstPlug, made) -> None: ...
    def getSelectionStandIn(self, nodeName): ...
    def onNodeReparented(self, msgType, child, parent) -> None: ...

class BasicSelector(SimpleSelector):
    kTypeId: Incomplete
    kTypeName: str
    aIncludeHierarchy: Incomplete
    kForceCompute: bool
    @classmethod
    def getDefaultFilter(cls): ...
    @classmethod
    def getAvailableFilters(cls): ...
    @classmethod
    def initializer(cls) -> None: ...
    def isAbstractClass(self): ...
    def status(self): ...
    @Selector.synced
    def shapes(self): ...
    def getIncludeHierarchy(self): ...
    def setIncludeHierarchy(self, val) -> None: ...
    def onNodeAdded(self, **kwargs) -> None: ...
    def onNodeRemoved(self, **kwargs) -> None: ...
    def onNodeRenamed(self, **kwargs) -> None: ...
    def onNodeReparented(self, **kwargs) -> None: ...
    def onConnectionChanged(self, **kwargs) -> None: ...

def create(name, typeid): ...
