import maya.app.renderSetup.model.container as container
from _typeshed import Incomplete

kOverrideCreationFailed: Incomplete
kCollectionMissingSelector: Incomplete
kIncorrectChildType: Incomplete
kChildAttached: Incomplete

class Collection(container.Container):
    kTypeId: Incomplete
    kTypeName: Incomplete
    aSelector: Incomplete
    kDefaultSelectorTypeName: Incomplete
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def isCollection(self): ...
    def typeId(self): ...
    def typeName(self): ...
    def getSelectorType(self): ...
    def setSelectorType(self, typeName) -> None: ...
    def createOverride(self, overrideName, overrideType): ...
    def createAbsoluteOverride(self, nodeName, attrName): ...
    def createRelativeOverride(self, nodeName, attrName): ...
    def createConnectionOverride(self, nodeName, attrName): ...
    def getCollectionByName(self, collectionName, nested: bool = False): ...
    def appendChild(self, child) -> None: ...
    def attachChild(self, pos, child) -> None: ...
    def getCollections(self): ...
    def isAbstractClass(self): ...
    def getSelector(self): ...
    def hasSelector(self): ...
    def hasApplyOverridesRecursive(self): ...
    def getOverrides(self): ...

class LightsCollection(Collection):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def typeId(self): ...
    def typeName(self): ...
    @staticmethod
    def containsNodeName(nodeName): ...
    def setSelectorType(self, typeName) -> None: ...
    def createCollection(self, collectionName): ...
    def isAcceptableChild(self, modelOrData): ...
    def compute(self, plug, dataBlock): ...

class LightsChildCollection(Collection):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def typeId(self): ...
    def typeName(self): ...
    def setSelectorType(self, typeName) -> None: ...
    def compute(self, plug, dataBlock): ...
    def isAcceptableChild(self, modelOrData): ...

class RenderSettingsCollection(Collection):
    kTypeId: Incomplete
    kTypeName: str
    kSelectorTypeName: Incomplete
    numIsolatedRenderSettingsChildren: Incomplete
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    @staticmethod
    def containsNodeName(nodeName): ...
    def setSelectorType(self, typeName) -> None: ...
    def typeId(self): ...
    def typeName(self): ...
    def appendChild(self, child) -> None: ...
    def attachChild(self, pos, child) -> None: ...
    def createCollection(self, collectionName): ...
    def compute(self, plug, dataBlock): ...
    def isAcceptableChild(self, modelOrData): ...

class RenderSettingsChildCollection(Collection):
    kTypeId: Incomplete
    kTypeName: str
    kSelectorTypeName: Incomplete
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    @staticmethod
    def containsNodeName(nodeName): ...
    def getRenderSettingsChildCollections(self): ...
    def setSelectorType(self, typeName) -> None: ...
    def typeId(self): ...
    def typeName(self): ...
    def superTypeName(self): ...
    def appendChild(self, child) -> None: ...
    def attachChild(self, pos, child) -> None: ...
    def createCollection(self, collectionName): ...
    def compute(self, plug, dataBlock): ...
    def isAcceptableChild(self, modelOrData): ...
    def getRenderSettingsChildCollectionByName(self, renderSettingsChildCollectionName, nested: bool = False): ...
    def isTraversingConnections(self): ...

class AOVCollection(Collection):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    @staticmethod
    def containsNodeName(nodeName): ...
    def setSelectorType(self, typeName) -> None: ...
    def typeId(self): ...
    def typeName(self): ...
    def appendChild(self, child) -> None: ...
    def attachChild(self, pos, child) -> None: ...
    def compute(self, plug, dataBlock): ...
    def isAcceptableChild(self, modelOrData): ...

class AOVChildCollection(Collection):
    kTypeId: Incomplete
    kTypeName: str
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    def __init__(self) -> None: ...
    def containsNodeName(self, nodeName): ...
    def typeId(self): ...
    def typeName(self): ...
    def setSelectorType(self, typeName) -> None: ...
    def compute(self, plug, dataBlock): ...
    def isSelfAcceptableChild(self): ...

def getAllCollectionClasses(): ...
def create(name, nodeType=..., parent: Incomplete | None = None, **selArgs): ...
def delete(collection) -> None: ...
def unapply(collection) -> None: ...
