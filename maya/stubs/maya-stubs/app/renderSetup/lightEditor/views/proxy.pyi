from PySide2.QtCore import *
from PySide6.QtCore import *
from maya.app.renderSetup.views.proxy.renderSetupProxyStrings import *
import maya.app.renderSetup.views.proxy.renderSetup as rsProxy
import maya.app.renderSetup.views.pySide.standardItem as standardItem
from PySide6.QtGui import QStandardItemModel
from _typeshed import Incomplete
from maya.app.renderSetup.views.labelColorConstants import colors as colors

LIGHT_EDITOR_TYPE_IDX: Incomplete
LIGHT_ITEM_BASE_TYPE_IDX: Incomplete
LIGHT_ITEM_TYPE_IDX: Incomplete
LIGHT_GROUP_TYPE_IDX: Incomplete
LIGHT_EDITOR_TYPE: Incomplete
LIGHT_ITEM_BASE_TYPE: Incomplete
LIGHT_ITEM_TYPE: Incomplete
LIGHT_GROUP_TYPE: Incomplete
LIGHT_TEXT_COLOR: Incomplete
DISABLED_LIGHT_TEXT_COLOR: Incomplete
LIGHT_TEXT_COLOR_OVERRIDEN_BY_US: Incomplete
LIGHT_TEXT_COLOR_LOCKED: Incomplete
LIGHT_TEXT_COLOR_ANIMATED: Incomplete
DEFAULT_LIGHT_GROUP_COLOR: Incomplete
DEFAULT_LIGHT_ITEM_COLOR: Incomplete
LIGHT_EDITOR_MIME_TYPE: str

def getProxy(dataModel): ...

class LabelColor:
    def setLabelColor(self, label) -> None: ...
    def getLabelColor(self): ...

class LightItemProxyBase(LabelColor, standardItem.StandardItem):
    def __init__(self, model) -> None: ...
    def genericTypeIdx(self): ...
    def aboutToDelete(self) -> None: ...
    def delete(self) -> None: ...
    def isCopyable(self): ...
    dispose = aboutToDelete
    @property
    def model(self): ...
    def isModelDirty(self): ...
    def modelChanged(self, *posArgs, **kwArgs) -> None: ...
    def isActive(self): ...
    def getDefaultColor(self): ...
    def data(self, role): ...
    def setData(self, value, role) -> None: ...
    def equalsDragType(self, dragType): ...
    def handleDragMoveEvent(self, event) -> None: ...
    def handleDropEvent(self, event, sceneView) -> None: ...
    def onClick(self, view) -> None: ...
    def onDoubleClick(self, view) -> None: ...
    def findProxyItem(self, name): ...
    def headingWidth(self, heading): ...
    def supportsAction(self, action, numIndexes): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def isDropAllowed(self, destinationModel): ...

class LightItemProxy(LightItemProxyBase):
    def __init__(self, model) -> None: ...
    def type(self): ...
    def typeIdx(self): ...
    def delete(self) -> None: ...
    def data(self, role): ...
    def columnData(self, role, column): ...
    def acceptsDrops(self, attribute): ...

class LightGroupProxy(rsProxy.DataModelListObserver, LightItemProxyBase):
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def type(self): ...
    def typeIdx(self): ...
    def getDefaultColor(self): ...
    def data(self, role): ...
    def attachChild(self, override, pos) -> None: ...
    def acceptsDrops(self, attribute): ...
    def createListItemProxy(self, listItem): ...

class LightEditorProxy(rsProxy.DataModelListObserver, QStandardItemModel):
    dropMimeDataFailure: bool
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    @property
    def model(self): ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def __eq__(self, o): ...
    def __ne__(self, o): ...
    def child(self, row, column: int = 0): ...
    def attachChild(self, child, pos) -> None: ...
    def resetModel(self) -> None: ...
    def refreshModel(self) -> None: ...
    def type(self): ...
    def typeIdx(self): ...
    def supportedDropActions(self): ...
    def mimeTypes(self): ...
    def mimeData(self, indices): ...
    def dropMimeData(self, mimeData, action, row, column, parentIndex): ...
    def flags(self, index): ...
    def findProxyItem(self, name): ...
    def createListItemProxy(self, listItem): ...
