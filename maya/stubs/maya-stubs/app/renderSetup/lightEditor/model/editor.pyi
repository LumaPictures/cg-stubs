import maya.app.renderSetup.model.nodeNotes as nodeNotes
import maya.app.renderSetup.model.serializableNode as serializableNode
from _typeshed import Incomplete
from maya.app.renderSetup.lightEditor.model.group import LightGroup as LightGroup

kLightEditorNodeNameMismatch: Incomplete
kImportWarning: Incomplete
kLightEnabledChangedWarning: Incomplete

def hasInstance(): ...
def instance(): ...

class LightEditorImportExportHelper:
    WARNING_MESSAGE_FADE_TIME: int
    WARNING_MESSAGE_COLOR: int
    kIsSelfEnabledIndex: int
    kIsIsolatedSelectedIndex: int
    kLabelColorIndex: int
    nameToObjectDict: Incomplete
    lightToIsEnabled: Incomplete
    lightToParentSnapshot: Incomplete
    lightgroupToChild: Incomplete
    lightGroupProperties: Incomplete
    missingLightToParent: Incomplete
    lightgroupToMissingChild: Incomplete
    oldParentNameToNewName: Incomplete
    parentHasNewName: Incomplete
    @staticmethod
    def resetSnapshot(includingMissing: bool = True) -> None: ...
    @staticmethod
    def populatePresentSnapshots() -> None: ...
    @staticmethod
    def resetParentOnAllLightItems(importedData: Incomplete | None = None, LEInstance: Incomplete | None = None) -> None: ...
    @staticmethod
    def decode(importedData, importType=..., LEInstance: Incomplete | None = None) -> None: ...
    @staticmethod
    def getImportedParent(longName): ...
    def __init__(self) -> None: ...

class LightEditor(LightGroup, nodeNotes.NodeNotes, serializableNode.SerializableNode):
    kTypeId: Incomplete
    kTypeName: Incomplete
    @staticmethod
    def creator(): ...
    @staticmethod
    def initializer() -> None: ...
    @staticmethod
    def getMissingChildren(groupItem): ...
    @staticmethod
    def findEditorItem(obj): ...
    @staticmethod
    def nameToEditorItem(name): ...
    def __init__(self) -> None: ...
    def postConstructor(self) -> None: ...
    def isAbstractClass(self): ...
    def parent(self) -> None: ...
    def ancestors(self): ...
    def encode(notes: Incomplete | None = None): ...
    def decode(self, importedData, importType: int = 1) -> None: ...
    def getTraversal(self, groupItem: Incomplete | None = None): ...
    def removeAllWarningsAndImportedStatus(self) -> None: ...
    def createLightItem(self, lightShapeObj, parent: Incomplete | None = None): ...
    def createGroupItem(self, parent: Incomplete | None = None): ...
    def rebuildScene(self) -> None: ...
