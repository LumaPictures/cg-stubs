from PySide2.QtCore import *
from PySide6.QtCore import *
from maya.app.renderSetup.views.proxy.renderSetupProxyStrings import *
import maya.app.renderSetup.views.pySide.standardItem as standardItem
from PySide6.QtGui import QStandardItemModel
from _typeshed import Incomplete
from collections.abc import Generator
from maya.app.renderSetup.views.labelColorConstants import colors as colors

RENDER_SETUP_TYPE_IDX: int
RENDER_LAYER_TYPE_IDX: int
COLLECTION_TYPE_IDX: int
RENDER_OVERRIDE_TYPE_IDX: int
RENDER_SETTINGS_TYPE_IDX: int
CAMERAS_TYPE_IDX: int
LIGHTS_TYPE_IDX: int
AOVS_TYPE_IDX: int
LIGHTS_CHILD_COLLECTION_TYPE_IDX: int
AOVS_CHILD_COLLECTION_TYPE_IDX: int
RENDER_SETTINGS_CHILD_COLLECTION_TYPE_IDX: int
GROUP_TYPE_IDX: int
MAX_TYPE_IDX: int
RENDER_SETUP_TYPE: Incomplete
RENDER_LAYER_TYPE: Incomplete
COLLECTION_TYPE: Incomplete
RENDER_OVERRIDE_TYPE: Incomplete
RENDER_SETTINGS_TYPE: Incomplete
CAMERAS_TYPE: Incomplete
LIGHTS_TYPE: Incomplete
AOVS_TYPE: Incomplete
LIGHTS_CHILD_COLLECTION_TYPE: Incomplete
AOVS_CHILD_COLLECTION_TYPE: Incomplete
RENDER_SETTINGS_CHILD_COLLECTION_TYPE: Incomplete
GROUP_TYPE: Incomplete
RENDER_SETTINGS_STR = kRenderSettings
CAMERAS_STR = kCameras
LIGHTS_STR = kLights
AOVS_STR = kAOVs
RENDER_SETUP_MIME_TYPE: str
CREATE_COLLECTION_ACTION = kCreateCollectionAction
CREATE_GROUP_ACTION = kCreateGroupAction
CREATE_RENDER_SETTINGS_CHILD_COLLECTION_ACTION = kCreateRenderSettingsChildCollectionAction
SET_VISIBILITY_ACTION = kSetVisibilityAction
SET_RENDERABLE_ACTION = kSetRenderableAction
CREATE_ABSOLUTE_OVERRIDE_ACTION = kCreateAbsoluteOverrideAction
CREATE_RELATIVE_OVERRIDE_ACTION = kCreateRelativeOverrideAction
CREATE_CONNECTION_OVERRIDE_ACTION = kCreateConnectionOverrideAction
CREATE_SHADER_OVERRIDE_ACTION = kCreateShaderOverrideAction
CREATE_MATERIAL_OVERRIDE_ACTION = kCreateMaterialOverrideAction
CREATE_MATERIAL_TEMPLATE_OVERRIDE_ACTION = kCreateMaterialTemplateOverrideAction
SET_ENABLED_ACTION = kSetEnabledAction
EXPAND_COLLAPSE_ACTION = kExpandCollapseAction
FULLY_EXPAND_COLLAPSE_ACTION = kFullyExpandCollapseAction
SET_ISOLATE_SELECTED_ACTION = kSetIsolateSelectedAction
RENAME_ACTION = kRenameAction
DELETE_ACTION = kDeleteAction
FILTER_MENU = kFiltersMenu
ALLFILTER_ACTION = kFilterAll
SHAPESFILTER_ACTION = kFilterGeometry
CAMERASFILTER_ACTION = kFilterCameras
LIGHTSFILTER_ACTION = kFilterLights
SHADERSFILTER_ACTION = kFilterShaders
CUSTOMFILTER_ACTION = kFilterCustom
NEWFILTER_ACTION = kNewFilter
TRANSFORMSFILTER_ACTION = kFilterTransforms
SETSFILTER_ACTION = kFilterSets
TM_SHAPESFILTER_ACTION = kFilterTransformsAndShapes
TM_SHAPES_SHADERSFILTER_ACTION = kFilterTransformsShapesShaders
SET_LOCAL_RENDER_ACTION = kSetLocalRender
PROXY_OPAQUE_DATA: str
PARENT_TYPE_NAME: str
DEFAULT_LAYER_COLOR: Incomplete
DEFAULT_COLLECTION_COLOR: Incomplete
DEFAULT_GROUP_COLOR: Incomplete
GROUP_NODE_BAR_COLOR: Incomplete
DEFAULT_OVERRIDE_COLOR: Incomplete
DEFAULT_TEXT_COLOR: Incomplete
DISABLED_TEXT_COLOR: Incomplete

def getProxy(dataModel): ...

class DataModelListObserver:
    def __init__(self, *args, **kwargs) -> None: ...
    def ignoreListItemAdded(self): ...
    def addListObserver(self, model) -> None: ...
    def removeListObserver(self, model) -> None: ...
    def listItemAdded(self, listItem) -> None: ...
    def listItemRemoved(self, listItem) -> None: ...
    def addActiveLayerObserver(self) -> None: ...
    def removeActiveLayerObserver(self) -> None: ...

class Template:
    def findAllTemplateFiles(self, templateDirectory) -> Generator[Incomplete]: ...
    def acceptableDictionaries(self, templateDirectory) -> Generator[Incomplete]: ...
    def templateActions(self, templateDirectory) -> Generator[Incomplete]: ...

class LabelColor:
    def setLabelColor(self, label) -> None: ...
    def getLabelColor(self): ...

class ModelProxyItem(Template, standardItem.StandardItem):
    selected: bool
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    def isCopyable(self): ...
    dispose = aboutToDelete
    @property
    def model(self): ...
    def isModelDirty(self): ...
    def modelChanged(self, *posArgs, **kwArgs) -> None: ...
    def isActive(self): ...
    def getWarning(self): ...
    def data(self, role): ...
    def setData(self, value, role) -> None: ...
    def equalsDragType(self, dragType): ...
    def handleDragMoveEvent(self, event) -> None: ...
    def handleDropEvent(self, event, sceneView) -> None: ...
    def onClick(self, view) -> None: ...
    def onDoubleClick(self, view) -> None: ...
    def findProxyItem(self, name): ...
    def headingWidth(self, heading): ...
    def getActionButton(self, column) -> None: ...
    def getActionButtonCount(self): ...
    def isDropAllowed(self, destinationModel): ...
    def isSelected(self): ...
    def setSelected(self, value) -> None: ...
    def paste(self, objList, clipBoardData) -> None: ...

class OverrideProxy(LabelColor, ModelProxyItem):
    def __init__(self, model) -> None: ...
    def type(self): ...
    def typeIdx(self): ...
    def genericTypeIdx(self): ...
    def getWarning(self): ...
    def getDefaultColor(self): ...
    def data(self, role): ...
    def setData(self, value, role) -> None: ...
    def isUniqueOverride(self): ...
    def setLocalRender(self, value) -> None: ...
    def isLocalRender(self): ...
    def acceptsDrops(self, attribute): ...
    def delete(self) -> None: ...
    def supportsAction(self, action, numIndexes): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def isAcceptableTemplate(self, objList): ...
    def finalizeOverrideCreation(self, plugName): ...

class AbsOverrideProxy(OverrideProxy):
    def __init__(self, model) -> None: ...
    def createAttributeUI(self, attribute): ...

class RelOverrideProxy(OverrideProxy):
    def __init__(self, model) -> None: ...
    def createAttributeUI(self, attribute): ...

class UniqueOverrideProxy:
    def isUniqueOverride(self): ...
    def targetNodeName(self): ...

class AbsUniqueOverrideProxy(UniqueOverrideProxy, AbsOverrideProxy):
    def __init__(self, model) -> None: ...

class RelUniqueOverrideProxy(UniqueOverrideProxy, RelOverrideProxy):
    def __init__(self, model) -> None: ...

class ConnectionOverrideProxy(OverrideProxy):
    def __init__(self, model) -> None: ...
    def acceptsDrops(self, attribute): ...
    def createAttributeUI(self, attribute): ...

class ConnectionUniqueOverrideProxy(UniqueOverrideProxy, ConnectionOverrideProxy):
    def __init__(self, model) -> None: ...

class ShaderOverrideProxy(ConnectionOverrideProxy):
    def __init__(self, model) -> None: ...
    def acceptsDrops(self, attribute): ...
    def createAttributeUI(self, attribute): ...

class MaterialOverrideProxy(ConnectionOverrideProxy):
    def __init__(self, model) -> None: ...
    def acceptsDrops(self, attribute): ...
    def createAttributeUI(self, attribute): ...

class MaterialTemplateOverrideProxy(ConnectionOverrideProxy):
    def __init__(self, model) -> None: ...
    def acceptsDrops(self, attribute): ...
    def createAttributeUI(self, attribute): ...

class GroupProxy(DataModelListObserver, LabelColor, ModelProxyItem):
    typeName: Incomplete
    def __init__(self, model) -> None: ...
    def setSortingEnabled(self, enabled) -> None: ...
    def isSortingEnabled(self): ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def type(self): ...
    def genericTypeIdx(self): ...
    def typeIdx(self): ...
    def getWarning(self): ...
    def getDefaultColor(self): ...
    def data(self, role): ...
    def setData(self, value, role) -> None: ...
    def listItemAdded(self, listItem) -> None: ...
    def listItemRemoved(self, listItem) -> None: ...
    def delete(self) -> None: ...
    def attachChild(self, child, pos) -> None: ...
    def createListItemProxy(self, child): ...
    def importTemplate(self, objList) -> None: ...
    def supportsAction(self, action, numIndexes): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def createGroup(self, groupName, nodeType): ...
    def createCollection(self, collectionName, nodeType): ...
    def isAcceptableTemplate(self, objList): ...

class BaseCollectionProxy(DataModelListObserver, LabelColor, ModelProxyItem):
    def __init__(self, model) -> None: ...
    def setSortingEnabled(self, enabled) -> None: ...
    def isSortingEnabled(self): ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def type(self): ...
    def genericTypeIdx(self): ...
    def getWarning(self): ...
    def getDefaultColor(self): ...
    def data(self, role): ...
    def setData(self, value, role) -> None: ...
    def listItemAdded(self, listItem) -> None: ...
    def listItemRemoved(self, listItem) -> None: ...
    def createOverride(self, overrideTypeId): ...
    def attachOverrideProxy(self, overrideProxy) -> None: ...
    def delete(self) -> None: ...
    def attachChild(self, override, pos) -> None: ...
    def createListItemProxy(self, override): ...
    def isAcceptableTemplate(self, objList): ...
    def importTemplate(self, objList) -> None: ...

class CollectionProxy(BaseCollectionProxy):
    NO_OVERRIDE = kNoOverride
    ABSOLUTE_OVERRIDE = kAbsolute
    RELATIVE_OVERRIDE = kRelative
    typeName: Incomplete
    def __init__(self, model) -> None: ...
    def typeIdx(self): ...
    def data(self, role): ...
    def supportsAction(self, action, numIndexes): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def createCollection(self, collectionName, nodeType): ...
    def createGroup(self, groupName, nodeType): ...
    def isAcceptableTemplate(self, objList): ...

class RenderSettingsCollectionProxy(BaseCollectionProxy):
    typeName: Incomplete
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def typeIdx(self): ...
    def data(self, role): ...
    def createCollection(self, collectionName, nodeType): ...
    def supportsAction(self, action, numIndexes): ...
    def onDoubleClick(self, view) -> None: ...
    def isActive(self): ...
    def equalsDragType(self, dragType): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def isAcceptableTemplate(self, objList): ...

class RenderSettingsChildCollectionProxy(CollectionProxy):
    typeName: Incomplete
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def typeIdx(self): ...
    def createCollection(self, collectionName, nodeType): ...
    def supportsAction(self, action, numIndexes): ...
    def equalsDragType(self, dragType): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def isAcceptableTemplate(self, objList): ...

class AOVCollectionProxy(BaseCollectionProxy):
    typeName: Incomplete
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def typeIdx(self): ...
    def data(self, role): ...
    def supportsAction(self, action, numIndexes): ...
    def isActive(self): ...
    def equalsDragType(self, dragType): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def isAcceptableTemplate(self, objList): ...
    def onDoubleClick(self, view) -> None: ...

class AOVChildCollectionProxy(BaseCollectionProxy):
    typeName: Incomplete
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def typeIdx(self): ...
    def data(self, role): ...
    def supportsAction(self, action, numIndexes): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def isAcceptableTemplate(self, objList): ...

class LightsProxy(BaseCollectionProxy):
    typeName: Incomplete
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def typeIdx(self): ...
    def data(self, role): ...
    def supportsAction(self, action, numIndexes): ...
    def onDoubleClick(self, view) -> None: ...
    def equalsDragType(self, dragType): ...
    def getActionButton(self, column) -> None: ...
    def getActionButtonCount(self): ...
    def isAcceptableTemplate(self, objList): ...

class LightsChildCollectionProxy(BaseCollectionProxy):
    typeName: Incomplete
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def typeIdx(self): ...
    def data(self, role): ...
    def supportsAction(self, action, numIndexes): ...
    def getActionButton(self, column) -> None: ...
    def getActionButtonCount(self): ...
    def isAcceptableTemplate(self, objList): ...

class RenderLayerProxy(DataModelListObserver, LabelColor, ModelProxyItem):
    def __init__(self, model) -> None: ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def type(self): ...
    def typeIdx(self): ...
    def genericTypeIdx(self): ...
    def getDefaultColor(self): ...
    def data(self, role): ...
    def setData(self, value, role) -> None: ...
    def handleDragMoveEvent(self, event) -> None: ...
    def handleDropEvent(self, event, sceneView) -> None: ...
    def createCollection(self, collectionName, nodeType): ...
    def createGroup(self, groupName, nodeType): ...
    def delete(self) -> None: ...
    def attachChild(self, collection, pos) -> None: ...
    def supportsAction(self, action, numIndexes): ...
    def getActionButton(self, column): ...
    def getActionButtonCount(self): ...
    def createListItemProxy(self, collection): ...
    def isAcceptableTemplate(self, objList): ...
    def importTemplate(self, objList) -> None: ...
    def isDropAllowed(self, destinationModel): ...

class SceneItemProxy(DataModelListObserver, ModelProxyItem):
    def __init__(self, model) -> None: ...
    def data(self, role): ...

class CamerasProxy(SceneItemProxy):
    def __init__(self, model) -> None: ...
    def type(self): ...
    def typeIdx(self): ...
    def data(self, role): ...
    def equalsDragType(self, dragType): ...

class AOVsProxy(SceneItemProxy):
    def __init__(self, model) -> None: ...
    def type(self): ...
    def typeIdx(self): ...
    def data(self, role): ...
    def equalsDragType(self, dragType): ...

class RenderSetupProxy(DataModelListObserver, Template, QStandardItemModel):
    dropMimeDataFailure: bool
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def renderSetupAdded(self) -> None: ...
    def renderSetupPreDelete(self) -> None: ...
    @property
    def model(self): ...
    def aboutToDelete(self) -> None: ...
    dispose = aboutToDelete
    def __eq__(self, o): ...
    def __ne__(self, o): ...
    def child(self, row, column: int = 0): ...
    def attachChild(self, renderLayer, pos) -> None: ...
    def resetModel(self) -> None: ...
    def refreshModel(self) -> None: ...
    def createRenderLayer(self, renderLayerName): ...
    def acceptImport(self) -> None: ...
    def type(self): ...
    def typeIdx(self): ...
    def supportedDropActions(self): ...
    def mimeTypes(self): ...
    def mimeData(self, indices): ...
    def dropMimeData(self, mimeData, action, row, column, parentIndex): ...
    def flags(self, index): ...
    def findProxyItem(self, name): ...
    def createListItemProxy(self, renderLayer): ...
    def copyForClipboard(self, proxies): ...
    def exportSelectedToFile(self, filePath, notes, proxies) -> None: ...
    def isAcceptableTemplate(self, objList): ...
    def importTemplate(self, objList) -> None: ...
    def paste(self, objList) -> None: ...
