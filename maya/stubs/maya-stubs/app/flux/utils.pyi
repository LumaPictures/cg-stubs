from maya.app.flux.commonImports import *
from _typeshed import Incomplete
from maya.app.general.mayaMixin import MayaQWidgetDockableMixin as MayaQWidgetDockableMixin

dockableMixin = MayaQWidgetDockableMixin

def getFluxResourcesFolder(): ...

moduleIdentifier: str

def loadStringResources(module) -> None: ...
def str_res(name): ...
def registerStringResources(identifier, resources) -> None: ...
def getStringResource(indentifier, key): ...
def getPluginStringResource(key): ...
def colorLabel(identifier): ...
def allColorLabels(): ...
def getColourFromLabel(label): ...
def createColorIcon(colorName: Incomplete | None = None, qcolor: Incomplete | None = None, x: int = 100, y: int = 100): ...
def getMObjectFromName(nodeName): ...
def getAttributePlug(name, attr): ...
def getDagPathFromName(nodeName): ...
def mayaWindow(): ...
def mayaViewport(): ...
def getFluxString(key): ...
def getFuncFullName(func): ...
def printCallStack() -> None: ...
def getLocale(): ...
def getQtWidgetAtPos(x, y): ...
def getWidgetNameAtPos(x, y): ...
def getMayaWidget(name): ...
def applyRotations(rotations, origin): ...
def startProgressBar(message: str = 'Loading...', length: int = 100) -> None: ...
def stepProgressBar(amount: int = 1) -> None: ...
def endProgressBar() -> None: ...
def getReadFileName(message, fileFilter: str = ''): ...
def getWriteFileName(message, fileFilter: str = ''): ...
def exportJSONFile(jsonData) -> None: ...
def importJSONFile(): ...

class UTF8Wrapper:
    fileReader: Incomplete
    def __init__(self, f, encoding) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...

class csv_reader:
    reader: Incomplete
    def __init__(self, f, dialect=..., encoding: str = 'utf-8', **kwds) -> None: ...
    def __next__(self): ...
    def __iter__(self): ...

class csv_writer:
    fileWriter: Incomplete
    queue: Incomplete
    writer: Incomplete
    encoder: Incomplete
    def __init__(self, f, dialect=..., encoding: str = 'utf-8', **kwds) -> None: ...
    def writerow(self, row) -> None: ...
    def writerows(self, rows) -> None: ...

class MCallbackIdWrapper:
    callbackId: Incomplete
    def __init__(self, callbackId) -> None: ...
    def __del__(self) -> None: ...
