from _typeshed import Incomplete
from maya.debug.DebugTrace import DebugTrace

__all__ = ['GhostingManager', 'string_to_frames']

basestring = str

def string_to_frames(frame_string): ...

class GhostingManager(DebugTrace):
    ALL_IN_RANGE: str
    CUSTOM_FRAMES: str
    ENABLED: str
    FAR_OPACITY: str
    GEOMETRY_FILTER: str
    POST_FRAMES: str
    PRE_FRAMES: str
    GHOSTS_STEP: str
    HIERARCHY: str
    JOINT_FILTER: str
    LOCATOR_FILTER: str
    MODE: str
    NEAR_OPACITY: str
    POST_COLOUR: str
    PRE_COLOUR: str
    PRESET: str
    USE_DRIVER: str
    CMD_FLAGS: Incomplete
    DEFAULT_SETTINGS: Incomplete
    @staticmethod
    def properties(): ...
    class GhostingManagerState:
        needs_restoring: bool
        def __init__(self) -> None: ...
        def is_same_state(self, other_state): ...
        def save_state(self, manager) -> None: ...
        def restore_state(self, manager) -> None: ...
    debugging: Incomplete
    state: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def default_settings(): ...
    def all_settings(self): ...
    def __enter__(self): ...
    def __exit__(self, exit_type: type[BaseException] | None, exit_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def get_current_state(self): ...
    def restore_state(self, state_to_restore) -> None: ...
    def restore(self) -> None: ...
    def reset_all(self) -> None: ...
    def unghost_all(self) -> None: ...
    def unghost_selected(self, use_hierarchy: Incomplete | None = None) -> None: ...
    def ghost_selected(self, use_hierarchy: Incomplete | None = None) -> None: ...
    def ghost_objects(self, objects_to_ghost) -> None: ...
    def ghost_frames(self, node): ...
    @staticmethod
    def ghosted_objects(): ...
    def apply_all_in_range(self, new_all_in_range_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_custom_frames(self, new_custom_frames, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_far_opacity(self, new_far_opacity_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_post_frames(self, new_post_frames_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_pre_frames(self, new_pre_frames_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_ghosts_step(self, new_ghosts_step_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_mode(self, new_mode, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_near_opacity(self, new_near_opacity_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_post_colour(self, new_post_colour_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_pre_colour(self, new_pre_colour_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_preset(self, new_preset_value, apply_to_all_ghosts: bool = True) -> None: ...
    def apply_use_driver(self, new_use_driver_value, apply_to_all_ghosts: bool = True) -> None: ...
    @property
    def all_in_range(self): ...
    @all_in_range.setter
    def all_in_range(self, new_value) -> None: ...
    @property
    def custom_frames(self): ...
    @custom_frames.setter
    def custom_frames(self, new_value) -> None: ...
    custom_frames: Incomplete
    @property
    def custom_frames_as_string(self): ...
    @property
    def custom_frames_as_command_argument(self): ...
    @property
    def enabled(self): ...
    @enabled.setter
    def enabled(self, new_value) -> None: ...
    @property
    def far_opacity(self): ...
    @far_opacity.setter
    def far_opacity(self, new_value) -> None: ...
    @property
    def geometry_filter(self): ...
    @geometry_filter.setter
    def geometry_filter(self, new_value) -> None: ...
    @property
    def post_frames(self): ...
    @post_frames.setter
    def post_frames(self, new_value) -> None: ...
    @property
    def pre_frames(self): ...
    @pre_frames.setter
    def pre_frames(self, new_value) -> None: ...
    @property
    def ghosts_step(self): ...
    @ghosts_step.setter
    def ghosts_step(self, new_value) -> None: ...
    @property
    def hierarchy(self): ...
    @hierarchy.setter
    def hierarchy(self, new_value) -> None: ...
    @property
    def joint_filter(self): ...
    @joint_filter.setter
    def joint_filter(self, new_value) -> None: ...
    @property
    def locator_filter(self): ...
    @locator_filter.setter
    def locator_filter(self, new_value) -> None: ...
    @property
    def mode(self): ...
    @mode.setter
    def mode(self, new_value) -> None: ...
    @property
    def near_opacity(self): ...
    @near_opacity.setter
    def near_opacity(self, new_value) -> None: ...
    @property
    def pre_colour(self): ...
    @pre_colour.setter
    def pre_colour(self, new_value) -> None: ...
    @property
    def post_colour(self): ...
    @post_colour.setter
    def post_colour(self, new_value) -> None: ...
    @property
    def preset(self): ...
    @preset.setter
    def preset(self, new_value) -> None: ...
    @property
    def use_driver(self): ...
    @use_driver.setter
    def use_driver(self, new_value) -> None: ...
