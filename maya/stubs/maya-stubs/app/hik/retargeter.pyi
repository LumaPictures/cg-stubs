from _typeshed import Incomplete

class MappedRetargeter:
    def __init__(self) -> None: ...
    def setRetargeter(self, retargeter) -> None: ...
    def getRetargeter(self): ...
    def toDictionary(self): ...
    def fromDictionary(self, vals) -> None: ...

class RetargUtils:
    @staticmethod
    def loadPlugin(name) -> None: ...
    @staticmethod
    def setAttrIfNotNone(attr, val) -> None: ...
    @staticmethod
    def isAnimCurve(object): ...
    @staticmethod
    def isLocked(node, attr): ...
    @staticmethod
    def disconnectIfConnected(src, dest) -> None: ...
    @staticmethod
    def removeAllConnections(nodes) -> None: ...
    @staticmethod
    def hasAnimCurves(node): ...
    @staticmethod
    def listAnimCurves(node, attrs): ...
    @staticmethod
    def hasPairBlend(node): ...
    @staticmethod
    def connectPairBlendCompound(src, dest, attr) -> None: ...
    @staticmethod
    def disconnectPairBlendCompound(src, dest, attr) -> None: ...
    @staticmethod
    def parkAnimCurves(node): ...
    @staticmethod
    def unparkAnimCurves(node) -> None: ...
    @staticmethod
    def nameToNode(name): ...
    @staticmethod
    def getMatrix(node, matrixString): ...
    @staticmethod
    def getJointOrient(nodeName): ...
    @staticmethod
    def addAttrConnection(attr1, attr2): ...
    @staticmethod
    def addAttrFunc(attr1, val): ...
    @staticmethod
    def addVecConnection(attr1, attr2): ...
    @staticmethod
    def addVecFunc(attr1, val): ...
    @staticmethod
    def addVecFuncGetNode(attr1, val): ...
    @staticmethod
    def subVecConnection(attr1, attr2): ...
    @staticmethod
    def subVecFunc(attr1, val): ...
    @staticmethod
    def eulerValToComposeMat(euler, rotateOrder): ...
    @staticmethod
    def eulerToQuat(euler, rotateOrder: Incomplete | None = None): ...
    @staticmethod
    def quatToEuler(quat, rotateOrder): ...
    @staticmethod
    def inverseQuat(quat): ...
    @staticmethod
    def multQuatConnection(quat1, quat2): ...
    @staticmethod
    def convertRad2Deg(rot): ...
    @staticmethod
    def decomposeRelative(sourceMat, sourceRootMat, newRootMat): ...
    @staticmethod
    def hookUpDecomposeToMatrix(matrixSource): ...
    @staticmethod
    def matrixToList(matrixVal): ...
    @staticmethod
    def multMatrixByConstMatNode(matrixVal, pre, matrixAttr): ...
    @staticmethod
    def multMatrixByConstMat(matrixVal, pre, matrixAttr): ...
    @staticmethod
    def multConstMat(mVal, mVal2): ...
    @staticmethod
    def multMatrix(matrixAttr, matrixAttr1): ...
    @staticmethod
    def multPointByMatrix(matrixAttr, pointAttr): ...
    @staticmethod
    def matrixToQuat(matrixAttr): ...
    @staticmethod
    def quatToMatrix(quatAttr): ...
    @staticmethod
    def getWorldPositionUsingRP(nodeName): ...
    @staticmethod
    def setAttr(plug, val) -> None: ...
    @staticmethod
    def getAttr(plug): ...
    @staticmethod
    def walkGraph(startAttr, endAttr): ...

class DefaultRetargeter:
    def __init__(self, matSource: Incomplete | None = None, destRig: Incomplete | None = None, destSkel: Incomplete | None = None, type: Incomplete | None = None, id: int = -1, body: Incomplete | None = None) -> None: ...
    def toDictionary(self): ...
    def fromDictionary(self, vals) -> None: ...
    def toGraph(self, src): ...
    def fromGraph(self, node) -> None: ...
    def setOffset(self, x, y, z) -> None: ...
    def getType(self): ...
    def getId(self): ...
    def getDestinationRig(self): ...
    def getOffset(self): ...
    def setUpTrans(self, matrixSource, destination, destSkel: Incomplete | None = None, offset: Incomplete | None = None, sourceRoot: Incomplete | None = None, destRoot: Incomplete | None = None) -> None: ...
    def setUpRot(self, matrixSource, destination, destinationSkel: Incomplete | None = None, offset: Incomplete | None = None, destinationSkelParent: Incomplete | None = None) -> None: ...
    def calculateOffsets(self, destination, destinationSkel, type): ...
    def doRetarget(self, src) -> None: ...
    def delRetargeter(self, src) -> None: ...
    def destinationAttrs(self): ...

class PivotRetargeter(DefaultRetargeter): ...

class HIKRetargeter:
    @staticmethod
    def createDefaultMapping(source, dest, bodyPart, destRig, type, id, linkNum: int = 0): ...
    def __init__(self, HIKDestination: Incomplete | None = None) -> None: ...
    def __del__(self) -> None: ...
    def isConnected(self): ...
    def connect(self) -> None: ...
    def disconnect(self) -> None: ...
    def setMapping(self, bodyPart, destRig, type, retargeter, id, linkNum: int = 0) -> None: ...
    def getMappingKey(self, bodyPart, type, linkNum: int = 0): ...
    def getMapping(self, bodyPart, type, linkNum: int = 0): ...
    def removeMapping(self, bodyPart, type, linkNum: int = 0) -> None: ...
    def getMappingIds(self): ...
    def destinationAttrs(self): ...
    def getSource(self): ...
    def getDestination(self): ...
    def setDestination(self, destination) -> None: ...
    def toXML(self): ...
    def fromXML(self, root, dest, file: Incomplete | None = None): ...
    def tostring(self, indent: bool = False): ...
    def fromstring(self, text, dest: Incomplete | None = None): ...
    def write(self, file) -> None: ...
    def read(self, file, dest): ...
    def toGraph(self): ...
    def fromGraph(self, node) -> None: ...
