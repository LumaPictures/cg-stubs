from _typeshed import Incomplete

__all__ = ['OpenQuickRigUI']

class QuickRigTool:
    windowTitle: Incomplete
    windowName: Incomplete
    handleError: Incomplete
    requestConfirmation: Incomplete
    def __init__(self, windowName: str = 'quickRigWindowId') -> None: ...
    characterMenu: Incomplete
    buttonRename: Incomplete
    buttonDelete: Incomplete
    layoutModes: Incomplete
    buttonMode: Incomplete
    radioButtonOneClick: Incomplete
    radioButtonStepByStep: Incomplete
    layoutOneClick: Incomplete
    layoutStepByStep: Incomplete
    meshesList: Incomplete
    segmentationMethodList: Incomplete
    resolutionList: Incomplete
    symmetryList: Incomplete
    fieldSpine: Incomplete
    fieldNeck: Incomplete
    fieldShoulder: Incomplete
    checkboxHipsTranslation: Incomplete
    guidesColorButton: Incomplete
    checkboxTStanceCorrection: Incomplete
    orientJointsList: Incomplete
    skeletonControlRigList: Incomplete
    bindingMethodList: Incomplete
    scriptJobFileNew: Incomplete
    def create(self) -> None: ...
    def updateUI(self) -> None: ...

class UserException(Exception):
    message: Incomplete
    def __init__(self, message) -> None: ...

class HIKContext:
    objs: Incomplete
    NodeList: Incomplete
    managedHIK: bool
    def __init__(self, NodeList) -> None: ...
    keyingGroups: Incomplete
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None): ...

class HIKManipulationScope:
    newManipulationMode: Incomplete
    oldManipulationMode: Incomplete
    def __init__(self, manipulationMode) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def setManipulationMode(self, mode) -> None: ...

class Vector3:
    x: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def length(self): ...
    def dot(self, other): ...
    def cross(self, other): ...
    def project(self, target): ...

class PieceWiseLinearFunction:
    points: Incomplete
    ratios: Incomplete
    def __init__(self, points) -> None: ...
    def evaluate(self, value): ...

def OpenQuickRigUI() -> None: ...
