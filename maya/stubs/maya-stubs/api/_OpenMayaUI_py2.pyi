import MSyntax
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

class M3dView:
    kActive: ClassVar[int] = ...
    kActiveAffected: ClassVar[int] = ...
    kActiveColors: ClassVar[int] = ...
    kActiveComponent: ClassVar[int] = ...
    kActiveTemplate: ClassVar[int] = ...
    kBackgroundColor: ClassVar[int] = ...
    kBoundingBox: ClassVar[int] = ...
    kCenter: ClassVar[int] = ...
    kDefaultQualityRenderer: ClassVar[int] = ...
    kDepth_8: ClassVar[int] = ...
    kDepth_Float: ClassVar[int] = ...
    kDisplayCVs: ClassVar[int] = ...
    kDisplayCameras: ClassVar[int] = ...
    kDisplayDeformers: ClassVar[int] = ...
    kDisplayDimensions: ClassVar[int] = ...
    kDisplayDynamicConstraints: ClassVar[int] = ...
    kDisplayDynamics: ClassVar[int] = ...
    kDisplayEverything: ClassVar[int] = ...
    kDisplayFluids: ClassVar[int] = ...
    kDisplayFollicles: ClassVar[int] = ...
    kDisplayGrid: ClassVar[int] = ...
    kDisplayHairSystems: ClassVar[int] = ...
    kDisplayHulls: ClassVar[int] = ...
    kDisplayIkHandles: ClassVar[int] = ...
    kDisplayImagePlane: ClassVar[int] = ...
    kDisplayJoints: ClassVar[int] = ...
    kDisplayLights: ClassVar[int] = ...
    kDisplayLocators: ClassVar[int] = ...
    kDisplayManipulators: ClassVar[int] = ...
    kDisplayMeshes: ClassVar[int] = ...
    kDisplayNCloths: ClassVar[int] = ...
    kDisplayNParticles: ClassVar[int] = ...
    kDisplayNRigids: ClassVar[int] = ...
    kDisplayNurbsCurves: ClassVar[int] = ...
    kDisplayNurbsSurfaces: ClassVar[int] = ...
    kDisplayParticleInstancers: ClassVar[int] = ...
    kDisplayPivots: ClassVar[int] = ...
    kDisplayPlanes: ClassVar[int] = ...
    kDisplaySelectHandles: ClassVar[int] = ...
    kDisplayStrokes: ClassVar[int] = ...
    kDisplaySubdivSurfaces: ClassVar[int] = ...
    kDisplayTextures: ClassVar[int] = ...
    kDormant: ClassVar[int] = ...
    kDormantColors: ClassVar[int] = ...
    kExcludeMotionTrails: ClassVar[int] = ...
    kExcludePluginShapes: ClassVar[int] = ...
    kExternalRenderer: ClassVar[int] = ...
    kFlatShaded: ClassVar[int] = ...
    kGouraudShaded: ClassVar[int] = ...
    kHighQualityRenderer: ClassVar[int] = ...
    kHilite: ClassVar[int] = ...
    kIntermediateObject: ClassVar[int] = ...
    kInvisible: ClassVar[int] = ...
    kLead: ClassVar[int] = ...
    kLeft: ClassVar[int] = ...
    kLightActive: ClassVar[int] = ...
    kLightAll: ClassVar[int] = ...
    kLightDefault: ClassVar[int] = ...
    kLightNone: ClassVar[int] = ...
    kLightSelected: ClassVar[int] = ...
    kLive: ClassVar[int] = ...
    kNoStatus: ClassVar[int] = ...
    kPoints: ClassVar[int] = ...
    kRight: ClassVar[int] = ...
    kStippleDashed: ClassVar[int] = ...
    kStippleNone: ClassVar[int] = ...
    kTemplate: ClassVar[int] = ...
    kTemplateColor: ClassVar[int] = ...
    kUnused1: ClassVar[int] = ...
    kViewport2Renderer: ClassVar[int] = ...
    kWireFrame: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def active3dView() -> M3dView: ...
    @staticmethod
    def activeAffectedColor() -> MColor: ...
    @staticmethod
    def activeTemplateColor() -> MColor: ...
    @staticmethod
    def applicationShell() -> long: ...
    @staticmethod
    def backgroundColor() -> MColor: ...
    @staticmethod
    def backgroundColorBottom() -> MColor: ...
    @staticmethod
    def backgroundColorTop() -> MColor: ...
    def beginGL(self) -> self: ...
    def beginProjMatrixOverride(self, projectionMatrix) -> self: ...
    def beginSelect(self, buffer=..., size=...) -> self: ...
    @overload
    def beginXorDrawing(self, drawOrthographic=..., disableDepthTesting=..., lineWidth=..., stipplePattern=..., lineColor=...) -> self: ...
    @overload
    def beginXorDrawing(self) -> Any: ...
    def colorAtIndex(self, index, table=...) -> MColor: ...
    def colorMask(self, *args, **kwargs): ...
    def disallowPolygonOffset(self) -> bool: ...
    def display(self) -> long: ...
    @staticmethod
    def displayStatus(path) -> int: ...
    def displayStyle(self) -> int: ...
    def drawText(self, text, position, textPosition=...) -> self: ...
    def endGL(self) -> self: ...
    def endProjMatrixOverride(self) -> self: ...
    def endSelect(self) -> int: ...
    @overload
    def endXorDrawing(self) -> self: ...
    @overload
    def endXorDrawing(self) -> Any: ...
    def filteredObjectList(self) -> MSelectionList: ...
    @staticmethod
    def get3dView(index) -> M3dView: ...
    def getCamera(self) -> MDagPath: ...
    def getColorIndexAndTable(self, *args, **kwargs): ...
    def getLightCount(self, visible=...) -> int: ...
    def getLightIndex(self, lightNumber) -> int: ...
    def getLightPath(self, lightNumber) -> MDagPath: ...
    def getLightingMode(self) -> int: ...
    @staticmethod
    def getM3dViewFromModelEditor(name) -> M3dView: ...
    @staticmethod
    def getM3dViewFromModelPanel(name) -> M3dView: ...
    def getRendererName(self) -> int: ...
    def getScreenPosition(self, *args, **kwargs): ...
    @staticmethod
    def hiliteColor() -> MColor: ...
    def initNames(self) -> self: ...
    @staticmethod
    def isBackgroundGradient() -> bool: ...
    def isLightVisible(self, lightNumber) -> bool: ...
    def isShadeActiveOnly(self) -> bool: ...
    def isVisible(self) -> bool: ...
    @staticmethod
    def leadColor() -> MColor: ...
    @staticmethod
    def liveColor() -> MColor: ...
    def loadName(self, int) -> self: ...
    def modelViewMatrix(self) -> MMatrix: ...
    def multipleDrawEnabled(self) -> bool: ...
    def multipleDrawPassCount(self) -> int: ...
    def numActiveColors(self) -> int: ...
    def numDormantColors(self) -> int: ...
    def numUserDefinedColors(self) -> int: ...
    @staticmethod
    def numberOf3dViews() -> int: ...
    def objectDisplay(self) -> int: ...
    def objectListFilterName(self) -> string: ...
    def playblastPortHeight(self) -> int: ...
    def playblastPortWidth(self) -> int: ...
    def pluginObjectDisplay(self, pluginDisplayFilter) -> bool: ...
    def popName(self) -> self: ...
    def popViewport(self) -> self: ...
    def portHeight(self) -> int: ...
    def portWidth(self) -> int: ...
    def projectionMatrix(self) -> MMatrix: ...
    def pushName(self, int) -> self: ...
    def pushViewport(self, x, y, width, height) -> self: ...
    def readBufferTo2dTexture(self, x, y, width, height) -> self: ...
    def readColorBuffer(self, image, readRGBA=...) -> self: ...
    def readDepthMap(self, x, y, width, heigth, bufferPtr, depthMapPrecision) -> self: ...
    @staticmethod
    def referenceLayerColor() -> MColor: ...
    def refresh(self, all=..., force=..., offscreen=...) -> self: ...
    def renderOverrideName(self) -> string: ...
    def rendererString(self) -> string: ...
    def scheduleRefresh(self) -> self: ...
    @staticmethod
    def scheduleRefreshAllViews() -> None: ...
    def selectMode(self) -> bool: ...
    def setCamera(self, camera) -> self: ...
    def setColorMask(self, r, g, b, a) -> self: ...
    def setDisallowPolygonOffset(self, v) -> self: ...
    def setDisplayStyle(self, style, activeOnly=...) -> self: ...
    @overload
    def setDrawColor(self, index, table=...) -> self: ...
    @overload
    def setDrawColor(self, color) -> self: ...
    def setDrawColorAndAlpha(self, color) -> self: ...
    def setMultipleDrawEnable(self, enable) -> self: ...
    def setMultipleDrawPassCount(self, count) -> self: ...
    def setObjectDisplay(self, displayMask) -> self: ...
    def setObjectListFilterName(self, name) -> self: ...
    def setPluginObjectDisplay(self, pluginDisplayFilter, on) -> self: ...
    def setRenderOverrideName(self, name) -> self: ...
    def setShowObjectFilterNameInHUD(self, show) -> self: ...
    def setShowViewSelectedChildren(self, show) -> self: ...
    def setUserDefinedColor(self, index, color) -> self: ...
    def setViewSelectedPrefix(self, prefix) -> self: ...
    def showObjectFilterNameInHUD(self) -> bool: ...
    def showViewSelectedChildren(self) -> bool: ...
    @staticmethod
    def templateColor() -> MColor: ...
    def textureMode(self) -> bool: ...
    def twoSidedLighting(self) -> bool: ...
    def updateViewingParameters(self) -> self: ...
    def userDefinedColorIndex(self, index) -> int: ...
    def usingDefaultMaterial(self) -> bool: ...
    def usingMipmappedTextures(self) -> bool: ...
    def viewIsFiltered(self) -> bool: ...
    def viewSelectedPrefix(self) -> string: ...
    def viewToObjectSpace(self, x_pos, y_pos, localMatrixInverse, oPt, oVector) -> self: ...
    @overload
    def viewToWorld(self, x_pos, y_pos, worldPt, worldVector) -> self: ...
    @overload
    def viewToWorld(self, x_pos, y_pos, nearClipPt, farClipPt) -> self: ...
    def viewport(self, *args, **kwargs): ...
    def widget(self) -> long: ...
    def window(self) -> long: ...
    def wireframeOnShaded(self) -> bool: ...
    def wireframeOnlyInShadedMode(self) -> bool: ...
    def worldToView(self, *args, **kwargs): ...
    def writeColorBuffer(self, image, x=..., y=...) -> self: ...
    def xray(self) -> bool: ...
    def xrayJoints(self) -> bool: ...

class MCursor:
    kCrossHairCursor: ClassVar[MCursor] = ...
    kDefaultCursor: ClassVar[MCursor] = ...
    kDoubleCrossHairCursor: ClassVar[MCursor] = ...
    kEditCursor: ClassVar[MCursor] = ...
    kHandCursor: ClassVar[MCursor] = ...
    kPencilCursor: ClassVar[MCursor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class MDrawData:
    def __init__(self, *args, **kwargs) -> None: ...
    def geometry(self) -> long: ...

class MDrawInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def canDrawComponent(self, isDisplayOn, compMask) -> bool: ...
    def completelyInside(self) -> bool: ...
    @overload
    def displayStatus(self) -> int: ...
    @overload
    def displayStatus(self) -> Any: ...
    @overload
    def displayStyle(self) -> int: ...
    @overload
    def displayStyle(self) -> Any: ...
    def getPrototype(self, drawHandler) -> MDrawRequest: ...
    def inSelect(self) -> bool: ...
    def inUserInteraction(self) -> bool: ...
    def inclusiveMatrix(self) -> MMatrix: ...
    def multiPath(self) -> MDagPath: ...
    def objectDisplayStatus(self, displayObj) -> bool: ...
    def pluginObjectDisplayStatus(self, pluginDisplayFilter) -> bool: ...
    def projectionMatrix(self) -> MMatrix: ...
    def setMultiPath(self, path) -> self: ...
    def userChangingViewContext(self) -> bool: ...
    def view(self) -> M3dView: ...

class MDrawProperties:
    color: Incomplete
    lineStyle: Incomplete
    lineWidth: Incomplete
    pointSize: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MDrawRequest:
    color: Incomplete
    component: Incomplete
    displayCullOpposite: Incomplete
    displayCulling: Incomplete
    displayStatus: Any
    displayStyle: Any
    drawData: Incomplete
    drawLast: Incomplete
    isTransparent: Incomplete
    material: Incomplete
    matrix: Incomplete
    multiPath: Incomplete
    token: Incomplete
    view: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def planeColor(self, table) -> int: ...
    def setPlaneColor(self, value, table) -> self: ...

class MEvent:
    controlKey: ClassVar[int] = ...
    kLeftMouse: ClassVar[int] = ...
    kMiddleMouse: ClassVar[int] = ...
    shiftKey: ClassVar[int] = ...
    modifiers: Incomplete
    position: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getWindowPosition(self, *args, **kwargs): ...
    def isModifierControl(self) -> bool: ...
    def isModifierKeyRelease(self) -> bool: ...
    def isModifierLeftMouseButton(self) -> bool: ...
    def isModifierMiddleMouseButton(self) -> bool: ...
    def isModifierNone(self) -> bool: ...
    def isModifierShift(self) -> bool: ...
    def mouseButton(self) -> mouseButtonType: ...

class MFnCircleSweepManip(MFnManip3D):
    endPoint: Incomplete
    startPoint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleIndex(self) -> int: ...
    def axisIndex(self) -> int: ...
    def centerIndex(self) -> int: ...
    def connectToAnglePlug(self, anglePlug) -> self: ...
    def create(self, manipName=..., angleName=...) -> MObject: ...
    def endCircleIndex(self) -> int: ...
    def setAngle(self, angle) -> self: ...
    def setCenterPoint(self, centerPoint) -> self: ...
    def setDrawAsArc(self, state) -> self: ...
    def setNormal(self, normal) -> self: ...
    def setRadius(self, radius) -> self: ...
    def startCircleIndex(self) -> int: ...

class MFnCurveSegmentManip(MFnManip3D):
    endParameter: Incomplete
    startParameter: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToCurvePlug(self, curvePlug) -> self: ...
    def connectToEndParamPlug(self, endParamPlug) -> self: ...
    def connectToStartParamPlug(self, startParamPlug) -> self: ...
    def create(self, manipName=..., startParamName=..., endParamName=...) -> MObject: ...
    def curveIndex(self) -> int: ...
    def endParamIndex(self) -> int: ...
    def startParamIndex(self) -> int: ...

class MFnDirectionManip(MFnManip3D):
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToDirectionPlug(self, directionPlug) -> self: ...
    def create(self, manipName=..., directionName=...) -> MObject: ...
    def directionIndex(self) -> int: ...
    def endPointIndex(self) -> int: ...
    def setDirection(self, direction) -> self: ...
    def setDrawStart(self, bool) -> self: ...
    def setNormalizeDirection(self, bool) -> self: ...
    def setStartPoint(self, startPoint) -> self: ...
    def startPointIndex(self) -> int: ...

class MFnDiscManip(MFnManip3D):
    def __init__(self, *args, **kwargs) -> None: ...
    def angleIndex(self) -> int: ...
    def axisIndex(self) -> int: ...
    def centerIndex(self) -> int: ...
    def connectToAnglePlug(self, directionPlug) -> self: ...
    def create(self, manipName=..., angleName=...) -> MObject: ...
    def setAngle(self, angle) -> self: ...
    def setCenterPoint(self, centerPoint) -> self: ...
    def setNormal(self, normal) -> self: ...
    def setRadius(self, radius) -> self: ...

class MFnDistanceManip(MFnManip3D):
    isDrawLineOn: Incomplete
    isDrawStartOn: Incomplete
    scalingFactor: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToDistancePlug(self, directionPlug) -> self: ...
    def create(self, manipName=..., distanceName=...) -> MObject: ...
    def currentPointIndex(self) -> int: ...
    def directionIndex(self) -> int: ...
    def distanceIndex(self) -> int: ...
    def setDirection(self, direction) -> self: ...
    def setStartPoint(self, startPoint) -> self: ...
    def startPointIndex(self) -> int: ...

class MFnFreePointTriadManip(MFnManip3D):
    kViewPlane: ClassVar[int] = ...
    kXYPlane: ClassVar[int] = ...
    kXZPlane: ClassVar[int] = ...
    kYZPlane: ClassVar[int] = ...
    isDrawAxesOn: Incomplete
    isKeyframeAllOn: Incomplete
    isSnapModeOn: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToPointPlug(self, pointPlug) -> self: ...
    def create(self, manipName=..., pointName=...) -> MObject: ...
    def pointIndex(self) -> int: ...
    def setDirection(self, direction) -> self: ...
    def setDrawArrowHead(self, state) -> self: ...
    def setGlobalTriadPlane(self, whichPlane) -> self: ...
    def setPoint(self, pointValue) -> self: ...

class MFnManip3D(MFnTransform):
    isOptimizePlaybackOn: Incomplete
    isVisible: Incomplete
    manipScale: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def deleteManipulator(manip) -> None: ...
    @staticmethod
    def drawPlaneHandles() -> bool: ...
    @staticmethod
    def globalSize() -> float: ...
    @staticmethod
    def handleSize() -> float: ...
    @staticmethod
    def lineSize() -> float: ...
    def rotateXYZValue(self, valIndex) -> MEulerRotation: ...
    @staticmethod
    def setDrawPlaneHandles(bool) -> None: ...
    @staticmethod
    def setGlobalSize(float) -> None: ...
    @staticmethod
    def setHandleSize(float) -> None: ...
    @staticmethod
    def setLineSize(float) -> None: ...

class MFnPointOnCurveManip(MFnManip3D):
    isDrawCurveOn: Incomplete
    parameter: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToCurvePlug(self, curvePlug) -> self: ...
    def connectToParamPlug(self, paramPlug) -> self: ...
    def create(self, manipName=..., paramName=...) -> MObject: ...
    def curveIndex(self) -> int: ...
    def curvePoint(self) -> MPoint: ...
    def paramIndex(self) -> int: ...

class MFnPointOnSurfaceManip(MFnManip3D):
    isDrawSurfaceOn: Incomplete
    uParam: Incomplete
    vParam: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToParamPlug(self, paramPlug) -> self: ...
    def connectToSurfacePlug(self, surfacePlug) -> self: ...
    def create(self, manipName=..., paramName=...) -> MObject: ...
    def paramIndex(self) -> int: ...
    def setDrawArrows(self, state) -> self: ...
    def surfaceIndex(self) -> int: ...

class MFnRotateManip(MFnManip3D):
    kGimbal: ClassVar[int] = ...
    kObjectSpace: ClassVar[int] = ...
    kWorldSpace: ClassVar[int] = ...
    isSnapModeOn: Incomplete
    rotateMode: Incomplete
    snapIncrement: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToRotationCenterPlug(self, rotationCenterPlug) -> self: ...
    def connectToRotationPlug(self, rotationPlug) -> self: ...
    def create(self, manipName=..., rotationName=...) -> MObject: ...
    def displayWithNode(self, node) -> self: ...
    def rotationCenterIndex(self) -> int: ...
    def rotationIndex(self) -> int: ...
    def setInitialRotation(self, rotation) -> self: ...
    def setRotationCenter(self, rotationCenter) -> self: ...

class MFnScaleManip(MFnManip3D):
    kArbitraryOrientation: ClassVar[int] = ...
    kDefaultOrientation: ClassVar[int] = ...
    isSnapModeOn: Incomplete
    orientation: Incomplete
    orientationMode: Incomplete
    snapIncrement: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToScaleCenterPlug(self, scaleCenterPlug) -> self: ...
    def connectToScalePlug(self, scalePlug) -> self: ...
    def create(self, manipName=..., scaleName=...) -> MObject: ...
    def displayWithNode(self, node) -> self: ...
    def scaleCenterIndex(self) -> int: ...
    def scaleIndex(self) -> int: ...
    def setInitialScale(self, scale) -> self: ...

class MFnStateManip(MFnManip3D):
    maxStates: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToStatePlug(self, statePlug) -> self: ...
    def create(self, manipName=..., stateName=...) -> MObject: ...
    def positionIndex(self) -> int: ...
    def setInitialState(self, initialState) -> self: ...
    def state(self) -> int: ...
    def stateIndex(self) -> int: ...

class MFnToggleManip(MFnManip3D):
    direction: Incomplete
    length: Incomplete
    startPoint: Incomplete
    toggle: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def connectToTogglePlug(self, togglePlug) -> self: ...
    def create(self, manipName=..., toggleName=...) -> MObject: ...
    def directionIndex(self) -> int: ...
    def lengthIndex(self) -> int: ...
    def startPointIndex(self) -> int: ...
    def toggleIndex(self) -> int: ...

class MHWShaderSwatchGenerator(MSwatchRenderBase):
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def createObj(obj, renderObj, res) -> MSwatchRenderBase: ...
    def doIteration(self) -> bool: ...
    @staticmethod
    def getSwatchBackgroundColor() -> MColor: ...
    @staticmethod
    def initialize() -> string: ...

class MManipData:
    def __init__(self, *args, **kwargs) -> None: ...
    def asBool(self) -> bool: ...
    def asDouble(self) -> float: ...
    def asFloat(self) -> float: ...
    def asLong(self) -> int: ...
    def asMObject(self) -> int: ...
    def asShort(self) -> int: ...
    def asUnsigned(self) -> int: ...
    def isSimple(self) -> bool: ...

class MMaterial:
    kAmbientColor: ClassVar[int] = ...
    kBumpMap: ClassVar[int] = ...
    kColor: ClassVar[int] = ...
    kCosinePower: ClassVar[int] = ...
    kDiffuse: ClassVar[int] = ...
    kEccentricity: ClassVar[int] = ...
    kHighlightSize: ClassVar[int] = ...
    kIncandescence: ClassVar[int] = ...
    kReflectedColor: ClassVar[int] = ...
    kReflectivity: ClassVar[int] = ...
    kRoughness: ClassVar[int] = ...
    kSpecularColor: ClassVar[int] = ...
    kSpecularRollOff: ClassVar[int] = ...
    kTransluscence: ClassVar[int] = ...
    kTransparency: ClassVar[int] = ...
    kWhiteness: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def applyTexture(self, view, data) -> self: ...
    @staticmethod
    def defaultMaterial() -> MMaterial: ...
    def evaluateDiffuse(self) -> self: ...
    def evaluateEmission(self) -> self: ...
    def evaluateMaterial(self, view, path) -> self: ...
    def evaluateShininess(self) -> self: ...
    def evaluateSpecular(self) -> self: ...
    def evaluateTexture(self, data) -> self: ...
    def getDiffuse(self) -> MColor: ...
    def getEmission(self) -> MColor: ...
    def getHasTransparency(self) -> bool: ...
    def getHwShaderNode(self) -> MPxHwShaderNode: ...
    def getShininess(self) -> float: ...
    def getSpecular(self) -> MColor: ...
    def getTextureTransformation(self, data, texXform) -> self: ...
    def materialIsTextured(self) -> bool: ...
    def setMaterial(self, path, hasTransparency) -> self: ...
    def shadingEngine(self) -> MObject: ...
    def textureImage(self, image, color, chan, dagPath, xRes=..., yRes=...) -> self: ...

class MMaterialArray:
    sizeIncrement: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, element) -> self: ...
    def clear(self) -> self: ...
    def copy(self, source) -> self: ...
    def insert(self, element, index) -> self: ...
    def remove(self, index) -> self: ...
    def set(self, element, index) -> self: ...
    def setLength(self, length) -> self: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class MPaintMessage(MMessage):
    @staticmethod
    def addVertexColorCallback(function, clientData=...) -> id: ...

class MPanelCanvas:
    kGraphEditorAxisLabels: ClassVar[int] = ...
    kGraphEditorBackground: ClassVar[int] = ...
    kGraphEditorCurveNames: ClassVar[int] = ...
    kGraphEditorCurves: ClassVar[int] = ...
    kGraphEditorFirstDefaultDraw: ClassVar[int] = ...
    kGraphEditorGrid: ClassVar[int] = ...
    kGraphEditorLastDefaultDraw: ClassVar[int] = ...
    kGraphEditorOverlayTexture: ClassVar[int] = ...
    kGraphEditorRetimeToolText: ClassVar[int] = ...
    kGraphEditorTimeMarker: ClassVar[int] = ...
    kGraphEditorUndefined: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addPrimitive(self, *args, **kwargs): ...
    def createFloatVertexBuffer(self, tVals, yVals, colors) -> int: ...
    def createPrimitive(self, primType, bufferId, startIndex, numVertices, props) -> int: ...
    def createTimeVertexBuffer(self, tVals, yVals, colors) -> int: ...
    def destroyPrimitive(self, primitiveId) -> Any: ...
    def destroyVertexBuffer(self, bufferId) -> Any: ...
    def isAutoRefresh(self) -> bool: ...
    def isLayerVisible(self, int) -> bool: ...
    def isValid(self) -> bool: ...
    def refresh(self) -> Any: ...
    def registerDrawUICallback(self, layer, cb, clientData) -> callbackId: ...
    def removePrimitive(self, *args, **kwargs): ...
    def setAutoRefresh(self) -> Any: ...
    def setLayerVisible(self, int, bool) -> Any: ...
    def supportsUIDrawing(self) -> bool: ...
    def unregisterDrawUICallback(self, callbackId) -> Any: ...

class MPanelCanvasInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def getViewportBounds(self) -> Any: ...
    def getViewportSize(self) -> Any: ...
    def name(self) -> MString: ...
    def setViewportBounds(self, bounds) -> Any: ...
    def supportsUIDrawing(self) -> bool: ...

class MPxContext:
    kImage1: ClassVar[int] = ...
    kImage2: ClassVar[int] = ...
    kImage3: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def abortAction(self) -> None: ...
    def addManipulator(self, manipulator) -> None: ...
    def argTypeNumericalInput(self, index) -> MSyntax.MArgType: ...
    def beginMarquee(self, event) -> self: ...
    def completeAction(self) -> None: ...
    def deleteAction(self) -> None: ...
    def deleteManipulators(self) -> None: ...
    def doDrag(self, event, drawMgr, context) -> None: ...
    def doDragLegacy(self, event) -> None: ...
    def doEnterRegion(self, event) -> None: ...
    def doExitRegion(self, event) -> None: ...
    def doHold(self, event, drawMgr, context) -> None: ...
    def doHoldLegacy(self, event) -> None: ...
    def doPress(self, event, drawMgr, context) -> None: ...
    def doPressLegacy(self, event) -> None: ...
    def doPtrMoved(self, event, drawMgr, context) -> None: ...
    def doPtrMovedLegacy(self, event) -> None: ...
    def doRelease(self, event, drawMgr, context) -> None: ...
    def doReleaseLegacy(self, event) -> None: ...
    def dragMarquee(self, event) -> self: ...
    def drawFeedback(self, event, drawMgr, context) -> None: ...
    def feedbackNumericalInput(self) -> bool: ...
    def helpStateHasChanged(self, event) -> None: ...
    def image(self, index) -> string: ...
    def inAlternateContext(self) -> bool: ...
    def newToolCommand(self) -> MPxToolCommand: ...
    def processNumericalInput(self, values, flags, isAbsolute) -> bool: ...
    def releaseMarquee(self, *args, **kwargs): ...
    def setCursor(self, newCursor) -> self: ...
    def setHelpString(self, str) -> self: ...
    def setImage(self, image, index) -> self: ...
    def setTitleString(self, str) -> self: ...
    @overload
    def stringClassName(self) -> string: ...
    @overload
    def stringClassName(self) -> Any: ...
    def toolOffCleanup(self) -> None: ...
    def toolOnSetup(self, event) -> None: ...

class MPxContextCommand:
    def __init__(self, *args, **kwargs) -> None: ...
    def appendSyntax(self) -> None: ...
    def doEditFlags(self) -> None: ...
    def doQueryFlags(self) -> None: ...
    @overload
    def makeObj(self) -> MPxContext: ...
    @overload
    def makeObj(self) -> Any: ...
    def parser(self, *args, **kwargs): ...
    def setResult(self) -> None: ...
    def syntax(self, *args, **kwargs): ...

class MPxDragAndDropBehavior:
    def __init__(self, *args, **kwargs) -> None: ...
    def connectAttrToAttr(self, sourcePlug, destinationPlug, force) -> None: ...
    def connectAttrToNode(self, sourcePlug, destinationNode, force) -> None: ...
    def connectNodeToAttr(self, sourceNode, destinationPlug, force) -> None: ...
    def connectNodeToNode(self, sourceNode, destinationNode, force) -> None: ...
    def shouldBeUsedFor(self, sourceNode, destinationNode, sourcePlug, destinationPlug) -> bool: ...

class MPxHardwareShader(MPxNode):
    kIsTransparent: ClassVar[int] = ...
    kNoTransparencyFrontBackCull: ClassVar[int] = ...
    kNoTransparencyPolygonSort: ClassVar[int] = ...
    outColor: ClassVar[MObject] = ...
    outColorB: ClassVar[MObject] = ...
    outColorG: ClassVar[MObject] = ...
    outColorR: ClassVar[MObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def findResource(name, shaderPath) -> string: ...
    def getAvailableImages(self, *args, **kwargs): ...
    @staticmethod
    def getHardwareShader(object) -> TODO: ...
    def profile(self) -> MRenderProfile: ...
    def renderImage(self, *args, **kwargs): ...
    def renderSwatchImage(self, image) -> self: ...
    def setUniformParameters(self, parameters, remapCurrentValues=..., dagModifier=...) -> self: ...
    def setVaryingParameters(self, parameters, remapCurrentValues=..., dagModifier=...) -> self: ...
    def transparencyOptions(self) -> int: ...

class MPxHwShaderNode(MPxNode):
    kDirtyAll: ClassVar[int] = ...
    kDirtyColorArrays: ClassVar[int] = ...
    kDirtyNone: ClassVar[int] = ...
    kDirtyNormalArray: ClassVar[int] = ...
    kDirtyTexCoordArrays: ClassVar[int] = ...
    kDirtyVertexArray: ClassVar[int] = ...
    kIsTransparent: ClassVar[int] = ...
    kNoTransparencyFrontBackCull: ClassVar[int] = ...
    kNoTransparencyPolygonSort: ClassVar[int] = ...
    kWriteAll: ClassVar[int] = ...
    kWriteColorArrays: ClassVar[int] = ...
    kWriteNone: ClassVar[int] = ...
    kWriteNormalArray: ClassVar[int] = ...
    kWriteTexCoordArrays: ClassVar[int] = ...
    kWriteVertexArray: ClassVar[int] = ...
    outColor: ClassVar[MObject] = ...
    outColorB: ClassVar[MObject] = ...
    outColorG: ClassVar[MObject] = ...
    outColorR: ClassVar[MObject] = ...
    outGlowColor: ClassVar[MObject] = ...
    outGlowColorB: ClassVar[MObject] = ...
    outGlowColorG: ClassVar[MObject] = ...
    outGlowColorR: ClassVar[MObject] = ...
    outMatteOpacity: ClassVar[MObject] = ...
    outMatteOpacityB: ClassVar[MObject] = ...
    outMatteOpacityG: ClassVar[MObject] = ...
    outMatteOpacityR: ClassVar[MObject] = ...
    outTransparency: ClassVar[MObject] = ...
    outTransparencyB: ClassVar[MObject] = ...
    outTransparencyG: ClassVar[MObject] = ...
    outTransparencyR: ClassVar[MObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bind(self, request, view) -> self: ...
    @overload
    def colorsPerVertex(self) -> int: ...
    @overload
    def colorsPerVertex(self) -> Any: ...
    def currentPath(self) -> MDagPath: ...
    def currentShadingEngine(self) -> MObject: ...
    def dirtyMask(self) -> int: ...
    def geometry(self, request, view, prim, writable, indexCount, indexArray, vertexCount, vertexIDs, vertexArray, normalCount, normalArrays, colorCount, colorArrays, texCoordCount, texCoordArrays) -> self: ...
    def getAvailableImages(self, *args, **kwargs): ...
    def getColorSetNames(self, names) -> int: ...
    @staticmethod
    def getHwShaderNode(object) -> MPxHwShaderNode: ...
    def getTexCoordSetNames(self, names) -> int: ...
    def glBind(self, shapePath) -> self: ...
    def glGeometry(self, shapePath, prim, writable, indexCount, indexArray, vertexCount, vertexIDs, vertexArray, normalCount, normalArrays, colorCount, colorArrays, texCoordCount, texCoordArrays) -> self: ...
    def glUnbind(self, shapePath) -> self: ...
    def hasTransparency(self) -> bool: ...
    def invertTexCoords(self) -> bool: ...
    @overload
    def normalsPerVertex(self) -> int: ...
    @overload
    def normalsPerVertex(self) -> Any: ...
    def provideVertexIDs(self) -> bool: ...
    def renderImage(self, *args, **kwargs): ...
    def renderSwatchImage(self, *args, **kwargs): ...
    def supportsBatching(self) -> bool: ...
    @overload
    def texCoordsPerVertex(self) -> int: ...
    @overload
    def texCoordsPerVertex(self) -> Any: ...
    def transparencyOptions(self) -> int: ...
    def unbind(self, request, view) -> self: ...

class MPxLocatorNode(MPxNode):
    boundingBoxCenterX: ClassVar[MObject] = ...
    boundingBoxCenterY: ClassVar[MObject] = ...
    boundingBoxCenterZ: ClassVar[MObject] = ...
    center: ClassVar[MObject] = ...
    instObjGroups: ClassVar[MObject] = ...
    intermediateObject: ClassVar[MObject] = ...
    inverseMatrix: ClassVar[MObject] = ...
    isTemplated: ClassVar[MObject] = ...
    localPosition: ClassVar[MObject] = ...
    localPositionX: ClassVar[MObject] = ...
    localPositionY: ClassVar[MObject] = ...
    localPositionZ: ClassVar[MObject] = ...
    localScale: ClassVar[MObject] = ...
    localScaleX: ClassVar[MObject] = ...
    localScaleY: ClassVar[MObject] = ...
    localScaleZ: ClassVar[MObject] = ...
    matrix: ClassVar[MObject] = ...
    nodeBoundingBox: ClassVar[MObject] = ...
    nodeBoundingBoxMax: ClassVar[MObject] = ...
    nodeBoundingBoxMaxX: ClassVar[MObject] = ...
    nodeBoundingBoxMaxY: ClassVar[MObject] = ...
    nodeBoundingBoxMaxZ: ClassVar[MObject] = ...
    nodeBoundingBoxMin: ClassVar[MObject] = ...
    nodeBoundingBoxMinX: ClassVar[MObject] = ...
    nodeBoundingBoxMinY: ClassVar[MObject] = ...
    nodeBoundingBoxMinZ: ClassVar[MObject] = ...
    nodeBoundingBoxSize: ClassVar[MObject] = ...
    nodeBoundingBoxSizeX: ClassVar[MObject] = ...
    nodeBoundingBoxSizeY: ClassVar[MObject] = ...
    nodeBoundingBoxSizeZ: ClassVar[MObject] = ...
    objectColor: ClassVar[MObject] = ...
    objectGroupColor: ClassVar[MObject] = ...
    objectGroupId: ClassVar[MObject] = ...
    objectGroups: ClassVar[MObject] = ...
    objectGrpCompList: ClassVar[MObject] = ...
    parentInverseMatrix: ClassVar[MObject] = ...
    parentMatrix: ClassVar[MObject] = ...
    underWorldObject: ClassVar[MObject] = ...
    useObjectColor: ClassVar[MObject] = ...
    visibility: ClassVar[MObject] = ...
    worldInverseMatrix: ClassVar[MObject] = ...
    worldMatrix: ClassVar[MObject] = ...
    worldPosition: ClassVar[MObject] = ...
    worldPositionX: ClassVar[MObject] = ...
    worldPositionY: ClassVar[MObject] = ...
    worldPositionZ: ClassVar[MObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def boundingBox(self) -> MBoundingBox: ...
    def closestPoint(self, rayPoint, rayDir) -> MPoint: ...
    def color(self, status) -> int: ...
    def colorRGB(self, status) -> MColor: ...
    def draw(self, view, path, style, status) -> self: ...
    def drawLast(self) -> bool: ...
    def excludeAsLocator(self) -> bool: ...
    def getShapeSelectionMask(self) -> MSelectionMask: ...
    def isBounded(self) -> bool: ...
    def isTransparent(self) -> bool: ...
    def useClosestPointForSelection(self) -> bool: ...

class MPxManipContainer(MPxNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def addCircleSweepManip(self, manipName, angleName) -> MDagPath: ...
    def addCurveSegmentManip(self, manipName, startParamName, endParamName) -> MDagPath: ...
    def addDirectionManip(self, manipName, directionName) -> MDagPath: ...
    def addDiscManip(self, manipName, angleName) -> MDagPath: ...
    def addDistanceManip(self, manipName, distanceName) -> MDagPath: ...
    def addFreePointTriadManip(self, manipName, pointName) -> MDagPath: ...
    def addMPxManipulatorNode(self, manipTypeName, manipName, proxyManip) -> None: ...
    @overload
    def addManipToPlugConversion(self, plug) -> unsignedint: ...
    @overload
    def addManipToPlugConversion(self) -> Any: ...
    @overload
    def addManipToPlugConversion(self) -> Any: ...
    def addPlugToInViewEditor(self, plug) -> Any: ...
    def addPlugToManipConversion(self, manipIndex) -> Any: ...
    def addPointOnCurveManip(self, manipName, paramName) -> MDagPath: ...
    def addPointOnSurfaceManip(self, manipName, paramName) -> MDagPath: ...
    def addRotateManip(self, manipName, rotationName) -> MDagPath: ...
    def addScaleManip(self, manipName, scaleName) -> MDagPath: ...
    def addStateManip(self, manipName, stateName) -> MDagPath: ...
    @staticmethod
    def addToManipConnectTable(typeId) -> Any: ...
    def addToggleManip(self, manipName, toggleName) -> MDagPath: ...
    def connectToDependNode(self, node) -> None: ...
    def createChildren(self) -> None: ...
    def doDrag(self) -> None: ...
    def doPress(self) -> None: ...
    def doRelease(self) -> None: ...
    def draw(self, view, path, style, status) -> None: ...
    def drawUI(self, drawManager, frameContext) -> None: ...
    def finishAddingManips(self) -> Any: ...
    def getConverterManipDoubleValue(self) -> double: ...
    def getConverterManipMEulerRotationValue(self) -> MEulereRotation: ...
    def getConverterManipMMatrixValue(self) -> MMatrix: ...
    def getConverterManipMPointValue(self) -> MPoint: ...
    def getConverterManipMTransformationMatrixValue(self) -> MTransformationMatrix: ...
    def getConverterManipMVectorValue(self) -> MVector: ...
    def getConverterManipUIntValue(self) -> unsignedint: ...
    def getConverterManipValues(self, *args, **kwargs): ...
    def getConverterPlugDoubleValue(self) -> double: ...
    def getConverterPlugMEulerRotationValue(self) -> MEulerRotation: ...
    def getConverterPlugMMatrixValue(self) -> MMatrix: ...
    def getConverterPlugMPointValue(self) -> MPoint: ...
    def getConverterPlugMVectorValue(self) -> MVector: ...
    def getConverterPlugValues(self, *args, **kwargs): ...
    @staticmethod
    def initialize() -> None: ...
    def isManipActive(self, manipName, stateName) -> MDagPath: ...
    def manipToPlugConversion(self, manipIndex) -> MManipData: ...
    @staticmethod
    def newManipulator(*args, **kwargs): ...
    def plugToManipConversion(self, manipIndex) -> MManipData: ...
    def preDrawUI(self, view) -> None: ...
    @staticmethod
    def removeFromManipConnectTable(typeId) -> Any: ...

class MPxManipulatorNode(MPxNode):
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def addDependentPlug(self, plug) -> None: ...
    @overload
    def addDependentPlug(self) -> Any: ...
    @overload
    def addDependentPlug(self) -> Any: ...
    def addDoubleValue(self, valueName, defaultValue) -> int: ...
    def addPointValue(self, valueName, defaultValue) -> int: ...
    def addVectorValue(self, valueName, defaultValue) -> int: ...
    def colorAndName(self, view, glName, glNameIsPickable, colorIndex) -> None: ...
    def connectPlugToValue(self, plug, valueIndex) -> int: ...
    def connectToDependNode(self, node) -> None: ...
    def dependentPlugsReset(self) -> None: ...
    def deregisterForMouseMove(self) -> None: ...
    def dimmedColor(self) -> half: ...
    def doDrag(self, view) -> None: ...
    def doMove(self, view, refresh) -> None: ...
    def doPress(self, view) -> None: ...
    def doRelease(self, view) -> None: ...
    def draw(self, view, path, style, status) -> None: ...
    def drawUI(self, drawManager, frameContext) -> None: ...
    def finishAddingManips(self) -> None: ...
    def getDoubleValue(self, valueIndex, previousValue) -> float: ...
    def getPointValue(self, valueIndex, previousValue) -> MPoint: ...
    def getVectorValue(self, valueIndex, previousValue) -> float: ...
    def glActiveName(self) -> MGLuint: ...
    def glFirstHandle(self) -> MGLuint: ...
    def labelBackgroundColor(self) -> half: ...
    def labelColor(self) -> half: ...
    def lineColor(self) -> half: ...
    def mainColor(self) -> half: ...
    def mouseDown(self, *args, **kwargs): ...
    def mousePosition(self, *args, **kwargs): ...
    def mouseRay(self, *args, **kwargs): ...
    def mouseRayWorld(self, *args, **kwargs): ...
    def mouseUp(self, *args, **kwargs): ...
    @staticmethod
    def newManipulator(*args, **kwargs): ...
    def preDrawUI(self, view) -> None: ...
    def prevColor(self) -> half: ...
    def registerForMouseMove(self) -> None: ...
    def selectedColor(self) -> half: ...
    def setDoubleValue(self, valueIndex, value) -> None: ...
    def setHandleColor(self, drawManager, handleName, colorIndex) -> None: ...
    def setPointValue(self, valueIndex, value) -> None: ...
    def setVectorValue(self, valueIndex, value) -> None: ...
    def shouldDrawHandleAsSelected(self, name) -> bool: ...
    def xColor(self) -> half: ...
    def yColor(self) -> half: ...
    def zColor(self) -> half: ...

class MPxSelectionContext(MPxContext):
    def __init__(self, *args, **kwargs) -> None: ...
    def abortAction(self) -> None: ...
    def addManipulator(self, manipulator) -> None: ...
    def argTypeNumericalInput(self, index) -> MSyntax.MArgType: ...
    def deleteManipulators(self) -> None: ...
    def doDrag(self, event, drawManager, frameContext) -> None: ...
    def doDragLegacy(self, event) -> None: ...
    def doHold(self, event, drawManager, frameContext) -> None: ...
    def doHoldLegacy(self, event) -> None: ...
    def doPress(self, event, drawManager, frameContext) -> None: ...
    def doPressLegacy(self, event) -> None: ...
    def doRelease(self, event, drawManager, frameContext) -> None: ...
    def doReleaseLegacy(self, event) -> None: ...
    def feedbackNumericalInput(self) -> bool: ...
    def helpStateHasChanged(self, event) -> None: ...
    def image(self, index) -> string: ...
    def isSelecting(self) -> bool: ...
    def lastDragPoint(self) -> MPoint: ...
    def newToolCommand(self) -> MPxToolCommand: ...
    def processNumericalInput(self, values, flags, isAbsolute) -> bool: ...
    def setAllowDoubleClickAction(self) -> None: ...
    def setAllowPaintSelect(self) -> None: ...
    def setAllowPreSelectHilight(self) -> None: ...
    def setAllowSoftSelect(self) -> None: ...
    def setAllowSymmetry(self) -> None: ...
    def setImage(self, image, index) -> self: ...
    def startPoint(self) -> MPoint: ...

class MPxSurfaceShapeUI:
    kSelectMeshEdges: ClassVar[int] = ...
    kSelectMeshFaces: ClassVar[int] = ...
    kSelectMeshUVs: ClassVar[int] = ...
    kSelectMeshVerts: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def canDrawUV(self) -> bool: ...
    def drawUV(self, view, info) -> self: ...
    def material(self, path) -> MMaterial: ...
    def materials(self, path, componentFilter, materials, componentSet=...) -> self: ...
    def select(self, selectInfo, selectionList, worldSpaceSelectPts) -> bool: ...
    def selectUV(self, view, selType, xmin, ymin, xmax, ymax, singleSelect, selList) -> bool: ...
    def snap(self, snapInfo) -> bool: ...
    def surfaceShape(self) -> MPxSurfaceShape: ...
    @staticmethod
    def surfaceShapeUI(path) -> MPxSurfaceShapeUI: ...

class MPxToolCommand(MPxCommand):
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel(self) -> None: ...
    def doFinalize(self) -> None: ...
    def doIt(self, *args, **kwargs): ...
    def finalize(self) -> None: ...

class MSelectInfo(MDrawInfo):
    highestPriority: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addSelection(self, item, point, list, points, mask, isComponent) -> self: ...
    def getAlignmentMatrix(self) -> MMatrix: ...
    def getLocalRay(self, *args, **kwargs): ...
    def isRay(self) -> bool: ...
    def selectClosest(self) -> bool: ...
    def selectForHilite(self, mask) -> bool: ...
    def selectOnHilitedOnly(self) -> bool: ...
    def selectPath(self) -> MDagPath: ...
    def selectRect(self, *args, **kwargs): ...
    def selectable(self, mask) -> bool: ...
    def selectableComponent(self, displayed, mask) -> bool: ...
    @overload
    def setSnapPoint(self, point) -> bool: ...
    @overload
    def setSnapPoint(self) -> Any: ...
    def singleSelection(self) -> bool: ...
    def view(self) -> M3dView: ...

class MTextureEditorDrawInfo:
    kDrawEdgeForSelect: ClassVar[int] = ...
    kDrawEverything: ClassVar[int] = ...
    kDrawFacetForSelect: ClassVar[int] = ...
    kDrawFunctionFirst: ClassVar[int] = ...
    kDrawFunctionLast: ClassVar[int] = ...
    kDrawUVForSelect: ClassVar[int] = ...
    kDrawVertexForSelect: ClassVar[int] = ...
    kDrawWireframe: ClassVar[int] = ...
    drawingFunction: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MTimeSliderCustomDrawManager:
    kAbove: ClassVar[int] = ...
    kBelow: ClassVar[int] = ...
    kOn: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearDrawPrimitives(self, *args, **kwargs): ...
    def deregisterCustomDraw(self, *args, **kwargs): ...
    def registerCustomDrawOn(self, *args, **kwargs): ...
    def registerCustomDrawOutside(self, *args, **kwargs): ...
    def requestTimeSliderRedraw(self, *args, **kwargs): ...
    def setBackgroundColor(self, *args, **kwargs): ...
    def setDrawHeight(self, *args, **kwargs): ...
    def setDrawLayer(self, *args, **kwargs): ...
    def setDrawLocation(self, *args, **kwargs): ...
    def setDrawPrimitives(self, *args, **kwargs): ...
    def setDrawPriority(self, *args, **kwargs): ...
    def setDrawVisible(self, *args, **kwargs): ...
    def setEditPrimitiveFunction(self, *args, **kwargs): ...
    def setSetCopyPrimitivesFunction(self, *args, **kwargs): ...
    def setStartPrimitiveEditFunction(self, *args, **kwargs): ...
    def setStopPrimitiveEditFunction(self, *args, **kwargs): ...
    def setTooltip(self, *args, **kwargs): ...

class MTimeSliderDrawPrimitive:
    kBracket: ClassVar[int] = ...
    kFilledRect: ClassVar[int] = ...
    kFrameFlag: ClassVar[int] = ...
    kFullOutline: ClassVar[int] = ...
    kMoveEndTime: ClassVar[int] = ...
    kMovePrimitive: ClassVar[int] = ...
    kMoveStartTime: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kUpperOutline: ClassVar[int] = ...
    kVerticalLine: ClassVar[int] = ...
    bottom: Incomplete
    color: Incomplete
    drawType: Incomplete
    endTime: Incomplete
    height: Incomplete
    label: Incomplete
    priority: Incomplete
    startTime: Incomplete
    tooltip: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class MUiMessage(MMessage):
    @staticmethod
    def add3dViewDestroyMsgCallback(panelName, function, clientData=...) -> id: ...
    @staticmethod
    def add3dViewPostRenderMsgCallback(panelName, function, clientData=...) -> id: ...
    @staticmethod
    def add3dViewPreRenderMsgCallback(panelName, function, clientData=...) -> id: ...
    @staticmethod
    def add3dViewRenderOverrideChangedCallback(panelName, function, clientData=...) -> id: ...
    @staticmethod
    def add3dViewRendererChangedCallback(panelName, function, clientData=...) -> id: ...
    @staticmethod
    def addCameraChangedCallback(panelName, function, clientData=...) -> id: ...
    @staticmethod
    def addUiDeletedCallback(uiName, function, clientData=...) -> id: ...

class RenderParameters:
    baseColor: Incomplete
    showAlphaMask: Incomplete
    unfiltered: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class ShaderContext:
    path: Incomplete
    shadingEngine: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
