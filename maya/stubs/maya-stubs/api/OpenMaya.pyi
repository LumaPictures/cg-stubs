import MFnSet  # type: ignore[import-not-found]
import MItDag  # type: ignore[import-not-found]
from _typeshed import Incomplete
from maya.api.OpenMayaAnim import MFnDisplayLayer as MFnDisplayLayer, MFnDisplayLayerManager as MFnDisplayLayerManager  # type: ignore[attr-defined]
from maya.api._OpenMaya_py2 import getStringResource as getStringResource, registerStringResource as registerStringResource, registerStringResources as registerStringResources
from typing import Any, ClassVar, Self, overload  # type: ignore[attr-defined]

ourdict: dict
py2dict: dict
key: str
val: str

class MAngle:
    kInvalid: ClassVar[int] = ...
    kRadians: ClassVar[int] = ...
    kDegrees: ClassVar[int] = ...
    kAngMinutes: ClassVar[int] = ...
    kAngSeconds: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    unit: Incomplete
    value: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def asUnits(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asRadians(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asDegrees(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asAngMinutes(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asAngSeconds(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def uiUnit(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setUIUnit(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def internalUnit(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def internalToUI(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def uiToInternal(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MArgList:
    kInvalidArgIndex: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def addArg(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asAngle(self, index: Incomplete) -> MAngle: ...
    def asBool(self, index: Incomplete) -> bool: ...
    def asDistance(self, index: Incomplete) -> MDistance: ...
    def asDouble(self, index: Incomplete) -> float: ...
    def asDoubleArray(self, index: Incomplete) -> MDoubleArray: ...
    def asFloat(self, index: Incomplete) -> float: ...
    def asInt(self, index: Incomplete) -> int: ...
    def asIntArray(self, index: Incomplete) -> MIntArray: ...
    def asMatrix(self, index: Incomplete) -> MMatrix: ...
    def asPoint(self, index: Incomplete) -> MPoint: ...
    def asString(self, index: Incomplete) -> str: ...
    def asStringArray(self, index: Incomplete) -> listofstrings: ...  # type: ignore[name-defined]
    def asTime(self, index: Incomplete) -> MTime: ...
    def asVector(self, index: Incomplete) -> MVector: ...
    def flagIndex(self, shortFlag: Incomplete, longFlag: Incomplete = ...) -> int: ...
    def lastArgUsed(self) -> int: ...

class MArgParser:
    isEdit: Incomplete
    isQuery: Incomplete
    numberOfFlagsUsed: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def commandArgumentBool(self, argIndex: Incomplete) -> bool: ...
    def commandArgumentDouble(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def commandArgumentFloat(self, argIndex: Incomplete) -> float: ...
    def commandArgumentInt(self, argIndex: Incomplete) -> int: ...
    def commandArgumentMAngle(self, argIndex: Incomplete) -> MAngle: ...
    def commandArgumentMDistance(self, argIndex: Incomplete) -> MDistance: ...
    def commandArgumentMTime(self, argIndex: Incomplete) -> MTime: ...
    def commandArgumentString(self, argIndex: Incomplete) -> str: ...
    def flagArgumentBool(self, flagName: Incomplete, argIndex: Incomplete) -> bool: ...
    def flagArgumentDouble(self, flagName: Incomplete, argIndex: Incomplete) -> float: ...
    def flagArgumentFloat(self, flagName: Incomplete, argIndex: Incomplete) -> float: ...
    def flagArgumentInt(self, flagName: Incomplete, argIndex: Incomplete) -> int: ...
    def flagArgumentMAngle(self, flagName: Incomplete, argIndex: Incomplete) -> MAngle: ...
    def flagArgumentMDistance(self, flagName: Incomplete, argIndex: Incomplete) -> MDistance: ...
    def flagArgumentMTime(self, flagName: Incomplete, argIndex: Incomplete) -> MTime: ...
    def flagArgumentString(self, flagName: Incomplete, argIndex: Incomplete) -> str: ...
    def getFlagArgumentList(self, flagName: Incomplete, occurrence: Incomplete) -> MArgList: ...
    def getFlagArgumentPosition(self, flagName: Incomplete, occurrence: Incomplete) -> int: ...
    def getObjectStrings(self) -> tupleofunicodestrings: ...  # type: ignore[name-defined]
    def isFlagSet(self, flagName: Incomplete) -> bool: ...
    def numberOfFlagUses(self, flagName: Incomplete) -> int: ...

class MArgDatabase(MArgParser):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def commandArgumentMSelectionList(self, argIndex: Incomplete) -> MSelectionList: ...
    def flagArgumentMSelectionList(self, flagName: Incomplete, argIndex: Incomplete) -> MSelectionList: ...
    def getObjectList(self) -> MSelectionList: ...

class MArrayDataBuilder:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def addElement(self, index: int) -> MDataHandle: ...
    def addElementArray(self, index: int) -> MArrayDataHandle: ...
    def addLast(self) -> MDataHandle: ...
    def addLastArray(self) -> MArrayDataHandle: ...
    def copy(self, source: MArrayDataBuilder) -> Self: ...
    def growArray(self, amount: int) -> Self: ...
    def removeElement(self, index: int) -> Self: ...
    def setGrowSize(self, size: int) -> Self: ...

class MArrayDataHandle:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def builder(self) -> MArrayDataBuilder: ...
    def copy(self, source: MArrayDataHandle) -> Self: ...
    def elementLogicalIndex(self) -> int: ...
    def inputArrayValue(self) -> MArrayDataHandle: ...
    def inputValue(self) -> MDataHandle: ...
    def isDone(self) -> bool: ...
    def jumpToPhysicalElement(self, position: int) -> Self: ...
    def jumpToLogicalElement(self, index: int) -> Self: ...
    def next(self) -> bool: ...
    def outputArrayValue(self) -> MArrayDataHandle: ...
    def outputValue(self) -> MDataHandle: ...
    def set(self, builder: MArrayDataBuilder) -> Self: ...
    def setAllClean(self) -> Self: ...
    def setClean(self) -> Self: ...

class MAttributePattern:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def name(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rootAttrCount(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rootAttr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeRootAttr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def addRootAttr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def attrPatternCount(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def attrPattern(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def findPattern(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MAttributeIndex:
    kInteger: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def copy(self, source: MAttributeIndex) -> Self: ...
    def getLower(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUpper(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getValue(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasLowerBound(self) -> bool: ...
    def hasRange(self) -> bool: ...
    def hasUpperBound(self) -> bool: ...
    def hasValidRange(self) -> bool: ...
    def isBounded(self) -> bool: ...
    def setLower(self, value: Incomplete) -> Self: ...
    def setType(self, type: int) -> Self: ...
    def setUpper(self, value: Incomplete) -> Self: ...
    def setValue(self, value: Incomplete) -> Self: ...
    def type(self) -> int: ...

class MAttributeSpec:
    name: Incomplete
    dimensions: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def copy(self, source: MAttributeSpec) -> Self: ...

class MAttributeSpecArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MBoundingBox:
    min: Incomplete
    max: Incomplete
    center: Incomplete
    width: Incomplete
    height: Incomplete
    depth: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def transformUsing(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def expand(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def contains(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def intersects(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MCacheSchema:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def add(self, attribute: MObject) -> Self: ...
    def reset(self) -> Any: ...

class MNodeCacheDisablingInfo:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def setCacheDisabled(self, bool: Incomplete) -> Any: ...
    def getCacheDisabled(self) -> bool: ...
    def setReason(self, reason: Incomplete) -> Any: ...
    def setMitigation(self, mitigation: Incomplete) -> Any: ...
    def reset(self) -> Any: ...

class MNodeCacheSetupInfo:
    kWantToCacheByDefault: ClassVar[int] = ...
    kLastPreference: ClassVar[int] = ...
    kSimulationSupport: ClassVar[int] = ...
    kLastRequirement: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def getPreference(self, PreferenceFlag: Incomplete) -> bool: ...
    def setPreference(self, PreferenceFlag: Incomplete, bool: Incomplete) -> Any: ...
    def getRequirement(self, RequirementFlag: Incomplete) -> bool: ...
    def setRequirement(self, RequirementFlag: Incomplete, bool: Incomplete) -> Any: ...

class MCallbackIdArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MColor:
    kRGB: ClassVar[int] = ...
    kHSV: ClassVar[int] = ...
    kCMY: ClassVar[int] = ...
    kCMYK: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    kByte: ClassVar[int] = ...
    kShort: ClassVar[int] = ...
    kOpaqueBlack: ClassVar[MColor] = ...
    r: Incomplete
    g: Incomplete
    b: Incomplete
    a: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __truediv__(self, value: Incomplete) -> Incomplete: ...
    def __rtruediv__(self, value: Incomplete) -> Incomplete: ...
    def __itruediv__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def getColor(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setColor(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MColorArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MDAGDrawOverrideInfo:
    kDisplayTypeNormal: ClassVar[int] = ...
    kDisplayTypeReference: ClassVar[int] = ...
    kDisplayTypeTemplate: ClassVar[int] = ...
    kLODFull: ClassVar[int] = ...
    kLODBoundingBox: ClassVar[int] = ...
    overrideEnabled: Incomplete
    displayType: Incomplete
    lod: Incomplete
    enableShading: Incomplete
    enableTexturing: Incomplete
    enableVisible: Incomplete
    playbackVisible: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class MDagPath:
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def getAllPathsTo(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def getAPathTo(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def matchTransform(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def apiType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def child(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def childCount(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def exclusiveMatrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def exclusiveMatrixInverse(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def extendToShape(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def fullPathName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getDisplayStatus(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getDrawOverrideInfo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPath(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasFn(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def inclusiveMatrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def inclusiveMatrixInverse(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def instanceNumber(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isInstanced(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isTemplated(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isValid(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isVisible(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def length(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def node(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numberOfShapesDirectlyBelow(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def partialPathName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def pathCount(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def pop(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def push(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def transform(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MDagPathArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MDGContext:
    kNormal: ClassVar[MDGContext] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def copy(self, source: MDGContext) -> Self: ...
    def getTime(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isCurrent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isNormal(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def current(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def makeCurrent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MDGModifier:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addAttribute(self, MObjectnode: Incomplete, MObjectattribute: Incomplete) -> Self: ...
    def addExtensionAttribute(self, MNodeClassnodeClass: Incomplete, MObjectattribute: Incomplete) -> Self: ...
    @overload
    def commandToExecute(self, command: Incomplete) -> Self: ...
    @overload
    def commandToExecute(self) -> Any: ...
    @overload
    def commandToExecute(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def connect(self, MPlugsource: Incomplete, MPlugdest: Incomplete) -> Self: ...
    @overload
    def createNode(self, typeName: Incomplete) -> MObject: ...
    @overload
    def createNode(self, MTypeIdtypeId: Incomplete) -> MObject: ...
    @overload
    def deleteNode(self) -> Any: ...
    @overload
    def deleteNode(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def disconnect(self, MPlugsource: Incomplete, MPlugdest: Incomplete) -> Self: ...
    @overload
    def doIt(self) -> Self: ...
    @overload
    def doIt(self) -> Any: ...  # type: ignore[overload-cannot-match]
    @overload
    def doIt(self) -> Any: ...  # type: ignore[overload-cannot-match]
    @overload
    def doIt(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def linkExtensionAttributeToPlugin(self, MObjectplugin: Incomplete, MObjectattribute: Incomplete) -> Self: ...
    def newPlugValue(self, MPlugplug: Incomplete, MObjectvalue: Incomplete) -> Self: ...
    def newPlugValueBool(self, MPlugplug: Incomplete, boolvalue: Incomplete) -> Self: ...
    def newPlugValueChar(self, MPlugplug: Incomplete, intvalue: Incomplete) -> Self: ...
    def newPlugValueDouble(self, MPlugplug: Incomplete, floatvalue: Incomplete) -> Self: ...
    def newPlugValueFloat(self, MPlugplug: Incomplete, floatvalue: Incomplete) -> Self: ...
    def newPlugValueInt(self, MPlugplug: Incomplete, intvalue: Incomplete) -> Self: ...
    def newPlugValueMAngle(self, MPlugplug: Incomplete, MAnglevalue: Incomplete) -> Self: ...
    def newPlugValueMDistance(self, MPlugplug: Incomplete, MDistancevalue: Incomplete) -> Self: ...
    def newPlugValueMTime(self, MPlugplug: Incomplete, MTimevalue: Incomplete) -> Self: ...
    def newPlugValueShort(self, MPlugplug: Incomplete, intvalue: Incomplete) -> Self: ...
    def newPlugValueString(self, MPlugplug: Incomplete, stringvalue: Incomplete) -> Self: ...
    def pythonCommandToExecute(self) -> Any: ...
    def removeAttribute(self, MObjectnode: Incomplete, MObjectattribute: Incomplete) -> Self: ...
    def removeExtensionAttribute(self, MNodeClassnodeClass: Incomplete, MObjectattribute: Incomplete) -> Self: ...
    def removeExtensionAttributeIfUnset(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeMultiInstance(self, MPlugplug: Incomplete, boolbreakConnections: Incomplete) -> Self: ...
    def renameAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def renameNode(self, MObjectnode: Incomplete, stringnewName: Incomplete) -> Self: ...
    def setNodeLockState(self, MObjectnode: Incomplete, boolnewState: Incomplete) -> Self: ...
    def undoIt(self) -> Self: ...
    def unlinkExtensionAttributeFromPlugin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MDagModifier(MDGModifier):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @overload
    def createNode(self, typeName: Incomplete, parent: Incomplete = ...) -> newDAGnodeMObject: ...  # type: ignore[name-defined]
    @overload
    def createNode(self, typeId: Incomplete, parent: Incomplete = ...) -> newDAGnodeMObject: ...  # type: ignore[name-defined]
    def reparentNode(self, MObjectnode: Incomplete, newParent: Incomplete = ...) -> Self: ...

class MDataBlock:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def context(self) -> MDGContext: ...
    @overload
    def inputArrayValue(self, plug: MPlug) -> MArrayDataHandle: ...
    @overload
    def inputArrayValue(self, attribute: MObject) -> MArrayDataHandle: ...
    @overload
    def inputValue(self, plug: MPlug) -> MDataHandle: ...
    @overload
    def inputValue(self, attribute: MObject) -> MDataHandle: ...
    @overload
    def isClean(self, plug: MPlug) -> bool: ...
    @overload
    def isClean(self, attribute: MObject) -> bool: ...
    @overload
    def outputArrayValue(self, plug: MPlug) -> MArrayDataHandle: ...
    @overload
    def outputArrayValue(self, attribute: MObject) -> MArrayDataHandle: ...
    @overload
    def outputValue(self, plug: MPlug) -> MDataHandle: ...
    @overload
    def outputValue(self, attribute: MObject) -> MDataHandle: ...
    @overload
    def setClean(self, plug: MPlug) -> Self: ...
    @overload
    def setClean(self, attribute: MObject) -> Self: ...
    def setContext(self, ctx: MDGContext) -> Self: ...

class MDataHandle:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def acceptedTypeIds(self) -> arrayofMTypeIds: ...  # type: ignore[name-defined]
    def asAddr(self) -> float: ...
    def asAngle(self) -> MAngle: ...
    def asBool(self) -> bool: ...
    def asChar(self) -> int: ...
    def asDistance(self) -> MDistance: ...
    def asDouble(self) -> float: ...
    def asDouble2(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asDouble3(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asDouble4(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asFloat(self) -> float: ...
    def asFloat2(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asFloat3(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asFloatMatrix(self) -> MFloatMatrix: ...
    def asFloatVector(self) -> MFloatVector: ...
    def asGenericBool(self) -> bool: ...
    def asGenericChar(self) -> int: ...
    def asGenericDouble(self) -> float: ...
    def asGenericFloat(self) -> float: ...
    def asGenericInt(self) -> int: ...
    def asGenericShort(self) -> int: ...
    def asInt(self) -> int: ...
    def asInt2(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asInt3(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMatrix(self) -> MMatrix: ...
    def asMesh(self) -> MObject: ...
    def asMeshTransformed(self) -> MObject: ...
    def asNurbsCurve(self) -> MObject: ...
    def asNurbsCurveTransformed(self) -> MObject: ...
    def asNurbsSurface(self) -> MObject: ...
    def asNurbsSurfaceTransformed(self) -> MObject: ...
    def asPluginData(self) -> MPxData: ...
    def asShort(self) -> int: ...
    def asShort2(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asShort3(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asString(self) -> str: ...
    def asSubdSurface(self) -> MObject: ...
    def asSubdSurfaceTransformed(self) -> MObject: ...
    def asTime(self) -> MTime: ...
    def asUChar(self) -> int: ...
    def asVector(self) -> MVector: ...
    @overload
    def child(self, MPlug: Incomplete) -> MDataHandle: ...
    @overload
    def child(self, MObject: Incomplete) -> MDataHandle: ...
    def copy(self, src: MDataHandle) -> Self: ...
    def copyWritable(self, src: MDataHandle) -> Self: ...
    def data(self) -> MObject: ...
    def geometryTransformMatrix(self) -> MMatrix: ...
    def isGeneric(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isNumeric(self) -> bool: ...
    def numericType(self) -> int: ...
    def set2Double(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set2Float(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set2Int(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set2Short(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set3Double(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set4Double(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set3Float(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set3Int(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set3Short(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setBool(self, bool: Incomplete) -> Self: ...
    def setChar(self, int: int) -> Self: ...
    def setClean(self) -> Self: ...
    def setDouble(self, float: Incomplete) -> Self: ...
    def setFloat(self, float: Incomplete) -> Self: ...
    def setGenericBool(self, bool: Incomplete, force: Incomplete) -> Self: ...
    def setGenericChar(self, int: int, force: Incomplete) -> Self: ...
    def setGenericDouble(self, float: Incomplete, force: Incomplete) -> Self: ...
    def setGenericFloat(self, float: Incomplete, force: Incomplete) -> Self: ...
    def setGenericInt(self, int: int, force: Incomplete) -> Self: ...
    def setGenericShort(self, int: int, force: Incomplete) -> Self: ...
    def setInt(self, int: int) -> Self: ...
    def setMAngle(self, MAngle: Incomplete) -> Self: ...
    def setMDistance(self, MDistance: Incomplete) -> Self: ...
    def setMFloatMatrix(self, MFloatMatrix: Incomplete) -> Self: ...
    def setMFloatVector(self, MFloatVector: Incomplete) -> Self: ...
    def setMMatrix(self, MMatrix: Incomplete) -> Self: ...
    def setMObject(self, MObject: Incomplete) -> Self: ...
    def setMPxData(self, MPxData: Incomplete) -> Self: ...
    def setMTime(self, MTime: Incomplete) -> Self: ...
    def setMVector(self, MVector: Incomplete) -> Self: ...
    def setShort(self, int: int) -> Self: ...
    def setString(self, string: str) -> Self: ...
    def type(self) -> int: ...
    def typeId(self) -> MTypeId: ...
    def datablock(self) -> MDataBlock: ...

class MDistance:
    kInvalid: ClassVar[int] = ...
    kInches: ClassVar[int] = ...
    kFeet: ClassVar[int] = ...
    kYards: ClassVar[int] = ...
    kMiles: ClassVar[int] = ...
    kMillimeters: ClassVar[int] = ...
    kCentimeters: ClassVar[int] = ...
    kKilometers: ClassVar[int] = ...
    kMeters: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    unit: Incomplete
    value: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def uiUnit(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setUIUnit(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def internalUnit(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def internalToUI(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def uiToInternal(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asUnits(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asInches(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asFeet(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asYards(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMiles(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMillimeters(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asCentimeters(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asKilometers(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMeters(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MDoubleArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MEulerRotation:
    kIdentity: ClassVar[MEulerRotation] = ...
    kTolerance: ClassVar[float] = ...
    kXYZ: ClassVar[int] = ...
    kYZX: ClassVar[int] = ...
    kZXY: ClassVar[int] = ...
    kXZY: ClassVar[int] = ...
    kYXZ: ClassVar[int] = ...
    kZYX: ClassVar[int] = ...
    x: Incomplete
    y: Incomplete
    z: Incomplete
    order: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __neg__(self) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __isub__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    @staticmethod
    def computeAlternateSolution(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def computeBound(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def computeClosestCut(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def computeClosestSolution(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def decompose(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def alternateSolution(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMatrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asQuaternion(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asVector(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def bound(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def boundIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def closestCut(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def closestSolution(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def incrementalRotateBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def inverse(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def invertIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isZero(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def reorder(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def reorderIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToAlternateSolution(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToClosestCut(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToClosestSolution(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setValue(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MEvaluationNode:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iterator(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dirtyPlugExists(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dirtyPlug(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dependencyNode(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def datablock(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MEvaluationNodeIterator:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def plug(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isDone(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def next(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def reset(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MExternalContentInfoTable:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def addResolvedEntry(self, key: str, unresolvedLocation: Incomplete, resolvedLocation: str, contextNodeFullName: node, roles: Incomplete) -> Self: ...  # type: ignore[name-defined]
    def addUnresolvedEntry(self, key: str, unresolvedLocation: str, contextNodeFullName: str, roles: Incomplete = ...) -> Self: ...
    def getEntry(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getInfo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MExternalContentLocationTable:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def addEntry(self, key: str, location: Incomplete) -> Self: ...
    def getEntry(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getLocation(self, key: str) -> str: ...

class MFileObject:
    kNone: ClassVar[int] = ...
    kExact: ClassVar[int] = ...
    kDirMap: ClassVar[int] = ...
    kReferenceMappings: ClassVar[int] = ...
    kRelative: ClassVar[int] = ...
    kBaseName: ClassVar[int] = ...
    kInputFile: ClassVar[int] = ...
    kInputReference: ClassVar[int] = ...
    kStrict: ClassVar[int] = ...
    resolveMethod: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def copy(self, source: MFileObject) -> Self: ...
    def exists(self, index: int = ...) -> bool: ...
    def expandedFullName(self) -> str: ...
    def expandedPath(self) -> str: ...
    def fullName(self, index: int) -> str: ...
    @staticmethod
    def getResolvedFullName(rawFullName: str) -> str: ...
    @staticmethod
    def getResolvedFullNameAndExistsStatus(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def isAbsolutePath(fileName: str) -> bool: ...
    def isSet(self) -> bool: ...
    def overrideResolvedFullName(self, fullFileName: Incomplete, reresolveType: Incomplete = ...) -> Self: ...
    def path(self, index: int) -> str: ...
    def pathCount(self) -> int: ...
    def rawFullName(self) -> str: ...
    def rawName(self) -> str: ...
    def rawPath(self) -> str: ...
    def rawURI(self) -> MURI: ...
    def resolvedFullName(self) -> str: ...
    def resolvedName(self) -> str: ...
    def resolvedPath(self) -> str: ...
    def setRawFullName(self, fullFileName: str) -> Self: ...
    def setRawName(self, fileName: str) -> Self: ...
    def setRawPath(self, pathName: str) -> Self: ...
    def setRawURI(self, uri: None) -> Self: ...

class MFloatArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFloatMatrix:
    kTolerance: ClassVar[float] = ...
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __isub__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def getElement(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setElement(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToIdentity(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToProduct(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def transpose(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def inverse(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def adjoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def homogenize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def det4x4(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def det3x3(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFloatPoint:
    kOrigin: ClassVar[MFloatPoint] = ...
    kTolerance: ClassVar[float] = ...
    x: Incomplete
    y: Incomplete
    z: Incomplete
    w: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __isub__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __truediv__(self, value: Incomplete) -> Incomplete: ...
    def __rtruediv__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def cartesianize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rationalize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def homogenize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def distanceTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFloatPointArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFloatVector:
    kTolerance: ClassVar[float] = ...
    kZeroVector: ClassVar[MFloatVector] = ...
    kOneVector: ClassVar[MFloatVector] = ...
    kXaxisVector: ClassVar[MFloatVector] = ...
    kYaxisVector: ClassVar[MFloatVector] = ...
    kZaxisVector: ClassVar[MFloatVector] = ...
    kXnegAxisVector: ClassVar[MFloatVector] = ...
    kYnegAxisVector: ClassVar[MFloatVector] = ...
    kZnegAxisVector: ClassVar[MFloatVector] = ...
    x: Incomplete
    y: Incomplete
    z: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __neg__(self) -> Incomplete: ...
    def __xor__(self, value: Incomplete) -> Incomplete: ...
    def __rxor__(self, value: Incomplete) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __isub__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __truediv__(self, value: Incomplete) -> Incomplete: ...
    def __rtruediv__(self, value: Incomplete) -> Incomplete: ...
    def __itruediv__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def length(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def normal(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def normalize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def transformAsNormal(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def angle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isParallel(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFloatVectorArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFn:
    kInvalid: ClassVar[int] = ...
    kBase: ClassVar[int] = ...
    kNamedObject: ClassVar[int] = ...
    kModel: ClassVar[int] = ...
    kDependencyNode: ClassVar[int] = ...
    kAddDoubleLinear: ClassVar[int] = ...
    kAffect: ClassVar[int] = ...
    kAnimCurve: ClassVar[int] = ...
    kAnimCurveTimeToAngular: ClassVar[int] = ...
    kAnimCurveTimeToDistance: ClassVar[int] = ...
    kAnimCurveTimeToTime: ClassVar[int] = ...
    kAnimCurveTimeToUnitless: ClassVar[int] = ...
    kAnimCurveUnitlessToAngular: ClassVar[int] = ...
    kAnimCurveUnitlessToDistance: ClassVar[int] = ...
    kAnimCurveUnitlessToTime: ClassVar[int] = ...
    kAnimCurveUnitlessToUnitless: ClassVar[int] = ...
    kResultCurve: ClassVar[int] = ...
    kResultCurveTimeToAngular: ClassVar[int] = ...
    kResultCurveTimeToDistance: ClassVar[int] = ...
    kResultCurveTimeToTime: ClassVar[int] = ...
    kResultCurveTimeToUnitless: ClassVar[int] = ...
    kAngleBetween: ClassVar[int] = ...
    kAudio: ClassVar[int] = ...
    kBackground: ClassVar[int] = ...
    kColorBackground: ClassVar[int] = ...
    kFileBackground: ClassVar[int] = ...
    kRampBackground: ClassVar[int] = ...
    kBlend: ClassVar[int] = ...
    kBlendTwoAttr: ClassVar[int] = ...
    kBlendWeighted: ClassVar[int] = ...
    kBlendDevice: ClassVar[int] = ...
    kBlendColors: ClassVar[int] = ...
    kBump: ClassVar[int] = ...
    kBump3d: ClassVar[int] = ...
    kCameraView: ClassVar[int] = ...
    kChainToSpline: ClassVar[int] = ...
    kChoice: ClassVar[int] = ...
    kCondition: ClassVar[int] = ...
    kContrast: ClassVar[int] = ...
    kClampColor: ClassVar[int] = ...
    kCreate: ClassVar[int] = ...
    kAlignCurve: ClassVar[int] = ...
    kAlignSurface: ClassVar[int] = ...
    kAttachCurve: ClassVar[int] = ...
    kAttachSurface: ClassVar[int] = ...
    kAvgCurves: ClassVar[int] = ...
    kAvgSurfacePoints: ClassVar[int] = ...
    kAvgNurbsSurfacePoints: ClassVar[int] = ...
    kBevel: ClassVar[int] = ...
    kBirailSrf: ClassVar[int] = ...
    kDPbirailSrf: ClassVar[int] = ...
    kMPbirailSrf: ClassVar[int] = ...
    kSPbirailSrf: ClassVar[int] = ...
    kBoundary: ClassVar[int] = ...
    kCircle: ClassVar[int] = ...
    kCloseCurve: ClassVar[int] = ...
    kClosestPointOnSurface: ClassVar[int] = ...
    kCloseSurface: ClassVar[int] = ...
    kCurveFromSurface: ClassVar[int] = ...
    kCurveFromSurfaceBnd: ClassVar[int] = ...
    kCurveFromSurfaceCoS: ClassVar[int] = ...
    kCurveFromSurfaceIso: ClassVar[int] = ...
    kCurveInfo: ClassVar[int] = ...
    kDetachCurve: ClassVar[int] = ...
    kDetachSurface: ClassVar[int] = ...
    kExtendCurve: ClassVar[int] = ...
    kExtendSurface: ClassVar[int] = ...
    kExtrude: ClassVar[int] = ...
    kFFblendSrf: ClassVar[int] = ...
    kFFfilletSrf: ClassVar[int] = ...
    kFilletCurve: ClassVar[int] = ...
    kFitBspline: ClassVar[int] = ...
    kFlow: ClassVar[int] = ...
    kHardenPointCurve: ClassVar[int] = ...
    kIllustratorCurve: ClassVar[int] = ...
    kInsertKnotCrv: ClassVar[int] = ...
    kInsertKnotSrf: ClassVar[int] = ...
    kIntersectSurface: ClassVar[int] = ...
    kNurbsTesselate: ClassVar[int] = ...
    kNurbsPlane: ClassVar[int] = ...
    kNurbsCube: ClassVar[int] = ...
    kOffsetCos: ClassVar[int] = ...
    kOffsetCurve: ClassVar[int] = ...
    kPlanarTrimSrf: ClassVar[int] = ...
    kPointOnCurveInfo: ClassVar[int] = ...
    kPointOnSurfaceInfo: ClassVar[int] = ...
    kPrimitive: ClassVar[int] = ...
    kProjectCurve: ClassVar[int] = ...
    kProjectTangent: ClassVar[int] = ...
    kRBFsurface: ClassVar[int] = ...
    kRebuildCurve: ClassVar[int] = ...
    kRebuildSurface: ClassVar[int] = ...
    kReverseCurve: ClassVar[int] = ...
    kReverseSurface: ClassVar[int] = ...
    kRevolve: ClassVar[int] = ...
    kRevolvedPrimitive: ClassVar[int] = ...
    kCone: ClassVar[int] = ...
    kRenderCone: ClassVar[int] = ...
    kCylinder: ClassVar[int] = ...
    kSphere: ClassVar[int] = ...
    kSkin: ClassVar[int] = ...
    kStitchSrf: ClassVar[int] = ...
    kSubCurve: ClassVar[int] = ...
    kSurfaceInfo: ClassVar[int] = ...
    kTextCurves: ClassVar[int] = ...
    kTrim: ClassVar[int] = ...
    kUntrim: ClassVar[int] = ...
    kDagNode: ClassVar[int] = ...
    kProxy: ClassVar[int] = ...
    kUnderWorld: ClassVar[int] = ...
    kTransform: ClassVar[int] = ...
    kAimConstraint: ClassVar[int] = ...
    kLookAt: ClassVar[int] = ...
    kGeometryConstraint: ClassVar[int] = ...
    kGeometryVarGroup: ClassVar[int] = ...
    kAnyGeometryVarGroup: ClassVar[int] = ...
    kCurveVarGroup: ClassVar[int] = ...
    kMeshVarGroup: ClassVar[int] = ...
    kSurfaceVarGroup: ClassVar[int] = ...
    kIkEffector: ClassVar[int] = ...
    kIkHandle: ClassVar[int] = ...
    kJoint: ClassVar[int] = ...
    kManipulator3D: ClassVar[int] = ...
    kArrowManip: ClassVar[int] = ...
    kAxesActionManip: ClassVar[int] = ...
    kBallProjectionManip: ClassVar[int] = ...
    kCircleManip: ClassVar[int] = ...
    kScreenAlignedCircleManip: ClassVar[int] = ...
    kCircleSweepManip: ClassVar[int] = ...
    kConcentricProjectionManip: ClassVar[int] = ...
    kCubicProjectionManip: ClassVar[int] = ...
    kCylindricalProjectionManip: ClassVar[int] = ...
    kDiscManip: ClassVar[int] = ...
    kFreePointManip: ClassVar[int] = ...
    kCenterManip: ClassVar[int] = ...
    kLimitManip: ClassVar[int] = ...
    kEnableManip: ClassVar[int] = ...
    kFreePointTriadManip: ClassVar[int] = ...
    kPropMoveTriadManip: ClassVar[int] = ...
    kTowPointManip: ClassVar[int] = ...
    kPolyCreateToolManip: ClassVar[int] = ...
    kPolySplitToolManip: ClassVar[int] = ...
    kGeometryOnLineManip: ClassVar[int] = ...
    kCameraPlaneManip: ClassVar[int] = ...
    kToggleOnLineManip: ClassVar[int] = ...
    kStateManip: ClassVar[int] = ...
    kIsoparmManip: ClassVar[int] = ...
    kLineManip: ClassVar[int] = ...
    kManipContainer: ClassVar[int] = ...
    kAverageCurveManip: ClassVar[int] = ...
    kBarnDoorManip: ClassVar[int] = ...
    kBevelManip: ClassVar[int] = ...
    kBlendManip: ClassVar[int] = ...
    kButtonManip: ClassVar[int] = ...
    kCameraManip: ClassVar[int] = ...
    kCoiManip: ClassVar[int] = ...
    kCpManip: ClassVar[int] = ...
    kCreateCVManip: ClassVar[int] = ...
    kCreateEPManip: ClassVar[int] = ...
    kCurveEdManip: ClassVar[int] = ...
    kCurveSegmentManip: ClassVar[int] = ...
    kDirectionManip: ClassVar[int] = ...
    kDofManip: ClassVar[int] = ...
    kDropoffManip: ClassVar[int] = ...
    kExtendCurveDistanceManip: ClassVar[int] = ...
    kExtrudeManip: ClassVar[int] = ...
    kIkSplineManip: ClassVar[int] = ...
    kIkRPManip: ClassVar[int] = ...
    kJointClusterManip: ClassVar[int] = ...
    kLightManip: ClassVar[int] = ...
    kMotionPathManip: ClassVar[int] = ...
    kOffsetCosManip: ClassVar[int] = ...
    kOffsetCurveManip: ClassVar[int] = ...
    kProjectionManip: ClassVar[int] = ...
    kPolyProjectionManip: ClassVar[int] = ...
    kProjectionUVManip: ClassVar[int] = ...
    kProjectionMultiManip: ClassVar[int] = ...
    kProjectTangentManip: ClassVar[int] = ...
    kPropModManip: ClassVar[int] = ...
    kQuadPtOnLineManip: ClassVar[int] = ...
    kRbfSrfManip: ClassVar[int] = ...
    kReverseCurveManip: ClassVar[int] = ...
    kReverseCrvManip: ClassVar[int] = ...
    kReverseSurfaceManip: ClassVar[int] = ...
    kRevolveManip: ClassVar[int] = ...
    kRevolvedPrimitiveManip: ClassVar[int] = ...
    kSpotManip: ClassVar[int] = ...
    kSpotCylinderManip: ClassVar[int] = ...
    kTriplanarProjectionManip: ClassVar[int] = ...
    kTrsManip: ClassVar[int] = ...
    kDblTrsManip: ClassVar[int] = ...
    kPivotManip2D: ClassVar[int] = ...
    kManip2DContainer: ClassVar[int] = ...
    kPolyMoveUVManip: ClassVar[int] = ...
    kPolyMappingManip: ClassVar[int] = ...
    kPolyModifierManip: ClassVar[int] = ...
    kPolyMoveVertexManip: ClassVar[int] = ...
    kPolyVertexNormalManip: ClassVar[int] = ...
    kTexSmudgeUVManip: ClassVar[int] = ...
    kTexLatticeDeformManip: ClassVar[int] = ...
    kTexLattice: ClassVar[int] = ...
    kTexSmoothManip: ClassVar[int] = ...
    kTrsTransManip: ClassVar[int] = ...
    kTrsInsertManip: ClassVar[int] = ...
    kTrsXformManip: ClassVar[int] = ...
    kManipulator2D: ClassVar[int] = ...
    kTranslateManip2D: ClassVar[int] = ...
    kPlanarProjectionManip: ClassVar[int] = ...
    kPointOnCurveManip: ClassVar[int] = ...
    kTowPointOnCurveManip: ClassVar[int] = ...
    kMarkerManip: ClassVar[int] = ...
    kPointOnLineManip: ClassVar[int] = ...
    kPointOnSurfaceManip: ClassVar[int] = ...
    kTranslateUVManip: ClassVar[int] = ...
    kRotateBoxManip: ClassVar[int] = ...
    kRotateManip: ClassVar[int] = ...
    kHandleRotateManip: ClassVar[int] = ...
    kRotateLimitsManip: ClassVar[int] = ...
    kScaleLimitsManip: ClassVar[int] = ...
    kScaleManip: ClassVar[int] = ...
    kScalingBoxManip: ClassVar[int] = ...
    kScriptManip: ClassVar[int] = ...
    kSphericalProjectionManip: ClassVar[int] = ...
    kTextureManip3D: ClassVar[int] = ...
    kToggleManip: ClassVar[int] = ...
    kTranslateBoxManip: ClassVar[int] = ...
    kTranslateLimitsManip: ClassVar[int] = ...
    kTranslateManip: ClassVar[int] = ...
    kTrimManip: ClassVar[int] = ...
    kJointTranslateManip: ClassVar[int] = ...
    kManipulator: ClassVar[int] = ...
    kCirclePointManip: ClassVar[int] = ...
    kDimensionManip: ClassVar[int] = ...
    kFixedLineManip: ClassVar[int] = ...
    kLightProjectionGeometry: ClassVar[int] = ...
    kLineArrowManip: ClassVar[int] = ...
    kPointManip: ClassVar[int] = ...
    kTriadManip: ClassVar[int] = ...
    kNormalConstraint: ClassVar[int] = ...
    kOrientConstraint: ClassVar[int] = ...
    kPointConstraint: ClassVar[int] = ...
    kSymmetryConstraint: ClassVar[int] = ...
    kParentConstraint: ClassVar[int] = ...
    kPoleVectorConstraint: ClassVar[int] = ...
    kScaleConstraint: ClassVar[int] = ...
    kTangentConstraint: ClassVar[int] = ...
    kUnknownTransform: ClassVar[int] = ...
    kWorld: ClassVar[int] = ...
    kShape: ClassVar[int] = ...
    kBaseLattice: ClassVar[int] = ...
    kCamera: ClassVar[int] = ...
    kCluster: ClassVar[int] = ...
    kSoftMod: ClassVar[int] = ...
    kCollision: ClassVar[int] = ...
    kDummy: ClassVar[int] = ...
    kEmitter: ClassVar[int] = ...
    kField: ClassVar[int] = ...
    kAir: ClassVar[int] = ...
    kDrag: ClassVar[int] = ...
    kGravity: ClassVar[int] = ...
    kNewton: ClassVar[int] = ...
    kRadial: ClassVar[int] = ...
    kTurbulence: ClassVar[int] = ...
    kUniform: ClassVar[int] = ...
    kVortex: ClassVar[int] = ...
    kGeometric: ClassVar[int] = ...
    kCurve: ClassVar[int] = ...
    kNurbsCurve: ClassVar[int] = ...
    kNurbsCurveGeom: ClassVar[int] = ...
    kDimension: ClassVar[int] = ...
    kAngle: ClassVar[int] = ...
    kAnnotation: ClassVar[int] = ...
    kDistance: ClassVar[int] = ...
    kArcLength: ClassVar[int] = ...
    kRadius: ClassVar[int] = ...
    kParamDimension: ClassVar[int] = ...
    kDirectedDisc: ClassVar[int] = ...
    kRenderRect: ClassVar[int] = ...
    kEnvFogShape: ClassVar[int] = ...
    kLattice: ClassVar[int] = ...
    kLatticeGeom: ClassVar[int] = ...
    kLocator: ClassVar[int] = ...
    kDropoffLocator: ClassVar[int] = ...
    kMarker: ClassVar[int] = ...
    kOrientationMarker: ClassVar[int] = ...
    kPositionMarker: ClassVar[int] = ...
    kOrientationLocator: ClassVar[int] = ...
    kTrimLocator: ClassVar[int] = ...
    kPlane: ClassVar[int] = ...
    kSketchPlane: ClassVar[int] = ...
    kGroundPlane: ClassVar[int] = ...
    kOrthoGrid: ClassVar[int] = ...
    kSprite: ClassVar[int] = ...
    kSurface: ClassVar[int] = ...
    kNurbsSurface: ClassVar[int] = ...
    kNurbsSurfaceGeom: ClassVar[int] = ...
    kMesh: ClassVar[int] = ...
    kMeshGeom: ClassVar[int] = ...
    kRenderSphere: ClassVar[int] = ...
    kFlexor: ClassVar[int] = ...
    kClusterFlexor: ClassVar[int] = ...
    kGuideLine: ClassVar[int] = ...
    kLight: ClassVar[int] = ...
    kAmbientLight: ClassVar[int] = ...
    kNonAmbientLight: ClassVar[int] = ...
    kAreaLight: ClassVar[int] = ...
    kLinearLight: ClassVar[int] = ...
    kNonExtendedLight: ClassVar[int] = ...
    kDirectionalLight: ClassVar[int] = ...
    kPointLight: ClassVar[int] = ...
    kSpotLight: ClassVar[int] = ...
    kParticle: ClassVar[int] = ...
    kPolyToolFeedbackShape: ClassVar[int] = ...
    kRigidConstraint: ClassVar[int] = ...
    kRigid: ClassVar[int] = ...
    kSpring: ClassVar[int] = ...
    kUnknownDag: ClassVar[int] = ...
    kDefaultLightList: ClassVar[int] = ...
    kDeleteComponent: ClassVar[int] = ...
    kDispatchCompute: ClassVar[int] = ...
    kShadingEngine: ClassVar[int] = ...
    kDisplacementShader: ClassVar[int] = ...
    kDistanceBetween: ClassVar[int] = ...
    kDOF: ClassVar[int] = ...
    kDummyConnectable: ClassVar[int] = ...
    kDynamicsController: ClassVar[int] = ...
    kGeoConnectable: ClassVar[int] = ...
    kExpression: ClassVar[int] = ...
    kExtract: ClassVar[int] = ...
    kFilter: ClassVar[int] = ...
    kFilterClosestSample: ClassVar[int] = ...
    kFilterEuler: ClassVar[int] = ...
    kFilterSimplify: ClassVar[int] = ...
    kGammaCorrect: ClassVar[int] = ...
    kGeometryFilt: ClassVar[int] = ...
    kBendLattice: ClassVar[int] = ...
    kBlendShape: ClassVar[int] = ...
    kCombinationShape: ClassVar[int] = ...
    kBulgeLattice: ClassVar[int] = ...
    kFFD: ClassVar[int] = ...
    kFfdDualBase: ClassVar[int] = ...
    kRigidDeform: ClassVar[int] = ...
    kSculpt: ClassVar[int] = ...
    kTextureDeformer: ClassVar[int] = ...
    kTextureDeformerHandle: ClassVar[int] = ...
    kTweak: ClassVar[int] = ...
    kWeightGeometryFilt: ClassVar[int] = ...
    kClusterFilter: ClassVar[int] = ...
    kSoftModFilter: ClassVar[int] = ...
    kJointCluster: ClassVar[int] = ...
    kDeltaMush: ClassVar[int] = ...
    kTension: ClassVar[int] = ...
    kMorph: ClassVar[int] = ...
    kSolidify: ClassVar[int] = ...
    kProximityWrap: ClassVar[int] = ...
    kWire: ClassVar[int] = ...
    kGroupId: ClassVar[int] = ...
    kGroupParts: ClassVar[int] = ...
    kGuide: ClassVar[int] = ...
    kHsvToRgb: ClassVar[int] = ...
    kHyperGraphInfo: ClassVar[int] = ...
    kHyperLayout: ClassVar[int] = ...
    kHyperView: ClassVar[int] = ...
    kIkSolver: ClassVar[int] = ...
    kMCsolver: ClassVar[int] = ...
    kPASolver: ClassVar[int] = ...
    kSCsolver: ClassVar[int] = ...
    kRPsolver: ClassVar[int] = ...
    kSplineSolver: ClassVar[int] = ...
    kIkSystem: ClassVar[int] = ...
    kImagePlane: ClassVar[int] = ...
    kLambert: ClassVar[int] = ...
    kReflect: ClassVar[int] = ...
    kBlinn: ClassVar[int] = ...
    kPhong: ClassVar[int] = ...
    kPhongExplorer: ClassVar[int] = ...
    kLayeredShader: ClassVar[int] = ...
    kStandardSurface: ClassVar[int] = ...
    kLightInfo: ClassVar[int] = ...
    kLeastSquares: ClassVar[int] = ...
    kLightFogMaterial: ClassVar[int] = ...
    kEnvFogMaterial: ClassVar[int] = ...
    kLightList: ClassVar[int] = ...
    kLightSource: ClassVar[int] = ...
    kLuminance: ClassVar[int] = ...
    kMakeGroup: ClassVar[int] = ...
    kMaterial: ClassVar[int] = ...
    kDiffuseMaterial: ClassVar[int] = ...
    kLambertMaterial: ClassVar[int] = ...
    kBlinnMaterial: ClassVar[int] = ...
    kPhongMaterial: ClassVar[int] = ...
    kLightSourceMaterial: ClassVar[int] = ...
    kMaterialInfo: ClassVar[int] = ...
    kMaterialTemplate: ClassVar[int] = ...
    kMatrixAdd: ClassVar[int] = ...
    kMatrixHold: ClassVar[int] = ...
    kMatrixMult: ClassVar[int] = ...
    kMatrixPass: ClassVar[int] = ...
    kMatrixWtAdd: ClassVar[int] = ...
    kMidModifier: ClassVar[int] = ...
    kMidModifierWithMatrix: ClassVar[int] = ...
    kPolyBevel: ClassVar[int] = ...
    kPolyTweak: ClassVar[int] = ...
    kPolyAppend: ClassVar[int] = ...
    kPolyChipOff: ClassVar[int] = ...
    kPolyCloseBorder: ClassVar[int] = ...
    kPolyCollapseEdge: ClassVar[int] = ...
    kPolyCollapseF: ClassVar[int] = ...
    kPolyCylProj: ClassVar[int] = ...
    kPolyDelEdge: ClassVar[int] = ...
    kPolyDelFacet: ClassVar[int] = ...
    kPolyDelVertex: ClassVar[int] = ...
    kPolyExtrudeFacet: ClassVar[int] = ...
    kPolyMapCut: ClassVar[int] = ...
    kPolyMapDel: ClassVar[int] = ...
    kPolyMapSew: ClassVar[int] = ...
    kPolyMergeEdge: ClassVar[int] = ...
    kPolyMergeFacet: ClassVar[int] = ...
    kPolyMoveEdge: ClassVar[int] = ...
    kPolyMoveFacet: ClassVar[int] = ...
    kPolyMoveFacetUV: ClassVar[int] = ...
    kPolyMoveUV: ClassVar[int] = ...
    kPolyMoveVertex: ClassVar[int] = ...
    kPolyMoveVertexUV: ClassVar[int] = ...
    kPolyNormal: ClassVar[int] = ...
    kPolyPlanProj: ClassVar[int] = ...
    kPolyProj: ClassVar[int] = ...
    kPolyQuad: ClassVar[int] = ...
    kPolySmooth: ClassVar[int] = ...
    kPolySoftEdge: ClassVar[int] = ...
    kPolySphProj: ClassVar[int] = ...
    kPolySplit: ClassVar[int] = ...
    kPolySubdEdge: ClassVar[int] = ...
    kPolySubdFacet: ClassVar[int] = ...
    kPolyTriangulate: ClassVar[int] = ...
    kPolyCreator: ClassVar[int] = ...
    kPolyPrimitive: ClassVar[int] = ...
    kPolyCone: ClassVar[int] = ...
    kPolyCube: ClassVar[int] = ...
    kPolyCylinder: ClassVar[int] = ...
    kPolyMesh: ClassVar[int] = ...
    kPolySphere: ClassVar[int] = ...
    kPolyTorus: ClassVar[int] = ...
    kPolyCreateFacet: ClassVar[int] = ...
    kPolyUnite: ClassVar[int] = ...
    kMotionPath: ClassVar[int] = ...
    kPluginMotionPathNode: ClassVar[int] = ...
    kMultilisterLight: ClassVar[int] = ...
    kMultiplyDivide: ClassVar[int] = ...
    kOldGeometryConstraint: ClassVar[int] = ...
    kOpticalFX: ClassVar[int] = ...
    kParticleAgeMapper: ClassVar[int] = ...
    kParticleCloud: ClassVar[int] = ...
    kParticleColorMapper: ClassVar[int] = ...
    kParticleIncandecenceMapper: ClassVar[int] = ...
    kParticleTransparencyMapper: ClassVar[int] = ...
    kPartition: ClassVar[int] = ...
    kPlace2dTexture: ClassVar[int] = ...
    kPlace3dTexture: ClassVar[int] = ...
    kPluginDependNode: ClassVar[int] = ...
    kPluginLocatorNode: ClassVar[int] = ...
    kPlusMinusAverage: ClassVar[int] = ...
    kPointMatrixMult: ClassVar[int] = ...
    kPolySeparate: ClassVar[int] = ...
    kPostProcessList: ClassVar[int] = ...
    kProjection: ClassVar[int] = ...
    kRecord: ClassVar[int] = ...
    kRenderUtilityList: ClassVar[int] = ...
    kReverse: ClassVar[int] = ...
    kRgbToHsv: ClassVar[int] = ...
    kRigidSolver: ClassVar[int] = ...
    kSet: ClassVar[int] = ...
    kTextureBakeSet: ClassVar[int] = ...
    kVertexBakeSet: ClassVar[int] = ...
    kSetRange: ClassVar[int] = ...
    kShaderGlow: ClassVar[int] = ...
    kShaderList: ClassVar[int] = ...
    kShadingMap: ClassVar[int] = ...
    kSamplerInfo: ClassVar[int] = ...
    kShapeFragment: ClassVar[int] = ...
    kSimpleVolumeShader: ClassVar[int] = ...
    kSl60: ClassVar[int] = ...
    kSnapshot: ClassVar[int] = ...
    kStoryBoard: ClassVar[int] = ...
    kSummaryObject: ClassVar[int] = ...
    kSuper: ClassVar[int] = ...
    kControl: ClassVar[int] = ...
    kSurfaceLuminance: ClassVar[int] = ...
    kSurfaceShader: ClassVar[int] = ...
    kTextureList: ClassVar[int] = ...
    kTextureEnv: ClassVar[int] = ...
    kEnvBall: ClassVar[int] = ...
    kEnvCube: ClassVar[int] = ...
    kEnvChrome: ClassVar[int] = ...
    kEnvSky: ClassVar[int] = ...
    kEnvSphere: ClassVar[int] = ...
    kTexture2d: ClassVar[int] = ...
    kBulge: ClassVar[int] = ...
    kChecker: ClassVar[int] = ...
    kCloth: ClassVar[int] = ...
    kFileTexture: ClassVar[int] = ...
    kFractal: ClassVar[int] = ...
    kGrid: ClassVar[int] = ...
    kMountain: ClassVar[int] = ...
    kRamp: ClassVar[int] = ...
    kStencil: ClassVar[int] = ...
    kWater: ClassVar[int] = ...
    kTexture3d: ClassVar[int] = ...
    kBrownian: ClassVar[int] = ...
    kCloud: ClassVar[int] = ...
    kCrater: ClassVar[int] = ...
    kGranite: ClassVar[int] = ...
    kLeather: ClassVar[int] = ...
    kMarble: ClassVar[int] = ...
    kRock: ClassVar[int] = ...
    kSnow: ClassVar[int] = ...
    kSolidFractal: ClassVar[int] = ...
    kStucco: ClassVar[int] = ...
    kTxSl: ClassVar[int] = ...
    kWood: ClassVar[int] = ...
    kTime: ClassVar[int] = ...
    kTimeToUnitConversion: ClassVar[int] = ...
    kRenderSetup: ClassVar[int] = ...
    kRenderGlobals: ClassVar[int] = ...
    kRenderGlobalsList: ClassVar[int] = ...
    kRenderQuality: ClassVar[int] = ...
    kResolution: ClassVar[int] = ...
    kHardwareRenderGlobals: ClassVar[int] = ...
    kArrayMapper: ClassVar[int] = ...
    kUnitConversion: ClassVar[int] = ...
    kUnitToTimeConversion: ClassVar[int] = ...
    kUseBackground: ClassVar[int] = ...
    kUnknown: ClassVar[int] = ...
    kVectorProduct: ClassVar[int] = ...
    kVolumeShader: ClassVar[int] = ...
    kComponent: ClassVar[int] = ...
    kCurveCVComponent: ClassVar[int] = ...
    kCurveEPComponent: ClassVar[int] = ...
    kCurveKnotComponent: ClassVar[int] = ...
    kCurveParamComponent: ClassVar[int] = ...
    kIsoparmComponent: ClassVar[int] = ...
    kPivotComponent: ClassVar[int] = ...
    kSurfaceCVComponent: ClassVar[int] = ...
    kSurfaceEPComponent: ClassVar[int] = ...
    kSurfaceKnotComponent: ClassVar[int] = ...
    kEdgeComponent: ClassVar[int] = ...
    kLatticeComponent: ClassVar[int] = ...
    kSurfaceRangeComponent: ClassVar[int] = ...
    kDecayRegionCapComponent: ClassVar[int] = ...
    kDecayRegionComponent: ClassVar[int] = ...
    kMeshComponent: ClassVar[int] = ...
    kMeshEdgeComponent: ClassVar[int] = ...
    kMeshPolygonComponent: ClassVar[int] = ...
    kMeshFrEdgeComponent: ClassVar[int] = ...
    kMeshVertComponent: ClassVar[int] = ...
    kMeshFaceVertComponent: ClassVar[int] = ...
    kOrientationComponent: ClassVar[int] = ...
    kSubVertexComponent: ClassVar[int] = ...
    kMultiSubVertexComponent: ClassVar[int] = ...
    kSetGroupComponent: ClassVar[int] = ...
    kDynParticleSetComponent: ClassVar[int] = ...
    kSelectionItem: ClassVar[int] = ...
    kDagSelectionItem: ClassVar[int] = ...
    kNonDagSelectionItem: ClassVar[int] = ...
    kItemList: ClassVar[int] = ...
    kAttribute: ClassVar[int] = ...
    kNumericAttribute: ClassVar[int] = ...
    kDoubleAngleAttribute: ClassVar[int] = ...
    kFloatAngleAttribute: ClassVar[int] = ...
    kDoubleLinearAttribute: ClassVar[int] = ...
    kFloatLinearAttribute: ClassVar[int] = ...
    kTimeAttribute: ClassVar[int] = ...
    kEnumAttribute: ClassVar[int] = ...
    kUnitAttribute: ClassVar[int] = ...
    kTypedAttribute: ClassVar[int] = ...
    kCompoundAttribute: ClassVar[int] = ...
    kGenericAttribute: ClassVar[int] = ...
    kLightDataAttribute: ClassVar[int] = ...
    kMatrixAttribute: ClassVar[int] = ...
    kFloatMatrixAttribute: ClassVar[int] = ...
    kMessageAttribute: ClassVar[int] = ...
    kOpaqueAttribute: ClassVar[int] = ...
    kPlugin: ClassVar[int] = ...
    kData: ClassVar[int] = ...
    kComponentListData: ClassVar[int] = ...
    kDoubleArrayData: ClassVar[int] = ...
    kIntArrayData: ClassVar[int] = ...
    kUintArrayData: ClassVar[int] = ...
    kLatticeData: ClassVar[int] = ...
    kMatrixData: ClassVar[int] = ...
    kMeshData: ClassVar[int] = ...
    kNurbsSurfaceData: ClassVar[int] = ...
    kNurbsCurveData: ClassVar[int] = ...
    kNumericData: ClassVar[int] = ...
    kData2Double: ClassVar[int] = ...
    kData2Float: ClassVar[int] = ...
    kData2Int: ClassVar[int] = ...
    kData2Short: ClassVar[int] = ...
    kData3Double: ClassVar[int] = ...
    kData3Float: ClassVar[int] = ...
    kData3Int: ClassVar[int] = ...
    kData3Short: ClassVar[int] = ...
    kPluginData: ClassVar[int] = ...
    kPointArrayData: ClassVar[int] = ...
    kMatrixArrayData: ClassVar[int] = ...
    kSphereData: ClassVar[int] = ...
    kStringData: ClassVar[int] = ...
    kStringArrayData: ClassVar[int] = ...
    kVectorArrayData: ClassVar[int] = ...
    kSelectionList: ClassVar[int] = ...
    kTransformGeometry: ClassVar[int] = ...
    kCommEdgePtManip: ClassVar[int] = ...
    kCommEdgeOperManip: ClassVar[int] = ...
    kCommEdgeSegmentManip: ClassVar[int] = ...
    kCommCornerManip: ClassVar[int] = ...
    kCommCornerOperManip: ClassVar[int] = ...
    kPluginDeformerNode: ClassVar[int] = ...
    kTorus: ClassVar[int] = ...
    kPolyBoolOp: ClassVar[int] = ...
    kSingleShadingSwitch: ClassVar[int] = ...
    kDoubleShadingSwitch: ClassVar[int] = ...
    kTripleShadingSwitch: ClassVar[int] = ...
    kNurbsSquare: ClassVar[int] = ...
    kAnisotropy: ClassVar[int] = ...
    kNonLinear: ClassVar[int] = ...
    kDeformFunc: ClassVar[int] = ...
    kDeformBend: ClassVar[int] = ...
    kDeformTwist: ClassVar[int] = ...
    kDeformSquash: ClassVar[int] = ...
    kDeformFlare: ClassVar[int] = ...
    kDeformSine: ClassVar[int] = ...
    kDeformWave: ClassVar[int] = ...
    kDeformBendManip: ClassVar[int] = ...
    kDeformTwistManip: ClassVar[int] = ...
    kDeformSquashManip: ClassVar[int] = ...
    kDeformFlareManip: ClassVar[int] = ...
    kDeformSineManip: ClassVar[int] = ...
    kDeformWaveManip: ClassVar[int] = ...
    kSoftModManip: ClassVar[int] = ...
    kDistanceManip: ClassVar[int] = ...
    kScript: ClassVar[int] = ...
    kCurveFromMeshEdge: ClassVar[int] = ...
    kCurveCurveIntersect: ClassVar[int] = ...
    kNurbsCircular3PtArc: ClassVar[int] = ...
    kNurbsCircular2PtArc: ClassVar[int] = ...
    kOffsetSurface: ClassVar[int] = ...
    kRoundConstantRadius: ClassVar[int] = ...
    kRoundRadiusManip: ClassVar[int] = ...
    kRoundRadiusCrvManip: ClassVar[int] = ...
    kRoundConstantRadiusManip: ClassVar[int] = ...
    kThreePointArcManip: ClassVar[int] = ...
    kTwoPointArcManip: ClassVar[int] = ...
    kTextButtonManip: ClassVar[int] = ...
    kOffsetSurfaceManip: ClassVar[int] = ...
    kImageData: ClassVar[int] = ...
    kImageLoad: ClassVar[int] = ...
    kImageSave: ClassVar[int] = ...
    kImageNetSrc: ClassVar[int] = ...
    kImageNetDest: ClassVar[int] = ...
    kImageRender: ClassVar[int] = ...
    kImageAdd: ClassVar[int] = ...
    kImageDiff: ClassVar[int] = ...
    kImageMultiply: ClassVar[int] = ...
    kImageOver: ClassVar[int] = ...
    kImageUnder: ClassVar[int] = ...
    kImageColorCorrect: ClassVar[int] = ...
    kImageBlur: ClassVar[int] = ...
    kImageFilter: ClassVar[int] = ...
    kImageDepth: ClassVar[int] = ...
    kImageDisplay: ClassVar[int] = ...
    kImageView: ClassVar[int] = ...
    kImageMotionBlur: ClassVar[int] = ...
    kViewColorManager: ClassVar[int] = ...
    kMatrixFloatData: ClassVar[int] = ...
    kSkinShader: ClassVar[int] = ...
    kComponentManip: ClassVar[int] = ...
    kSelectionListData: ClassVar[int] = ...
    kObjectFilter: ClassVar[int] = ...
    kObjectMultiFilter: ClassVar[int] = ...
    kObjectNameFilter: ClassVar[int] = ...
    kObjectTypeFilter: ClassVar[int] = ...
    kObjectAttrFilter: ClassVar[int] = ...
    kObjectRenderFilter: ClassVar[int] = ...
    kObjectScriptFilter: ClassVar[int] = ...
    kSelectionListOperator: ClassVar[int] = ...
    kSubdiv: ClassVar[int] = ...
    kPolyToSubdiv: ClassVar[int] = ...
    kSkinClusterFilter: ClassVar[int] = ...
    kKeyingGroup: ClassVar[int] = ...
    kCharacter: ClassVar[int] = ...
    kCharacterOffset: ClassVar[int] = ...
    kDagPose: ClassVar[int] = ...
    kStitchAsNurbsShell: ClassVar[int] = ...
    kExplodeNurbsShell: ClassVar[int] = ...
    kNurbsBoolean: ClassVar[int] = ...
    kStitchSrfManip: ClassVar[int] = ...
    kForceUpdateManip: ClassVar[int] = ...
    kPluginManipContainer: ClassVar[int] = ...
    kPolySewEdge: ClassVar[int] = ...
    kPolyMergeVert: ClassVar[int] = ...
    kPolySmoothFacet: ClassVar[int] = ...
    kSmoothCurve: ClassVar[int] = ...
    kGlobalStitch: ClassVar[int] = ...
    kSubdivCVComponent: ClassVar[int] = ...
    kSubdivEdgeComponent: ClassVar[int] = ...
    kSubdivFaceComponent: ClassVar[int] = ...
    kUVManip2D: ClassVar[int] = ...
    kTranslateUVManip2D: ClassVar[int] = ...
    kRotateUVManip2D: ClassVar[int] = ...
    kScaleUVManip2D: ClassVar[int] = ...
    kPolyTweakUV: ClassVar[int] = ...
    kMoveUVShellManip2D: ClassVar[int] = ...
    kPluginShape: ClassVar[int] = ...
    kGeometryData: ClassVar[int] = ...
    kSingleIndexedComponent: ClassVar[int] = ...
    kDoubleIndexedComponent: ClassVar[int] = ...
    kTripleIndexedComponent: ClassVar[int] = ...
    kExtendSurfaceDistanceManip: ClassVar[int] = ...
    kSquareSrf: ClassVar[int] = ...
    kSquareSrfManip: ClassVar[int] = ...
    kSubdivToPoly: ClassVar[int] = ...
    kDynBase: ClassVar[int] = ...
    kDynEmitterManip: ClassVar[int] = ...
    kDynFieldsManip: ClassVar[int] = ...
    kDynBaseFieldManip: ClassVar[int] = ...
    kDynAirManip: ClassVar[int] = ...
    kDynNewtonManip: ClassVar[int] = ...
    kDynTurbulenceManip: ClassVar[int] = ...
    kDynSpreadManip: ClassVar[int] = ...
    kDynAttenuationManip: ClassVar[int] = ...
    kDynArrayAttrsData: ClassVar[int] = ...
    kPluginFieldNode: ClassVar[int] = ...
    kPluginEmitterNode: ClassVar[int] = ...
    kPluginSpringNode: ClassVar[int] = ...
    kDisplayLayer: ClassVar[int] = ...
    kDisplayLayerManager: ClassVar[int] = ...
    kPolyColorPerVertex: ClassVar[int] = ...
    kCreateColorSet: ClassVar[int] = ...
    kDeleteColorSet: ClassVar[int] = ...
    kCopyColorSet: ClassVar[int] = ...
    kBlendColorSet: ClassVar[int] = ...
    kPolyColorMod: ClassVar[int] = ...
    kPolyColorDel: ClassVar[int] = ...
    kCharacterMappingData: ClassVar[int] = ...
    kDynSweptGeometryData: ClassVar[int] = ...
    kWrapFilter: ClassVar[int] = ...
    kMeshVtxFaceComponent: ClassVar[int] = ...
    kBinaryData: ClassVar[int] = ...
    kAttribute2Double: ClassVar[int] = ...
    kAttribute2Float: ClassVar[int] = ...
    kAttribute2Short: ClassVar[int] = ...
    kAttribute2Int: ClassVar[int] = ...
    kAttribute3Double: ClassVar[int] = ...
    kAttribute3Float: ClassVar[int] = ...
    kAttribute3Short: ClassVar[int] = ...
    kAttribute3Int: ClassVar[int] = ...
    kReference: ClassVar[int] = ...
    kBlindData: ClassVar[int] = ...
    kBlindDataTemplate: ClassVar[int] = ...
    kPolyBlindData: ClassVar[int] = ...
    kPolyNormalPerVertex: ClassVar[int] = ...
    kNurbsToSubdiv: ClassVar[int] = ...
    kPluginIkSolver: ClassVar[int] = ...
    kInstancer: ClassVar[int] = ...
    kMoveVertexManip: ClassVar[int] = ...
    kStroke: ClassVar[int] = ...
    kBrush: ClassVar[int] = ...
    kStrokeGlobals: ClassVar[int] = ...
    kPluginGeometryData: ClassVar[int] = ...
    kLightLink: ClassVar[int] = ...
    kDynGlobals: ClassVar[int] = ...
    kPolyReduce: ClassVar[int] = ...
    kLodThresholds: ClassVar[int] = ...
    kChooser: ClassVar[int] = ...
    kLodGroup: ClassVar[int] = ...
    kMultDoubleLinear: ClassVar[int] = ...
    kFourByFourMatrix: ClassVar[int] = ...
    kTowPointOnSurfaceManip: ClassVar[int] = ...
    kSurfaceEdManip: ClassVar[int] = ...
    kSurfaceFaceComponent: ClassVar[int] = ...
    kClipScheduler: ClassVar[int] = ...
    kClipLibrary: ClassVar[int] = ...
    kSubSurface: ClassVar[int] = ...
    kSmoothTangentSrf: ClassVar[int] = ...
    kRenderPass: ClassVar[int] = ...
    kRenderPassSet: ClassVar[int] = ...
    kRenderLayer: ClassVar[int] = ...
    kRenderLayerManager: ClassVar[int] = ...
    kPassContributionMap: ClassVar[int] = ...
    kPrecompExport: ClassVar[int] = ...
    kRenderTarget: ClassVar[int] = ...
    kRenderedImageSource: ClassVar[int] = ...
    kImageSource: ClassVar[int] = ...
    kPolyFlipEdge: ClassVar[int] = ...
    kPolyExtrudeEdge: ClassVar[int] = ...
    kAnimBlend: ClassVar[int] = ...
    kAnimBlendInOut: ClassVar[int] = ...
    kPolyAppendVertex: ClassVar[int] = ...
    kUvChooser: ClassVar[int] = ...
    kSubdivCompId: ClassVar[int] = ...
    kVolumeAxis: ClassVar[int] = ...
    kDeleteUVSet: ClassVar[int] = ...
    kSubdHierBlind: ClassVar[int] = ...
    kSubdBlindData: ClassVar[int] = ...
    kCharacterMap: ClassVar[int] = ...
    kLayeredTexture: ClassVar[int] = ...
    kSubdivCollapse: ClassVar[int] = ...
    kParticleSamplerInfo: ClassVar[int] = ...
    kCopyUVSet: ClassVar[int] = ...
    kCreateUVSet: ClassVar[int] = ...
    kClip: ClassVar[int] = ...
    kPolySplitVert: ClassVar[int] = ...
    kSubdivData: ClassVar[int] = ...
    kSubdivGeom: ClassVar[int] = ...
    kUInt64ArrayData: ClassVar[int] = ...
    kInt64ArrayData: ClassVar[int] = ...
    kPolySplitEdge: ClassVar[int] = ...
    kSubdivReverseFaces: ClassVar[int] = ...
    kMeshMapComponent: ClassVar[int] = ...
    kSectionManip: ClassVar[int] = ...
    kXsectionSubdivEdit: ClassVar[int] = ...
    kSubdivToNurbs: ClassVar[int] = ...
    kEditCurve: ClassVar[int] = ...
    kEditCurveManip: ClassVar[int] = ...
    kCrossSectionManager: ClassVar[int] = ...
    kCreateSectionManip: ClassVar[int] = ...
    kCrossSectionEditManip: ClassVar[int] = ...
    kDropOffFunction: ClassVar[int] = ...
    kSubdBoolean: ClassVar[int] = ...
    kSubdModifyEdge: ClassVar[int] = ...
    kModifyEdgeCrvManip: ClassVar[int] = ...
    kModifyEdgeManip: ClassVar[int] = ...
    kScalePointManip: ClassVar[int] = ...
    kTransformBoxManip: ClassVar[int] = ...
    kSymmetryLocator: ClassVar[int] = ...
    kSymmetryMapVector: ClassVar[int] = ...
    kSymmetryMapCurve: ClassVar[int] = ...
    kCurveFromSubdivEdge: ClassVar[int] = ...
    kCreateBPManip: ClassVar[int] = ...
    kModifyEdgeBaseManip: ClassVar[int] = ...
    kSubdExtrudeFace: ClassVar[int] = ...
    kSubdivSurfaceVarGroup: ClassVar[int] = ...
    kSfRevolveManip: ClassVar[int] = ...
    kCurveFromSubdivFace: ClassVar[int] = ...
    kUnused1: ClassVar[int] = ...
    kUnused2: ClassVar[int] = ...
    kUnused3: ClassVar[int] = ...
    kUnused4: ClassVar[int] = ...
    kUnused5: ClassVar[int] = ...
    kUnused6: ClassVar[int] = ...
    kPolyTransfer: ClassVar[int] = ...
    kPolyAverageVertex: ClassVar[int] = ...
    kPolyAutoProj: ClassVar[int] = ...
    kPolyLayoutUV: ClassVar[int] = ...
    kPolyMapSewMove: ClassVar[int] = ...
    kSubdModifier: ClassVar[int] = ...
    kSubdMoveVertex: ClassVar[int] = ...
    kSubdMoveEdge: ClassVar[int] = ...
    kSubdMoveFace: ClassVar[int] = ...
    kSubdDelFace: ClassVar[int] = ...
    kSnapshotShape: ClassVar[int] = ...
    kSubdivMapComponent: ClassVar[int] = ...
    kJiggleDeformer: ClassVar[int] = ...
    kGlobalCacheControls: ClassVar[int] = ...
    kDiskCache: ClassVar[int] = ...
    kSubdCloseBorder: ClassVar[int] = ...
    kSubdMergeVert: ClassVar[int] = ...
    kBoxData: ClassVar[int] = ...
    kBox: ClassVar[int] = ...
    kRenderBox: ClassVar[int] = ...
    kSubdSplitFace: ClassVar[int] = ...
    kVolumeFog: ClassVar[int] = ...
    kSubdTweakUV: ClassVar[int] = ...
    kSubdMapCut: ClassVar[int] = ...
    kSubdLayoutUV: ClassVar[int] = ...
    kSubdMapSewMove: ClassVar[int] = ...
    kOcean: ClassVar[int] = ...
    kVolumeNoise: ClassVar[int] = ...
    kSubdAutoProj: ClassVar[int] = ...
    kSubdSubdivideFace: ClassVar[int] = ...
    kNoise: ClassVar[int] = ...
    kAttribute4Double: ClassVar[int] = ...
    kData4Double: ClassVar[int] = ...
    kSubdPlanProj: ClassVar[int] = ...
    kSubdTweak: ClassVar[int] = ...
    kSubdProjectionManip: ClassVar[int] = ...
    kSubdMappingManip: ClassVar[int] = ...
    kHardwareReflectionMap: ClassVar[int] = ...
    kPolyNormalizeUV: ClassVar[int] = ...
    kPolyFlipUV: ClassVar[int] = ...
    kHwShaderNode: ClassVar[int] = ...
    kPluginHardwareShader: ClassVar[int] = ...
    kPluginHwShaderNode: ClassVar[int] = ...
    kSubdAddTopology: ClassVar[int] = ...
    kSubdCleanTopology: ClassVar[int] = ...
    kImplicitCone: ClassVar[int] = ...
    kImplicitSphere: ClassVar[int] = ...
    kRampShader: ClassVar[int] = ...
    kVolumeLight: ClassVar[int] = ...
    kOceanShader: ClassVar[int] = ...
    kBevelPlus: ClassVar[int] = ...
    kStyleCurve: ClassVar[int] = ...
    kPolyCut: ClassVar[int] = ...
    kPolyPoke: ClassVar[int] = ...
    kPolyWedgeFace: ClassVar[int] = ...
    kPolyCutManipContainer: ClassVar[int] = ...
    kPolyCutManip: ClassVar[int] = ...
    kPolyMirrorManipContainer: ClassVar[int] = ...
    kPolyPokeManip: ClassVar[int] = ...
    kFluidTexture3D: ClassVar[int] = ...
    kFluidTexture2D: ClassVar[int] = ...
    kPolyMergeUV: ClassVar[int] = ...
    kPolyStraightenUVBorder: ClassVar[int] = ...
    kAlignManip: ClassVar[int] = ...
    kPluginTransformNode: ClassVar[int] = ...
    kFluid: ClassVar[int] = ...
    kFluidGeom: ClassVar[int] = ...
    kFluidData: ClassVar[int] = ...
    kSmear: ClassVar[int] = ...
    kStringShadingSwitch: ClassVar[int] = ...
    kStudioClearCoat: ClassVar[int] = ...
    kFluidEmitter: ClassVar[int] = ...
    kHeightField: ClassVar[int] = ...
    kGeoConnector: ClassVar[int] = ...
    kSnapshotPath: ClassVar[int] = ...
    kPluginObjectSet: ClassVar[int] = ...
    kQuadShadingSwitch: ClassVar[int] = ...
    kPolyExtrudeVertex: ClassVar[int] = ...
    kPairBlend: ClassVar[int] = ...
    kTextManip: ClassVar[int] = ...
    kViewManip: ClassVar[int] = ...
    kXformManip: ClassVar[int] = ...
    kMute: ClassVar[int] = ...
    kConstraint: ClassVar[int] = ...
    kTrimWithBoundaries: ClassVar[int] = ...
    kCurveFromMeshCoM: ClassVar[int] = ...
    kFollicle: ClassVar[int] = ...
    kHairSystem: ClassVar[int] = ...
    kRemapValue: ClassVar[int] = ...
    kRemapColor: ClassVar[int] = ...
    kRemapHsv: ClassVar[int] = ...
    kHairConstraint: ClassVar[int] = ...
    kTimeFunction: ClassVar[int] = ...
    kMentalRayTexture: ClassVar[int] = ...
    kObjectBinFilter: ClassVar[int] = ...
    kPolySmoothProxy: ClassVar[int] = ...
    kPfxGeometry: ClassVar[int] = ...
    kPfxHair: ClassVar[int] = ...
    kHairTubeShader: ClassVar[int] = ...
    kPsdFileTexture: ClassVar[int] = ...
    kKeyframeDelta: ClassVar[int] = ...
    kKeyframeDeltaMove: ClassVar[int] = ...
    kKeyframeDeltaScale: ClassVar[int] = ...
    kKeyframeDeltaAddRemove: ClassVar[int] = ...
    kKeyframeDeltaBlockAddRemove: ClassVar[int] = ...
    kKeyframeDeltaInfType: ClassVar[int] = ...
    kKeyframeDeltaTangent: ClassVar[int] = ...
    kKeyframeDeltaWeighted: ClassVar[int] = ...
    kKeyframeDeltaBreakdown: ClassVar[int] = ...
    kPolyMirror: ClassVar[int] = ...
    kPolyCreaseEdge: ClassVar[int] = ...
    kPolyPinUV: ClassVar[int] = ...
    kHikEffector: ClassVar[int] = ...
    kHikIKEffector: ClassVar[int] = ...
    kHikFKJoint: ClassVar[int] = ...
    kHikSolver: ClassVar[int] = ...
    kHikHandle: ClassVar[int] = ...
    kProxyManager: ClassVar[int] = ...
    kPolyAutoProjManip: ClassVar[int] = ...
    kPolyPrism: ClassVar[int] = ...
    kPolyPyramid: ClassVar[int] = ...
    kPolySplitRing: ClassVar[int] = ...
    kPfxToon: ClassVar[int] = ...
    kToonLineAttributes: ClassVar[int] = ...
    kPolyDuplicateEdge: ClassVar[int] = ...
    kFacade: ClassVar[int] = ...
    kMaterialFacade: ClassVar[int] = ...
    kEnvFacade: ClassVar[int] = ...
    kAISEnvFacade: ClassVar[int] = ...
    kLineModifier: ClassVar[int] = ...
    kPolyArrow: ClassVar[int] = ...
    kPolyPrimitiveMisc: ClassVar[int] = ...
    kPolyPlatonicSolid: ClassVar[int] = ...
    kPolyPipe: ClassVar[int] = ...
    kHikFloorContactMarker: ClassVar[int] = ...
    kHikGroundPlane: ClassVar[int] = ...
    kPolyComponentData: ClassVar[int] = ...
    kPolyHelix: ClassVar[int] = ...
    kCacheFile: ClassVar[int] = ...
    kHistorySwitch: ClassVar[int] = ...
    kClosestPointOnMesh: ClassVar[int] = ...
    kUVPin: ClassVar[int] = ...
    kProximityPin: ClassVar[int] = ...
    kTransferAttributes: ClassVar[int] = ...
    kDynamicConstraint: ClassVar[int] = ...
    kNComponent: ClassVar[int] = ...
    kPolyBridgeEdge: ClassVar[int] = ...
    kCacheableNode: ClassVar[int] = ...
    kNucleus: ClassVar[int] = ...
    kNBase: ClassVar[int] = ...
    kCacheBase: ClassVar[int] = ...
    kCacheBlend: ClassVar[int] = ...
    kCacheTrack: ClassVar[int] = ...
    kKeyframeRegionManip: ClassVar[int] = ...
    kCurveNormalizerAngle: ClassVar[int] = ...
    kCurveNormalizerLinear: ClassVar[int] = ...
    kHyperLayoutDG: ClassVar[int] = ...
    kPluginImagePlaneNode: ClassVar[int] = ...
    kNCloth: ClassVar[int] = ...
    kNParticle: ClassVar[int] = ...
    kNRigid: ClassVar[int] = ...
    kPluginParticleAttributeMapperNode: ClassVar[int] = ...
    kCameraSet: ClassVar[int] = ...
    kPluginCameraSet: ClassVar[int] = ...
    kContainer: ClassVar[int] = ...
    kFloatVectorArrayData: ClassVar[int] = ...
    kNObjectData: ClassVar[int] = ...
    kNObject: ClassVar[int] = ...
    kPluginConstraintNode: ClassVar[int] = ...
    kAsset: ClassVar[int] = ...
    kPolyEdgeToCurve: ClassVar[int] = ...
    kAnimLayer: ClassVar[int] = ...
    kBlendNodeBase: ClassVar[int] = ...
    kBlendNodeBoolean: ClassVar[int] = ...
    kBlendNodeDouble: ClassVar[int] = ...
    kBlendNodeDoubleAngle: ClassVar[int] = ...
    kBlendNodeDoubleLinear: ClassVar[int] = ...
    kBlendNodeEnum: ClassVar[int] = ...
    kBlendNodeFloat: ClassVar[int] = ...
    kBlendNodeFloatAngle: ClassVar[int] = ...
    kBlendNodeFloatLinear: ClassVar[int] = ...
    kBlendNodeInt16: ClassVar[int] = ...
    kBlendNodeInt32: ClassVar[int] = ...
    kBlendNodeAdditiveScale: ClassVar[int] = ...
    kBlendNodeAdditiveRotation: ClassVar[int] = ...
    kPluginManipulatorNode: ClassVar[int] = ...
    kNIdData: ClassVar[int] = ...
    kNId: ClassVar[int] = ...
    kFloatArrayData: ClassVar[int] = ...
    kMembrane: ClassVar[int] = ...
    kMergeVertsToolManip: ClassVar[int] = ...
    kUint64SingleIndexedComponent: ClassVar[int] = ...
    kPolyToolFeedbackManip: ClassVar[int] = ...
    kPolySelectEditFeedbackManip: ClassVar[int] = ...
    kWriteToFrameBuffer: ClassVar[int] = ...
    kWriteToColorBuffer: ClassVar[int] = ...
    kWriteToVectorBuffer: ClassVar[int] = ...
    kWriteToDepthBuffer: ClassVar[int] = ...
    kWriteToLabelBuffer: ClassVar[int] = ...
    kStereoCameraMaster: ClassVar[int] = ...
    kSequenceManager: ClassVar[int] = ...
    kSequencer: ClassVar[int] = ...
    kShot: ClassVar[int] = ...
    kBlendNodeTime: ClassVar[int] = ...
    kCreateBezierManip: ClassVar[int] = ...
    kBezierCurve: ClassVar[int] = ...
    kBezierCurveData: ClassVar[int] = ...
    kNurbsCurveToBezier: ClassVar[int] = ...
    kBezierCurveToNurbs: ClassVar[int] = ...
    kPolySpinEdge: ClassVar[int] = ...
    kPolyHoleFace: ClassVar[int] = ...
    kPointOnPolyConstraint: ClassVar[int] = ...
    kPolyConnectComponents: ClassVar[int] = ...
    kSkinBinding: ClassVar[int] = ...
    kVolumeBindManip: ClassVar[int] = ...
    kVertexWeightSet: ClassVar[int] = ...
    kNearestPointOnCurve: ClassVar[int] = ...
    kColorProfile: ClassVar[int] = ...
    kAdskMaterial: ClassVar[int] = ...
    kContainerBase: ClassVar[int] = ...
    kDagContainer: ClassVar[int] = ...
    kPolyUVRectangle: ClassVar[int] = ...
    kHardwareRenderingGlobals: ClassVar[int] = ...
    kPolyProjectCurve: ClassVar[int] = ...
    kRenderingList: ClassVar[int] = ...
    kPolyExtrudeManip: ClassVar[int] = ...
    kPolyExtrudeManipContainer: ClassVar[int] = ...
    kThreadedDevice: ClassVar[int] = ...
    kClientDevice: ClassVar[int] = ...
    kPluginClientDevice: ClassVar[int] = ...
    kPluginThreadedDevice: ClassVar[int] = ...
    kTimeWarp: ClassVar[int] = ...
    kAssembly: ClassVar[int] = ...
    kClipGhostShape: ClassVar[int] = ...
    kClipToGhostData: ClassVar[int] = ...
    kMandelbrot: ClassVar[int] = ...
    kMandelbrot3D: ClassVar[int] = ...
    kGreasePlane: ClassVar[int] = ...
    kGreasePlaneRenderShape: ClassVar[int] = ...
    kGreasePencilSequence: ClassVar[int] = ...
    kEditMetadata: ClassVar[int] = ...
    kCreaseSet: ClassVar[int] = ...
    kPolyEditEdgeFlow: ClassVar[int] = ...
    kFosterParent: ClassVar[int] = ...
    kSnapUVManip2D: ClassVar[int] = ...
    kToolContext: ClassVar[int] = ...
    kNLE: ClassVar[int] = ...
    kShrinkWrapFilter: ClassVar[int] = ...
    kEditsManager: ClassVar[int] = ...
    kPolyBevel2: ClassVar[int] = ...
    kPolyCBoolOp: ClassVar[int] = ...
    kGeomBind: ClassVar[int] = ...
    kColorMgtGlobals: ClassVar[int] = ...
    kPolyBevel3: ClassVar[int] = ...
    kTimeEditorClipBase: ClassVar[int] = ...
    kTimeEditorClipEvaluator: ClassVar[int] = ...
    kTimeEditorClip: ClassVar[int] = ...
    kTimeEditor: ClassVar[int] = ...
    kTimeEditorTracks: ClassVar[int] = ...
    kTimeEditorInterpolator: ClassVar[int] = ...
    kTimeEditorAnimSource: ClassVar[int] = ...
    kCaddyManipBase: ClassVar[int] = ...
    kPolyCaddyManip: ClassVar[int] = ...
    kPolyModifierManipContainer: ClassVar[int] = ...
    kPolyRemesh: ClassVar[int] = ...
    kPolyContourProj: ClassVar[int] = ...
    kContourProjectionManip: ClassVar[int] = ...
    kNodeGraphEditorInfo: ClassVar[int] = ...
    kNodeGraphEditorBookmarks: ClassVar[int] = ...
    kNodeGraphEditorBookmarkInfo: ClassVar[int] = ...
    kPluginSkinCluster: ClassVar[int] = ...
    kPluginGeometryFilter: ClassVar[int] = ...
    kPluginBlendShape: ClassVar[int] = ...
    kPolyPassThru: ClassVar[int] = ...
    kTrackInfoManager: ClassVar[int] = ...
    kPolyClean: ClassVar[int] = ...
    kShapeEditorManager: ClassVar[int] = ...
    kOceanDeformer: ClassVar[int] = ...
    kPoseInterpolatorManager: ClassVar[int] = ...
    kControllerTag: ClassVar[int] = ...
    kReForm: ClassVar[int] = ...
    kCustomEvaluatorClusterNode: ClassVar[int] = ...
    kPolyCircularize: ClassVar[int] = ...
    kArubaTesselate: ClassVar[int] = ...
    kReorderUVSet: ClassVar[int] = ...
    kUfeProxyTransform: ClassVar[int] = ...
    kDecomposeMatrix: ClassVar[int] = ...
    kComposeMatrix: ClassVar[int] = ...
    kBlendMatrix: ClassVar[int] = ...
    kPickMatrix: ClassVar[int] = ...
    kAimMatrix: ClassVar[int] = ...
    kPrimitiveFalloff: ClassVar[int] = ...
    kBlendFalloff: ClassVar[int] = ...
    kUniformFalloff: ClassVar[int] = ...
    kTransferFalloff: ClassVar[int] = ...
    kComponentFalloff: ClassVar[int] = ...
    kProximityFalloff: ClassVar[int] = ...
    kSubsetFalloff: ClassVar[int] = ...
    kWeightFunctionData: ClassVar[int] = ...
    kFalloffEval: ClassVar[int] = ...
    kComponentMatch: ClassVar[int] = ...
    kPolyUnsmooth: ClassVar[int] = ...
    kPolySmartExtrude: ClassVar[int] = ...
    kPolySmartExtrudeManip: ClassVar[int] = ...
    kPolyReFormManipContainer: ClassVar[int] = ...
    kPolyReFormManip: ClassVar[int] = ...
    kPolyAxis: ClassVar[int] = ...
    kAngleToDoubleNode: ClassVar[int] = ...
    kDoubleToAngleNode: ClassVar[int] = ...
    kAbsolute: ClassVar[int] = ...
    kACos: ClassVar[int] = ...
    kAnd: ClassVar[int] = ...
    kASin: ClassVar[int] = ...
    kATan: ClassVar[int] = ...
    kATan2: ClassVar[int] = ...
    kAverage: ClassVar[int] = ...
    kCeil: ClassVar[int] = ...
    kClampRange: ClassVar[int] = ...
    kCos: ClassVar[int] = ...
    kDeterminant: ClassVar[int] = ...
    kEqual: ClassVar[int] = ...
    kFloor: ClassVar[int] = ...
    kGreaterThan: ClassVar[int] = ...
    kInverseLinearInterpolation: ClassVar[int] = ...
    kLength: ClassVar[int] = ...
    kLessThan: ClassVar[int] = ...
    kLinearInterpolation: ClassVar[int] = ...
    kLog: ClassVar[int] = ...
    kMax: ClassVar[int] = ...
    kMin: ClassVar[int] = ...
    kModulo: ClassVar[int] = ...
    kMultiply: ClassVar[int] = ...
    kNegate: ClassVar[int] = ...
    kNormalize: ClassVar[int] = ...
    kNot: ClassVar[int] = ...
    kOr: ClassVar[int] = ...
    kPIConstant: ClassVar[int] = ...
    kPower: ClassVar[int] = ...
    kRotateVector: ClassVar[int] = ...
    kRound: ClassVar[int] = ...
    kSin: ClassVar[int] = ...
    kSmoothStep: ClassVar[int] = ...
    kSum: ClassVar[int] = ...
    kTan: ClassVar[int] = ...
    kTruncate: ClassVar[int] = ...
    kDotProduct: ClassVar[int] = ...
    kCrossProduct: ClassVar[int] = ...
    kMultiplyPointByMatrix: ClassVar[int] = ...
    kMultiplyVectorByMatrix: ClassVar[int] = ...
    kAxisFromMatrix: ClassVar[int] = ...
    kDivide: ClassVar[int] = ...
    kSubtract: ClassVar[int] = ...
    kTranslationFromMatrix: ClassVar[int] = ...
    kRowFromMatrix: ClassVar[int] = ...
    kColumnFromMatrix: ClassVar[int] = ...
    kScaleFromMatrix: ClassVar[int] = ...
    kRotationFromMatrix: ClassVar[int] = ...
    kParentMatrix: ClassVar[int] = ...
    kPolyBevelCutback: ClassVar[int] = ...
    kOpenPBRSurface: ClassVar[int] = ...

class MFnBase:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def hasObj(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def object(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setObject(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def type(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnAttribute(MFnBase):
    kDelete: ClassVar[int] = ...
    kReset: ClassVar[int] = ...
    kNothing: ClassVar[int] = ...
    affectsAppearance: Incomplete
    isProxyAttribute: Incomplete
    affectsWorldSpace: Incomplete
    array: Incomplete
    cached: Incomplete
    channelBox: Incomplete
    connectable: Incomplete
    disconnectBehavior: Incomplete
    dynamic: Incomplete
    extension: Incomplete
    hidden: Incomplete
    indeterminant: Incomplete
    indexMatters: Incomplete
    internal: Incomplete
    keyable: Incomplete
    name: Incomplete
    parent: Incomplete
    readable: Incomplete
    renderSource: Incomplete
    shortName: Incomplete
    storable: Incomplete
    usedAsColor: Incomplete
    usedAsFilename: Incomplete
    usesArrayDataBuilder: Incomplete
    worldSpace: Incomplete
    writable: Incomplete
    enforcingUniqueName: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def acceptsAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def accepts(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def addToCategory(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getAddAttrCmd(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def pathName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasCategory(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setNiceNameOverride(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnCompoundAttribute(MFnAttribute):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addChild(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def child(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getAddAttrCmds(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numChildren(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeChild(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnEnumAttribute(MFnAttribute):
    default: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addField(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def fieldName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def fieldValue(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setDefaultByName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnGenericAttribute(MFnAttribute):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addDataType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def addNumericType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def addTypeId(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeDataType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeNumericType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeTypeId(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnLightDataAttribute(MFnAttribute):
    default: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def child(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnMatrixAttribute(MFnAttribute):
    kFloat: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    default: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnMessageAttribute(MFnAttribute):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnNumericAttribute(MFnAttribute):
    default: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def child(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def createAddr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def createColor(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def createPoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getSoftMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getSoftMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasSoftMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasSoftMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numericType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setSoftMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setSoftMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnTypedAttribute(MFnAttribute):
    default: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def attrType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnUnitAttribute(MFnAttribute):
    kInvalid: ClassVar[int] = ...
    kAngle: ClassVar[int] = ...
    kDistance: ClassVar[int] = ...
    kTime: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    default: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getSoftMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getSoftMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasSoftMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasSoftMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setSoftMax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setSoftMin(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def unitType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnComponent(MFnBase):
    componentType: Incomplete
    elementCount: Incomplete
    hasWeights: Incomplete
    isComplete: Incomplete
    isEmpty: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def isEqual(self, MObjectother: Incomplete) -> bool: ...
    def weight(self, index: Incomplete) -> MWeight: ...

class MFnDoubleIndexedComponent(MFnComponent):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addElement(self, uIndex: Incomplete, vIndex: Incomplete) -> Self: ...
    def addElements(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, MFnTypeconstant: Incomplete) -> MObject: ...
    def getCompleteData(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getElement(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getElements(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setCompleteData(self, numU: Incomplete, numV: Incomplete) -> Self: ...

class MFnSingleIndexedComponent(MFnComponent):
    elementMax: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addElement(self, intelement: Incomplete) -> Self: ...
    def addElements(self, MIntArray: Incomplete) -> Self: ...
    def create(self, MFnTypeconstant: Incomplete) -> MObject: ...
    def element(self, index: Incomplete) -> int: ...
    def getCompleteData(self) -> int: ...
    def getElements(self) -> MIntArray: ...
    def setCompleteData(self, numElements: Incomplete) -> Self: ...

class MFnTripleIndexedComponent(MFnComponent):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addElement(self, sIndex: Incomplete, tIndex: Incomplete, uIndex: Incomplete) -> Self: ...
    def addElements(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, MFnTypeconstant: Incomplete) -> MObject: ...
    def getCompleteData(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getElement(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getElements(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setCompleteData(self, numS: Incomplete, numT: Incomplete, numU: Incomplete) -> Self: ...

class MFnData(MFnBase):
    kInvalid: ClassVar[int] = ...
    kNumeric: ClassVar[int] = ...
    kPlugin: ClassVar[int] = ...
    kPluginGeometry: ClassVar[int] = ...
    kString: ClassVar[int] = ...
    kMatrix: ClassVar[int] = ...
    kStringArray: ClassVar[int] = ...
    kDoubleArray: ClassVar[int] = ...
    kFloatArray: ClassVar[int] = ...
    kIntArray: ClassVar[int] = ...
    kPointArray: ClassVar[int] = ...
    kVectorArray: ClassVar[int] = ...
    kMatrixArray: ClassVar[int] = ...
    kComponentList: ClassVar[int] = ...
    kMesh: ClassVar[int] = ...
    kLattice: ClassVar[int] = ...
    kNurbsCurve: ClassVar[int] = ...
    kNurbsSurface: ClassVar[int] = ...
    kSphere: ClassVar[int] = ...
    kDynArrayAttrs: ClassVar[int] = ...
    kDynSweptGeometry: ClassVar[int] = ...
    kSubdSurface: ClassVar[int] = ...
    kNObject: ClassVar[int] = ...
    kNId: ClassVar[int] = ...
    kAny: ClassVar[int] = ...
    kFalloffFunction: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class MFnComponentListData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def add(self, MObject: Incomplete) -> Self: ...
    def clear(self) -> Self: ...
    def create(self) -> MObject: ...
    def get(self, index: Incomplete) -> MObject: ...
    def length(self) -> int: ...
    def has(self, MObject: Incomplete) -> bool: ...
    @overload
    def remove(self, MObject: Incomplete) -> Self: ...
    @overload
    def remove(self, index: Incomplete) -> Self: ...

class MFnDoubleArrayData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def array(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copyTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnGeometryData(MFnData):
    kAuto: ClassVar[int] = ...
    kNull: ClassVar[int] = ...
    kVerts: ClassVar[int] = ...
    kEdges: ClassVar[int] = ...
    kFaces: ClassVar[int] = ...
    kUnsupported: ClassVar[int] = ...
    kInvalidGroup: ClassVar[int] = ...
    kEmptyGroup: ClassVar[int] = ...
    kCompleteGroup: ClassVar[int] = ...
    kPartialGroup: ClassVar[int] = ...
    matrix: Incomplete
    isIdentity: Incomplete
    isNotIdentity: Incomplete
    objectGroupCount: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addObjectGroup(self, id: Incomplete) -> Self: ...
    def addObjectGroupComponent(self, id: Incomplete, MObjectcomponent: Incomplete) -> Self: ...
    def changeObjectGroupId(self, sourceId: Incomplete, destId: Incomplete) -> Self: ...
    def copyObjectGroups(self, MObjectinGeom: Incomplete) -> Self: ...
    def hasObjectGroup(self, id: Incomplete) -> Self: ...
    def objectGroup(self, index: Incomplete) -> int: ...
    def objectGroupComponent(self, id: Incomplete) -> MObject: ...
    def objectGroupType(self, id: Incomplete) -> MFnTypeconstant: ...  # type: ignore[name-defined]
    def removeObjectGroup(self, id: Incomplete) -> Self: ...
    def removeObjectGroupComponent(self, id: Incomplete, MObjectcomponent: Incomplete) -> Self: ...
    def setObjectGroupComponent(self, id: Incomplete, MObjectcomponent: Incomplete) -> Self: ...
    def hasComponentTag(self, key: Incomplete) -> bool: ...
    def addComponentTag(self, key: Incomplete) -> Self: ...
    def removeComponentTag(self, key: Incomplete) -> Self: ...
    def renameComponentTag(self, key: Incomplete, newKey: Incomplete) -> Self: ...
    def componentTagType(self, key: Incomplete) -> MFnTypeconstant: ...  # type: ignore[name-defined]
    def setComponentTagContents(self, key: Incomplete, MObjectcomponent: Incomplete) -> Self: ...
    def componentTagContents(self, key: Incomplete) -> MObject: ...
    def componentTags(self) -> MObject: ...
    def objectGroupSubsetState(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def componentTagExpressionSubsetState(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def resolveComponentTagExpression(self, key: Incomplete, ctg: Incomplete) -> MObject: ...

class MFnMeshData(MFnGeometryData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self) -> MObject: ...

class MFnNurbsCurveData(MFnGeometryData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self) -> MObject: ...

class MFnNurbsSurfaceData(MFnGeometryData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self) -> MObject: ...

class MFnIntArrayData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def array(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copyTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnMatrixArrayData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def array(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copyTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnMatrixData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isTransformation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def matrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def transformation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnNumericData(MFnData):
    kInvalid: ClassVar[int] = ...
    kBoolean: ClassVar[int] = ...
    kByte: ClassVar[int] = ...
    kChar: ClassVar[int] = ...
    kShort: ClassVar[int] = ...
    k2Short: ClassVar[int] = ...
    k3Short: ClassVar[int] = ...
    kLong: ClassVar[int] = ...
    kInt: ClassVar[int] = ...
    k2Long: ClassVar[int] = ...
    k2Int: ClassVar[int] = ...
    k3Long: ClassVar[int] = ...
    k3Int: ClassVar[int] = ...
    kInt64: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    k2Float: ClassVar[int] = ...
    k3Float: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    k2Double: ClassVar[int] = ...
    k3Double: ClassVar[int] = ...
    k4Double: ClassVar[int] = ...
    kAddr: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getData(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numericType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setData(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnPointArrayData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def array(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copyTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnStringData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def string(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnStringArrayData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def array(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnUInt64ArrayData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def array(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copyTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnVectorArrayData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def array(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copyTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnDependencyNode(MFnBase):
    kLocalDynamicAttr: ClassVar[int] = ...
    kNormalAttr: ClassVar[int] = ...
    kExtensionAttr: ClassVar[int] = ...
    kInvalidAttr: ClassVar[int] = ...
    kTimerOff: ClassVar[int] = ...
    kTimerOn: ClassVar[int] = ...
    kTimerUninitialized: ClassVar[int] = ...
    kTimerInvalidState: ClassVar[int] = ...
    kTimerMetric_callback: ClassVar[int] = ...
    kTimerMetric_compute: ClassVar[int] = ...
    kTimerMetric_dirty: ClassVar[int] = ...
    kTimerMetric_draw: ClassVar[int] = ...
    kTimerMetric_fetch: ClassVar[int] = ...
    kTimerMetric_callbackViaAPI: ClassVar[int] = ...
    kTimerMetric_callbackNotViaAPI: ClassVar[int] = ...
    kTimerMetric_computeDuringCallback: ClassVar[int] = ...
    kTimerMetric_computeNotDuringCallback: ClassVar[int] = ...
    kTimerMetrics: ClassVar[int] = ...
    kTimerType_self: ClassVar[int] = ...
    kTimerType_inclusive: ClassVar[int] = ...
    kTimerType_count: ClassVar[int] = ...
    kTimerTypes: ClassVar[int] = ...
    isDefaultNode: Incomplete
    isFromReferencedFile: Incomplete
    isLocked: Incomplete
    isShared: Incomplete
    namespace: Incomplete
    pluginName: Incomplete
    typeId: Incomplete
    typeName: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def allocateFlag(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def classification(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def deallocateAllFlags(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def deallocateFlag(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def absoluteName(self) -> Any: ...
    def uniqueName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def addAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def affectsAnimation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def attribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def attributeClass(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def attributeCount(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def canBeWritten(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dgCallbackIds(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dgCallbacks(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dgTimer(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dgTimerOff(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dgTimerOn(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dgTimerQueryState(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def dgTimerReset(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def findAlias(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def findPlug(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getAffectedAttributes(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getAffectingAttributes(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getAliasAttr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getAliasList(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getConnections(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasUniqueName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isFlagSet(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isNewAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isTrackingEdits(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def name(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def plugsAlias(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def reorderedAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setAffectsAnimation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setAlias(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setDoNotWrite(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setFlag(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setUuid(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def userNode(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def uuid(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def addExternalContentForFileAttr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getExternalContent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setExternalContent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setExternalContentForFileAttr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnDagNode(MFnDependencyNode):
    kNextPos: ClassVar[int] = ...
    boundingBox: Incomplete
    inModel: Incomplete
    inUnderWorld: Incomplete
    isInstanceable: Incomplete
    isIntermediateObject: Incomplete
    objectColor: Incomplete
    objectColorRGB: Incomplete
    useObjectColor: Incomplete
    objectColorType: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addChild(self, node: Incomplete, index: Incomplete = ..., keepExistingParents: Incomplete = ...) -> Self: ...
    def child(self, index: Incomplete) -> MObject: ...
    def childCount(self) -> int: ...
    def create(self, type: Incomplete, name: Incomplete = ..., parent: Incomplete = ...) -> MObject: ...
    def dagPath(self) -> MDagPath: ...
    def dagRoot(self) -> MObject: ...
    def duplicate(self, instance: Incomplete = ..., instanceLeaf: Incomplete = ...) -> MObject: ...
    def fullPathName(self) -> str: ...
    def getAllPaths(self) -> MDagPathArray: ...
    def getConnectedSetsAndMembers(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPath(self) -> MDagPath: ...
    def hasChild(self, node: Incomplete) -> bool: ...
    def hasParent(self, node: Incomplete) -> bool: ...
    def instanceCount(self, indirect: Incomplete) -> int: ...
    def isChildOf(self, node: Incomplete) -> bool: ...
    def isInstanced(self, indirect: Incomplete = ...) -> bool: ...
    def isInstancedAttribute(self, attr: Incomplete) -> bool: ...
    def isParentOf(self, node: Incomplete) -> bool: ...
    def parent(self, index: Incomplete) -> MObject: ...
    def parentCount(self) -> int: ...
    def partialPathName(self) -> str: ...
    def removeChild(self, node: Incomplete) -> Self: ...
    def removeChildAt(self, index: Incomplete) -> Self: ...
    def setObject(self, MObjectorMDagPath: Incomplete) -> Self: ...
    def transformationMatrix(self) -> MMatrix: ...

class MFnAssembly(MFnDagNode):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def getTopLevelAssemblies() -> MObjectArray: ...
    def createRepresentation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getRepresentations(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getParentAssembly(self) -> MObject: ...
    def getSubAssemblies(self) -> MObjectArray: ...
    @overload
    def postLoad(self) -> Self: ...
    @overload
    def postLoad(self) -> Any: ...  # type: ignore[overload-cannot-match]
    @overload
    def postLoad(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def activate(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getActive(self) -> str: ...
    @overload
    def activateNonRecursive(self) -> Any: ...
    @overload
    def activateNonRecursive(self) -> Any: ...  # type: ignore[overload-cannot-match]
    @overload
    def canActivate(self) -> bool: ...
    @overload
    def canActivate(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def isActive(self, representation: Incomplete) -> bool: ...
    def getInitialRep(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getRepType(self, representation: Incomplete) -> str: ...
    def getRepLabel(self, representation: Incomplete) -> str: ...
    def setRepName(self, representation: Incomplete, newName: Incomplete) -> str: ...
    def setRepLabel(self, representation: Incomplete, label: Incomplete) -> Self: ...
    def repTypes(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def canRepApplyEdits(self, representation: Incomplete) -> bool: ...
    def deleteRepresentation(self, representation: Incomplete) -> Self: ...
    def deleteAllRepresentations(self) -> Self: ...
    def isTopLevel(self) -> bool: ...
    def supportsEdits(self) -> bool: ...
    @overload
    def supportsMemberChanges(self) -> bool: ...
    @overload
    def supportsMemberChanges(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def getRepNamespace(self) -> str: ...
    def importFile(self) -> Any: ...
    def getAbsoluteRepNamespace(self) -> str: ...
    def handlesAddEdits(self) -> bool: ...

class MFnCamera(MFnDagNode):
    kFillFilmFit: ClassVar[int] = ...
    kHorizontalFilmFit: ClassVar[int] = ...
    kVerticalFilmFit: ClassVar[int] = ...
    kOverscanFilmFit: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kRotateTranslate: ClassVar[int] = ...
    kTranslateRotate: ClassVar[int] = ...
    horizontalFilmAperture: Incomplete
    verticalFilmAperture: Incomplete
    isVerticalLock: Incomplete
    horizontalFilmOffset: Incomplete
    verticalFilmOffset: Incomplete
    shakeEnabled: Incomplete
    horizontalShake: Incomplete
    verticalShake: Incomplete
    shakeOverscanEnabled: Incomplete
    shakeOverscan: Incomplete
    panZoomEnabled: Incomplete
    renderPanZoom: Incomplete
    horizontalPan: Incomplete
    verticalPan: Incomplete
    zoom: Incomplete
    stereoHITEnabled: Incomplete
    stereoHIT: Incomplete
    filmFit: Incomplete
    filmFitOffset: Incomplete
    overscan: Incomplete
    horizontalRollPivot: Incomplete
    verticalRollPivot: Incomplete
    filmRollValue: Incomplete
    filmRollOrder: Incomplete
    preScale: Incomplete
    postScale: Incomplete
    filmTranslateH: Incomplete
    filmTranslateV: Incomplete
    isDisplayGateMask: Incomplete
    isDisplayFilmGate: Incomplete
    focalLength: Incomplete
    lensSqueezeRatio: Incomplete
    isClippingPlanes: Incomplete
    nearClippingPlane: Incomplete
    farClippingPlane: Incomplete
    isDepthOfField: Incomplete
    fStop: Incomplete
    focusDistance: Incomplete
    nearFocusDistance: Incomplete
    farFocusDistance: Incomplete
    isMotionBlur: Incomplete
    shutterAngle: Incomplete
    centerOfInterest: Incomplete
    orthoWidth: Incomplete
    cameraScale: Incomplete
    tumblePivot: Incomplete
    usePivotAsLocalSpace: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def aspectRatio(self) -> float: ...
    def centerOfInterestPoint(self, space: MSpace = ...) -> MPoint: ...
    def computeDepthOfField(self, nearLimit: float = ...) -> Self: ...
    def copyViewFrom(self, otherCamera: MDagPath) -> Self: ...
    def create(self, parent: MObject = ...) -> MObject: ...  # type: ignore[override]
    def eyePoint(self, space: MSpace = ...) -> MPoint: ...
    def getAspectRatioLimits(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getFilmApertureLimits(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getFilmFrustum(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getFilmFrustumCorners(self, distance: float, applyPanZoom: bool = ...) -> MPointArray: ...
    def getFocalLengthLimits(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPortFieldOfView(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getRenderingFrustum(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getViewParameters(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getViewingFrustum(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasSamePerspective(self, otherCamera: MDagPath) -> bool: ...
    def horizontalFieldOfView(self) -> float: ...
    def isOrtho(self) -> bool: ...
    def postProjectionMatrix(self, context: MDGContext = ...) -> MFloatMatrix: ...
    def projectionMatrix(self, context: MDGContext = ...) -> MFloatMatrix: ...
    def rightDirection(self, space: MSpace = ...) -> MVector: ...
    def set(self, wsEyeLocation: MPoint, wsViewDirection: MVector, wsUpDirection: MVector, horizFieldOfView: float, aspectRatio: float) -> Self: ...
    def setAspectRatio(self, aspectRatio: float) -> Self: ...
    def setCenterOfInterestPoint(self, centerOfInterest: MPoint, space: MSpace = ...) -> Self: ...
    def setEyePoint(self, eyeLocation: MPoint, space: MSpace = ...) -> Self: ...
    def setHorizontalFieldOfView(self, fov: float) -> Self: ...
    def setIsOrtho(self, orthoState: bool, useDist: float = ...) -> Self: ...
    def setNearFarClippingPlanes(self, near: float, far: float) -> Self: ...
    def setVerticalFieldOfView(self, fov: float) -> Self: ...
    def upDirection(self, space: MSpace = ...) -> MVector: ...
    def verticalFieldOfView(self) -> float: ...
    def viewDirection(self, space: MSpace = ...) -> MVector: ...

class MFnContainerNode(MFnDependencyNode):
    kParentAnchor: ClassVar[int] = ...
    kChildAnchor: ClassVar[int] = ...
    kGeneric: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def getCurrentAsMObject() -> MObject: ...
    def getPublishedPlugs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPublishedNames(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getMembers(self) -> MObjectArray: ...
    def getSubcontainers(self) -> MObjectArray: ...
    def getParentContainer(self) -> MObject: ...
    def getRootTransform(self) -> MObject: ...
    def getPublishedNodes(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isCurrent(self) -> bool: ...
    def makeCurrent(self, isCurrent: None) -> Self: ...
    def clear(self) -> Any: ...

class MFnMesh(MFnDagNode):
    kAlpha: ClassVar[int] = ...
    kRGB: ClassVar[int] = ...
    kRGBA: ClassVar[int] = ...
    kOnEdge: ClassVar[int] = ...
    kInternalPoint: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kUnion: ClassVar[int] = ...
    kDifference: ClassVar[int] = ...
    kIntersection: ClassVar[int] = ...
    kEdgeClassification: ClassVar[int] = ...
    kNormalClassification: ClassVar[int] = ...
    kGeomBorder: ClassVar[int] = ...
    kUVBorder: ClassVar[int] = ...
    kSharedUV: ClassVar[int] = ...
    kUnsharedUV: ClassVar[int] = ...
    kInstanceUnspecified: ClassVar[int] = ...
    kIntersectTolerance: ClassVar[float] = ...
    kPointTolerance: ClassVar[float] = ...
    checkSamePointTwice: Incomplete
    displayColors: Incomplete
    numColorSets: Incomplete
    numEdges: Incomplete
    numFaceVertices: Incomplete
    numNormals: Incomplete
    numPolygons: Incomplete
    numUVSets: Incomplete
    numVertices: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def autoUniformGridParams() -> MMeshIsectAccelParams: ...
    @staticmethod
    def clearGlobalIntersectionAcceleratorInfo() -> Any: ...
    @staticmethod
    def globalIntersectionAcceleratorsInfo() -> str: ...
    @staticmethod
    def uniformGridParams(xDiv: Incomplete, yDiv: Incomplete, zDiv: Incomplete) -> MMeshIsectAccelParams: ...
    def addHoles(self, faceIndex: Incomplete, vertices: Incomplete, loopCounts: Incomplete, mergeVertices: Incomplete = ..., pointTolerance: Incomplete = ...) -> Self: ...
    def addPolygon(self, vertices: Incomplete, mergeVertices: Incomplete = ..., pointTolerance: Incomplete = ..., loopCounts: Incomplete = ...) -> faceId: ...  # type: ignore[name-defined]
    def allIntersections(self) -> Any: ...
    def anyIntersection(self) -> Any: ...
    def assignColor(self, faceId: Incomplete, vertexIndex: Incomplete, colorId: Incomplete, colorSet: str = ...) -> Self: ...
    def assignColors(self, colorIds: Incomplete, colorSet: str = ...) -> Self: ...
    def assignUV(self, faceId: Incomplete, vertexIndex: Incomplete, uvId: Incomplete, uvSet: str = ...) -> Self: ...
    def assignUVs(self, uvCounts: Incomplete, uvIds: Incomplete, uvSet: str = ...) -> Self: ...
    def booleanOp(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def booleanOps(self, BooleanOperationconstant: Incomplete, MObjectArray: Incomplete, bool: Incomplete) -> Self: ...
    def cachedIntersectionAcceleratorInfo(self) -> str: ...
    def cleanupEdgeSmoothing(self) -> Self: ...
    @overload
    def clearBlindData(self, compType: Incomplete) -> Self: ...
    @overload
    def clearBlindData(self, compType: Incomplete, blindDataId: Incomplete, compId: Incomplete = ..., attr: Incomplete = ...) -> Self: ...
    @overload
    def clearColors(self, colorSet: str = ...) -> Self: ...
    @overload
    def clearColors(self) -> Any: ...  # type: ignore[overload-cannot-match]
    @overload
    def clearUVs(self, uvSet: str = ...) -> Self: ...
    @overload
    def clearUVs(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def closestIntersection(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def collapseEdges(self, seqofint: Incomplete) -> Self: ...
    def collapseFaces(self, seqofint: Incomplete) -> Self: ...
    def copy(self, MObject: Incomplete, parent: Incomplete = ...) -> MObject: ...
    def copyInPlace(self, MObject: Incomplete) -> Self: ...
    def copyUVSet(self, fromName: Incomplete, toName: Incomplete, modifier: MDGModifier = ...) -> str: ...
    def create(self) -> Any: ...  # type: ignore[override]
    def createBlindDataType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def createColorSet(self, name: Incomplete, clamped: Incomplete, rep: Incomplete = ..., modifier: MDGModifier = ..., instances: Incomplete = ...) -> str: ...
    def createInPlace(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def createUVSet(self, name: Incomplete, modifier: MDGModifier = ..., instances: Incomplete = ...) -> str: ...
    def currentColorSetName(self, instance: Incomplete = ...) -> str: ...
    def currentUVSetName(self, instance: Incomplete = ...) -> str: ...
    def deleteColorSet(self, colorSet: str, modifier: MDGModifier = ..., currentSelection: Incomplete = ...) -> Self: ...
    def deleteUVSet(self, uvSet: str, modifier: MDGModifier = ..., currentSelection: Incomplete = ...) -> Self: ...
    def deleteEdge(self, edgeId: Incomplete, modifier: MDGModifier = ...) -> Self: ...
    def deleteFace(self, faceId: Incomplete, modifier: MDGModifier = ...) -> Self: ...
    def deleteVertex(self, vertexId: Incomplete, modifier: MDGModifier = ...) -> Self: ...
    def duplicateFaces(self, faces: Incomplete, translation: Incomplete = ...) -> Self: ...
    def extractFaces(self, faces: Incomplete, translation: Incomplete = ...) -> Self: ...
    def extrudeEdges(self, edges: Incomplete, extrusionCount: Incomplete = ..., translation: Incomplete = ..., extrudeTogether: Incomplete = ..., thickness: Incomplete = ..., offset: Incomplete = ...) -> Self: ...
    def extrudeFaces(self, faces: Incomplete, extrusionCount: Incomplete = ..., translation: Incomplete = ..., extrudeTogether: Incomplete = ..., thickness: Incomplete = ..., offset: Incomplete = ...) -> Self: ...
    def freeCachedIntersectionAccelerator(self) -> Self: ...
    def generateSmoothMesh(self, parent: Incomplete = ..., options: Incomplete = ...) -> MObject: ...
    def getAssignedUVs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getAssociatedColorSetInstances(self, colorSet: str) -> MIntArray: ...
    def getAssociatedUVSetInstances(self, uvSet: str) -> MIntArray: ...
    def getAssociatedUVSetTextures(self, uvSet: str) -> MObjectArray: ...
    @overload
    def getBinaryBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete) -> str: ...
    @overload
    def getBinaryBlindData(self, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete) -> Any: ...
    def getBinormals(self, space: MSpace = ..., uvSet: str = ...) -> MFloatVectorArray: ...
    def getBlindDataAttrNames(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getBlindDataTypes(self, MFnTypeconstant: Incomplete) -> MIntArray: ...
    def getBoolBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete) -> bool: ...
    def getClosestUVs(self, u: Incomplete, v: Incomplete, uvSet: str = ...) -> MIntArray: ...
    def intersectFaceAtUV(self, u: Incomplete, v: Incomplete, uvSet: str = ...) -> int: ...
    def getClosestNormal(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getClosestPoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getClosestPointAndNormal(self, MPoint: Incomplete, space: MSpace = ...) -> Any: ...
    def getColor(self, colorId: Incomplete, colorSet: str = ...) -> MColor: ...
    def getColorIndex(self, faceId: Incomplete, localVertexId: Incomplete, colorSet: str = ...) -> int: ...
    def getColorRepresentation(self, colorSet: str) -> ColorRepresentationconstant: ...  # type: ignore[name-defined]
    def getColors(self, colorSet: str = ...) -> MColorArray: ...
    def getColorSetFamilyNames(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getColorSetNames(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getColorSetsInFamily(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getConnectedShaders(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getCreaseEdges(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getCreaseVertices(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getDoubleBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete) -> float: ...
    def getEdgeVertices(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getFaceAndVertexIndices(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getFaceNormalIds(self, faceId: Incomplete) -> MIntArray: ...
    def getFaceUVSetNames(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getFaceVertexBinormal(self, faceId: Incomplete, vertexId: Incomplete, space: MSpace = ..., uvSet: str = ...) -> MVector: ...
    def getFaceVertexBinormals(self, faceId: Incomplete, space: MSpace = ..., uvSet: str = ...) -> MFloatVectorArray: ...
    def getFaceVertexColors(self, colorSet: str = ..., defaultUnsetColor: Incomplete = ...) -> MColorArray: ...
    def getFaceVertexIndex(self, faceId: Incomplete, vertexIndex: Incomplete, localVertex: Incomplete = ...) -> int: ...
    def getFaceVertexNormal(self, faceId: Incomplete, vertexId: Incomplete, space: MSpace = ...) -> MVector: ...
    def getFaceVertexNormals(self, faceId: Incomplete, space: MSpace = ...) -> MFloatVectorArray: ...
    def getFaceVertexTangent(self, faceId: Incomplete, vertexId: Incomplete, space: MSpace = ..., uvSet: str = ...) -> MVector: ...
    def getFaceVertexTangents(self, faceId: Incomplete, space: MSpace = ..., uvSet: str = ...) -> MFloatVectorArray: ...
    def getFloatBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete) -> float: ...
    def getFloatPoints(self, space: MSpace = ...) -> MFloatPointArray: ...
    def getHoles(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getIntBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete) -> int: ...
    def getInvisibleFaces(self) -> MUintArray: ...
    def getNormalIds(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getNormals(self, space: MSpace = ...) -> MFloatVectorArray: ...
    def getPoint(self, vertexId: Incomplete, space: MSpace = ...) -> MPoint: ...
    def getPointAtUV(self, faceId: Incomplete, u: Incomplete, v: Incomplete, space: MSpace = ..., uvSet: str = ..., tolerance: Incomplete = ...) -> MPoint: ...
    def getPointsAtUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPoints(self, space: MSpace = ...) -> MPointArray: ...
    def getPolygonNormal(self, polygonId: Incomplete, space: MSpace = ...) -> MVector: ...
    def getPolygonTriangleVertices(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPolygonUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPolygonUVid(self, polygonId: Incomplete, vertexId: Incomplete, uvSet: str = ...) -> int: ...
    def getPolygonVertices(self, polygonId: Incomplete) -> MIntArray: ...
    def getSmoothMeshDisplayOptions(self) -> MMeshSmoothOptions: ...
    @overload
    def getStringBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete) -> str: ...
    @overload
    def getStringBlindData(self, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete) -> Any: ...
    def getTangentId(self, faceId: Incomplete, vertexId: Incomplete) -> int: ...
    def getTangents(self, space: MSpace = ..., uvSet: str = ...) -> MFloatVectorArray: ...
    def getTriangles(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVAtPoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVSetFamilyNames(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVSetNames(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVSetsInFamily(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUvShellsIds(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getMeshShellsIds(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getVertexColors(self, colorSet: str = ..., defaultUnsetColor: Incomplete = ...) -> MColorArray: ...
    def getVertexNormal(self, vertexId: Incomplete, angleWeighted: Incomplete, space: MSpace = ...) -> MVector: ...
    def getVertexNormals(self, angleWeighted: Incomplete, space: MSpace = ...) -> MFloatVectorArray: ...
    def getVertices(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getTriangleOffsets(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasAlphaChannels(self, colorSet: str) -> bool: ...
    def hasBlindData(self, compType: Incomplete, compId: Incomplete = ..., blindDataId: Incomplete = ...) -> bool: ...
    def hasColorChannels(self, colorSet: str) -> bool: ...
    def isBlindDataTypeUsed(self, blindDataId: Incomplete) -> bool: ...
    def isColorClamped(self, colorSet: str) -> bool: ...
    def isColorSetPerInstance(self, colorSet: str) -> bool: ...
    def edgeBorderInfo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVBorderEdges(self, setId: Incomplete) -> MIntArray: ...
    def isEdgeSmooth(self, edgeId: Incomplete) -> bool: ...
    def isNormalLocked(self, normalId: Incomplete) -> bool: ...
    def isPolygonConvex(self, faceId: Incomplete) -> bool: ...
    def isPolygonUVReversed(self, faceId: Incomplete) -> bool: ...
    def isRightHandedTangent(self, tangentId: Incomplete, uvSet: str = ...) -> bool: ...
    def isUVSetPerInstance(self, uvSet: str) -> bool: ...
    def lockFaceVertexNormals(self, seqoffaceIds: Incomplete, seqofvertIds: Incomplete) -> Self: ...
    def lockVertexNormals(self, sequenceofvertIds: Incomplete) -> Self: ...
    def numColors(self, colorSet: str = ...) -> int: ...
    def numUVs(self, uvSet: str = ...) -> int: ...
    def onBoundary(self, faceId: Incomplete) -> bool: ...
    def polygonVertexCount(self, faceId: Incomplete) -> int: ...
    def removeFaceColors(self, seqoffaceIds: Incomplete) -> Self: ...
    def removeFaceVertexColors(self, seqoffaceIds: Incomplete, seqofvertexIds: Incomplete) -> Self: ...
    def removeVertexColors(self, seqofvertexIds: Incomplete) -> Self: ...
    def renameUVSet(self, origName: Incomplete, newName: Incomplete, modifier: MDGModifier = ...) -> Self: ...
    @overload
    def setBinaryBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setBinaryBlindData(self, seqofcompId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setBoolBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setBoolBlindData(self, seqofcompId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    def setColor(self, colorId: Incomplete, MColor: Incomplete, colorSet: str = ..., rep: Incomplete = ...) -> Self: ...
    def setColors(self, seqofMColor: Incomplete, colorSet: str = ..., rep: Incomplete = ...) -> Self: ...
    def setCreaseEdges(self, edgeIds: Incomplete, seqoffloat: Incomplete) -> Self: ...
    def setCreaseVertices(self, edgeIds: Incomplete, seqoffloat: Incomplete) -> Self: ...
    def setCurrentColorSetName(self, colorSet: str, modifier: MDGModifier = ..., currentSelection: Incomplete = ...) -> Self: ...
    def setCurrentUVSetName(self, uvSet: str, modifier: MDGModifier = ..., currentSelection: Incomplete = ...) -> Self: ...
    @overload
    def setDoubleBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setDoubleBlindData(self, seqofcompId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setEdgeSmoothing(self, edgeId: Incomplete, smooth: Incomplete = ...) -> Self: ...
    @overload
    def setEdgeSmoothing(self) -> Any: ...
    @overload
    def setEdgeSmoothings(self, edgeIds: Incomplete, smooths: Incomplete) -> Self: ...
    @overload
    def setEdgeSmoothings(self) -> Any: ...
    def setFaceColor(self, color: Incomplete, faceId: Incomplete, rep: Incomplete = ...) -> Self: ...
    def setFaceColors(self, colors: Incomplete, faceIds: Incomplete, rep: Incomplete = ...) -> Self: ...
    def setFaceVertexColor(self, color: Incomplete, faceId: Incomplete, vertexId: Incomplete, modifier: MDGModifier = ..., rep: Incomplete = ...) -> Self: ...
    def setFaceVertexColors(self, colors: Incomplete, faceIds: Incomplete, vertexIds: Incomplete, modifier: MDGModifier = ..., rep: Incomplete = ...) -> Self: ...
    def setFaceVertexNormal(self, normal: Incomplete, faceId: Incomplete, vertexId: Incomplete, space: MSpace = ..., modifier: MDGModifier = ...) -> Self: ...
    def setFaceVertexNormals(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @overload
    def setFloatBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setFloatBlindData(self, seqofcompId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setIntBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setIntBlindData(self, seqofcompId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    def setInvisibleFaces(self, faceIds: Incomplete, makeVisible: Incomplete = ...) -> Self: ...
    def setIsColorClamped(self, colorSet: str, clamped: Incomplete) -> Self: ...
    def setNormals(self, normals: Incomplete, space: MSpace = ...) -> Self: ...
    @overload
    def setPoint(self, vertexId: Incomplete, MPoint: Incomplete, space: MSpace = ...) -> Self: ...
    @overload
    def setPoint(self) -> Any: ...
    def setPoints(self, points: Incomplete, space: MSpace = ...) -> Self: ...
    def setSmoothMeshDisplayOptions(self, MMeshSmoothOptions: Incomplete) -> Self: ...
    def setSomeColors(self, colorIds: Incomplete, colors: Incomplete, colorSet: str = ..., rep: Incomplete = ...) -> Self: ...
    def setSomeUVs(self, uvIds: Incomplete, uValues: Incomplete, vValues: Incomplete, uvSet: str = ...) -> Self: ...
    @overload
    def setStringBlindData(self, compId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    @overload
    def setStringBlindData(self, seqofcompId: Incomplete, compType: Incomplete, blindDataId: Incomplete, attr: Incomplete, data: Incomplete) -> Self: ...
    def setUV(self, uvId: Incomplete, u: Incomplete, v: Incomplete, uvSet: str = ...) -> Self: ...
    def setUVs(self, uValues: Incomplete, vValues: Incomplete, uvSet: str = ...) -> Self: ...
    def setVertexColor(self, color: Incomplete, vertexId: Incomplete, modifier: MDGModifier = ..., rep: Incomplete = ...) -> Self: ...
    def setVertexColors(self, colors: Incomplete, vertexIds: Incomplete, modifier: MDGModifier = ..., rep: Incomplete = ...) -> Self: ...
    def setVertexNormal(self, normal: Incomplete, vertexId: Incomplete, space: MSpace = ..., modifier: MDGModifier = ...) -> Self: ...
    def setVertexNormals(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def sortIntersectionFaceTriIds(self, faceIds: Incomplete, triIds: Incomplete = ...) -> Self: ...
    def split(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def subdivideEdges(self, edges: Incomplete, numDivisions: Incomplete) -> Self: ...
    def subdivideFaces(self, faces: Incomplete, numDivisions: Incomplete) -> Self: ...
    def syncObject(self) -> Self: ...
    def unlockFaceVertexNormals(self, seqoffaceIds: Incomplete, seqofvertIds: Incomplete) -> Self: ...
    def unlockVertexNormals(self, sequenceofvertIds: Incomplete) -> Self: ...
    def updateSurface(self) -> Self: ...

class MFnNurbsCurve(MFnDagNode):
    kInvalid: ClassVar[int] = ...
    kOpen: ClassVar[int] = ...
    kClosed: ClassVar[int] = ...
    kPeriodic: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kPointTolerance: ClassVar[float] = ...
    kFindParamTolerance: ClassVar[float] = ...
    degree: Incomplete
    form: Incomplete
    hasHistoryOnCreate: Incomplete
    isPlanar: Incomplete
    knotDomain: Incomplete
    numCVs: Incomplete
    numKnots: Incomplete
    numSpans: Incomplete
    planeNormal: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def area(self, tolerance: float = ...) -> float: ...
    def closestPoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, source: Incomplete, parent: MObject = ...) -> MObject: ...
    @overload  # type: ignore[override]
    def create(self, cvs: Incomplete, knots: Incomplete, degree: int, form: int, is2D: Incomplete, rational: bool, parent: MObject = ...) -> Any: ...
    @overload
    def create(self, subCurves: Incomplete, parent: MObject = ...) -> Self: ...
    def createWithEditPoints(self, eps: Incomplete, degree: int, form: int, is2D: Incomplete, rational: bool, uniform: bool, 
parent: Incomplete = ...) -> MObject: ...
    def cvPosition(self, index: int, space: MSpace = ...) -> MPoint: ...
    def cvPositions(self, space: MSpace = ...) -> MPointArray: ...
    def cvs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def distanceToPoint(self, point: MPoint, space: MSpace = ...) -> float: ...
    def findParamFromLength(self, length: float, tolerance: float = ...) -> float: ...
    def findLengthFromParam(self, param: float) -> float: ...
    def getDerivativesAtParam(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getParamAtPoint(self, point: MPoint, tolerance: float = ..., space: MSpace = ...) -> float: ...
    def getPointAtParam(self, param: float, space: MSpace = ...) -> MPoint: ...
    def isParamOnCurve(self, param: float) -> bool: ...
    def isPointOnCurve(self, point: MPoint, tolerance: float = ..., space: MSpace = ...) -> bool: ...
    def knot(self, index: int) -> float: ...
    def knots(self) -> MDoubleArray: ...
    def length(self, tolerance: float = ...) -> float: ...
    def makeMultipleEndKnots(self) -> Self: ...
    def normal(self, param: float, space: MSpace = ...) -> MVector: ...
    def removeKnot(self, param: float, removeAll: bool = ...) -> Self: ...
    def reverse(self) -> Self: ...
    def setCVPosition(self, index: int, point: MPoint, space: MSpace = ...) -> Self: ...
    def setCVPositions(self, points: Incomplete, space: MSpace = ...) -> Self: ...
    def setKnot(self, index: int, param: float) -> Self: ...
    def setKnots(self, params: Incomplete, startIndex: int, endIndex: int) -> Self: ...
    def tangent(self, param: float, space: MSpace = ...) -> MVector: ...
    def updateCurve(self) -> Self: ...

class MFnNurbsSurface(MFnDagNode):
    kInvalidBoundary: ClassVar[int] = ...
    kOuter: ClassVar[int] = ...
    kInner: ClassVar[int] = ...
    kSegment: ClassVar[int] = ...
    kClosedSegment: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kOpen: ClassVar[int] = ...
    kClosed: ClassVar[int] = ...
    kPeriodic: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kPointTolerance: ClassVar[float] = ...
    dataObject: Incomplete
    degreeInU: Incomplete
    degreeInV: Incomplete
    formInU: Incomplete
    formInV: Incomplete
    hasHistoryOnCreate: Incomplete
    isBezier: Incomplete
    isFoldedOnBispan: Incomplete
    isTrimmedSurface: Incomplete
    isUniform: Incomplete
    knotDomainInU: Incomplete
    knotDomainInV: Incomplete
    numCVsInU: Incomplete
    numCVsInV: Incomplete
    numKnotsInU: Incomplete
    numKnotsInV: Incomplete
    numNonZeroSpansInU: Incomplete
    numNonZeroSpansInV: Incomplete
    numPatches: Incomplete
    numPatchesInU: Incomplete
    numPatchesInV: Incomplete
    numRegions: Incomplete
    numSpansInU: Incomplete
    numSpansInV: Incomplete
    numUVs: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def area(self, space: MSpace = ..., tolerance: Incomplete = ...) -> float: ...
    def assignUV(self, patchId: int, cornerIndex: int, uvId: int) -> Self: ...
    def assignUVs(self, uvCounts: Incomplete, uvIds: Incomplete) -> Self: ...
    def boundaryType(self, region: int, boundary: int) -> int: ...
    def clearUVs(self) -> Self: ...
    def closestPoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, source: MObject, parent: MObject = ...) -> MObject: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def cv(self, uIndex: int, vIndex: int) -> MObject: ...
    def cvPosition(self, uIndex: int, vIndex: int, space: MSpace = ...) -> MPoint: ...
    def cvPositions(self, space: MSpace = ...) -> MPointArray: ...
    def cvsInU(self, startUIndex: int, endUIndex: int, vIndex: int) -> MObject: ...
    def cvsInV(self, startVIndex: int, endVIndex: int, uIndex: int) -> MObject: ...
    def distanceToPoint(self, point: MPoint, space: MSpace = ...) -> float: ...
    @overload
    def edge(self, region: int, boundary: int, edge: int, paramEdge: bool = ...) -> MObjectArray: ...
    @overload
    def edge(self, int: int) -> Any: ...
    def getAssignedUVs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getConnectedShaders(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getDerivativesAtParam(self, uParam: float, vParam: float, space: MSpace = ..., secondOrder: bool = ...) -> Any: ...
    def getParamAtPoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPatchUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPatchUVid(self, patchId: int, cornerIndex: int) -> int: ...
    def getPatchUVs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getPointAtParam(self, uParam: Incomplete, vParam: Incomplete, space: MSpace = ...) -> MPoint: ...
    def getUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def intersect(self, rayStart: MPoint, rayDir: MVector, tolerance: float = ..., space: MSpace = ..., 
distance: Incomplete = ..., exactHit: bool = ..., all: bool = ...) -> Any: ...
    def isFlipNorm(self, region: Incomplete) -> bool: ...
    def isKnotU(self, param: float) -> bool: ...
    def isKnotV(self, param: float) -> bool: ...
    def isParamOnSurface(self, uParam: float, vParam: float) -> bool: ...
    def isPointInTrimmedRegion(self, uParam: float, vParam: float) -> bool: ...
    def isPointOnSurface(self, point: MPoint, tolerance: float = ..., space: MSpace = ...) -> bool: ...
    def knotInU(self, index: int) -> float: ...
    def knotInV(self, index: int) -> float: ...
    def knotsInU(self) -> MDoubleArray: ...
    def knotsInV(self) -> MDoubleArray: ...
    def normal(self, uParam: float, vParam: float, space: MSpace = ...) -> MVector: ...
    def numBoundaries(self, region: int) -> int: ...
    def numEdges(self, region: int, boundary: int) -> int: ...
    def projectCurve(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeKnotInU(self, param: float, removeAll: bool = ...) -> Self: ...
    def removeKnotInV(self, param: float, removeAll: bool = ...) -> Self: ...
    def removeOneKnotInU(self, param: float) -> Self: ...
    def removeOneKnotInV(self, param: float) -> Self: ...
    def setCVPosition(self, uIndex: Incomplete, vIndex: Incomplete, point: Incomplete, space: MSpace = ...) -> Self: ...
    def setCVPositions(self, points: Incomplete, space: MSpace = ...) -> Self: ...
    def setKnotInU(self, index: int, param: float) -> Self: ...
    def setKnotInV(self, index: int, param: float) -> Self: ...
    def setKnotsInU(self, params: Incomplete, startIndex: int, endIndex: int) -> Self: ...
    def setKnotsInV(self, params: Incomplete, startIndex: int, endIndex: int) -> Self: ...
    def setUV(self, uvId: int, u: float, v: float) -> Self: ...
    def setUVs(self, uList: Incomplete, vList: Incomplete) -> Self: ...
    def tangents(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def trim(self, regionsToKeepU: Incomplete, regionsToKeepV: Incomplete, keepHistory: bool = ...) -> Self: ...
    def updateSurface(self) -> Self: ...

class MFnReference(MFnDependencyNode):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def isValidReference(self) -> bool: ...
    def fileName(self, boolresolvedName: Incomplete, boolincludePath: Incomplete, boolincludeCopyNumber: Incomplete) -> str: ...
    def associatedNamespace(self, boolshortName: Incomplete) -> str: ...
    def parentFileName(self, boolresolvedName: Incomplete, boolincludePath: Incomplete, boolincludeCopyNumber: Incomplete) -> str: ...
    def parentReference(self) -> MObject: ...
    def parentAssembly(self) -> MObject: ...
    def containsNode(self, MObject: Incomplete) -> bool: ...
    def containsNodeExactly(self, MObject: Incomplete) -> bool: ...
    def nodes(self) -> MObjectArray: ...
    def isLoaded(self) -> bool: ...
    def isLocked(self) -> bool: ...
    def isExportEditsFile(self) -> bool: ...
    @staticmethod
    def ignoreReferenceEdits() -> bool: ...
    @staticmethod
    def setIgnoreReferenceEdits(bool: Incomplete) -> None: ...

class MFnSet(MFnDependencyNode):  # type: ignore[no-redef]
    kNone: ClassVar[int] = ...
    kVerticesOnly: ClassVar[int] = ...
    kEdgesOnly: ClassVar[int] = ...
    kFacetsOnly: ClassVar[int] = ...
    kEditPointsOnly: ClassVar[int] = ...
    kRenderableOnly: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, members: MSelectionList, restriction: MFnSet.Restriction = ...) -> MObject: ...
    def getUnion(self, otherSet: s) -> MSelectionList: ...  # type: ignore[name-defined]
    def getIntersection(self, otherSet: s) -> MSelectionList: ...  # type: ignore[name-defined]
    def clear(self) -> Self: ...
    def getMembers(self, flatten: bool) -> MSelectionList: ...
    def addMember(self, object: Incomplete) -> Self: ...
    def addMembers(self, MSelectionList: Incomplete) -> Self: ...
    def removeMember(self, object: Incomplete) -> Self: ...
    def removeMembers(self, MSelectionList: Incomplete) -> Self: ...
    def isMember(self, object: Incomplete) -> bool: ...
    def intersectsWith(self, otherSet: Incomplete) -> Self: ...
    def hasRestrictions(self) -> bool: ...
    def restriction(self) -> MFnSet.Restriction: ...
    def annotation(self) -> str: ...
    def setAnnotation(self, annotation: Incomplete) -> Self: ...
    def getMemberPaths(self, shading: bool) -> MDagPathArray: ...

class MFnTransform(MFnDagNode):
    kScaleMinX: ClassVar[int] = ...
    kScaleMaxX: ClassVar[int] = ...
    kScaleMinY: ClassVar[int] = ...
    kScaleMaxY: ClassVar[int] = ...
    kScaleMinZ: ClassVar[int] = ...
    kScaleMaxZ: ClassVar[int] = ...
    kShearMinXY: ClassVar[int] = ...
    kShearMaxXY: ClassVar[int] = ...
    kShearMinXZ: ClassVar[int] = ...
    kShearMaxXZ: ClassVar[int] = ...
    kShearMinYZ: ClassVar[int] = ...
    kShearMaxYZ: ClassVar[int] = ...
    kRotateMinX: ClassVar[int] = ...
    kRotateMaxX: ClassVar[int] = ...
    kRotateMinY: ClassVar[int] = ...
    kRotateMaxY: ClassVar[int] = ...
    kRotateMinZ: ClassVar[int] = ...
    kRotateMaxZ: ClassVar[int] = ...
    kTranslateMinX: ClassVar[int] = ...
    kTranslateMaxX: ClassVar[int] = ...
    kTranslateMinY: ClassVar[int] = ...
    kTranslateMaxY: ClassVar[int] = ...
    kTranslateMinZ: ClassVar[int] = ...
    kTranslateMaxZ: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def balanceTransformation(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clearRestPosition(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def create(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def enableLimit(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isLimited(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def limitValue(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def resetFromRestPosition(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def resetTransformation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def restPosition(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotateBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotateByComponents(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotatePivot(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotatePivotTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotationComponents(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotationOrder(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotateOrientation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def scale(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def scaleBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def scalePivot(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def scalePivotTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLimit(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRestPosition(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotatePivot(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotatePivotTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotationComponents(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotationOrder(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotateOrientation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setScale(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setScalePivot(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setScalePivotTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setShear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setTransformation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def shear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def shearBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def transformation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def translateBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def translation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnPlugin(MFnBase):
    version: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def apiVersion(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def deregisterAttributePatternFactory(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def deregisterCommand(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def deregisterData(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def deregisterDragAndDropBehavior(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def deregisterNode(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def deregisterContextCommand(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def findPlugin(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def loadPath(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def name(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def registerAttributePatternFactory(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def registerCommand(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def registerContextCommand(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def registerData(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def registerDragAndDropBehavior(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def registerNode(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def registerShape(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def vendor(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MFnPluginData(MFnData):
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def typeId(self) -> MTypeId: ...
    def data(self) -> MPxData: ...
    def create(self, id: MTypeId) -> MObject: ...

class MGlobal:
    kInteractive: ClassVar[int] = ...
    kBatch: ClassVar[int] = ...
    kLibraryApp: ClassVar[int] = ...
    kBaseUIMode: ClassVar[int] = ...
    kReplaceList: ClassVar[int] = ...
    kXORWithList: ClassVar[int] = ...
    kAddToList: ClassVar[int] = ...
    kRemoveFromList: ClassVar[int] = ...
    kAddToHeadOfList: ClassVar[int] = ...
    kSurfaceSelectMethod: ClassVar[int] = ...
    kWireframeSelectMethod: ClassVar[int] = ...
    kSelectObjectMode: ClassVar[int] = ...
    kSelectComponentMode: ClassVar[int] = ...
    kSelectRootMode: ClassVar[int] = ...
    kSelectLeafMode: ClassVar[int] = ...
    kSelectTemplateMode: ClassVar[int] = ...
    @staticmethod
    def animSelectionMask() -> MSelectionMask: ...
    @staticmethod
    def componentSelectionMask() -> MSelectionMask: ...
    @staticmethod
    def displayError(msg: Incomplete) -> None: ...
    @staticmethod
    def displayInfo(msg: Incomplete) -> None: ...
    @staticmethod
    def displayWarning(msg: Incomplete) -> None: ...
    @staticmethod
    def getActiveSelectionList(orderedSelectionIfAvailable: Incomplete = ...) -> MSelectionList: ...
    @staticmethod
    def getFunctionSetList(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def getRichSelection(defaultToActiveSelection: Incomplete = ...) -> MRichSelection: ...
    @staticmethod
    def getSelectionListByName(name: Incomplete) -> MSelectionList: ...
    @staticmethod
    def miscSelectionMask() -> MSelectionMask: ...
    @staticmethod
    def objectSelectionMask() -> MSelectionMask: ...
    @staticmethod
    def selectionMode() -> int: ...
    @staticmethod
    def setActiveSelectionList(MSelectionList: Incomplete, listAdjustment: Incomplete = ...) -> None: ...
    @staticmethod
    def setAnimSelectionMask(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setComponentSelectionMask(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setMiscSelectionMask(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setObjectSelectionMask(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setRichSelection(MRichSelection: Incomplete) -> None: ...
    @staticmethod
    def setSelectionMode(int: int) -> None: ...
    @staticmethod
    def isUndoing() -> bool: ...
    @staticmethod
    def isRedoing() -> bool: ...
    @staticmethod
    def mayaName() -> str: ...
    @staticmethod
    def mayaVersion() -> str: ...
    @staticmethod
    def apiVersion() -> int: ...
    @staticmethod
    def mayaFeatureSet() -> int: ...
    @staticmethod
    def mayaState() -> int: ...
    @staticmethod
    def getLiveList() -> MSelectionList: ...
    @staticmethod
    def getHiliteList() -> MSelectionList: ...
    @staticmethod
    def setHiliteList(MSelectionList: Incomplete) -> None: ...
    @staticmethod
    def getPreselectionHiliteList() -> MSelectionList: ...
    @staticmethod
    def setPreselectionHiliteList(MSelectionList: Incomplete) -> None: ...
    @staticmethod
    def selectCommand(MSelectionList: Incomplete, listAdjustment: Incomplete = ...) -> None: ...
    @staticmethod
    def selectByName(string: str, listAdjustment: Incomplete = ...) -> None: ...
    @staticmethod
    def unselectByName(string: str) -> None: ...
    @overload
    @staticmethod
    def unselect(MObject: Incomplete) -> None: ...
    @overload
    @staticmethod
    def unselect(MDagPath: Incomplete, MObject: Incomplete) -> None: ...
    @staticmethod
    def selectFromScreen(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def isSelected(MObject: Incomplete) -> bool: ...
    @staticmethod
    def selectionMethod() -> int: ...
    @staticmethod
    def clearSelectionList() -> None: ...
    @staticmethod
    def trackSelectionOrderEnabled() -> bool: ...
    @staticmethod
    def setTrackSelectionOrderEnabled() -> None: ...
    @staticmethod
    def addToModel(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def addToModelAt(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def removeFromModel(MObject: Incomplete) -> None: ...
    @staticmethod
    def deleteNode(MObject: Incomplete) -> None: ...
    @staticmethod
    def executeCommandOnIdle(string: str, booldisplayEnabled: Incomplete = ...) -> None: ...
    @staticmethod
    def executeCommandStringResult(string: str, booldisplayEnabled: Incomplete = ..., boolundoEnabled: Incomplete = ...) -> stringor[string, string, ...]: ...  # type: ignore[name-defined]
    @staticmethod
    def optionVarIntValue(string: str) -> int: ...
    @staticmethod
    def optionVarDoubleValue(string: str) -> float: ...
    @staticmethod
    def optionVarStringValue(string: str) -> str: ...
    @overload
    @staticmethod
    def setOptionVarValue(string: str, int: int) -> bool: ...
    @overload
    @staticmethod
    def setOptionVarValue(stringname: Incomplete, double: Incomplete) -> bool: ...
    @overload
    @staticmethod
    def setOptionVarValue(stringname: Incomplete, string: str) -> bool: ...
    @overload
    @staticmethod
    def initOptionVar(stringname: Incomplete, int: int, stringcategory: Incomplete) -> bool: ...
    @overload
    @staticmethod
    def initOptionVar(stringname: Incomplete, double: Incomplete, stringcategory: Incomplete) -> bool: ...
    @overload
    @staticmethod
    def initOptionVar(stringname: Incomplete, string: str, stringcategory: Incomplete) -> bool: ...
    @staticmethod
    def removeOptionVar(string: str) -> None: ...
    @staticmethod
    def optionVarExists(string: str) -> bool: ...
    @staticmethod
    def resetToDefaultErrorLogPathName() -> None: ...
    @staticmethod
    def defaultErrorLogPathName() -> str: ...
    @staticmethod
    def setErrorLogPathName(string: str) -> None: ...
    @staticmethod
    def errorLogPathName() -> str: ...
    @staticmethod
    def errorLoggingIsOn() -> bool: ...
    @overload
    @staticmethod
    def startErrorLogging() -> None: ...
    @overload
    @staticmethod
    def startErrorLogging(string: str) -> Any: ...
    @staticmethod
    def stopErrorLogging() -> None: ...
    @staticmethod
    def closeErrorLog() -> None: ...
    @staticmethod
    def doErrorLogEntry(string: str) -> bool: ...
    @staticmethod
    def getAbsolutePathToResources() -> str: ...
    @staticmethod
    def disableStow() -> bool: ...
    @staticmethod
    def setDisableStow(bool: Incomplete) -> None: ...
    @staticmethod
    def sourceFile(string: str) -> None: ...
    @staticmethod
    def setDisplayCVs(MSelectionList: Incomplete, bool: Incomplete) -> None: ...
    @staticmethod
    def getAssociatedSets(MSelectionList: Incomplete) -> list: ...
    @overload
    @staticmethod
    def viewFrame(double: Incomplete) -> None: ...
    @overload
    @staticmethod
    def viewFrame(MTime: Incomplete) -> None: ...
    @staticmethod
    def currentToolContext() -> MObject: ...
    @staticmethod
    def setYAxisUp() -> None: ...
    @staticmethod
    def isYAxisUp() -> bool: ...
    @staticmethod
    def setZAxisUp() -> None: ...
    @staticmethod
    def isZAxisUp() -> bool: ...
    @staticmethod
    def upAxis() -> MVector: ...
    @staticmethod
    def className() -> str: ...

class MImage:
    kNoFormat: ClassVar[int] = ...
    kHeightFieldBumpFormat: ClassVar[int] = ...
    kNormalMapBumpFormat: ClassVar[int] = ...
    kUnknownFormat: ClassVar[int] = ...
    kUnknown: ClassVar[int] = ...
    kByte: ClassVar[int] = ...
    kFloat: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def pixelType(self) -> int: ...
    @overload
    def depth(self) -> int: ...
    @overload
    def depth(self, inbytes: Incomplete) -> Any: ...
    def isRGBA(self) -> bool: ...
    def setRGBA(self, bool: Incomplete) -> Self: ...
    def pixels(self) -> float: ...
    def floatPixels(self) -> float: ...
    def haveDepth(self) -> bool: ...
    def depthMap(self) -> float: ...
    def release(self) -> Self: ...
    def verticalFlip(self) -> bool: ...
    def create(self, width: int, height: int, channels: int = ..., type: Incomplete = ...) -> Self: ...
    def getSize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def resize(self, width: int, height: int, preserveAspectRatio: bool = ...) -> Self: ...
    def setPixels(self, pixels: list[bytes], width: int, height: int) -> Self: ...
    def setFloatPixels(self, pixels: Incomplete, width: int, height: int, channels: int = ...) -> Self: ...
    def getDepthMapSize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getDepthMapRange(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setDepthMap(self, depth: MFloatArray, width: int, heigth: Incomplete) -> Self: ...
    @staticmethod
    def filterExists(sourceFormat: MImageFilterFormat, targetFormat: MImageFilterFormat) -> bool: ...  # type: ignore[name-defined]
    def filter(self, sourceFormat: MImageFilterFormat, targetFormat: float, scale: Incomplete = ..., offset: float = ...) -> Self: ...  # type: ignore[name-defined]
    def readFromFile(self, pathname: str, type: MPixelType = ...) -> Self: ...  # type: ignore[name-defined]
    def readFromTextureNode(self, fileTextureObject: MObject, type: MPixelType = ...) -> Self: ...  # type: ignore[name-defined]
    def readDepthMap(self, pathname: Incomplete) -> Self: ...
    def writeToFile(self, pathname: Incomplete, outputFormat: Incomplete = ...) -> Self: ...
    def writeToFileWithDepth(self, pathname: Incomplete, outputFormat: Incomplete = ..., writeDepth: Incomplete = ...) -> Self: ...

class MIntArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MInt64Array:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MItCurveCV:
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def isDone(self) -> bool: ...
    def next(self) -> Self: ...
    @overload
    def reset(self, curve: MObject) -> Self: ...
    @overload
    def reset(self, curve: MDagPath, component: MObject = ...) -> Self: ...
    def position(self) -> MPoint: ...
    def setPosition(self, point: MPoint, space: MSpace = ...) -> Self: ...
    def translateBy(self, vector: MVector, space: MSpace = ...) -> Self: ...
    def index(self) -> int: ...
    def currentItem(self) -> MObject: ...
    def hasHistoryOnCreate(self) -> bool: ...
    def updateCurve(self) -> Self: ...

class MItDag:  # type: ignore[no-redef]
    kInvalidType: ClassVar[int] = ...
    kDepthFirst: ClassVar[int] = ...
    kBreadthFirst: ClassVar[int] = ...
    traverseUnderWorld: Incomplete
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def currentItem(self) -> MObject: ...
    def depth(self) -> int: ...
    def fullPathName(self) -> str: ...
    def getAllPaths(self) -> MDagPathArray: ...
    def getPath(self) -> MDagPath: ...
    def instanceCount(self, total: Incomplete) -> int: ...
    def isDone(self) -> bool: ...
    def isInstanced(self, indirect: bool = ...) -> bool: ...
    def next(self) -> Self: ...
    def partialPathName(self) -> str: ...
    def prune(self) -> Self: ...
    @overload
    def reset(self) -> Self: ...
    @overload
    def reset(self, rootObject: Incomplete, traversalType: Incomplete = ..., filterType: Incomplete = ...) -> Self: ...
    @overload
    def reset(self, rootPath: Incomplete, traversalType: Incomplete = ..., filterType: Incomplete = ...) -> Self: ...
    @overload
    def reset(self, dagInfoObject: Incomplete, rootObjectORrootPath: Incomplete, traversalType: Incomplete = ...) -> Self: ...
    @overload
    def root(self) -> MObject: ...
    @overload
    def root(self, startnode: Incomplete) -> Any: ...
    def traversalType(self) -> MItDag.TraversalType: ...

class MItDependencyGraph:
    kDownstream: ClassVar[int] = ...
    kUpstream: ClassVar[int] = ...
    kDepthFirst: ClassVar[int] = ...
    kBreadthFirst: ClassVar[int] = ...
    kNodeLevel: ClassVar[int] = ...
    kPlugLevel: ClassVar[int] = ...
    kDependsOn: ClassVar[int] = ...
    kConnectedTo: ClassVar[int] = ...
    kEvaluationGraph: ClassVar[int] = ...
    currentFilter: Incomplete
    pruningOnFilter: Incomplete
    currentDirection: Incomplete
    currentTraversal: Incomplete
    currentLevel: Incomplete
    currentRelationship: Incomplete
    traversingOverWorldSpaceDependents: Incomplete
    nodeDepth: Incomplete
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def currentNode(self) -> MObject: ...
    def currentNodeHasUnknownType(self) -> bool: ...
    def currentPlug(self) -> MPlug: ...
    def getNodePath(self) -> MObjectArray: ...
    def getNodesVisited(self) -> MObjectArray: ...
    def getPlugPath(self) -> MPlugArray: ...
    def getPlugsVisited(self) -> MPlugArray: ...
    def isDone(self) -> bool: ...
    def next(self) -> Self: ...
    def previousPlug(self) -> MPlug: ...
    def prune(self) -> Self: ...
    def reset(self) -> Self: ...
    def resetFilter(self) -> Self: ...
    @overload
    def resetTo(self, rootObject: Incomplete, filter: Incomplete = ..., direction: Incomplete = ..., traversal: Incomplete = ..., level: Incomplete = ..., relationship: Incomplete = ...) -> Self: ...
    @overload
    def resetTo(self, rootPlug: Incomplete, filter: Incomplete = ..., direction: Incomplete = ..., traversal: Incomplete = ..., level: Incomplete = ..., relationship: Incomplete = ...) -> Self: ...
    @overload
    def resetTo(self, infoObject: Incomplete, rootObjectORrootPlug: Incomplete, direction: Incomplete = ..., traversal: Incomplete = ..., level: Incomplete = ..., relationship: Incomplete = ...) -> Self: ...
    def rootNode(self) -> MObject: ...
    def rootPlug(self) -> MPlug: ...

class MItDependencyNodes:
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def thisNode(self) -> MObject: ...
    def isDone(self) -> bool: ...
    def next(self) -> Self: ...
    @overload
    def reset(self) -> Self: ...
    @overload
    def reset(self, filterType: Incomplete = ...) -> Self: ...
    @overload
    def reset(self, dagInfoObject: Incomplete) -> Self: ...

class MItGeometry:
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def isDone(self) -> bool: ...
    def next(self) -> Self: ...
    def position(self) -> MPoint: ...
    def normal(self) -> MVector: ...
    def setPosition(self) -> MStatus: ...  # type: ignore[name-defined]
    def weight(self) -> MWeight: ...
    def index(self) -> int: ...
    def component(self) -> MObject: ...
    def currentItem(self) -> MObject: ...
    def count(self) -> int: ...
    def exactCount(self) -> int: ...
    def reset(self) -> Self: ...
    def allPositions(self) -> MStatus: ...  # type: ignore[name-defined]
    def setAllPositions(self) -> MStatus: ...  # type: ignore[name-defined]

class MIteratorType:
    kMObject: ClassVar[int] = ...
    kMDagPathObject: ClassVar[int] = ...
    kMPlugObject: ClassVar[int] = ...
    filterType: Incomplete
    filterList: Incomplete
    objectType: Incomplete
    filterListEnabled: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class MItMeshEdge:
    isSmooth: Incomplete
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def center(self, space: MSpace = ...) -> MPoint: ...
    def connectedToEdge(self, index: int) -> bool: ...
    def connectedToFace(self, index: int) -> bool: ...
    def count(self) -> int: ...
    def currentItem(self) -> MObject: ...
    def geomChanged(self) -> Self: ...
    def getConnectedEdges(self) -> MIntArray: ...
    def getConnectedFaces(self) -> MIntArray: ...
    def index(self) -> int: ...
    def isDone(self) -> bool: ...
    def length(self, space: MSpace = ...) -> float: ...
    def next(self) -> Self: ...
    def numConnectedEdges(self) -> int: ...
    def numConnectedFaces(self) -> int: ...
    def onBoundary(self) -> bool: ...
    def point(self, whichVertex: None, space: MSpace = ...) -> MPoint: ...
    @overload
    def reset(self, mesh: MObject) -> Self: ...
    @overload
    def reset(self, mesh: MDagPath, component: MObject = ...) -> Self: ...
    def setIndex(self, index: int) -> int: ...
    def setPoint(self, point: MPoint, whichVertex: None, space: MSpace = ...) -> Self: ...
    def updateSurface(self) -> Self: ...
    def vertexId(self, whichVertex: None) -> int: ...

class MItMeshFaceVertex:
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def currentItem(self) -> MObject: ...
    def faceId(self) -> int: ...
    def faceVertexId(self) -> int: ...
    def geomChanged(self) -> Self: ...
    def getBinormal(self, space: MSpace = ..., uvSet: str = ...) -> MVector: ...
    def getColor(self, colorSetName: Incomplete = ...) -> MColor: ...
    def getColorIndex(self, colorSetName: Incomplete = ...) -> int: ...
    def getNormal(self, space: MSpace = ...) -> MVector: ...
    def getTangent(self, space: MSpace = ..., uvSet: str = ...) -> MVector: ...
    def getUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVIndex(self, uvSet: str = ...) -> int: ...
    def hasColor(self) -> bool: ...
    def hasUVs(self, uvSet: str = ...) -> bool: ...
    def isDone(self) -> bool: ...
    def next(self) -> Self: ...
    def normalId(self) -> int: ...
    def position(self, space: MSpace = ...) -> MPoint: ...
    @overload
    def reset(self, mesh: MObject) -> Self: ...
    @overload
    def reset(self, mesh: MDagPath, component: MObject = ...) -> Self: ...
    def setIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def tangentId(self) -> int: ...
    def updateSurface(self) -> Self: ...
    def vertexId(self) -> int: ...

class MItMeshPolygon:
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def center(self, space: MSpace = ...) -> MPoint: ...
    def count(self) -> int: ...
    def currentItem(self) -> MObject: ...
    def geomChanged(self) -> Self: ...
    def getArea(self, space: MSpace = ...) -> float: ...
    @overload
    def getColor(self, colorSetName: str = ...) -> MColor: ...
    @overload
    def getColor(self, vertexIndex: Incomplete) -> MColor: ...
    def getColorIndex(self, vertexIndex: int, colorSetName: str = ...) -> int: ...
    def getColorIndices(self, colorSetName: str = ...) -> MIntArray: ...
    def getColors(self, colorSetName: str = ...) -> MColorArray: ...
    def getConnectedEdges(self) -> MIntArray: ...
    def getConnectedFaces(self) -> MIntArray: ...
    def getConnectedVertices(self) -> MIntArray: ...
    def getEdges(self) -> MIntArray: ...
    def getNormal(self, space: MSpace = ...) -> MVector: ...
    def getNormals(self, space: MSpace = ...) -> MVectorArray: ...
    def getPointAtUV(self, uvPoint: [float, float], space: MSpace = ..., uvSet: str = ..., tolerance: float = ...) -> MPoint: ...  # type: ignore[valid-type]
    def getPoints(self, space: MSpace = ...) -> MPointArray: ...
    def getTriangle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getTriangles(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVArea(self, uvSet: str = ...) -> float: ...
    def getUVAtPoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVIndex(self, vertex: int, uvSet: str = ...) -> int: ...
    def getUVIndexAndValue(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVSetNames(self) -> listofstrings: ...  # type: ignore[name-defined]
    def getUVs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getVertices(self) -> MIntArray: ...
    @overload
    def hasColor(self) -> bool: ...
    @overload
    def hasColor(self, localVertexIndex: int) -> bool: ...
    def hasUVs(self, uvSet: str = ...) -> bool: ...
    def hasValidTriangulation(self) -> bool: ...
    def index(self) -> int: ...
    def isConnectedToEdge(self, index: int) -> bool: ...
    def isConnectedToFace(self, index: int) -> bool: ...
    def isConnectedToVertex(self, index: int) -> bool: ...
    def isConvex(self) -> bool: ...
    def isDone(self) -> bool: ...
    def isHoled(self) -> bool: ...
    def isLamina(self) -> bool: ...
    def isPlanar(self) -> bool: ...
    def isStarlike(self) -> bool: ...
    def isUVReversed(self, faceId: Incomplete) -> bool: ...
    def next(self) -> Self: ...
    def normalIndex(self, vertex: Incomplete) -> int: ...
    def numColors(self, colorSetName: str = ...) -> int: ...
    def numConnectedEdges(self) -> int: ...
    def numConnectedFaces(self) -> int: ...
    def numTriangles(self) -> int: ...
    def onBoundary(self) -> bool: ...
    def point(self, index: int, space: MSpace = ...) -> MPoint: ...
    def polygonVertexCount(self) -> int: ...
    @overload
    def reset(self, polyObject: MObject) -> Self: ...
    @overload
    def reset(self, polyObject: mesh, component: faces = ...) -> Self: ...  # type: ignore[name-defined]
    def setIndex(self, index: int) -> int: ...
    def setPoint(self, point: MPoint, index: int, space: MSpace = ...) -> Self: ...
    def setPoints(self, pointArray: MPointArray, space: MSpace = ...) -> Self: ...
    def setUV(self, vertexId: int, uvPoint: [float, float], uvSet: str = ...) -> Self: ...  # type: ignore[valid-type]
    def setUVs(self, uArray: MFloatArray, vArray: MFloatArray, uvSet: str = ...) -> Self: ...
    def tangentIndex(self, localVertexIndex: int) -> int: ...
    def updateSurface(self) -> Self: ...
    def vertexIndex(self, index: int) -> int: ...
    def zeroArea(self) -> bool: ...
    def zeroUVArea(self, uvSet: str = ...) -> bool: ...

class MItMeshVertex:
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def count(self) -> int: ...
    def currentItem(self) -> MObject: ...
    def geomChanged(self) -> Self: ...
    def getConnectedEdges(self) -> MIntArray: ...
    def getConnectedFaces(self) -> MIntArray: ...
    def getConnectedVertices(self) -> MIntArray: ...
    @overload
    def getNormal(self, space: MSpace = ...) -> MVector: ...
    @overload
    def getNormal(self, faceIndex: int, space: MSpace = ...) -> MVector: ...
    def getNormals(self, space: MSpace = ...) -> MVectorArray: ...
    def getNormalIndices(self) -> MIntArray: ...
    def getUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getUVIndices(self, uvSet: str = ...) -> MIntArray: ...
    def getUVs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def index(self) -> int: ...
    def connectedToEdge(self, index: int) -> bool: ...
    def connectedToFace(self, index: int) -> bool: ...
    @overload
    def getColor(self, colorSetName: str = ...) -> MColor: ...
    @overload
    def getColor(self, faceIndex: Incomplete, colorSetName: str = ...) -> MColor: ...
    def getColorIndices(self, colorSetName: str = ...) -> MIntArray: ...
    def getColors(self, colorSetName: str = ...) -> MColorArray: ...
    def getOppositeVertex(self, edgeId: int) -> int: ...
    @overload
    def hasColor(self) -> bool: ...
    @overload
    def hasColor(self, index: int) -> bool: ...
    def isDone(self) -> bool: ...
    def next(self) -> Self: ...
    def numConnectedEdges(self) -> int: ...
    def numConnectedFaces(self) -> int: ...
    def numUVs(self, uvSet: str = ...) -> int: ...
    def onBoundary(self) -> bool: ...
    def position(self, space: MSpace = ...) -> MPoint: ...
    @overload
    def reset(self, polyObject: MObject) -> Self: ...
    @overload
    def reset(self, polyObject: mesh, component: MObject = ...) -> Self: ...  # type: ignore[name-defined]
    def setIndex(self, index: int) -> int: ...
    def setPosition(self, point: MPoint, space: MSpace = ...) -> Self: ...
    def setUV(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setUVs(self, uArray: MFloatArray, vArray: MFloatArray, faceIds: MIntArray, uvSet: str = ...) -> Self: ...
    def translateBy(self, vector: MVector, space: MSpace = ...) -> Self: ...
    def updateSurface(self) -> Self: ...

class MItSelectionList:
    kUnknownItem: ClassVar[int] = ...
    kDagSelectionItem: ClassVar[int] = ...
    kAnimSelectionItem: ClassVar[int] = ...
    kDNselectionItem: ClassVar[int] = ...
    kPlugSelectionItem: ClassVar[int] = ...
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def getDagPath(self) -> MDagPath: ...
    def getComponent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getDependNode(self) -> MObject: ...
    def getPlug(self) -> MPlug: ...
    def getStrings(self) -> listofstrings: ...  # type: ignore[name-defined]
    def hasComponents(self) -> bool: ...
    def isDone(self) -> bool: ...
    def itemType(self) -> int: ...
    def next(self) -> Self: ...
    def reset(self) -> Self: ...
    def setFilter(self, filter: Incomplete) -> Self: ...

class MItSurfaceCV:
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def iternext(self) -> Self: ...
    def iter(self) -> Self: ...
    def hasHistoryOnCreate(self) -> bool: ...
    def currentItem(self) -> MObject: ...
    def index(self) -> int: ...
    def uvIndices(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isDone(self) -> bool: ...
    def isRowDone(self) -> bool: ...
    def next(self) -> Self: ...
    def nextRow(self) -> Self: ...
    def position(self, space: MSpace = ...) -> MPoint: ...
    @overload
    def reset(self, surface: MObject, useURows: bool = ...) -> Self: ...
    @overload
    def reset(self, surface: MDagPath, component: MObject, useURows: bool = ...) -> Self: ...
    def setPosition(self, point: MPoint, space: MSpace = ...) -> Self: ...
    def translateBy(self, vector: MVector, space: MSpace = ...) -> Self: ...
    def updateSurface(self) -> Self: ...

class MMatrix:
    kIdentity: ClassVar[MMatrix] = ...
    kTolerance: ClassVar[float] = ...
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __isub__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def getElement(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setElement(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToIdentity(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToProduct(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def transpose(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def inverse(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def adjoint(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def homogenize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def det4x4(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def det3x3(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isSingular(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MMatrixArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MMeshIntersector:
    isCreated: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def create(self, mesh: Incomplete, matrix: Incomplete) -> Self: ...
    def getClosestPoint(self, referencePoint: Incomplete, maxDistance: Incomplete = ...) -> MPointOnMesh: ...

class MMeshIsectAccelParams:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class MMeshSmoothOptions:
    kInvalid: ClassVar[int] = ...
    kLegacy: ClassVar[int] = ...
    kCreaseAll: ClassVar[int] = ...
    kCreaseEdge: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kInvalidSubdivision: ClassVar[int] = ...
    kCatmullClark: ClassVar[int] = ...
    kOpenSubdivCatmullClarkUniform: ClassVar[int] = ...
    kOpenSubdivCatmullClarkAdaptive: ClassVar[int] = ...
    kLastSubdivision: ClassVar[int] = ...
    boundaryRule: Incomplete
    subdivisionType: Incomplete
    divisions: Incomplete
    keepBorderEdge: Incomplete
    keepHardEdge: Incomplete
    propEdgeHardness: Incomplete
    smoothness: Incomplete
    smoothUVs: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class MMessage:
    kDefaultAction: ClassVar[int] = ...
    kDoNotDoAction: ClassVar[int] = ...
    kDoAction: ClassVar[int] = ...
    @staticmethod
    def currentCallbackId() -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def nodeCallbacks(node: MObject) -> ids: ...  # type: ignore[name-defined]
    @staticmethod
    def removeCallback(id: MCallbackId) -> None: ...  # type: ignore[name-defined]
    @staticmethod
    def removeCallbacks(ids: Incomplete) -> None: ...

class MCameraMessage(MMessage):
    @staticmethod
    def addBeginManipulationCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addEndManipulationCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MCommandMessage(MMessage):
    kHistory: ClassVar[int] = ...
    kDisplay: ClassVar[int] = ...
    kInfo: ClassVar[int] = ...
    kWarning: ClassVar[int] = ...
    kError: ClassVar[int] = ...
    kResult: ClassVar[int] = ...
    kStackTrace: ClassVar[int] = ...
    kMELProc: ClassVar[int] = ...
    kMELCommand: ClassVar[int] = ...
    @staticmethod
    def addCommandCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addProcCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addCommandOutputCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addCommandOutputFilterCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MConditionMessage(MMessage):
    @staticmethod
    def addConditionCallback(conditionName: str, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def getConditionNames(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def getConditionState(name: str) -> bool: ...

class MContainerMessage(MMessage):
    @staticmethod
    def addPublishAttrCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addBoundAttrCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MDagMessage(MMessage):
    kInvalidMsg: ClassVar[int] = ...
    kParentAdded: ClassVar[int] = ...
    kParentRemoved: ClassVar[int] = ...
    kChildAdded: ClassVar[int] = ...
    kChildRemoved: ClassVar[int] = ...
    kChildReordered: ClassVar[int] = ...
    kInstanceAdded: ClassVar[int] = ...
    kInstanceRemoved: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kScaleX: ClassVar[int] = ...
    kScaleY: ClassVar[int] = ...
    kScaleZ: ClassVar[int] = ...
    kShearXY: ClassVar[int] = ...
    kShearXZ: ClassVar[int] = ...
    kShearYZ: ClassVar[int] = ...
    kRotateX: ClassVar[int] = ...
    kRotateY: ClassVar[int] = ...
    kRotateZ: ClassVar[int] = ...
    kTranslateX: ClassVar[int] = ...
    kTranslateY: ClassVar[int] = ...
    kTranslateZ: ClassVar[int] = ...
    kScalePivotX: ClassVar[int] = ...
    kScalePivotY: ClassVar[int] = ...
    kScalePivotZ: ClassVar[int] = ...
    kRotatePivotX: ClassVar[int] = ...
    kRotatePivotY: ClassVar[int] = ...
    kRotatePivotZ: ClassVar[int] = ...
    kScaleTransX: ClassVar[int] = ...
    kScaleTransY: ClassVar[int] = ...
    kScaleTransZ: ClassVar[int] = ...
    kRotateTransX: ClassVar[int] = ...
    kRotateTransY: ClassVar[int] = ...
    kRotateTransZ: ClassVar[int] = ...
    kRotateOrientX: ClassVar[int] = ...
    kRotateOrientY: ClassVar[int] = ...
    kRotateOrientZ: ClassVar[int] = ...
    kRotateOrder: ClassVar[int] = ...
    kAll: ClassVar[int] = ...
    kScale: ClassVar[int] = ...
    kShear: ClassVar[int] = ...
    kRotation: ClassVar[int] = ...
    kTranslation: ClassVar[int] = ...
    kScalePivot: ClassVar[int] = ...
    kRotatePivot: ClassVar[int] = ...
    kScalePivotTrans: ClassVar[int] = ...
    kRotatePivotTrans: ClassVar[int] = ...
    kRotateOrient: ClassVar[int] = ...
    @staticmethod
    def addParentAddedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addParentAddedDagPathCallback(node: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addParentRemovedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addParentRemovedDagPathCallback(node: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addChildAddedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addChildAddedDagPathCallback(node: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addChildRemovedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addChildRemovedDagPathCallback(node: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addChildReorderedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addChildReorderedDagPathCallback(node: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addDagCallback(msgType: DagMessage, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[name-defined]
    @staticmethod
    def addDagDagPathCallback(node: MDagPath, msgType: DagMessage, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[name-defined]
    @staticmethod
    def addAllDagChangesCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addAllDagChangesDagPathCallback(node: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addInstanceAddedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addInstanceAddedDagPathCallback(node: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addInstanceRemovedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addInstanceRemovedDagPathCallback(node: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addWorldMatrixModifiedCallback(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def addMatrixModifiedCallback(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MDGMessage(MMessage):
    @staticmethod
    def addTimeChangeCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addDelayedTimeChangeCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addDelayedTimeChangeRunupCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addForceUpdateCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeAddedCallback(function: Incomplete, nodeType: str, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeRemovedCallback(function: Incomplete, nodeType: str, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addPreConnectionCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addConnectionCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeChangeUuidCheckCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MEventMessage(MMessage):
    @staticmethod
    def addEventCallback(eventName: str, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def getEventNames(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MLockMessage(MMessage):
    kInvalidPlug: ClassVar[int] = ...
    kPlugLockAttr: ClassVar[int] = ...
    kPlugUnlockAttr: ClassVar[int] = ...
    kPlugAttrValChange: ClassVar[int] = ...
    kPlugRemoveAttr: ClassVar[int] = ...
    kPlugRenameAttr: ClassVar[int] = ...
    kPlugConnect: ClassVar[int] = ...
    kPlugDisconnect: ClassVar[int] = ...
    kLastPlug: ClassVar[int] = ...
    kInvalidDAG: ClassVar[int] = ...
    kGroup: ClassVar[int] = ...
    kUnGroup: ClassVar[int] = ...
    kReparent: ClassVar[int] = ...
    kChildReorder: ClassVar[int] = ...
    kCreateNodeInstance: ClassVar[int] = ...
    kCreateChildInstance: ClassVar[int] = ...
    kCreateParentInstance: ClassVar[int] = ...
    kLastDAG: ClassVar[int] = ...
    kInvalid: ClassVar[int] = ...
    kRename: ClassVar[int] = ...
    kDelete: ClassVar[int] = ...
    kLockNode: ClassVar[int] = ...
    kUnlockNode: ClassVar[int] = ...
    kAddAttr: ClassVar[int] = ...
    kRemoveAttr: ClassVar[int] = ...
    kRenameAttr: ClassVar[int] = ...
    kUnlockAttr: ClassVar[int] = ...
    kLockAttr: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    @staticmethod
    def setNodeLockDAGQueryCallback(dagPath: MDagPath, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def setNodeLockQueryCallback(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setPlugLockQueryCallback(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MModelMessage(MMessage):
    kActiveListModified: ClassVar[int] = ...
    @staticmethod
    def addPostDuplicateNodeListCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addAfterDuplicateCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addBeforeDuplicateCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addCallback(message: Incomplete, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeAddedToModelCallback(dagNode: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeRemovedFromModelCallback(dagNode: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MNodeMessage(MMessage):
    kConnectionMade: ClassVar[int] = ...
    kConnectionBroken: ClassVar[int] = ...
    kAttributeEval: ClassVar[int] = ...
    kAttributeSet: ClassVar[int] = ...
    kAttributeLocked: ClassVar[int] = ...
    kAttributeUnlocked: ClassVar[int] = ...
    kAttributeAdded: ClassVar[int] = ...
    kAttributeRemoved: ClassVar[int] = ...
    kAttributeRenamed: ClassVar[int] = ...
    kAttributeKeyable: ClassVar[int] = ...
    kAttributeUnkeyable: ClassVar[int] = ...
    kIncomingDirection: ClassVar[int] = ...
    kAttributeArrayAdded: ClassVar[int] = ...
    kAttributeArrayRemoved: ClassVar[int] = ...
    kOtherPlugSet: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kKeyChangeInvalid: ClassVar[int] = ...
    kMakeKeyable: ClassVar[int] = ...
    kMakeUnkeyable: ClassVar[int] = ...
    kKeyChangeLast: ClassVar[int] = ...
    @staticmethod
    def addAttributeAddedOrRemovedCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addAttributeChangedCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addKeyableChangeOverride(plug: MPlug, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNameChangedCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeAboutToDeleteCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeDestroyedCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeDirtyCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodeDirtyPlugCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNodePreRemovalCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addUuidChangedCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MObjectSetMessage(MMessage):
    @staticmethod
    def addSetMembersModifiedCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MPolyMessage(MMessage):
    @staticmethod
    def addPolyComponentIdChangedCallback(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def addPolyTopologyChangedCallback(node: MObject, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MSceneMessage(MMessage):
    kSceneUpdate: ClassVar[int] = ...
    kBeforeNew: ClassVar[int] = ...
    kAfterNew: ClassVar[int] = ...
    kBeforeImport: ClassVar[int] = ...
    kAfterImport: ClassVar[int] = ...
    kBeforeOpen: ClassVar[int] = ...
    kAfterOpen: ClassVar[int] = ...
    kBeforeFileRead: ClassVar[int] = ...
    kAfterFileRead: ClassVar[int] = ...
    kAfterSceneReadAndRecordEdits: ClassVar[int] = ...
    kBeforeExport: ClassVar[int] = ...
    kAfterExport: ClassVar[int] = ...
    kBeforeSave: ClassVar[int] = ...
    kAfterSave: ClassVar[int] = ...
    kBeforeReference: ClassVar[int] = ...
    kAfterReference: ClassVar[int] = ...
    kBeforeRemoveReference: ClassVar[int] = ...
    kAfterRemoveReference: ClassVar[int] = ...
    kBeforeImportReference: ClassVar[int] = ...
    kAfterImportReference: ClassVar[int] = ...
    kBeforeExportReference: ClassVar[int] = ...
    kAfterExportReference: ClassVar[int] = ...
    kBeforeUnloadReference: ClassVar[int] = ...
    kAfterUnloadReference: ClassVar[int] = ...
    kBeforeSoftwareRender: ClassVar[int] = ...
    kAfterSoftwareRender: ClassVar[int] = ...
    kBeforeSoftwareFrameRender: ClassVar[int] = ...
    kAfterSoftwareFrameRender: ClassVar[int] = ...
    kSoftwareRenderInterrupted: ClassVar[int] = ...
    kMayaInitialized: ClassVar[int] = ...
    kMayaExiting: ClassVar[int] = ...
    kBeforeNewCheck: ClassVar[int] = ...
    kBeforeOpenCheck: ClassVar[int] = ...
    kBeforeSaveCheck: ClassVar[int] = ...
    kBeforeImportCheck: ClassVar[int] = ...
    kBeforeExportCheck: ClassVar[int] = ...
    kBeforeLoadReference: ClassVar[int] = ...
    kAfterLoadReference: ClassVar[int] = ...
    kBeforeLoadReferenceCheck: ClassVar[int] = ...
    kBeforeReferenceCheck: ClassVar[int] = ...
    kBeforeCreateReferenceCheck: ClassVar[int] = ...
    kBeforePluginLoad: ClassVar[int] = ...
    kAfterPluginLoad: ClassVar[int] = ...
    kBeforePluginUnload: ClassVar[int] = ...
    kAfterPluginUnload: ClassVar[int] = ...
    kBeforeCreateReference: ClassVar[int] = ...
    kAfterCreateReference: ClassVar[int] = ...
    kExportStarted: ClassVar[int] = ...
    kBeforeLoadReferenceAndRecordEdits: ClassVar[int] = ...
    kAfterLoadReferenceAndRecordEdits: ClassVar[int] = ...
    kBeforeCreateReferenceAndRecordEdits: ClassVar[int] = ...
    kAfterCreateReferenceAndRecordEdits: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    @staticmethod
    def addCallback(message: Incomplete, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addCheckCallback(message: Incomplete, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addCheckFileCallback(message: Incomplete, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addCheckReferenceCallback(message: Incomplete, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addConnectionFailedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addNamespaceRenamedCallback(function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addReferenceCallback(message: Incomplete, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]
    @staticmethod
    def addStringArrayCallback(message: Incomplete, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MTimerMessage(MMessage):
    @staticmethod
    def addTimerCallback(period: float, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MUserEventMessage(MMessage):
    @staticmethod
    def registerUserEvent(eventName: str) -> Any: ...
    @staticmethod
    def isUserEvent(eventName: str) -> bool: ...
    @staticmethod
    def deregisterUserEvent(eventName: str) -> Any: ...
    @staticmethod
    def postUserEvent(eventName: str, clientData: Incomplete = ...) -> Any: ...
    @staticmethod
    def addUserEventCallback(eventName: str, function: Incomplete, clientData: Incomplete = ...) -> id: ...  # type: ignore[valid-type]

class MNamespace:
    @staticmethod
    def addNamespace(MStringname: Incomplete, MStringparent: Incomplete = ...) -> Any: ...
    @staticmethod
    def validateName(MStringname: Incomplete) -> str: ...
    @staticmethod
    def currentNamespace() -> str: ...
    @staticmethod
    def setCurrentNamespace(MStringname: Incomplete) -> str: ...
    @staticmethod
    def getNamespaces(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def namespaceExists(MStringname: Incomplete) -> bool: ...
    @staticmethod
    def parentNamespace() -> str: ...
    @staticmethod
    def removeNamespace(MStringname: Incomplete, boolremoveContents: Incomplete = ...) -> Any: ...
    @staticmethod
    def renameNamespace(MStringoldName: Incomplete, MStringnewName: Incomplete, MStringparent: Incomplete = ...) -> Any: ...
    @staticmethod
    def getNamespaceObjects(MStringparentNamespace: Incomplete, boolrecurse: Incomplete = ...) -> MObjectArray: ...
    @staticmethod
    def moveNamespace(MStringsrc: Incomplete, MStringdst: Incomplete, boolforce: Incomplete = ...) -> Any: ...
    @staticmethod
    def rootNamespace() -> str: ...
    @staticmethod
    def relativeNames() -> bool: ...
    @staticmethod
    def setRelativeNames(boolnewState: Incomplete) -> Any: ...
    @staticmethod
    def getNamespaceFromName(MStringfullName: Incomplete) -> str: ...
    @staticmethod
    def stripNamespaceFromName(MStringfullName: Incomplete) -> str: ...
    @staticmethod
    def makeNamepathAbsolute(MStringfullName: Incomplete) -> str: ...

class MNodeClass:
    attributeCount: Incomplete
    classification: Incomplete
    pluginName: Incomplete
    typeId: Incomplete
    typeName: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addExtensionAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def attribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getAttributes(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeExtensionAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def removeExtensionAttributeIfUnset(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MObject:
    kNullObj: ClassVar[MObject] = ...
    apiTypeStr: Any
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def hasFn(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isNull(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def apiType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MObjectArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MObjectHandle:
    def __hash__(self) -> int: ...
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def assign(self, source: None) -> Self: ...
    def hashCode(self) -> int: ...
    def isAlive(self) -> bool: ...
    def isValid(self) -> bool: ...
    def object(self) -> MObject: ...

class MPlane:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def distance(self) -> float: ...
    def distanceToPoint(self, point: MVector, signed: bool = ...) -> float: ...
    def normal(self) -> MVector: ...
    @overload
    def setPlane(self, a: float, b: float, c: float, d: float) -> Self: ...
    @overload
    def setPlane(self, n: MVector, d: float) -> Self: ...

class MPlug:
    kFreeToChange: ClassVar[int] = ...
    kNotFreeToChange: ClassVar[int] = ...
    kChildrenNotFreeToChange: ClassVar[int] = ...
    kAll: ClassVar[int] = ...
    kNonDefault: ClassVar[int] = ...
    kChanged: ClassVar[int] = ...
    kLastAttrSelector: ClassVar[int] = ...
    info: Incomplete
    isArray: Incomplete
    isCaching: Incomplete
    isChannelBox: Incomplete
    isChild: Incomplete
    isCompound: Incomplete
    isConnected: Incomplete
    isDestination: Incomplete
    isDynamic: Incomplete
    isElement: Incomplete
    isFromReferencedFile: Incomplete
    isIgnoredWhenRendering: Incomplete
    isKeyable: Incomplete
    isLocked: Incomplete
    isNetworked: Incomplete
    isNull: Incomplete
    isProcedural: Incomplete
    isSource: Incomplete
    isProxy: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def array(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asBool(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asChar(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asDouble(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asFloat(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asInt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMAngle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMDistance(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMObject(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMDataHandle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMTime(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asShort(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asString(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def attribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def child(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def connectedTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def source(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @overload
    def sourceWithConversion(self) -> Any: ...
    @overload
    def sourceWithConversion(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def destinations(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def destinationsWithConversions(self) -> Any: ...
    def connectionByPhysicalIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def constructHandle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def destructHandle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def elementByLogicalIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def elementByPhysicalIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def evaluateNumElements(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getExistingArrayAttributeIndices(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getSetAttrCmds(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isDefaultValue(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isFreeToChange(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def logicalIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def name(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def node(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numChildren(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numConnectedChildren(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numConnectedElements(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numElements(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def parent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def partialName(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def selectAncestorLogicalIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setAttribute(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setBool(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setChar(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setDouble(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setFloat(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setInt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMAngle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMDataHandle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMDistance(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMObject(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def proxied(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMPxData(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMTime(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setNumElements(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setShort(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setString(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isExactlyEqual(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MPlugArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MPoint:
    kOrigin: ClassVar[MPoint] = ...
    kTolerance: ClassVar[float] = ...
    x: Incomplete
    y: Incomplete
    z: Incomplete
    w: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __isub__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __truediv__(self, value: Incomplete) -> Incomplete: ...
    def __rtruediv__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def cartesianize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rationalize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def homogenize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def distanceTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MPointArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MPointOnMesh:
    barycentricCoords: Incomplete
    face: Any
    normal: Any
    point: Any
    triangle: Any
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class MPxAttributePatternFactory:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class MPxCommand:
    kLong: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    kString: ClassVar[int] = ...
    kNoArg: ClassVar[int] = ...
    historyOn: Incomplete
    commandString: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def doIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def undoIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def redoIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isUndoable(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasSyntax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def syntax(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def displayInfo(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def displayWarning(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def displayError(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def clearResult(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setResult(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def appendToResult(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def currentResultType(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def isCurrentResultArray(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def currentResult(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MPxData:
    kData: ClassVar[int] = ...
    kGeometryData: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def readASCII(self, argList: int, endOfTheLastParsedElement: Incomplete) -> int: ...
    def readBinary(self, _in: bytearray, length: int) -> int: ...
    def writeASCII(self) -> str: ...
    def writeBinary(self) -> bytearray: ...
    def copy(self, src: MPxData) -> Self: ...
    def typeId(self) -> MTypeId: ...
    def name(self) -> str: ...

class MPxGeometryData(MPxData):
    matrix: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def deleteComponent(self, compList: MObjectArray) -> bool: ...
    def deleteComponentsFromGroups(self, compList: MObjectArray, groupIdArray: MIntArray, groupComponentArray: MObjectArray) -> bool: ...
    def getMatrix(self, matrix: MMatrix) -> bool: ...
    def iterator(self, componentList: MObjectArray, component: MObject, useComponents: bool, world: bool = ...) -> MPxGeometryIterator: ...
    def smartCopy(self, srcGeom: MPxGeometryData) -> Self: ...
    def updateCompleteVertexGroup(self, component: MObject) -> bool: ...

class MPxGeometryIterator:
    currentPoint: Incomplete
    maxPoints: Incomplete
    def __iter__(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def component(self) -> MObject: ...
    def geometry(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasNormals(self) -> bool: ...
    def hasPoints(self) -> bool: ...
    def index(self) -> int: ...
    def indexUnsimplified(self) -> int: ...
    def isDone(self) -> bool: ...
    def iteratorCount(self) -> int: ...
    def next(self) -> Self: ...
    def point(self) -> MPoint: ...
    def reset(self) -> Self: ...
    def setObject(self, shape: MPxSurfaceShape) -> Self: ...
    def setPoint(self, point: MPoint) -> Self: ...
    def setPointGetNext(self, point: MPoint) -> int: ...

class MPxNode:
    kDependNode: ClassVar[int] = ...
    kLocatorNode: ClassVar[int] = ...
    kDeformerNode: ClassVar[int] = ...
    kManipContainer: ClassVar[int] = ...
    kSurfaceShape: ClassVar[int] = ...
    kFieldNode: ClassVar[int] = ...
    kEmitterNode: ClassVar[int] = ...
    kSpringNode: ClassVar[int] = ...
    kIkSolverNode: ClassVar[int] = ...
    kHardwareShader: ClassVar[int] = ...
    kHwShaderNode: ClassVar[int] = ...
    kTransformNode: ClassVar[int] = ...
    kObjectSet: ClassVar[int] = ...
    kFluidEmitterNode: ClassVar[int] = ...
    kImagePlaneNode: ClassVar[int] = ...
    kParticleAttributeMapperNode: ClassVar[int] = ...
    kCameraSetNode: ClassVar[int] = ...
    kConstraintNode: ClassVar[int] = ...
    kManipulatorNode: ClassVar[int] = ...
    kMotionPathNode: ClassVar[int] = ...
    kClientDeviceNode: ClassVar[int] = ...
    kThreadedDeviceNode: ClassVar[int] = ...
    kAssembly: ClassVar[int] = ...
    kSkinCluster: ClassVar[int] = ...
    kGeometryFilter: ClassVar[int] = ...
    kBlendShape: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    kEvaluatedIndirectly: ClassVar[int] = ...
    kEvaluatedDirectly: ClassVar[int] = ...
    kLeaveDirty: ClassVar[int] = ...
    kPostEvaluationTypeLast: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @overload
    @staticmethod
    def addAttribute(attr: MObject) -> None: ...
    @overload
    @staticmethod
    def addAttribute() -> Any: ...
    @staticmethod
    def attributeAffects(whenChanges: MObject, isAffected: MObject) -> None: ...
    def compute(self, plug: MPlug, dataBlock: Incomplete) -> Self: ...
    def preEvaluation(self, context: MDGContext, evalNode: Incomplete) -> None: ...
    def postEvaluation(self, context: MDGContext, evalNode: Incomplete, evalType: PostEvaluationType) -> None: ...  # type: ignore[name-defined]
    def getCacheSetup(self, evalNode: MEvaluationNode, disablingInfo: MNodeCacheDisablingInfo, setupInfo: Incomplete, objectArray: Incomplete) -> None: ...
    def configCache(self, evalNode: MEvaluationNode, schema: MCacheSchema) -> None: ...
    def transformInvalidationRange(self, plug: Incomplete, timeRange: Incomplete) -> timeRange: ...  # type: ignore[name-defined]
    def hasInvalidationRangeTransformation(self) -> bool: ...
    def connectionBroken(self, plug: MPlug, otherPlug: MPlug, asSrc: bool) -> Self: ...
    def connectionMade(self, plug: MPlug, otherPlug: MPlug, asSrc: bool) -> Self: ...
    def copyInternalData(self, node: MPxNode) -> Self: ...
    def dependsOn(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def doNotWrite(self) -> bool: ...
    def existWithoutInConnections(self) -> bool: ...
    def existWithoutOutConnections(self) -> bool: ...
    def forceCache(self, ctx: MDGContext = ...) -> MDataBlock: ...
    def getFilesToArchive(self, shortName: bool = ..., unresolvedName: bool = ..., markCouldBeImageSequence: Incomplete = ...) -> listofstrings: ...  # type: ignore[name-defined]
    def getInternalValue(self, plug: MPlug, dataHandle: MDataHandle) -> bool: ...
    def getInternalValueInContext(self, plug: MPlug, dataHandle: MDataHandle, ctx: MDGContext) -> bool[OBSOLETE]: ...  # type: ignore[type-arg]
    @staticmethod
    def inheritAttributesFrom(parentClassName: str) -> None: ...
    @overload
    def internalArrayCount(self, plug: MPlug) -> int: ...
    @overload
    def internalArrayCount(self, plug: MPlug, ctx: MDGContext) -> int[OBSOLETE]: ...  # type: ignore[type-arg]
    def isAbstractClass(self) -> bool: ...
    def isPassiveOutput(self, plug: MPlug) -> bool: ...
    def legalConnection(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def legalDisconnection(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def passThroughToMany(self, plug: MPlug, plugArray: MPlugArray) -> bool: ...
    def passThroughToOne(self, plug: MPlug) -> plug: ...  # type: ignore[name-defined]
    def postConstructor(self) -> Self: ...
    @overload
    def setDependentsDirty(self, plug: MPlug, plugArray: Incomplete) -> Self: ...
    @overload
    def setDependentsDirty(self) -> Any: ...
    @overload
    def setDependentsDirty(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def setDoNotWrite(self, bool: Incomplete) -> Self: ...
    def setExistWithoutInConnections(self, bool: Incomplete) -> bool: ...
    def setExistWithoutOutConnections(self, bool: Incomplete) -> bool: ...
    def setInternalValue(self, plug: MPlug, dataHandle: MDataHandle) -> bool: ...
    def setInternalValueInContext(self, plug: MPlug, dataHandle: MDataHandle, ctx: MDGContext) -> bool[OBSOLETE]: ...  # type: ignore[type-arg]
    def setMPSafe(self, bool: Incomplete) -> Self: ...
    def shouldSave(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def thisMObject(self) -> MObject: ...
    def type(self) -> int: ...
    def typeId(self) -> MTypeId: ...
    def typeName(self) -> str: ...
    def name(self) -> str: ...
    def addExternalContentForFileAttr(self, table: MExternalContentInfoTable, attr: MObject) -> bool: ...
    def getExternalContent(self, table: MExternalContentInfoTable) -> Self: ...
    def setExternalContent(self, table: Incomplete) -> Self: ...
    def setExternalContentForFileAttr(self, attr: MObject, table: MExternalContentLocationTable) -> bool: ...

class MPxSurfaceShape(MPxNode):
    kNoPointCaching: ClassVar[int] = ...
    kSavePoints: ClassVar[int] = ...
    kRestorePoints: ClassVar[int] = ...
    kUpdatePoints: ClassVar[int] = ...
    kTransformOriginalPoints: ClassVar[int] = ...
    kNormal: ClassVar[int] = ...
    kUTangent: ClassVar[int] = ...
    kVTangent: ClassVar[int] = ...
    kUVNTriad: ClassVar[int] = ...
    kMatchOk: ClassVar[int] = ...
    kMatchNone: ClassVar[int] = ...
    kMatchTooMany: ClassVar[int] = ...
    kMatchInvalidName: ClassVar[int] = ...
    kMatchInvalidAttribute: ClassVar[int] = ...
    kMatchInvalidAttributeIndex: ClassVar[int] = ...
    kMatchInvalidAttributeRange: ClassVar[int] = ...
    kMatchInvalidAttributeDim: ClassVar[int] = ...
    kObjectChanged: ClassVar[int] = ...
    kBoundingBoxChanged: ClassVar[int] = ...
    mHasHistoryOnCreate: ClassVar[MObject] = ...
    mControlPoints: ClassVar[MObject] = ...
    mControlValueX: ClassVar[MObject] = ...
    mControlValueY: ClassVar[MObject] = ...
    mControlValueZ: ClassVar[MObject] = ...
    nodeBoundingBox: ClassVar[MObject] = ...
    nodeBoundingBoxMin: ClassVar[MObject] = ...
    nodeBoundingBoxMinX: ClassVar[MObject] = ...
    nodeBoundingBoxMinY: ClassVar[MObject] = ...
    nodeBoundingBoxMinZ: ClassVar[MObject] = ...
    nodeBoundingBoxMax: ClassVar[MObject] = ...
    nodeBoundingBoxMaxX: ClassVar[MObject] = ...
    nodeBoundingBoxMaxZ: ClassVar[MObject] = ...
    nodeBoundingBoxSize: ClassVar[MObject] = ...
    nodeBoundingBoxSizeX: ClassVar[MObject] = ...
    nodeBoundingBoxSizeY: ClassVar[MObject] = ...
    nodeBoundingBoxSizeZ: ClassVar[MObject] = ...
    center: ClassVar[MObject] = ...
    boundingBoxCenterX: ClassVar[MObject] = ...
    boundingBoxCenterY: ClassVar[MObject] = ...
    boundingBoxCenterZ: ClassVar[MObject] = ...
    matrix: ClassVar[MObject] = ...
    inverseMatrix: ClassVar[MObject] = ...
    worldMatrix: ClassVar[MObject] = ...
    worldInverseMatrix: ClassVar[MObject] = ...
    parentMatrix: ClassVar[MObject] = ...
    parentInverseMatrix: ClassVar[MObject] = ...
    visibility: ClassVar[MObject] = ...
    intermediateObject: ClassVar[MObject] = ...
    isTemplated: ClassVar[MObject] = ...
    instObjGroups: ClassVar[MObject] = ...
    objectGroups: ClassVar[MObject] = ...
    objectGrpCompList: ClassVar[MObject] = ...
    objectGroupId: ClassVar[MObject] = ...
    objectGroupColor: ClassVar[MObject] = ...
    useObjectColor: ClassVar[MObject] = ...
    objectColor: ClassVar[MObject] = ...
    isRenderable: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def acceptsGeometryIterator(self, component: MObject, writeable: bool = ..., forReadOnly: bool = ...) -> bool: ...
    def activeComponents(self) -> MObjectArray: ...
    def boundingBox(self) -> MBoundingBox: ...
    def cachedShapeAttr(self) -> MObject: ...
    def canMakeLive(self) -> bool: ...
    def childChanged(self, state: int = ...) -> Self: ...
    @overload
    def closestPoint(self, toThisPoint: MPoint, theClosestPoint: MPoint, tolerance: float = ...) -> Self: ...
    @overload
    def closestPoint(self, raySource: MPoint, rayDirection: MVector, theClosestPoint: MPoint, theClosestNormal: MVector, findClosestOnMiss: bool, tolerance: float = ...) -> bool: ...
    def componentToPlugs(self, component: MObject, selectionList: Incomplete) -> Self: ...
    def convertToTweakNodePlug(self, plug: MPlug) -> bool: ...
    def createFullRenderGroup(self) -> MObject: ...
    def createFullVertexGroup(self) -> MObject: ...
    def deleteComponents(self, componentList: MObjectArray, undoInfo: MDoubleArray) -> bool: ...
    @overload
    def excludeAsPluginShape(self) -> bool: ...
    @overload
    def excludeAsPluginShape(self) -> Any: ...  # type: ignore[overload-cannot-match]
    def geometryData(self) -> MObject: ...
    def geometryIteratorSetup(self, componentList: MObjectArray, components: MObject, forReadOnly: bool = ...) -> MPxGeometryIterator: ...
    def getComponentSelectionMask(self) -> MSelectionMask: ...
    def getShapeSelectionMask(self) -> MSelectionMask: ...
    def getWorldMatrix(self, block: MDataBlock, instanceGeom: int) -> MMatrix: ...
    def hasActiveComponents(self) -> bool: ...
    def isBounded(self) -> bool: ...
    def localShapeInAttr(self) -> MObject: ...
    def localShapeOutAttr(self) -> MObject: ...
    def match(self, mask: MSelectionMask, componentList: MObjectArray) -> bool: ...
    def matchComponent(self, item: MSelectionList, spec: MAttributeSpecArray, list: MSelectionList) -> int: ...
    def newControlPointComponent(self) -> MObject: ...
    def pointAtParm(self, atThisParm: MPoint, evaluatedPoint: MPoint) -> bool: ...
    def renderGroupComponentType(self) -> int: ...
    def transformUsing(self, matrix: MMatrix, componentList: MObjectArray, cachingMode: int = ..., pointCache: MPointArray = ...) -> Self: ...
    def tweakUsing(self, matrix: MMatrix, componentList: MObjectArray, cachingMode: int, pointCache: MPointArray, handle: MArrayDataHandle) -> Self: ...
    def undeleteComponents(self, componentList: MObjectArray, undoInfo: MDoubleArray) -> bool: ...
    def vertexOffsetDirection(self, component: MObject, direction: MVectorArray, mode: int, normalize: bool) -> bool: ...
    def weightedTransformUsing(self, xform: MTransformationMatrix, space: MSpace, componentList: int, cachingMode: Incomplete, pointCache: MPointArray, freezePlane: MPlane) -> Self: ...
    def weightedTweakUsing(self, xform: MTransformationMatrix, space: MSpace, componentList: MObjectArray, cachingMode: int, pointCache: MPointArray, freezePlane: MPlane, handle: MArrayDataHandle) -> Self: ...
    def worldShapeOutAttr(self) -> MObject: ...

class MQuaternion:
    kIdentity: ClassVar[MQuaternion] = ...
    kTolerance: ClassVar[float] = ...
    x: Incomplete
    y: Incomplete
    z: Incomplete
    w: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __neg__(self) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    @staticmethod
    def slerp(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def squad(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def squadPt(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asAxisAngle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asEulerRotation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMatrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def conjugate(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def conjugateIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def exp(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def inverse(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def invertIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def log(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def negateIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def normal(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def normalizeIt(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToXAxis(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToYAxis(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToZAxis(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setValue(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MRampAttribute:
    kNone: ClassVar[int] = ...
    kLinear: ClassVar[int] = ...
    kSmooth: ClassVar[int] = ...
    kSpline: ClassVar[int] = ...
    isColorRamp: Incomplete
    isCurveRamp: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def createColorRamp(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def createCurveRamp(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def createRamp(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def addEntries(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def deleteEntries(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getEntries(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getValueAtPosition(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def numEntries(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setInterpolationAtIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setPositionAtIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setValueAtIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRamp(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def pack(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasIndex(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def sort(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MRichSelection:
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def clear(self) -> Self: ...
    def getRawSymmetryMatrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getSelection(self) -> MSelectionList: ...
    def getSymmetry(self) -> MSelectionList: ...
    def getSymmetryMatrix(self, MDagPath: Incomplete, space: MSpace) -> MMatrix: ...
    def getSymmetryPlane(self, MDagPath: Incomplete, space: MSpace) -> MPlane: ...
    def setSelection(self, MSelectionList: Incomplete) -> Self: ...

class MSelectionList:
    kMergeNormal: ClassVar[int] = ...
    kXORWithList: ClassVar[int] = ...
    kRemoveFromList: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @overload
    def add(self, pattern: Incomplete, searchChildNamespaces: Incomplete = ...) -> Self: ...
    @overload
    def add(self, item: Incomplete, mergeWithExisting: Incomplete = ...) -> Self: ...
    def clear(self) -> Self: ...
    def copy(self, src: Incomplete) -> Self: ...
    def getComponent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getDagPath(self, index: Incomplete) -> MDagPath: ...
    def getDependNode(self, index: Incomplete) -> MObject: ...
    def getPlug(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def getSelectionStrings(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def hasItem(self, item: Incomplete) -> bool: ...
    def hasItemPartly(self, dagPath: Incomplete, component: Incomplete) -> bool: ...
    def isEmpty(self) -> bool: ...
    def length(self) -> int: ...
    @overload
    def merge(self, other: Incomplete, strategy: Incomplete = ...) -> Self: ...
    @overload
    def merge(self, dagPath: Incomplete, component: Incomplete, strategy: Incomplete = ...) -> Self: ...
    def remove(self, index: Incomplete) -> Self: ...
    def replace(self, index: Incomplete, newItem: Incomplete) -> Self: ...
    def toggle(self, dagPath: Incomplete, component: Incomplete) -> Self: ...
    def intersect(self, other: Incomplete, expandToLeaves: Incomplete = ...) -> Self: ...

class MSelectionMask:
    kSelectHandles: ClassVar[int] = ...
    kSelectLocalAxis: ClassVar[int] = ...
    kSelectIkHandles: ClassVar[int] = ...
    kSelectIkEndEffectors: ClassVar[int] = ...
    kSelectJoints: ClassVar[int] = ...
    kSelectLights: ClassVar[int] = ...
    kSelectCameras: ClassVar[int] = ...
    kSelectLattices: ClassVar[int] = ...
    kSelectClusters: ClassVar[int] = ...
    kSelectSculpts: ClassVar[int] = ...
    kSelectNurbsCurves: ClassVar[int] = ...
    kSelectNurbsSurfaces: ClassVar[int] = ...
    kSelectMeshes: ClassVar[int] = ...
    kSelectSubdiv: ClassVar[int] = ...
    kSelectSketchPlanes: ClassVar[int] = ...
    kSelectParticleShapes: ClassVar[int] = ...
    kSelectEmitters: ClassVar[int] = ...
    kSelectFields: ClassVar[int] = ...
    kSelectSprings: ClassVar[int] = ...
    kSelectRigidBodies: ClassVar[int] = ...
    kSelectRigidConstraints: ClassVar[int] = ...
    kSelectCollisionModels: ClassVar[int] = ...
    kSelectXYZLocators: ClassVar[int] = ...
    kSelectOrientationLocators: ClassVar[int] = ...
    kSelectUVLocators: ClassVar[int] = ...
    kSelectTextures: ClassVar[int] = ...
    kSelectCurves: ClassVar[int] = ...
    kSelectSurfaces: ClassVar[int] = ...
    kSelectLocators: ClassVar[int] = ...
    kSelectObjectsMask: ClassVar[int] = ...
    kSelectCVs: ClassVar[int] = ...
    kSelectHulls: ClassVar[int] = ...
    kSelectEditPoints: ClassVar[int] = ...
    kSelectMeshVerts: ClassVar[int] = ...
    kSelectMeshEdges: ClassVar[int] = ...
    kSelectMeshFreeEdges: ClassVar[int] = ...
    kSelectMeshFaces: ClassVar[int] = ...
    kSelectSubdivMeshPoints: ClassVar[int] = ...
    kSelectSubdivMeshEdges: ClassVar[int] = ...
    kSelectSubdivMeshFaces: ClassVar[int] = ...
    kSelectMeshUVs: ClassVar[int] = ...
    kSelectVertices: ClassVar[int] = ...
    kSelectEdges: ClassVar[int] = ...
    kSelectFacets: ClassVar[int] = ...
    kSelectMeshLines: ClassVar[int] = ...
    kSelectMeshComponents: ClassVar[int] = ...
    kSelectCurveParmPoints: ClassVar[int] = ...
    kSelectCurveKnots: ClassVar[int] = ...
    kSelectSurfaceParmPoints: ClassVar[int] = ...
    kSelectSurfaceKnots: ClassVar[int] = ...
    kSelectSurfaceRange: ClassVar[int] = ...
    kSelectSurfaceEdge: ClassVar[int] = ...
    kSelectIsoparms: ClassVar[int] = ...
    kSelectCurvesOnSurfaces: ClassVar[int] = ...
    kSelectPPStrokes: ClassVar[int] = ...
    kSelectLatticePoints: ClassVar[int] = ...
    kSelectParticles: ClassVar[int] = ...
    kSelectJointPivots: ClassVar[int] = ...
    kSelectScalePivots: ClassVar[int] = ...
    kSelectRotatePivots: ClassVar[int] = ...
    kSelectPivots: ClassVar[int] = ...
    kSelectSelectHandles: ClassVar[int] = ...
    kSelectComponentsMask: ClassVar[int] = ...
    kSelectAnimCurves: ClassVar[int] = ...
    kSelectAnimKeyframes: ClassVar[int] = ...
    kSelectAnimInTangents: ClassVar[int] = ...
    kSelectAnimOutTangents: ClassVar[int] = ...
    kSelectAnimMask: ClassVar[int] = ...
    kSelectAnimAny: ClassVar[int] = ...
    kSelectTemplates: ClassVar[int] = ...
    kSelectManipulators: ClassVar[int] = ...
    kSelectGuideLines: ClassVar[int] = ...
    kSelectPointsForGravity: ClassVar[int] = ...
    kSelectPointsOnCurvesForGravity: ClassVar[int] = ...
    kSelectPointsOnSurfacesForGravity: ClassVar[int] = ...
    kSelectObjectGroups: ClassVar[int] = ...
    kSelectSubdivMeshMaps: ClassVar[int] = ...
    kSelectFluids: ClassVar[int] = ...
    kSelectHairSystems: ClassVar[int] = ...
    kSelectFollicles: ClassVar[int] = ...
    kSelectNCloths: ClassVar[int] = ...
    kSelectNRigids: ClassVar[int] = ...
    kSelectDynamicConstraints: ClassVar[int] = ...
    kSelectNParticles: ClassVar[int] = ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addMask(self, selType: int) -> Self: ...
    def copy(self, source: MSelectionMask) -> Self: ...
    @staticmethod
    def deregisterSelectionType(selTypeName: str) -> bool: ...
    @staticmethod
    def getSelectionTypePriority(selTypeName: str) -> int: ...
    @overload
    def intersects(self, mask: MSelectionMask) -> bool: ...
    @overload
    def intersects(self, selType: int) -> bool: ...
    @overload
    @staticmethod
    def registerSelectionType(selTypeName: str, priority: int = ...) -> bool: ...
    @overload
    @staticmethod
    def registerSelectionType() -> Any: ...
    @overload
    @staticmethod
    def registerSelectionType() -> Any: ...  # type: ignore[overload-cannot-match]
    @overload
    def setMask(self, mask: MSelectionMask) -> Self: ...
    @overload
    def setMask(self, selType: int) -> Self: ...

class MSpace:
    kInvalid: ClassVar[int] = ...
    kTransform: ClassVar[int] = ...
    kPreTransform: ClassVar[int] = ...
    kPostTransform: ClassVar[int] = ...
    kWorld: ClassVar[int] = ...
    kObject: ClassVar[int] = ...
    kLast: ClassVar[int] = ...

class MSyntax:
    kInvalidArgType: ClassVar[int] = ...
    kNoArg: ClassVar[int] = ...
    kBoolean: ClassVar[int] = ...
    kLong: ClassVar[int] = ...
    kDouble: ClassVar[int] = ...
    kString: ClassVar[int] = ...
    kUnsigned: ClassVar[int] = ...
    kDistance: ClassVar[int] = ...
    kAngle: ClassVar[int] = ...
    kTime: ClassVar[int] = ...
    kSelectionItem: ClassVar[int] = ...
    kLastArgType: ClassVar[int] = ...
    kInvalidObjectFormat: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    kStringObjects: ClassVar[int] = ...
    kSelectionList: ClassVar[int] = ...
    kLastObjectFormat: ClassVar[int] = ...
    enableQuery: Incomplete
    enableEdit: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def addArg(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def addFlag(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def makeFlagMultiUse(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def makeFlagQueryWithFullArgs(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def maxObjects(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def minObjects(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMaxObjects(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setMinObjects(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setObjectType(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def useSelectionAsDefault(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MTime:
    kInvalid: ClassVar[int] = ...
    kHours: ClassVar[int] = ...
    kMinutes: ClassVar[int] = ...
    kSeconds: ClassVar[int] = ...
    kMilliseconds: ClassVar[int] = ...
    kGames: ClassVar[int] = ...
    k15FPS: ClassVar[int] = ...
    kFilm: ClassVar[int] = ...
    k24FPS: ClassVar[int] = ...
    kPALFrame: ClassVar[int] = ...
    k25FPS: ClassVar[int] = ...
    kNTSCFrame: ClassVar[int] = ...
    k30FPS: ClassVar[int] = ...
    kShowScan: ClassVar[int] = ...
    k48FPS: ClassVar[int] = ...
    kPALField: ClassVar[int] = ...
    k50FPS: ClassVar[int] = ...
    kNTSCField: ClassVar[int] = ...
    k60FPS: ClassVar[int] = ...
    k2FPS: ClassVar[int] = ...
    k3FPS: ClassVar[int] = ...
    k4FPS: ClassVar[int] = ...
    k5FPS: ClassVar[int] = ...
    k6FPS: ClassVar[int] = ...
    k8FPS: ClassVar[int] = ...
    k10FPS: ClassVar[int] = ...
    k12FPS: ClassVar[int] = ...
    k16FPS: ClassVar[int] = ...
    k20FPS: ClassVar[int] = ...
    k40FPS: ClassVar[int] = ...
    k75FPS: ClassVar[int] = ...
    k80FPS: ClassVar[int] = ...
    k100FPS: ClassVar[int] = ...
    k120FPS: ClassVar[int] = ...
    k125FPS: ClassVar[int] = ...
    k150FPS: ClassVar[int] = ...
    k200FPS: ClassVar[int] = ...
    k240FPS: ClassVar[int] = ...
    k250FPS: ClassVar[int] = ...
    k300FPS: ClassVar[int] = ...
    k375FPS: ClassVar[int] = ...
    k400FPS: ClassVar[int] = ...
    k500FPS: ClassVar[int] = ...
    k600FPS: ClassVar[int] = ...
    k750FPS: ClassVar[int] = ...
    k1200FPS: ClassVar[int] = ...
    k1500FPS: ClassVar[int] = ...
    k2000FPS: ClassVar[int] = ...
    k3000FPS: ClassVar[int] = ...
    k6000FPS: ClassVar[int] = ...
    k23_976FPS: ClassVar[int] = ...
    k29_97FPS: ClassVar[int] = ...
    k29_97DF: ClassVar[int] = ...
    k47_952FPS: ClassVar[int] = ...
    k59_94FPS: ClassVar[int] = ...
    k44100FPS: ClassVar[int] = ...
    k48000FPS: ClassVar[int] = ...
    k90FPS: ClassVar[int] = ...
    k119_88FPS: ClassVar[int] = ...
    kUserDef: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    unit: Incomplete
    value: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __isub__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __truediv__(self, value: Incomplete) -> Incomplete: ...
    def __rtruediv__(self, value: Incomplete) -> Incomplete: ...
    def __itruediv__(self, value: Incomplete) -> Incomplete: ...
    @staticmethod
    def uiUnit(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def setUIUnit(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    @staticmethod
    def ticksPerSecond(*args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asUnits(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MTimeArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MTimeRange:
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __or__(self, value: Incomplete) -> Incomplete: ...
    def __ror__(self, value: Incomplete) -> Incomplete: ...
    def empty(self) -> bool: ...
    def contains(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def intersects(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MTransformationMatrix:
    kIdentity: ClassVar[MTransformationMatrix] = ...
    kTolerance: ClassVar[float] = ...
    kInvalid: ClassVar[int] = ...
    kXYZ: ClassVar[int] = ...
    kYZX: ClassVar[int] = ...
    kZXY: ClassVar[int] = ...
    kXZY: ClassVar[int] = ...
    kYXZ: ClassVar[int] = ...
    kZYX: ClassVar[int] = ...
    kLast: ClassVar[int] = ...
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def asMatrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asMatrixInverse(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asRotateMatrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def asScaleMatrix(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def reorderRotation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotateBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotateByComponents(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotatePivot(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotatePivotTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotationComponents(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotationOrder(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotationOrientation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def scale(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def scaleBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def scalePivot(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def scalePivotTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotatePivot(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotatePivotTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotationComponents(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setRotationOrientation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setScale(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setScalePivot(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setScalePivotTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setShear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setTranslation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setToRotationAxis(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def shear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def shearBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def translateBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def translation(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MTypeId:
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def id(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MUint64Array:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MUintArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MUserData:
    def __init__(self, deleteAfterUse: Incomplete = ..., legacy: Incomplete = ...) -> Any: ...  # type: ignore[misc]
    def deleteAfterUse(self) -> bool: ...
    def setDeleteAfterUse(self, bool: Incomplete) -> Self: ...

class MURI:
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @staticmethod
    def isValidURI(uri: Incomplete) -> bool: ...
    def asString(self) -> str: ...
    def getScheme(self) -> str: ...
    def getPath(self) -> str: ...
    def getFragment(self) -> str: ...
    def getFileName(self, boolincludeExtension: Incomplete = ...) -> str: ...
    def getDirectory(self) -> str: ...
    def getAuthority(self) -> str: ...
    def getUserInfo(self) -> str: ...
    def getUserName(self) -> str: ...
    def getPassword(self) -> str: ...
    def getHost(self) -> str: ...
    def getPort(self) -> int: ...
    def getAllQueryItemKeys(self) -> array: ...  # type: ignore[name-defined]
    def getQueryItemValue(self, key: Incomplete) -> str: ...
    def getAllQueryItemValues(self, key: Incomplete) -> array: ...  # type: ignore[name-defined]
    def getQueryValueDelimiter(self) -> str: ...
    def getQueryPairDelimiter(self) -> str: ...
    def setScheme(self, string: str) -> Self: ...
    def setPath(self, string: str) -> Self: ...
    def setFragment(self, string: str) -> Self: ...
    def setFileName(self, string: str) -> Self: ...
    def setDirectory(self, string: str) -> Self: ...
    def setAuthority(self, string: str) -> Self: ...
    def setUserInfo(self, string: str) -> Self: ...
    def setUserName(self, string: str) -> Self: ...
    def setPassword(self, string: str) -> Self: ...
    def setHost(self, string: str) -> Self: ...
    def setPort(self, int: int) -> Self: ...
    def addQueryItem(self, key: Incomplete, value: Incomplete) -> Self: ...
    def setQueryDelimiters(self, valueDelimiter: Incomplete, pairDelimiter: Incomplete) -> Self: ...
    def removeQueryItem(self, int: int) -> Self: ...
    def removeAllQueryItems(self, int: int) -> Self: ...
    def copy(self, source: MURI) -> Self: ...
    def setURI(self, uri: Incomplete) -> Self: ...
    def isEmpty(self) -> bool: ...
    def isValid(self) -> bool: ...
    def clear(self) -> Self: ...

class MUuid:
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def asString(self) -> str: ...
    def copy(self, source: MUuid) -> Self: ...
    def valid(self) -> bool: ...
    def generate(self) -> Self: ...

class MVector:
    kTolerance: ClassVar[float] = ...
    kXaxis: ClassVar[int] = ...
    kYaxis: ClassVar[int] = ...
    kZaxis: ClassVar[int] = ...
    kWaxis: ClassVar[int] = ...
    kZeroVector: ClassVar[MVector] = ...
    kOneVector: ClassVar[MVector] = ...
    kXaxisVector: ClassVar[MVector] = ...
    kYaxisVector: ClassVar[MVector] = ...
    kZaxisVector: ClassVar[MVector] = ...
    kXnegAxisVector: ClassVar[MVector] = ...
    kYnegAxisVector: ClassVar[MVector] = ...
    kZnegAxisVector: ClassVar[MVector] = ...
    x: Incomplete
    y: Incomplete
    z: Incomplete
    def __lt__(self, value: Incomplete) -> bool: ...
    def __le__(self, value: Incomplete) -> bool: ...
    def __eq__(self, value: Incomplete) -> bool: ...
    def __ne__(self, value: Incomplete) -> bool: ...
    def __gt__(self, value: Incomplete) -> bool: ...
    def __ge__(self, value: Incomplete) -> bool: ...
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __radd__(self, value: Incomplete) -> Incomplete: ...
    def __sub__(self, value: Incomplete) -> Incomplete: ...
    def __rsub__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __neg__(self) -> Incomplete: ...
    def __xor__(self, value: Incomplete) -> Incomplete: ...
    def __rxor__(self, value: Incomplete) -> Incomplete: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __isub__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def __truediv__(self, value: Incomplete) -> Incomplete: ...
    def __rtruediv__(self, value: Incomplete) -> Incomplete: ...
    def __itruediv__(self, value: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def length(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def normal(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def normalize(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def transformAsNormal(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def angle(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isEquivalent(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def isParallel(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotateBy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def rotateTo(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MVectorArray:
    sizeIncrement: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __setitem__(self, key: Incomplete, value: Incomplete) -> None: ...
    def __delitem__(self, key: Incomplete) -> None: ...
    def __add__(self, value: Incomplete) -> Incomplete: ...
    def __mul__(self, value: Incomplete) -> Incomplete: ...
    def __rmul__(self, value: Incomplete) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> bool: ...
    def __iadd__(self, value: Incomplete) -> Incomplete: ...
    def __imul__(self, value: Incomplete) -> Incomplete: ...
    def append(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def copy(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def insert(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def setLength(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

class MWeight:
    influence: Incomplete
    seam: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
