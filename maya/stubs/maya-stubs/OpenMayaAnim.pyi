import maya.OpenMaya
from _typeshed import Incomplete
from typing import Callable, ClassVar

class _SwigNonDynamicMeta(type):
    __setattr__: ClassVar[Callable] = ...

class charPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class intPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class shortPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class floatPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class doublePtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class boolPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class uIntPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class uCharPtr:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def cast(cls, *args, **kwargs): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...

class MAnimControl:
    kPlaybackOnce: ClassVar[int] = ...
    kPlaybackLoop: ClassVar[int] = ...
    kPlaybackOscillate: ClassVar[int] = ...
    kPlaybackViewAll: ClassVar[int] = ...
    kPlaybackViewActive: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def isValid(*args, **kwargs): ...
    @staticmethod
    def playbackMode(*args, **kwargs): ...
    @staticmethod
    def setPlaybackMode(*args, **kwargs): ...
    @staticmethod
    def viewMode(*args, **kwargs): ...
    @staticmethod
    def setViewMode(*args, **kwargs): ...
    @staticmethod
    def playbackBy(*args, **kwargs): ...
    @staticmethod
    def setPlaybackBy(*args, **kwargs): ...
    @staticmethod
    def minTime(*args, **kwargs): ...
    @staticmethod
    def maxTime(*args, **kwargs): ...
    @staticmethod
    def setMinTime(*args, **kwargs): ...
    @staticmethod
    def setMaxTime(*args, **kwargs): ...
    @staticmethod
    def setMinMaxTime(*args, **kwargs): ...
    @staticmethod
    def animationStartTime(*args, **kwargs): ...
    @staticmethod
    def animationEndTime(*args, **kwargs): ...
    @staticmethod
    def setAnimationStartTime(*args, **kwargs): ...
    @staticmethod
    def setAnimationEndTime(*args, **kwargs): ...
    @staticmethod
    def setAnimationStartEndTime(*args, **kwargs): ...
    @staticmethod
    def currentTime(*args, **kwargs): ...
    @staticmethod
    def setCurrentTime(*args, **kwargs): ...
    @staticmethod
    def playbackSpeed(*args, **kwargs): ...
    @staticmethod
    def setPlaybackSpeed(*args, **kwargs): ...
    @staticmethod
    def playForward(*args, **kwargs): ...
    @staticmethod
    def playBackward(*args, **kwargs): ...
    @staticmethod
    def isPlaying(*args, **kwargs): ...
    @staticmethod
    def isScrubbing(*args, **kwargs): ...
    @staticmethod
    def stop(*args, **kwargs): ...
    @staticmethod
    def autoKeyMode(*args, **kwargs): ...
    @staticmethod
    def setAutoKeyMode(*args, **kwargs): ...
    @staticmethod
    def globalInTangentType(*args, **kwargs): ...
    @staticmethod
    def setGlobalInTangentType(*args, **kwargs): ...
    @staticmethod
    def globalOutTangentType(*args, **kwargs): ...
    @staticmethod
    def setGlobalOutTangentType(*args, **kwargs): ...
    @staticmethod
    def weightedTangents(*args, **kwargs): ...
    @staticmethod
    def setWeightedTangents(*args, **kwargs): ...

class MAnimCurveChange:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def undoIt(cls, *args, **kwargs): ...
    @classmethod
    def redoIt(cls, *args, **kwargs): ...
    @classmethod
    def isInteractive(cls, *args, **kwargs): ...
    @classmethod
    def setInteractive(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MAnimCurveClipboard:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def theAPIClipboard(*args, **kwargs): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def isEmpty(cls, *args, **kwargs): ...
    @classmethod
    def clipboardItems(cls, *args, **kwargs): ...
    @classmethod
    def startTime(cls, *args, **kwargs): ...
    @classmethod
    def endTime(cls, *args, **kwargs): ...
    @classmethod
    def startUnitlessInput(cls, *args, **kwargs): ...
    @classmethod
    def endUnitlessInput(cls, *args, **kwargs): ...

class MAnimCurveClipboardItemArray:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def __getitem__(cls, index): ...
    @classmethod
    def set(cls, *args, **kwargs): ...
    @classmethod
    def setLength(cls, *args, **kwargs): ...
    @classmethod
    def length(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def insert(cls, *args, **kwargs): ...
    @classmethod
    def append(cls, *args, **kwargs): ...
    @classmethod
    def clear(cls, *args, **kwargs): ...
    @classmethod
    def setSizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def sizeIncrement(cls, *args, **kwargs): ...
    @classmethod
    def isValid(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def copy(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MAnimCurveClipboardItem:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def animCurve(cls, *args, **kwargs): ...
    @classmethod
    def getAddressingInfo(cls, *args, **kwargs): ...
    @classmethod
    def fullAttributeName(cls, *args, **kwargs): ...
    @classmethod
    def leafAttributeName(cls, *args, **kwargs): ...
    @classmethod
    def nodeName(cls, *args, **kwargs): ...
    @classmethod
    def animCurveType(cls, *args, **kwargs): ...
    @classmethod
    def setAnimCurve(cls, *args, **kwargs): ...
    @classmethod
    def setAddressingInfo(cls, *args, **kwargs): ...
    @classmethod
    def setNameInfo(cls, *args, **kwargs): ...
    @classmethod
    def assign(cls, *args, **kwargs): ...
    @classmethod
    def __eq__(cls, other: object) -> bool: ...
    @staticmethod
    def className(*args, **kwargs): ...

class MAnimMessage(maya.OpenMaya.MMessage):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def addAnimCurveEditedCallback(*args, **kwargs): ...
    @staticmethod
    def addAnimKeyframeEditedCallback(*args, **kwargs): ...
    @staticmethod
    def addNodeAnimKeyframeEditedCallback(*args, **kwargs): ...
    @staticmethod
    def addAnimKeyframeEditCheckCallback(*args, **kwargs): ...
    @staticmethod
    def addPreBakeResultsCallback(*args, **kwargs): ...
    @staticmethod
    def addPostBakeResultsCallback(*args, **kwargs): ...
    @staticmethod
    def addDisableImplicitControlCallback(*args, **kwargs): ...
    @staticmethod
    def flushAnimKeyframeEditedCallbacks(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MAnimUtil:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def isAnimated(*args, **kwargs): ...
    @staticmethod
    def findAnimatedPlugs(*args, **kwargs): ...
    @staticmethod
    def findAnimation(*args, **kwargs): ...
    @staticmethod
    def findSetDrivenKeyAnimation(*args, **kwargs): ...
    @staticmethod
    def findConstraint(*args, **kwargs): ...
    @staticmethod
    def findAnimatablePlugs(*args, **kwargs): ...
    @staticmethod
    def findAnimationLayers(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MFnAnimCurve(maya.OpenMaya.MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    kAnimCurveTA: ClassVar[int] = ...
    kAnimCurveTL: ClassVar[int] = ...
    kAnimCurveTT: ClassVar[int] = ...
    kAnimCurveTU: ClassVar[int] = ...
    kAnimCurveUA: ClassVar[int] = ...
    kAnimCurveUL: ClassVar[int] = ...
    kAnimCurveUT: ClassVar[int] = ...
    kAnimCurveUU: ClassVar[int] = ...
    kAnimCurveUnknown: ClassVar[int] = ...
    kTangentGlobal: ClassVar[int] = ...
    kTangentFixed: ClassVar[int] = ...
    kTangentLinear: ClassVar[int] = ...
    kTangentFlat: ClassVar[int] = ...
    kTangentSmooth: ClassVar[int] = ...
    kTangentStep: ClassVar[int] = ...
    kTangentSlow: ClassVar[int] = ...
    kTangentFast: ClassVar[int] = ...
    kTangentClamped: ClassVar[int] = ...
    kTangentPlateau: ClassVar[int] = ...
    kTangentStepNext: ClassVar[int] = ...
    kTangentAuto: ClassVar[int] = ...
    kTangentShared1: ClassVar[int] = ...
    kTangentShared2: ClassVar[int] = ...
    kTangentShared3: ClassVar[int] = ...
    kTangentShared4: ClassVar[int] = ...
    kTangentShared5: ClassVar[int] = ...
    kTangentShared6: ClassVar[int] = ...
    kTangentShared7: ClassVar[int] = ...
    kTangentShared8: ClassVar[int] = ...
    kTangentAutoMix: ClassVar[int] = ...
    kTangentAutoEase: ClassVar[int] = ...
    kTangentAutoCustom: ClassVar[int] = ...
    kTangentCustomStart: ClassVar[int] = ...
    kTangentCustomEnd: ClassVar[int] = ...
    kTangentTypeCount: ClassVar[int] = ...
    kConstant: ClassVar[int] = ...
    kLinear: ClassVar[int] = ...
    kCycle: ClassVar[int] = ...
    kCycleRelative: ClassVar[int] = ...
    kOscillate: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def animCurveType(cls, *args, **kwargs): ...
    @classmethod
    def timedAnimCurveTypeForPlug(cls, *args, **kwargs): ...
    @classmethod
    def unitlessAnimCurveTypeForPlug(cls, *args, **kwargs): ...
    @classmethod
    def evaluate(cls, *args, **kwargs): ...
    @classmethod
    def isStatic(cls, *args, **kwargs): ...
    @classmethod
    def numKeyframes(cls, *args, **kwargs): ...
    @classmethod
    def numKeys(cls, *args, **kwargs): ...
    @classmethod
    def remove(cls, *args, **kwargs): ...
    @classmethod
    def addKeyframe(cls, *args, **kwargs): ...
    @classmethod
    def addKey(cls, *args, **kwargs): ...
    @classmethod
    def addKeys(cls, *args, **kwargs): ...
    @classmethod
    def addKeysWithTangents(cls, *args, **kwargs): ...
    @classmethod
    def insertKey(cls, *args, **kwargs): ...
    @classmethod
    def find(cls, *args, **kwargs): ...
    @classmethod
    def findClosest(cls, *args, **kwargs): ...
    @classmethod
    def time(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def quaternionW(cls, *args, **kwargs): ...
    @classmethod
    def unitlessInput(cls, *args, **kwargs): ...
    @classmethod
    def setValue(cls, *args, **kwargs): ...
    @classmethod
    def setQuaternionW(cls, *args, **kwargs): ...
    @classmethod
    def setTime(cls, *args, **kwargs): ...
    @classmethod
    def setUnitlessInput(cls, *args, **kwargs): ...
    @classmethod
    def isTimeInput(cls, *args, **kwargs): ...
    @classmethod
    def isUnitlessInput(cls, *args, **kwargs): ...
    @classmethod
    def inTangentType(cls, *args, **kwargs): ...
    @classmethod
    def outTangentType(cls, *args, **kwargs): ...
    @classmethod
    def setInTangentType(cls, *args, **kwargs): ...
    @classmethod
    def setOutTangentType(cls, *args, **kwargs): ...
    @classmethod
    def setTangentTypes(cls, *args, **kwargs): ...
    @classmethod
    def setTangent(cls, *args, **kwargs): ...
    @classmethod
    def setAngle(cls, *args, **kwargs): ...
    @classmethod
    def setWeight(cls, *args, **kwargs): ...
    @classmethod
    def weightsLocked(cls, *args, **kwargs): ...
    @classmethod
    def tangentsLocked(cls, *args, **kwargs): ...
    @classmethod
    def setWeightsLocked(cls, *args, **kwargs): ...
    @classmethod
    def setTangentsLocked(cls, *args, **kwargs): ...
    @classmethod
    def preInfinityType(cls, *args, **kwargs): ...
    @classmethod
    def postInfinityType(cls, *args, **kwargs): ...
    @classmethod
    def setPreInfinityType(cls, *args, **kwargs): ...
    @classmethod
    def setPostInfinityType(cls, *args, **kwargs): ...
    @classmethod
    def isWeighted(cls, *args, **kwargs): ...
    @classmethod
    def setIsWeighted(cls, *args, **kwargs): ...
    @classmethod
    def isBreakdown(cls, *args, **kwargs): ...
    @classmethod
    def setIsBreakdown(cls, *args, **kwargs): ...
    @classmethod
    def getTangent(cls, *args, **kwargs): ...

class MFnBlendShapeDeformer(maya.OpenMaya.MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    kLocalOrigin: ClassVar[int] = ...
    kWorldOrigin: ClassVar[int] = ...
    kFrontOfChain: ClassVar[int] = ...
    kNormal: ClassVar[int] = ...
    kPost: ClassVar[int] = ...
    kOther: ClassVar[int] = ...
    kObject: ClassVar[int] = ...
    kTangent: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addBaseObject(cls, *args, **kwargs): ...
    @classmethod
    def getBaseObjects(cls, *args, **kwargs): ...
    @classmethod
    def addTarget(cls, *args, **kwargs): ...
    @classmethod
    def removeTarget(cls, *args, **kwargs): ...
    @classmethod
    def getTargets(cls, *args, **kwargs): ...
    @classmethod
    def numWeights(cls, *args, **kwargs): ...
    @classmethod
    def weightIndexList(cls, *args, **kwargs): ...
    @classmethod
    def targetItemIndexList(cls, *args, **kwargs): ...
    @classmethod
    def weight(cls, *args, **kwargs): ...
    @classmethod
    def setWeight(cls, *args, **kwargs): ...
    @classmethod
    def envelope(cls, *args, **kwargs): ...
    @classmethod
    def setEnvelope(cls, *args, **kwargs): ...
    @classmethod
    def origin(cls, *args, **kwargs): ...
    @classmethod
    def setOrigin(cls, *args, **kwargs): ...
    @classmethod
    def historyLocation(cls, *args, **kwargs): ...

class MFnCharacter(maya.OpenMaya.MFnSet):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def attachSourceToCharacter(cls, *args, **kwargs): ...
    @classmethod
    def attachInstanceToCharacter(cls, *args, **kwargs): ...
    @classmethod
    def addCurveToClip(cls, *args, **kwargs): ...
    @classmethod
    def createBlend(cls, *args, **kwargs): ...
    @classmethod
    def blendExists(cls, *args, **kwargs): ...
    @classmethod
    def removeBlend(cls, *args, **kwargs): ...
    @classmethod
    def getCharacterThatOwnsPlug(cls, *args, **kwargs): ...
    @classmethod
    def getMemberPlugs(cls, *args, **kwargs): ...
    @classmethod
    def getSubCharacters(cls, *args, **kwargs): ...
    @classmethod
    def getClipScheduler(cls, *args, **kwargs): ...
    @classmethod
    def getScheduledClipCount(cls, *args, **kwargs): ...
    @classmethod
    def getScheduledClip(cls, *args, **kwargs): ...
    @classmethod
    def getSourceClipCount(cls, *args, **kwargs): ...
    @classmethod
    def getSourceClip(cls, *args, **kwargs): ...
    @classmethod
    def getBlendCount(cls, *args, **kwargs): ...
    @classmethod
    def getBlend(cls, *args, **kwargs): ...
    @classmethod
    def getBlendClips(cls, *args, **kwargs): ...

class MFnClip(maya.OpenMaya.MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def createSourceClip(cls, *args, **kwargs): ...
    @classmethod
    def createInstancedClip(cls, *args, **kwargs): ...
    @classmethod
    def isInstancedClip(cls, *args, **kwargs): ...
    @classmethod
    def isPose(cls, *args, **kwargs): ...
    @classmethod
    def sourceClip(cls, *args, **kwargs): ...
    @classmethod
    def getPreCycle(cls, *args, **kwargs): ...
    @classmethod
    def getPostCycle(cls, *args, **kwargs): ...
    @classmethod
    def getCycle(cls, *args, **kwargs): ...
    @classmethod
    def getWeight(cls, *args, **kwargs): ...
    @classmethod
    def getScale(cls, *args, **kwargs): ...
    @classmethod
    def getAbsolute(cls, *args, **kwargs): ...
    @classmethod
    def getEnabled(cls, *args, **kwargs): ...
    @classmethod
    def getStartFrame(cls, *args, **kwargs): ...
    @classmethod
    def getSourceStart(cls, *args, **kwargs): ...
    @classmethod
    def getSourceDuration(cls, *args, **kwargs): ...
    @classmethod
    def getMemberAnimCurves(cls, *args, **kwargs): ...
    @classmethod
    def getAbsoluteChannelSettings(cls, *args, **kwargs): ...
    @classmethod
    def getTrack(cls, *args, **kwargs): ...
    @classmethod
    def setPoseClip(cls, *args, **kwargs): ...
    @classmethod
    def setPreCycle(cls, *args, **kwargs): ...
    @classmethod
    def setPostCycle(cls, *args, **kwargs): ...
    @classmethod
    def setCycle(cls, *args, **kwargs): ...
    @classmethod
    def setWeight(cls, *args, **kwargs): ...
    @classmethod
    def setScale(cls, *args, **kwargs): ...
    @classmethod
    def setAbsolute(cls, *args, **kwargs): ...
    @classmethod
    def setEnabled(cls, *args, **kwargs): ...
    @classmethod
    def setStartFrame(cls, *args, **kwargs): ...
    @classmethod
    def setSourceData(cls, *args, **kwargs): ...
    @classmethod
    def setTrack(cls, *args, **kwargs): ...
    @classmethod
    def setAbsoluteChannelSettings(cls, *args, **kwargs): ...

class MFnGeometryFilter(maya.OpenMaya.MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def getInputGeometry(cls, *args, **kwargs): ...
    @classmethod
    def getOutputGeometry(cls, *args, **kwargs): ...
    @classmethod
    def inputShapeAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def outputShapeAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def indexForOutputShape(cls, *args, **kwargs): ...
    @classmethod
    def getPathAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def indexForGroupId(cls, *args, **kwargs): ...
    @classmethod
    def groupIdAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def numOutputConnections(cls, *args, **kwargs): ...
    @classmethod
    def indexForOutputConnection(cls, *args, **kwargs): ...
    @classmethod
    def deformerSet(cls, *args, **kwargs): ...
    @classmethod
    def envelope(cls, *args, **kwargs): ...
    @classmethod
    def setEnvelope(cls, *args, **kwargs): ...
    @classmethod
    def getComponentAtIndex(cls, *args, **kwargs): ...
    @classmethod
    def getIndexMapper(cls, *args, **kwargs): ...

class MFnHikEffector(maya.OpenMaya.MFnTransform):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def getPivotOffset(cls, *args, **kwargs): ...
    @classmethod
    def setPivotOffset(cls, *args, **kwargs): ...
    @classmethod
    def getEffColor(cls, *args, **kwargs): ...
    @classmethod
    def setEffColor(cls, *args, **kwargs): ...
    @classmethod
    def getAuxiliaryEffectors(cls, *args, **kwargs): ...

class MFnIkEffector(maya.OpenMaya.MFnTransform):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...

class MFnIkHandle(maya.OpenMaya.MFnTransform):
    __init__: ClassVar[Callable] = ...
    kStickyOff: ClassVar[int] = ...
    kStickyOn: ClassVar[int] = ...
    kSuperSticky: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def getStartJoint(cls, *args, **kwargs): ...
    @classmethod
    def setStartJoint(cls, *args, **kwargs): ...
    @classmethod
    def getEffector(cls, *args, **kwargs): ...
    @classmethod
    def setEffector(cls, *args, **kwargs): ...
    @classmethod
    def setStartJointAndEffector(cls, *args, **kwargs): ...
    @classmethod
    def priority(cls, *args, **kwargs): ...
    @classmethod
    def setPriority(cls, *args, **kwargs): ...
    @classmethod
    def stickiness(cls, *args, **kwargs): ...
    @classmethod
    def setStickiness(cls, *args, **kwargs): ...
    @classmethod
    def weight(cls, *args, **kwargs): ...
    @classmethod
    def setWeight(cls, *args, **kwargs): ...
    @classmethod
    def poWeight(cls, *args, **kwargs): ...
    @classmethod
    def setPOWeight(cls, *args, **kwargs): ...
    @classmethod
    def solver(cls, *args, **kwargs): ...
    @classmethod
    def setSolver(cls, *args, **kwargs): ...

class MFnIkJoint(maya.OpenMaya.MFnTransform):
    __init__: ClassVar[Callable] = ...
    kXAxis: ClassVar[int] = ...
    kYAxis: ClassVar[int] = ...
    kZAxis: ClassVar[int] = ...
    kNone: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def getOrientation(cls, *args, **kwargs): ...
    @classmethod
    def setOrientation(cls, *args, **kwargs): ...
    @classmethod
    def getScaleOrientation(cls, *args, **kwargs): ...
    @classmethod
    def setScaleOrientation(cls, *args, **kwargs): ...
    @classmethod
    def getSegmentScale(cls, *args, **kwargs): ...
    @classmethod
    def setSegmentScale(cls, *args, **kwargs): ...
    @classmethod
    def getStiffness(cls, *args, **kwargs): ...
    @classmethod
    def setStiffness(cls, *args, **kwargs): ...
    @classmethod
    def getPreferredAngle(cls, *args, **kwargs): ...
    @classmethod
    def setPreferredAngle(cls, *args, **kwargs): ...
    @classmethod
    def getDegreesOfFreedom(cls, *args, **kwargs): ...
    @classmethod
    def setDegreesOfFreedom(cls, *args, **kwargs): ...
    @classmethod
    def minRotateDampXRange(cls, *args, **kwargs): ...
    @classmethod
    def minRotateDampYRange(cls, *args, **kwargs): ...
    @classmethod
    def minRotateDampZRange(cls, *args, **kwargs): ...
    @classmethod
    def maxRotateDampXRange(cls, *args, **kwargs): ...
    @classmethod
    def maxRotateDampYRange(cls, *args, **kwargs): ...
    @classmethod
    def maxRotateDampZRange(cls, *args, **kwargs): ...
    @classmethod
    def setMinRotateDampXRange(cls, *args, **kwargs): ...
    @classmethod
    def setMinRotateDampYRange(cls, *args, **kwargs): ...
    @classmethod
    def setMinRotateDampZRange(cls, *args, **kwargs): ...
    @classmethod
    def setMaxRotateDampXRange(cls, *args, **kwargs): ...
    @classmethod
    def setMaxRotateDampYRange(cls, *args, **kwargs): ...
    @classmethod
    def setMaxRotateDampZRange(cls, *args, **kwargs): ...
    @classmethod
    def minRotateDampXStrength(cls, *args, **kwargs): ...
    @classmethod
    def minRotateDampYStrength(cls, *args, **kwargs): ...
    @classmethod
    def minRotateDampZStrength(cls, *args, **kwargs): ...
    @classmethod
    def maxRotateDampXStrength(cls, *args, **kwargs): ...
    @classmethod
    def maxRotateDampYStrength(cls, *args, **kwargs): ...
    @classmethod
    def maxRotateDampZStrength(cls, *args, **kwargs): ...
    @classmethod
    def setMinRotateDampXStrength(cls, *args, **kwargs): ...
    @classmethod
    def setMinRotateDampYStrength(cls, *args, **kwargs): ...
    @classmethod
    def setMinRotateDampZStrength(cls, *args, **kwargs): ...
    @classmethod
    def setMaxRotateDampXStrength(cls, *args, **kwargs): ...
    @classmethod
    def setMaxRotateDampYStrength(cls, *args, **kwargs): ...
    @classmethod
    def setMaxRotateDampZStrength(cls, *args, **kwargs): ...
    @classmethod
    def hikJointName(cls, *args, **kwargs): ...
    @classmethod
    def getPreferedAngle(cls, *args, **kwargs): ...
    @classmethod
    def setPreferedAngle(cls, *args, **kwargs): ...

class MFnIkSolver(maya.OpenMaya.MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def maxIterations(cls, *args, **kwargs): ...
    @classmethod
    def setMaxIterations(cls, *args, **kwargs): ...
    @classmethod
    def tolerance(cls, *args, **kwargs): ...
    @classmethod
    def setTolerance(cls, *args, **kwargs): ...

class MFnKeyframeDelta(maya.OpenMaya.MFnBase):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def paramCurve(cls, *args, **kwargs): ...
    @classmethod
    def keyIndex(cls, *args, **kwargs): ...

class MFnKeyframeDeltaAddRemove(MFnKeyframeDelta):
    __init__: ClassVar[Callable] = ...
    kAdded: ClassVar[int] = ...
    kRemoved: ClassVar[int] = ...
    kReplaced: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def deltaType(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def time(cls, *args, **kwargs): ...
    @classmethod
    def replacedValue(cls, *args, **kwargs): ...

class MFnKeyframeDeltaBlockAddRemove(MFnKeyframeDelta):
    __init__: ClassVar[Callable] = ...
    kAdded: ClassVar[int] = ...
    kRemoved: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def deltaType(cls, *args, **kwargs): ...
    @classmethod
    def startTime(cls, *args, **kwargs): ...
    @classmethod
    def endTime(cls, *args, **kwargs): ...
    @classmethod
    def numKeys(cls, *args, **kwargs): ...
    @classmethod
    def getValues(cls, *args, **kwargs): ...
    @classmethod
    def getTimes(cls, *args, **kwargs): ...

class MFnKeyframeDeltaBreakdown(MFnKeyframeDelta):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def wasBreakdown(cls, *args, **kwargs): ...
    @classmethod
    def isBreakdown(cls, *args, **kwargs): ...

class MFnKeyframeDeltaInfType(MFnKeyframeDelta):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def previousInfinityType(cls, *args, **kwargs): ...
    @classmethod
    def currentInfinityType(cls, *args, **kwargs): ...
    @classmethod
    def isPreInfinity(cls, *args, **kwargs): ...

class MFnKeyframeDeltaMove(MFnKeyframeDelta):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def previousTime(cls, *args, **kwargs): ...
    @classmethod
    def currentTime(cls, *args, **kwargs): ...
    @classmethod
    def previousValue(cls, *args, **kwargs): ...
    @classmethod
    def currentValue(cls, *args, **kwargs): ...
    @classmethod
    def previousIndex(cls, *args, **kwargs): ...

class MFnKeyframeDeltaScale(MFnKeyframeDelta):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def startTime(cls, *args, **kwargs): ...
    @classmethod
    def endTime(cls, *args, **kwargs): ...
    @classmethod
    def currentStartTime(cls, *args, **kwargs): ...
    @classmethod
    def currentEndTime(cls, *args, **kwargs): ...
    @classmethod
    def pivotTime(cls, *args, **kwargs): ...

class MFnKeyframeDeltaTangent(MFnKeyframeDelta):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def previousTangentType(cls, *args, **kwargs): ...
    @classmethod
    def currentTangentType(cls, *args, **kwargs): ...
    @classmethod
    def getPreviousPosition(cls, *args, **kwargs): ...
    @classmethod
    def getCurrentPosition(cls, *args, **kwargs): ...
    @classmethod
    def isInTangent(cls, *args, **kwargs): ...

class MFnKeyframeDeltaWeighted(MFnKeyframeDelta):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def wasWeighted(cls, *args, **kwargs): ...

class MFnLatticeDeformer(maya.OpenMaya.MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addGeometry(cls, *args, **kwargs): ...
    @classmethod
    def removeGeometry(cls, *args, **kwargs): ...
    @classmethod
    def getAffectedGeometry(cls, *args, **kwargs): ...
    @classmethod
    def getDivisions(cls, *args, **kwargs): ...
    @classmethod
    def setDivisions(cls, *args, **kwargs): ...
    @classmethod
    def resetLattice(cls, *args, **kwargs): ...
    @classmethod
    def deformLattice(cls, *args, **kwargs): ...
    @classmethod
    def baseLattice(cls, *args, **kwargs): ...

class MFnLattice(maya.OpenMaya.MFnDagNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def getDivisions(cls, *args, **kwargs): ...
    @classmethod
    def setDivisions(cls, *args, **kwargs): ...
    @classmethod
    def point(cls, *args, **kwargs): ...

class MFnMotionPath(maya.OpenMaya.MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    kXaxis: ClassVar[int] = ...
    kYaxis: ClassVar[int] = ...
    kZaxis: ClassVar[int] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def setPathObject(cls, *args, **kwargs): ...
    @classmethod
    def pathObject(cls, *args, **kwargs): ...
    @classmethod
    def addAnimatedObject(cls, *args, **kwargs): ...
    @classmethod
    def getAnimatedObjects(cls, *args, **kwargs): ...
    @classmethod
    def setFollow(cls, *args, **kwargs): ...
    @classmethod
    def follow(cls, *args, **kwargs): ...
    @classmethod
    def setFollowAxis(cls, *args, **kwargs): ...
    @classmethod
    def followAxis(cls, *args, **kwargs): ...
    @classmethod
    def setUpAxis(cls, *args, **kwargs): ...
    @classmethod
    def upAxis(cls, *args, **kwargs): ...
    @classmethod
    def setBank(cls, *args, **kwargs): ...
    @classmethod
    def bank(cls, *args, **kwargs): ...
    @classmethod
    def setBankScale(cls, *args, **kwargs): ...
    @classmethod
    def bankScale(cls, *args, **kwargs): ...
    @classmethod
    def setBankThreshold(cls, *args, **kwargs): ...
    @classmethod
    def bankThreshold(cls, *args, **kwargs): ...
    @classmethod
    def setUseNormal(cls, *args, **kwargs): ...
    @classmethod
    def useNormal(cls, *args, **kwargs): ...
    @classmethod
    def setInverseNormal(cls, *args, **kwargs): ...
    @classmethod
    def inverseNormal(cls, *args, **kwargs): ...
    @classmethod
    def setUStart(cls, *args, **kwargs): ...
    @classmethod
    def setUEnd(cls, *args, **kwargs): ...
    @classmethod
    def uStart(cls, *args, **kwargs): ...
    @classmethod
    def uEnd(cls, *args, **kwargs): ...
    @classmethod
    def setUTimeStart(cls, *args, **kwargs): ...
    @classmethod
    def setUTimeEnd(cls, *args, **kwargs): ...
    @classmethod
    def uTimeStart(cls, *args, **kwargs): ...
    @classmethod
    def uTimeEnd(cls, *args, **kwargs): ...
    @classmethod
    def numPositionMarkers(cls, *args, **kwargs): ...
    @classmethod
    def getPositionMarker(cls, *args, **kwargs): ...
    @classmethod
    def numOrientationMarkers(cls, *args, **kwargs): ...
    @classmethod
    def getOrientationMarker(cls, *args, **kwargs): ...

class MFnSkinCluster(MFnGeometryFilter):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def indexForInfluenceObject(cls, *args, **kwargs): ...
    @classmethod
    def influenceObjects(cls, *args, **kwargs): ...
    @classmethod
    def getWeights(cls, *args, **kwargs): ...
    @classmethod
    def setWeights(cls, *args, **kwargs): ...
    @classmethod
    def getPointsAffectedByInfluence(cls, *args, **kwargs): ...
    @classmethod
    def getBlendWeights(cls, *args, **kwargs): ...
    @classmethod
    def setBlendWeights(cls, *args, **kwargs): ...

class MFnWeightGeometryFilter(MFnGeometryFilter):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def getWeights(cls, *args, **kwargs): ...
    @classmethod
    def setWeight(cls, *args, **kwargs): ...
    @classmethod
    def weightPlugStrings(cls, *args, **kwargs): ...
    @classmethod
    def getWeightPlugStrings(cls, *args, **kwargs): ...
    @classmethod
    def getEnvelopeWeights(cls, *args, **kwargs): ...

class MFnWireDeformer(maya.OpenMaya.MFnDependencyNode):
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    @classmethod
    def addGeometry(cls, *args, **kwargs): ...
    @classmethod
    def removeGeometry(cls, *args, **kwargs): ...
    @classmethod
    def getAffectedGeometry(cls, *args, **kwargs): ...
    @classmethod
    def numWires(cls, *args, **kwargs): ...
    @classmethod
    def addWire(cls, *args, **kwargs): ...
    @classmethod
    def wire(cls, *args, **kwargs): ...
    @classmethod
    def wireDropOffDistance(cls, *args, **kwargs): ...
    @classmethod
    def setWireDropOffDistance(cls, *args, **kwargs): ...
    @classmethod
    def wireScale(cls, *args, **kwargs): ...
    @classmethod
    def setWireScale(cls, *args, **kwargs): ...
    @classmethod
    def holdingShape(cls, *args, **kwargs): ...
    @classmethod
    def setHoldingShape(cls, *args, **kwargs): ...
    @classmethod
    def envelope(cls, *args, **kwargs): ...
    @classmethod
    def setEnvelope(cls, *args, **kwargs): ...
    @classmethod
    def rotation(cls, *args, **kwargs): ...
    @classmethod
    def setRotation(cls, *args, **kwargs): ...
    @classmethod
    def localIntensity(cls, *args, **kwargs): ...
    @classmethod
    def setLocalIntensity(cls, *args, **kwargs): ...
    @classmethod
    def crossingEffect(cls, *args, **kwargs): ...
    @classmethod
    def setCrossingEffect(cls, *args, **kwargs): ...
    @classmethod
    def numDropoffLocators(cls, *args, **kwargs): ...
    @classmethod
    def setDropoffLocator(cls, *args, **kwargs): ...
    @classmethod
    def getDropoffLocator(cls, *args, **kwargs): ...

class MIkHandleGroup:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def priority(cls, *args, **kwargs): ...
    @classmethod
    def solverID(cls, *args, **kwargs): ...
    @classmethod
    def solverPriority(cls, *args, **kwargs): ...
    @classmethod
    def setPriority(cls, *args, **kwargs): ...
    @classmethod
    def setSolverID(cls, *args, **kwargs): ...
    @classmethod
    def checkEffectorAtGoal(cls, *args, **kwargs): ...
    @classmethod
    def solve(cls, *args, **kwargs): ...
    @classmethod
    def dofCount(cls, *args, **kwargs): ...
    @classmethod
    def handleCount(cls, *args, **kwargs): ...
    @classmethod
    def handle(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...

class MIkSystem:
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @staticmethod
    def findSolver(*args, **kwargs): ...
    @staticmethod
    def getSolvers(*args, **kwargs): ...
    @staticmethod
    def isGlobalSnap(*args, **kwargs): ...
    @staticmethod
    def setGlobalSnap(*args, **kwargs): ...
    @staticmethod
    def isGlobalSolve(*args, **kwargs): ...
    @staticmethod
    def setGlobalSolve(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...

class MItKeyframe:
    kTangentGlobal: ClassVar[int] = ...
    kTangentFixed: ClassVar[int] = ...
    kTangentLinear: ClassVar[int] = ...
    kTangentFlat: ClassVar[int] = ...
    kTangentSmooth: ClassVar[int] = ...
    kTangentStep: ClassVar[int] = ...
    kTangentSlow: ClassVar[int] = ...
    kTangentFast: ClassVar[int] = ...
    kTangentClamped: ClassVar[int] = ...
    kTangentPlateau: ClassVar[int] = ...
    kTangentStepNext: ClassVar[int] = ...
    kTangentAuto: ClassVar[int] = ...
    kTangentAutoMix: ClassVar[int] = ...
    kTangentAutoEase: ClassVar[int] = ...
    kTangentAutoCustom: ClassVar[int] = ...
    __init__: ClassVar[Callable] = ...
    thisown: Incomplete
    @classmethod
    def __swig_destroy__(cls, *args, **kwargs): ...
    @classmethod
    def reset(cls, *args, **kwargs): ...
    @classmethod
    def next(cls, *args, **kwargs): ...
    @classmethod
    def isDone(cls, *args, **kwargs): ...
    @classmethod
    def time(cls, *args, **kwargs): ...
    @classmethod
    def setTime(cls, *args, **kwargs): ...
    @classmethod
    def value(cls, *args, **kwargs): ...
    @classmethod
    def setValue(cls, *args, **kwargs): ...
    @classmethod
    def inTangentType(cls, *args, **kwargs): ...
    @classmethod
    def outTangentType(cls, *args, **kwargs): ...
    @classmethod
    def setInTangentType(cls, *args, **kwargs): ...
    @classmethod
    def setOutTangentType(cls, *args, **kwargs): ...
    @classmethod
    def getTangentOut(cls, *args, **kwargs): ...
    @classmethod
    def getTangentIn(cls, *args, **kwargs): ...
    @classmethod
    def tangentsLocked(cls, *args, **kwargs): ...
    @classmethod
    def setTangentsLocked(cls, *args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @classmethod
    def __next__(cls): ...
