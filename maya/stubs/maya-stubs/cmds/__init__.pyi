from typing import Any, Callable, Literal, overload

def ATOMTemplate(*args, **keywords): ...
def AbortCurrentTool(*args, **keywords): ...
def ActivateGlobalScreenSlider(*args, **keywords): ...
def ActivateGlobalScreenSliderModeMarkingMenu(*args, **keywords): ...
def ActivateViewport20(*args, **keywords): ...
def AddAnimationOffset(*args, **keywords): ...
def AddAnimationOffsetOptions(*args, **keywords): ...
def AddAttribute(*args, **keywords): ...
def AddBlendShape(*args, **keywords): ...
def AddBlendShapeOptions(*args, **keywords): ...
def AddBoatLocator(*args, **keywords): ...
def AddBoatLocatorOptions(*args, **keywords): ...
def AddCombinationTarget(*args, **keywords): ...
def AddCombinationTargetOptions(*args, **keywords): ...
def AddCurvesToHairSystem(*args, **keywords): ...
def AddDivisions(*args, **keywords): ...
def AddDivisionsOptions(*args, **keywords): ...
def AddDynamicBuoy(*args, **keywords): ...
def AddDynamicBuoyOptions(*args, **keywords): ...
def AddEdgeDivisions(*args, **keywords): ...
def AddEdgeDivisionsOptions(*args, **keywords): ...
def AddFaceDivisions(*args, **keywords): ...
def AddFaceDivisionsOptions(*args, **keywords): ...
def AddFloorContactPlane(*args, **keywords): ...
def AddHolder(*args, **keywords): ...
def AddHolderOptions(*args, **keywords): ...
def AddInBetweenTargetShape(*args, **keywords): ...
def AddInBetweenTargetShapeOptions(*args, **keywords): ...
def AddInfluence(*args, **keywords): ...
def AddInfluenceOptions(*args, **keywords): ...
def AddKeyToolActivate(*args, **keywords): ...
def AddKeyToolDeactivate(*args, **keywords): ...
def AddKeysTool(*args, **keywords): ...
def AddKeysToolOptions(*args, **keywords): ...
def AddOceanDynamicLocator(*args, **keywords): ...
def AddOceanDynamicLocatorOptions(*args, **keywords): ...
def AddOceanPreviewPlane(*args, **keywords): ...
def AddOceanSurfaceLocator(*args, **keywords): ...
def AddPfxToHairSystem(*args, **keywords): ...
def AddPointsTool(*args, **keywords): ...
def AddPondBoatLocator(*args, **keywords): ...
def AddPondBoatLocatorOptions(*args, **keywords): ...
def AddPondDynamicBuoy(*args, **keywords): ...
def AddPondDynamicBuoyOptions(*args, **keywords): ...
def AddPondDynamicLocator(*args, **keywords): ...
def AddPondDynamicLocatorOptions(*args, **keywords): ...
def AddPondSurfaceLocator(*args, **keywords): ...
def AddSelectionAsCombinationTarget(*args, **keywords): ...
def AddSelectionAsCombinationTargetOptions(*args, **keywords): ...
def AddSelectionAsInBetweenTargetShape(*args, **keywords): ...
def AddSelectionAsInBetweenTargetShapeOptions(*args, **keywords): ...
def AddSelectionAsTargetShape(*args, **keywords): ...
def AddSelectionAsTargetShapeOptions(*args, **keywords): ...
def AddShrinkWrapSurfaces(*args, **keywords): ...
def AddTargetShape(*args, **keywords): ...
def AddTargetShapeOptions(*args, **keywords): ...
def AddTimeWarp(*args, **keywords): ...
def AddToCharacterSet(*args, **keywords): ...
def AddToContainer(*args, **keywords): ...
def AddToContainerOptions(*args, **keywords): ...
def AddToCurrentScene3dsMax(*args, **keywords): ...
def AddToCurrentSceneFlame(*args, **keywords): ...
def AddToCurrentSceneFlare(*args, **keywords): ...
def AddToCurrentSceneMotionBuilder(*args, **keywords): ...
def AddToCurrentSceneMudbox(*args, **keywords): ...
def AddTweak(*args, **keywords): ...
def AddWire(*args, **keywords): ...
def AddWireOptions(*args, **keywords): ...
def AddWrapInfluence(*args, **keywords): ...
def AffectSelectedObject(*args, **keywords): ...
def AimConstraint(*args, **keywords): ...
def AimConstraintOptions(*args, **keywords): ...
def Air(*args, **keywords): ...
def AirOptions(*args, **keywords): ...
def AlignCameraToPolygon(*args, **keywords): ...
def AlignCurve(*args, **keywords): ...
def AlignCurveOptions(*args, **keywords): ...
def AlignObjects(*args, **keywords): ...
def AlignSurfaces(*args, **keywords): ...
def AlignSurfacesOptions(*args, **keywords): ...
def AlignUV(*args, **keywords): ...
def AlignUVOptions(*args, **keywords): ...
def AnimLayerRelationshipEditor(*args, **keywords): ...
def AnimationSnapshot(*args, **keywords): ...
def AnimationSnapshotOptions(*args, **keywords): ...
def AnimationSweep(*args, **keywords): ...
def AnimationSweepOptions(*args, **keywords): ...
def AnimationTurntable(*args, **keywords): ...
def AnimationTurntableOptions(*args, **keywords): ...
def AppHome(*args, **keywords): ...
def AppendToHairCache(*args, **keywords): ...
def AppendToHairCacheOptions(*args, **keywords): ...
def AppendToPolygonTool(*args, **keywords): ...
def AppendToPolygonToolOptions(*args, **keywords): ...
def ApplySettingsToLastStroke(*args, **keywords): ...
def ApplySettingsToSelectedStroke(*args, **keywords): ...
def ArcLengthTool(*args, **keywords): ...
def ArchiveScene(*args, **keywords): ...
def ArchiveSceneOptions(*args, **keywords): ...
def Art3dPaintTool(*args, **keywords): ...
def Art3dPaintToolOptions(*args, **keywords): ...
def ArtPaintAttrTool(*args, **keywords): ...
def ArtPaintAttrToolOptions(*args, **keywords): ...
def ArtPaintBlendShapeWeightsTool(*args, **keywords): ...
def ArtPaintBlendShapeWeightsToolOptions(*args, **keywords): ...
def ArtPaintSelectTool(*args, **keywords): ...
def ArtPaintSelectToolOptions(*args, **keywords): ...
def ArtPaintSkinWeightsTool(*args, **keywords): ...
def ArtPaintSkinWeightsToolOptions(*args, **keywords): ...
def AssetEditor(*args, **keywords): ...
def AssignBrushToHairSystem(*args, **keywords): ...
def AssignBrushToPfxToon(*args, **keywords): ...
def AssignHairConstraint(*args, **keywords): ...
def AssignHairConstraintOptions(*args, **keywords): ...
def AssignNewMaterial(*args, **keywords): ...
def AssignNewPfxToon(*args, **keywords): ...
def AssignNewSet(*args, **keywords): ...
def AssignOfflineFile(*args, **keywords): ...
def AssignOfflineFileFromRefEd(*args, **keywords): ...
def AssignOfflineFileFromRefEdOptions(*args, **keywords): ...
def AssignOfflineFileOptions(*args, **keywords): ...
def AssignTemplate(*args, **keywords): ...
def AssignTemplateOptions(*args, **keywords): ...
def AssignToonShaderCircleHighlight(*args, **keywords): ...
def AssignToonShaderDarkProfile(*args, **keywords): ...
def AssignToonShaderLightAngle(*args, **keywords): ...
def AssignToonShaderRimLight(*args, **keywords): ...
def AssignToonShaderShadedBrightness(*args, **keywords): ...
def AssignToonShaderSolid(*args, **keywords): ...
def AssignToonShaderThreeToneBrightness(*args, **keywords): ...
def AssumePreferredAngle(*args, **keywords): ...
def AssumePreferredAngleOptions(*args, **keywords): ...
def AttachBrushToCurves(*args, **keywords): ...
def AttachCurve(*args, **keywords): ...
def AttachCurveOptions(*args, **keywords): ...
def AttachSelectedAsSourceField(*args, **keywords): ...
def AttachSubdivSurface(*args, **keywords): ...
def AttachSubdivSurfaceOptions(*args, **keywords): ...
def AttachSurfaceWithoutMoving(*args, **keywords): ...
def AttachSurfaces(*args, **keywords): ...
def AttachSurfacesOptions(*args, **keywords): ...
def AttachToPath(*args, **keywords): ...
def AttachToPathOptions(*args, **keywords): ...
def AttributeEditor(*args, **keywords): ...
def AutoPaintMarkingMenu(*args, **keywords): ...
def AutoPaintMarkingMenuPopDown(*args, **keywords): ...
def AutoProjection(*args, **keywords): ...
def AutoProjectionOptions(*args, **keywords): ...
def AutoSeamUVs(*args, **keywords): ...
def AutoSeamUVsOptions(*args, **keywords): ...
def AutobindContainer(*args, **keywords): ...
def AutobindContainerOptions(*args, **keywords): ...
def AveragePolygonNormals(*args, **keywords): ...
def AveragePolygonNormalsOptions(*args, **keywords): ...
def AverageVertex(*args, **keywords): ...
def BakeAllNonDefHistory(*args, **keywords): ...
def BakeChannel(*args, **keywords): ...
def BakeChannelOptions(*args, **keywords): ...
def BakeCustomPivot(*args, **keywords): ...
def BakeCustomPivotOptions(*args, **keywords): ...
def BakeDeformerTool(*args, **keywords): ...
def BakeNonDefHistory(*args, **keywords): ...
def BakeNonDefHistoryOptions(*args, **keywords): ...
def BakeSimulation(*args, **keywords): ...
def BakeSimulationOptions(*args, **keywords): ...
def BakeSpringAnimation(*args, **keywords): ...
def BakeSpringAnimationOptions(*args, **keywords): ...
def BakeSurfaceToTexture(*args, **keywords): ...
def BakeTopologyToTargets(*args, **keywords): ...
def BaseLevelComponentDisplay(*args, **keywords): ...
def BatchBake(*args, **keywords): ...
def BatchBakeOptions(*args, **keywords): ...
def BatchRender(*args, **keywords): ...
def BatchRenderOptions(*args, **keywords): ...
def Bend(*args, **keywords): ...
def BendCurves(*args, **keywords): ...
def BendCurvesOptions(*args, **keywords): ...
def BendOptions(*args, **keywords): ...
def BestPlaneTexturingTool(*args, **keywords): ...
def Bevel(*args, **keywords): ...
def BevelOptions(*args, **keywords): ...
def BevelPlus(*args, **keywords): ...
def BevelPlusOptions(*args, **keywords): ...
def BevelPolygon(*args, **keywords): ...
def BevelPolygonOptions(*args, **keywords): ...
def BezierCurveToNurbs(*args, **keywords): ...
def BezierPresetBezier(*args, **keywords): ...
def BezierPresetBezierCorner(*args, **keywords): ...
def BezierPresetCorner(*args, **keywords): ...
def BezierSetAnchorBroken(*args, **keywords): ...
def BezierSetAnchorEven(*args, **keywords): ...
def BezierSetAnchorSmooth(*args, **keywords): ...
def BezierSetAnchorUneven(*args, **keywords): ...
def Birail1(*args, **keywords): ...
def Birail1Options(*args, **keywords): ...
def Birail2(*args, **keywords): ...
def Birail2Options(*args, **keywords): ...
def Birail3(*args, **keywords): ...
def Birail3Options(*args, **keywords): ...
def BlendShapeEditor(*args, **keywords): ...
def BlindDataEditor(*args, **keywords): ...
def BluePencilActivateBrushSize(*args, **keywords): ...
def BluePencilActivateGhostNext(*args, **keywords): ...
def BluePencilActivateGhostPrevious(*args, **keywords): ...
def BluePencilActivateOpacity(*args, **keywords): ...
def BluePencilArrowTool(*args, **keywords): ...
def BluePencilBrushTool(*args, **keywords): ...
def BluePencilDeactivateBrushSize(*args, **keywords): ...
def BluePencilDeactivateGhostNext(*args, **keywords): ...
def BluePencilDeactivateGhostPrevious(*args, **keywords): ...
def BluePencilDeactivateOpacity(*args, **keywords): ...
def BluePencilEllipseTool(*args, **keywords): ...
def BluePencilEraserTool(*args, **keywords): ...
def BluePencilLineTool(*args, **keywords): ...
def BluePencilPencilTool(*args, **keywords): ...
def BluePencilRectangleTool(*args, **keywords): ...
def BluePencilRetimeBackward(*args, **keywords): ...
def BluePencilRetimeForward(*args, **keywords): ...
def BluePencilTextTool(*args, **keywords): ...
def BluePencilTransform(*args, **keywords): ...
def BookmarkManager(*args, **keywords): ...
def BooleanAddSelectedObjects(*args, **keywords): ...
def BothProxySubdivDisplay(*args, **keywords): ...
def Boundary(*args, **keywords): ...
def BoundaryOptions(*args, **keywords): ...
def BreakLightLinks(*args, **keywords): ...
def BreakRigidBodyConnection(*args, **keywords): ...
def BreakShadowLinks(*args, **keywords): ...
def BreakStereoRigs(*args, **keywords): ...
def BreakTangent(*args, **keywords): ...
def BreakTangents(*args, **keywords): ...
def BridgeEdge(*args, **keywords): ...
def BridgeEdgeOptions(*args, **keywords): ...
def BridgeOrFill(*args, **keywords): ...
def BrushAnimationMarkingMenu(*args, **keywords): ...
def BrushAnimationMarkingMenuPopDown(*args, **keywords): ...
def BrushPresetBlend(*args, **keywords): ...
def BrushPresetBlendOff(*args, **keywords): ...
def BrushPresetBlendShading(*args, **keywords): ...
def BrushPresetBlendShadingOff(*args, **keywords): ...
def BrushPresetBlendShape(*args, **keywords): ...
def BrushPresetBlendShapeOff(*args, **keywords): ...
def BrushPresetReplaceShading(*args, **keywords): ...
def BrushPresetReplaceShadingOff(*args, **keywords): ...
def BufferCurveSnapshot(*args, **keywords): ...
def CVCurveTool(*args, **keywords): ...
def CVCurveToolOptions(*args, **keywords): ...
def CVHardness(*args, **keywords): ...
def CVHardnessOptions(*args, **keywords): ...
def CameraModeOrthographic(*args, **keywords): ...
def CameraModePerspective(*args, **keywords): ...
def CameraModeToggle(*args, **keywords): ...
def CameraRemoveAll(*args, **keywords): ...
def CameraRemoveAllForAll(*args, **keywords): ...
def CameraRemoveFromExclusive(*args, **keywords): ...
def CameraRemoveFromHidden(*args, **keywords): ...
def CameraSetEditor(*args, **keywords): ...
def CancelBatchRender(*args, **keywords): ...
def CenterPivot(*args, **keywords): ...
def CenterViewOfSelection(*args, **keywords): ...
def ChamferVertex(*args, **keywords): ...
def ChamferVertexOptions(*args, **keywords): ...
def ChangeAnimPrefs(*args, **keywords): ...
def ChangeColorPrefs(*args, **keywords): ...
def ChangeEdgeWidth(*args, **keywords): ...
def ChangeNormalSize(*args, **keywords): ...
def ChangeUIPrefs(*args, **keywords): ...
def ChangeUVSize(*args, **keywords): ...
def ChangeVertexSize(*args, **keywords): ...
def ChannelControlEditor(*args, **keywords): ...
def CharacterAnimationEditor(*args, **keywords): ...
def CharacterMapper(*args, **keywords): ...
def CharacterSetEditor(*args, **keywords): ...
def CircularFillet(*args, **keywords): ...
def CircularFilletOptions(*args, **keywords): ...
def CleanupPolygon(*args, **keywords): ...
def CleanupPolygonOptions(*args, **keywords): ...
def ClearBluePencilFrame(*args, **keywords): ...
def ClearCurrentCharacterList(*args, **keywords): ...
def ClearCurrentContainer(*args, **keywords): ...
def ClearInitialState(*args, **keywords): ...
def ClearPaintEffectsView(*args, **keywords): ...
def CloseFrontWindow(*args, **keywords): ...
def ClosestPointOn(*args, **keywords): ...
def ClosestPointOnOptions(*args, **keywords): ...
def ClusterCurve(*args, **keywords): ...
def CoarseLevelComponentDisplay(*args, **keywords): ...
def CoarsenSelectedComponents(*args, **keywords): ...
def CoarserSubdivLevel(*args, **keywords): ...
def CollapseSubdivSurfaceHierarchy(*args, **keywords): ...
def CollapseSubdivSurfaceHierarchyOptions(*args, **keywords): ...
def ColorPreferencesWindow(*args, **keywords): ...
def CombinePolygons(*args, **keywords): ...
def CombinePolygonsOptions(*args, **keywords): ...
def CommandShell(*args, **keywords): ...
def CommandWindow(*args, **keywords): ...
def CompleteCurrentTool(*args, **keywords): ...
def ComponentEditor(*args, **keywords): ...
def ConformPolygon(*args, **keywords): ...
def ConformPolygonNormals(*args, **keywords): ...
def ConformPolygonOptions(*args, **keywords): ...
def ConnectComponents(*args, **keywords): ...
def ConnectComponentsOptions(*args, **keywords): ...
def ConnectJoint(*args, **keywords): ...
def ConnectJointOptions(*args, **keywords): ...
def ConnectNodeToIKFK(*args, **keywords): ...
def ConnectToTime(*args, **keywords): ...
def ConnectionEditor(*args, **keywords): ...
def ContentBrowserLayout(*args, **keywords): ...
def ContentBrowserWindow(*args, **keywords): ...
def ConvertHairSelectionToConstraints(*args, **keywords): ...
def ConvertHairSelectionToCurrentPositions(*args, **keywords): ...
def ConvertHairSelectionToFollicles(*args, **keywords): ...
def ConvertHairSelectionToHairSystems(*args, **keywords): ...
def ConvertHairSelectionToRestCurveEndCVs(*args, **keywords): ...
def ConvertHairSelectionToRestCurves(*args, **keywords): ...
def ConvertHairSelectionToStartAndRestCurveEndCVs(*args, **keywords): ...
def ConvertHairSelectionToStartCurveEndCVs(*args, **keywords): ...
def ConvertHairSelectionToStartCurves(*args, **keywords): ...
def ConvertInstanceToObject(*args, **keywords): ...
def ConvertPaintEffectsToPoly(*args, **keywords): ...
def ConvertPaintEffectsToPolyOptions(*args, **keywords): ...
def ConvertSelectionToContainedEdges(*args, **keywords): ...
def ConvertSelectionToContainedFaces(*args, **keywords): ...
def ConvertSelectionToEdgePerimeter(*args, **keywords): ...
def ConvertSelectionToEdges(*args, **keywords): ...
def ConvertSelectionToFacePerimeter(*args, **keywords): ...
def ConvertSelectionToFaces(*args, **keywords): ...
def ConvertSelectionToShell(*args, **keywords): ...
def ConvertSelectionToShellBorder(*args, **keywords): ...
def ConvertSelectionToUVBorder(*args, **keywords): ...
def ConvertSelectionToUVEdgeLoop(*args, **keywords): ...
def ConvertSelectionToUVPerimeter(*args, **keywords): ...
def ConvertSelectionToUVShell(*args, **keywords): ...
def ConvertSelectionToUVShellBorder(*args, **keywords): ...
def ConvertSelectionToUVs(*args, **keywords): ...
def ConvertSelectionToVertexFaces(*args, **keywords): ...
def ConvertSelectionToVertexPerimeter(*args, **keywords): ...
def ConvertSelectionToVertices(*args, **keywords): ...
def ConvertToBreakdown(*args, **keywords): ...
def ConvertToFrozen(*args, **keywords): ...
def ConvertToKey(*args, **keywords): ...
def ConvertTypeCapsToCurves(*args, **keywords): ...
def CopyBluePencilFrame(*args, **keywords): ...
def CopyFlexor(*args, **keywords): ...
def CopyKeys(*args, **keywords): ...
def CopyKeysOptions(*args, **keywords): ...
def CopyMeshAttributes(*args, **keywords): ...
def CopySelected(*args, **keywords): ...
def CopySkinWeights(*args, **keywords): ...
def CopySkinWeightsOptions(*args, **keywords): ...
def CopyUVs(*args, **keywords): ...
def CopyUVsToUVSet(*args, **keywords): ...
def CopyUVsToUVSetOptions(*args, **keywords): ...
def CopyVertexSkinWeights(*args, **keywords): ...
def CopyVertexWeights(*args, **keywords): ...
def CopyVertexWeightsOptions(*args, **keywords): ...
def CreaseProxyEdgeTool(*args, **keywords): ...
def CreaseProxyEdgeToolOptions(*args, **keywords): ...
def Create2DContainer(*args, **keywords): ...
def Create2DContainerEmitter(*args, **keywords): ...
def Create2DContainerEmitterOptions(*args, **keywords): ...
def Create2DContainerOptions(*args, **keywords): ...
def Create3DContainer(*args, **keywords): ...
def Create3DContainerEmitter(*args, **keywords): ...
def Create3DContainerEmitterOptions(*args, **keywords): ...
def Create3DContainerOptions(*args, **keywords): ...
def CreateActiveRigidBody(*args, **keywords): ...
def CreateActiveRigidBodyOptions(*args, **keywords): ...
def CreateAmbientLight(*args, **keywords): ...
def CreateAmbientLightOptions(*args, **keywords): ...
def CreateAnnotateNode(*args, **keywords): ...
def CreateAreaLight(*args, **keywords): ...
def CreateAreaLightOptions(*args, **keywords): ...
def CreateBarrierConstraint(*args, **keywords): ...
def CreateBarrierConstraintOptions(*args, **keywords): ...
def CreateBezierCurveTool(*args, **keywords): ...
def CreateBezierCurveToolOptions(*args, **keywords): ...
def CreateBindingSet(*args, **keywords): ...
def CreateBlendShape(*args, **keywords): ...
def CreateBlendShapeOptions(*args, **keywords): ...
def CreateCameraAim(*args, **keywords): ...
def CreateCameraAimOptions(*args, **keywords): ...
def CreateCameraAimUp(*args, **keywords): ...
def CreateCameraAimUpOptions(*args, **keywords): ...
def CreateCameraFromView(*args, **keywords): ...
def CreateCameraOnly(*args, **keywords): ...
def CreateCameraOnlyOptions(*args, **keywords): ...
def CreateCharacter(*args, **keywords): ...
def CreateCharacterOptions(*args, **keywords): ...
def CreateClip(*args, **keywords): ...
def CreateClipOptions(*args, **keywords): ...
def CreateCluster(*args, **keywords): ...
def CreateClusterOptions(*args, **keywords): ...
def CreateConstraint(*args, **keywords): ...
def CreateConstraintClip(*args, **keywords): ...
def CreateConstraintClipOptions(*args, **keywords): ...
def CreateConstraintOptions(*args, **keywords): ...
def CreateConstructionPlane(*args, **keywords): ...
def CreateConstructionPlaneOptions(*args, **keywords): ...
def CreateContainer(*args, **keywords): ...
def CreateContainerOptions(*args, **keywords): ...
def CreateControlRig(*args, **keywords): ...
def CreateCreaseSet(*args, **keywords): ...
def CreateCreaseSetOptions(*args, **keywords): ...
def CreateCurveField(*args, **keywords): ...
def CreateCurveFromPoly(*args, **keywords): ...
def CreateCurveFromPolyOptions(*args, **keywords): ...
def CreateCustomSet(*args, **keywords): ...
def CreateDagContainer(*args, **keywords): ...
def CreateDagContainerOptions(*args, **keywords): ...
def CreateDirectionalLight(*args, **keywords): ...
def CreateDirectionalLightOptions(*args, **keywords): ...
def CreateDiskCache(*args, **keywords): ...
def CreateDiskCacheOptions(*args, **keywords): ...
def CreateEmitter(*args, **keywords): ...
def CreateEmitterOptions(*args, **keywords): ...
def CreateEmptyGroup(*args, **keywords): ...
def CreateEmptySet(*args, **keywords): ...
def CreateEmptySetOptions(*args, **keywords): ...
def CreateEmptyUVSet(*args, **keywords): ...
def CreateEmptyUVSetOptions(*args, **keywords): ...
def CreateExpressionClip(*args, **keywords): ...
def CreateExpressionClipOptions(*args, **keywords): ...
def CreateFlexorWindow(*args, **keywords): ...
def CreateFluidCache(*args, **keywords): ...
def CreateFluidCacheOptions(*args, **keywords): ...
def CreateHair(*args, **keywords): ...
def CreateHairCache(*args, **keywords): ...
def CreateHairCacheOptions(*args, **keywords): ...
def CreateHairOptions(*args, **keywords): ...
def CreateHingeConstraint(*args, **keywords): ...
def CreateHingeConstraintOptions(*args, **keywords): ...
def CreateIllustratorCurves(*args, **keywords): ...
def CreateIllustratorCurvesOptions(*args, **keywords): ...
def CreateImagePlane(*args, **keywords): ...
def CreateImagePlaneOptions(*args, **keywords): ...
def CreateJiggleDeformer(*args, **keywords): ...
def CreateJiggleOptions(*args, **keywords): ...
def CreateLattice(*args, **keywords): ...
def CreateLatticeOptions(*args, **keywords): ...
def CreateLineModifier(*args, **keywords): ...
def CreateLocator(*args, **keywords): ...
def CreateMotionTrail(*args, **keywords): ...
def CreateMotionTrailOptions(*args, **keywords): ...
def CreateMultiStereoRig(*args, **keywords): ...
def CreateNSoftBody(*args, **keywords): ...
def CreateNSoftBodyOptions(*args, **keywords): ...
def CreateNURBSCircle(*args, **keywords): ...
def CreateNURBSCircleOptions(*args, **keywords): ...
def CreateNURBSCone(*args, **keywords): ...
def CreateNURBSConeOptions(*args, **keywords): ...
def CreateNURBSCube(*args, **keywords): ...
def CreateNURBSCubeOptions(*args, **keywords): ...
def CreateNURBSCylinder(*args, **keywords): ...
def CreateNURBSCylinderOptions(*args, **keywords): ...
def CreateNURBSPlane(*args, **keywords): ...
def CreateNURBSPlaneOptions(*args, **keywords): ...
def CreateNURBSSphere(*args, **keywords): ...
def CreateNURBSSphereOptions(*args, **keywords): ...
def CreateNURBSSquare(*args, **keywords): ...
def CreateNURBSSquareOptions(*args, **keywords): ...
def CreateNURBSTorus(*args, **keywords): ...
def CreateNURBSTorusOptions(*args, **keywords): ...
def CreateNailConstraint(*args, **keywords): ...
def CreateNailConstraintOptions(*args, **keywords): ...
def CreateNodeWindow(*args, **keywords): ...
def CreateOcean(*args, **keywords): ...
def CreateOceanOptions(*args, **keywords): ...
def CreateOceanWake(*args, **keywords): ...
def CreateOceanWakeOptions(*args, **keywords): ...
def CreatePSDTextureItem(*args, **keywords): ...
def CreateParticleDiskCache(*args, **keywords): ...
def CreateParticleDiskCacheOptions(*args, **keywords): ...
def CreatePartition(*args, **keywords): ...
def CreatePartitionOptions(*args, **keywords): ...
def CreatePassiveRigidBody(*args, **keywords): ...
def CreatePassiveRigidBodyOptions(*args, **keywords): ...
def CreatePinConstraint(*args, **keywords): ...
def CreatePinConstraintOptions(*args, **keywords): ...
def CreatePlatonicSolid(*args, **keywords): ...
def CreatePlatonicSolidOptions(*args, **keywords): ...
def CreatePointLight(*args, **keywords): ...
def CreatePointLightOptions(*args, **keywords): ...
def CreatePolyFromPreview(*args, **keywords): ...
def CreatePolygonAxis(*args, **keywords): ...
def CreatePolygonAxisOptions(*args, **keywords): ...
def CreatePolygonCone(*args, **keywords): ...
def CreatePolygonConeOptions(*args, **keywords): ...
def CreatePolygonCube(*args, **keywords): ...
def CreatePolygonCubeOptions(*args, **keywords): ...
def CreatePolygonCylinder(*args, **keywords): ...
def CreatePolygonCylinderOptions(*args, **keywords): ...
def CreatePolygonDisc(*args, **keywords): ...
def CreatePolygonDiscOptions(*args, **keywords): ...
def CreatePolygonGear(*args, **keywords): ...
def CreatePolygonGearOptions(*args, **keywords): ...
def CreatePolygonHelix(*args, **keywords): ...
def CreatePolygonHelixOptions(*args, **keywords): ...
def CreatePolygonPipe(*args, **keywords): ...
def CreatePolygonPipeOptions(*args, **keywords): ...
def CreatePolygonPlane(*args, **keywords): ...
def CreatePolygonPlaneOptions(*args, **keywords): ...
def CreatePolygonPlatonic(*args, **keywords): ...
def CreatePolygonPlatonicOptions(*args, **keywords): ...
def CreatePolygonPrism(*args, **keywords): ...
def CreatePolygonPrismOptions(*args, **keywords): ...
def CreatePolygonPyramid(*args, **keywords): ...
def CreatePolygonPyramidOptions(*args, **keywords): ...
def CreatePolygonSVG(*args, **keywords): ...
def CreatePolygonSoccerBall(*args, **keywords): ...
def CreatePolygonSoccerBallOptions(*args, **keywords): ...
def CreatePolygonSphere(*args, **keywords): ...
def CreatePolygonSphereOptions(*args, **keywords): ...
def CreatePolygonSphericalHarmonics(*args, **keywords): ...
def CreatePolygonSphericalHarmonicsOptions(*args, **keywords): ...
def CreatePolygonSuperEllipse(*args, **keywords): ...
def CreatePolygonSuperEllipseOptions(*args, **keywords): ...
def CreatePolygonTool(*args, **keywords): ...
def CreatePolygonToolOptions(*args, **keywords): ...
def CreatePolygonTorus(*args, **keywords): ...
def CreatePolygonTorusOptions(*args, **keywords): ...
def CreatePolygonType(*args, **keywords): ...
def CreatePolygonUltraShape(*args, **keywords): ...
def CreatePolygonUltraShapeOptions(*args, **keywords): ...
def CreatePond(*args, **keywords): ...
def CreatePondOptions(*args, **keywords): ...
def CreatePose(*args, **keywords): ...
def CreatePoseInterpolator(*args, **keywords): ...
def CreatePoseInterpolatorOptions(*args, **keywords): ...
def CreatePoseOptions(*args, **keywords): ...
def CreateQuickSelectSet(*args, **keywords): ...
def CreateReference(*args, **keywords): ...
def CreateReferenceOptions(*args, **keywords): ...
def CreateRigidBodySolver(*args, **keywords): ...
def CreateSculptDeformer(*args, **keywords): ...
def CreateSculptDeformerOptions(*args, **keywords): ...
def CreateSet(*args, **keywords): ...
def CreateSetOptions(*args, **keywords): ...
def CreateShot(*args, **keywords): ...
def CreateShotOptions(*args, **keywords): ...
def CreateShrinkWrap(*args, **keywords): ...
def CreateShrinkWrapOptions(*args, **keywords): ...
def CreateSoftBody(*args, **keywords): ...
def CreateSoftBodyOptions(*args, **keywords): ...
def CreateSpotLight(*args, **keywords): ...
def CreateSpotLightOptions(*args, **keywords): ...
def CreateSpring(*args, **keywords): ...
def CreateSpringConstraint(*args, **keywords): ...
def CreateSpringConstraintOptions(*args, **keywords): ...
def CreateSpringOptions(*args, **keywords): ...
def CreateStereoRig(*args, **keywords): ...
def CreateSubCharacter(*args, **keywords): ...
def CreateSubCharacterOptions(*args, **keywords): ...
def CreateSubdivCone(*args, **keywords): ...
def CreateSubdivCube(*args, **keywords): ...
def CreateSubdivCylinder(*args, **keywords): ...
def CreateSubdivPlane(*args, **keywords): ...
def CreateSubdivRegion(*args, **keywords): ...
def CreateSubdivSphere(*args, **keywords): ...
def CreateSubdivSurface(*args, **keywords): ...
def CreateSubdivSurfaceOptions(*args, **keywords): ...
def CreateSubdivSurfacePoly(*args, **keywords): ...
def CreateSubdivSurfacePolyOptions(*args, **keywords): ...
def CreateSubdivTorus(*args, **keywords): ...
def CreateSweepMesh(*args, **keywords): ...
def CreateSweepMeshOptions(*args, **keywords): ...
def CreateText(*args, **keywords): ...
def CreateTextOptions(*args, **keywords): ...
def CreateTextureDeformer(*args, **keywords): ...
def CreateTextureDeformerOptions(*args, **keywords): ...
def CreateTextureReferenceObject(*args, **keywords): ...
def CreateTimeSliderBookmark(*args, **keywords): ...
def CreateUVShellAlongBorder(*args, **keywords): ...
def CreateUVsBasedOnCamera(*args, **keywords): ...
def CreateUVsBasedOnCameraOptions(*args, **keywords): ...
def CreateVolumeCone(*args, **keywords): ...
def CreateVolumeCube(*args, **keywords): ...
def CreateVolumeLight(*args, **keywords): ...
def CreateVolumeLightOptions(*args, **keywords): ...
def CreateVolumeSphere(*args, **keywords): ...
def CreateWake(*args, **keywords): ...
def CreateWakeOptions(*args, **keywords): ...
def CreateWrap(*args, **keywords): ...
def CreateWrapOptions(*args, **keywords): ...
def CurlCurves(*args, **keywords): ...
def CurlCurvesOptions(*args, **keywords): ...
def CurveEditTool(*args, **keywords): ...
def CurveFillet(*args, **keywords): ...
def CurveFilletOptions(*args, **keywords): ...
def CurveFlow(*args, **keywords): ...
def CurveFlowOptions(*args, **keywords): ...
def CurveSmoothnessCoarse(*args, **keywords): ...
def CurveSmoothnessFine(*args, **keywords): ...
def CurveSmoothnessMedium(*args, **keywords): ...
def CurveSmoothnessRough(*args, **keywords): ...
def CurveUtilitiesMarkingMenu(*args, **keywords): ...
def CurveUtilitiesMarkingMenuPopDown(*args, **keywords): ...
def CurveWarp(*args, **keywords): ...
def CustomNURBSComponentsOptions(*args, **keywords): ...
def CustomNURBSSmoothness(*args, **keywords): ...
def CustomNURBSSmoothnessOptions(*args, **keywords): ...
def CustomPolygonDisplay(*args, **keywords): ...
def CustomPolygonDisplayOptions(*args, **keywords): ...
def CutBluePencilFrame(*args, **keywords): ...
def CutCurve(*args, **keywords): ...
def CutCurveOptions(*args, **keywords): ...
def CutKeys(*args, **keywords): ...
def CutKeysOptions(*args, **keywords): ...
def CutPolygon(*args, **keywords): ...
def CutPolygonOptions(*args, **keywords): ...
def CutSelected(*args, **keywords): ...
def CutUVs(*args, **keywords): ...
def CutUVs3D(*args, **keywords): ...
def CutUVsWithoutHotkey(*args, **keywords): ...
def CycleBackgroundColor(*args, **keywords): ...
def CycleDisplayMode(*args, **keywords): ...
def CycleIKHandleStickyState(*args, **keywords): ...
def CycleThroughCameras(*args, **keywords): ...
def DeactivateGlobalScreenSlider(*args, **keywords): ...
def DeactivateGlobalScreenSliderModeMarkingMenu(*args, **keywords): ...
def DecreaseCheckerDensity(*args, **keywords): ...
def DecreaseExposureCoarse(*args, **keywords): ...
def DecreaseExposureFine(*args, **keywords): ...
def DecreaseGammaCoarse(*args, **keywords): ...
def DecreaseGammaFine(*args, **keywords): ...
def DecreaseManipulatorSize(*args, **keywords): ...
def DecrementFluidCenter(*args, **keywords): ...
def DefaultQualityDisplay(*args, **keywords): ...
def DeformerSetEditor(*args, **keywords): ...
def Delete(*args, **keywords): ...
def DeleteAllBookmarks(*args, **keywords): ...
def DeleteAllCameras(*args, **keywords): ...
def DeleteAllChannels(*args, **keywords): ...
def DeleteAllClips(*args, **keywords): ...
def DeleteAllClusters(*args, **keywords): ...
def DeleteAllConstraints(*args, **keywords): ...
def DeleteAllContainers(*args, **keywords): ...
def DeleteAllControllers(*args, **keywords): ...
def DeleteAllDynamicConstraints(*args, **keywords): ...
def DeleteAllExpressions(*args, **keywords): ...
def DeleteAllFluids(*args, **keywords): ...
def DeleteAllFurs(*args, **keywords): ...
def DeleteAllHistory(*args, **keywords): ...
def DeleteAllIKHandles(*args, **keywords): ...
def DeleteAllImagePlanes(*args, **keywords): ...
def DeleteAllJoints(*args, **keywords): ...
def DeleteAllLattices(*args, **keywords): ...
def DeleteAllLights(*args, **keywords): ...
def DeleteAllMotionPaths(*args, **keywords): ...
def DeleteAllNCloths(*args, **keywords): ...
def DeleteAllNParticles(*args, **keywords): ...
def DeleteAllNRigids(*args, **keywords): ...
def DeleteAllNonLinearDeformers(*args, **keywords): ...
def DeleteAllParticles(*args, **keywords): ...
def DeleteAllPoses(*args, **keywords): ...
def DeleteAllRigidBodies(*args, **keywords): ...
def DeleteAllRigidConstraints(*args, **keywords): ...
def DeleteAllSculptObjects(*args, **keywords): ...
def DeleteAllShadingGroupsAndMaterials(*args, **keywords): ...
def DeleteAllSounds(*args, **keywords): ...
def DeleteAllStaticChannels(*args, **keywords): ...
def DeleteAllStrokes(*args, **keywords): ...
def DeleteAllWires(*args, **keywords): ...
def DeleteAttribute(*args, **keywords): ...
def DeleteBluePencilFrame(*args, **keywords): ...
def DeleteChannels(*args, **keywords): ...
def DeleteChannelsOptions(*args, **keywords): ...
def DeleteConstraints(*args, **keywords): ...
def DeleteCurrentBookmark(*args, **keywords): ...
def DeleteCurrentColorSet(*args, **keywords): ...
def DeleteCurrentSet(*args, **keywords): ...
def DeleteCurrentUVSet(*args, **keywords): ...
def DeleteCurrentWorkspace(*args, **keywords): ...
def DeleteCustomSet(*args, **keywords): ...
def DeleteEdge(*args, **keywords): ...
def DeleteEntireHairSystem(*args, **keywords): ...
def DeleteExpressions(*args, **keywords): ...
def DeleteExpressionsOptions(*args, **keywords): ...
def DeleteHair(*args, **keywords): ...
def DeleteHairCache(*args, **keywords): ...
def DeleteHistory(*args, **keywords): ...
def DeleteKeys(*args, **keywords): ...
def DeleteKeysOptions(*args, **keywords): ...
def DeleteMemoryCaching(*args, **keywords): ...
def DeleteMotionPaths(*args, **keywords): ...
def DeletePolyElements(*args, **keywords): ...
def DeleteRigidBodies(*args, **keywords): ...
def DeleteSelectedContainers(*args, **keywords): ...
def DeleteStaticChannels(*args, **keywords): ...
def DeleteStaticChannelsOptions(*args, **keywords): ...
def DeleteSurfaceFlow(*args, **keywords): ...
def DeleteSurfaceFlowOptions(*args, **keywords): ...
def DeleteTextureReferenceObject(*args, **keywords): ...
def DeleteTimeWarp(*args, **keywords): ...
def DeleteUVs(*args, **keywords): ...
def DeleteUVsWithoutHotkey(*args, **keywords): ...
def DeleteUnknownNodes(*args, **keywords): ...
def DeleteVertex(*args, **keywords): ...
def DeltaMush(*args, **keywords): ...
def DeltaMushOptions(*args, **keywords): ...
def DetachComponent(*args, **keywords): ...
def DetachCurve(*args, **keywords): ...
def DetachCurveOptions(*args, **keywords): ...
def DetachEdgeComponent(*args, **keywords): ...
def DetachSkeleton(*args, **keywords): ...
def DetachSkeletonJoints(*args, **keywords): ...
def DetachSkin(*args, **keywords): ...
def DetachSkinOptions(*args, **keywords): ...
def DetachSurfaces(*args, **keywords): ...
def DetachSurfacesOptions(*args, **keywords): ...
def DetachVertexComponent(*args, **keywords): ...
def DeviceEditor(*args, **keywords): ...
def DisableAll(*args, **keywords): ...
def DisableAllCaches(*args, **keywords): ...
def DisableAllGeometryCache(*args, **keywords): ...
def DisableConstraints(*args, **keywords): ...
def DisableExpressions(*args, **keywords): ...
def DisableFluids(*args, **keywords): ...
def DisableGlobalStitch(*args, **keywords): ...
def DisableIKSolvers(*args, **keywords): ...
def DisableMemoryCaching(*args, **keywords): ...
def DisableParticles(*args, **keywords): ...
def DisableRigidBodies(*args, **keywords): ...
def DisableSelectedIKHandles(*args, **keywords): ...
def DisableSnapshots(*args, **keywords): ...
def DisableTimeChangeUndoConsolidation(*args, **keywords): ...
def DisableWeightNrm(*args, **keywords): ...
def DisableWeightNrmOptions(*args, **keywords): ...
def DisconnectJoint(*args, **keywords): ...
def DisplacementToPolygon(*args, **keywords): ...
def DisplayCurrentHairCurves(*args, **keywords): ...
def DisplayHairCurves(*args, **keywords): ...
def DisplayHairCurvesCurrentAndRest(*args, **keywords): ...
def DisplayHairCurvesCurrentAndStart(*args, **keywords): ...
def DisplayHairCurvesRestPosition(*args, **keywords): ...
def DisplayHairCurvesStart(*args, **keywords): ...
def DisplayIntermediateObjects(*args, **keywords): ...
def DisplayLayerEditorWindow(*args, **keywords): ...
def DisplayLight(*args, **keywords): ...
def DisplayShaded(*args, **keywords): ...
def DisplayShadedAndTextured(*args, **keywords): ...
def DisplayShadingMarkingMenu(*args, **keywords): ...
def DisplayShadingMarkingMenuPopDown(*args, **keywords): ...
def DisplaySmoothShaded(*args, **keywords): ...
def DisplayUVShaded(*args, **keywords): ...
def DisplayUVWireframe(*args, **keywords): ...
def DisplayViewport(*args, **keywords): ...
def DisplayWireframe(*args, **keywords): ...
def DistanceTool(*args, **keywords): ...
def DistributeShells(*args, **keywords): ...
def DistributeShellsOptions(*args, **keywords): ...
def DistributeUVs(*args, **keywords): ...
def DistributeUVsOptions(*args, **keywords): ...
def DollyTool(*args, **keywords): ...
def DopeSheetAddInbetween(*args, **keywords): ...
def DopeSheetBakeChannel(*args, **keywords): ...
def DopeSheetBakeChannelOptions(*args, **keywords): ...
def DopeSheetCenterCurrentTime(*args, **keywords): ...
def DopeSheetEditor(*args, **keywords): ...
def DopeSheetFrameAll(*args, **keywords): ...
def DopeSheetFramePlaybackRange(*args, **keywords): ...
def DopeSheetFrameSelected(*args, **keywords): ...
def DopeSheetInsertKeysTool(*args, **keywords): ...
def DopeSheetInsertKeysToolOptions(*args, **keywords): ...
def DopeSheetLockChannel(*args, **keywords): ...
def DopeSheetMoveNearestPickedKey(*args, **keywords): ...
def DopeSheetMoveNearestPickedKeyOptions(*args, **keywords): ...
def DopeSheetRemoveInbetween(*args, **keywords): ...
def DopeSheetSelectKeys(*args, **keywords): ...
def DopeSheetUnlockChannel(*args, **keywords): ...
def Drag(*args, **keywords): ...
def DragOptions(*args, **keywords): ...
def Duplicate(*args, **keywords): ...
def DuplicateBluePencilFrame(*args, **keywords): ...
def DuplicateCurve(*args, **keywords): ...
def DuplicateCurveOptions(*args, **keywords): ...
def DuplicateEdges(*args, **keywords): ...
def DuplicateEdgesOptions(*args, **keywords): ...
def DuplicateFace(*args, **keywords): ...
def DuplicateFaceOptions(*args, **keywords): ...
def DuplicateNURBSPatches(*args, **keywords): ...
def DuplicateNURBSPatchesOptions(*args, **keywords): ...
def DuplicateSpecial(*args, **keywords): ...
def DuplicateSpecialOptions(*args, **keywords): ...
def DuplicateWithTransform(*args, **keywords): ...
def DynamicRelationshipEditor(*args, **keywords): ...
def EPCurveTool(*args, **keywords): ...
def EPCurveToolOptions(*args, **keywords): ...
def EditAssignedSet(*args, **keywords): ...
def EditBookmark(*args, **keywords): ...
def EditCharacterAttributes(*args, **keywords): ...
def EditFluidResolution(*args, **keywords): ...
def EditFluidResolutionOptions(*args, **keywords): ...
def EditMembershipTool(*args, **keywords): ...
def EditNormalizationGroups(*args, **keywords): ...
def EditOversamplingForCacheSettings(*args, **keywords): ...
def EditPSDTextureItem(*args, **keywords): ...
def EditPolygonType(*args, **keywords): ...
def EditTexture(*args, **keywords): ...
def EmitFluidFromObject(*args, **keywords): ...
def EmitFluidFromObjectOptions(*args, **keywords): ...
def EmitFromObject(*args, **keywords): ...
def EmitFromObjectOptions(*args, **keywords): ...
def EnableAll(*args, **keywords): ...
def EnableAllCaches(*args, **keywords): ...
def EnableAllGeometryCache(*args, **keywords): ...
def EnableConstraints(*args, **keywords): ...
def EnableDynamicConstraints(*args, **keywords): ...
def EnableExpressions(*args, **keywords): ...
def EnableFluids(*args, **keywords): ...
def EnableGlobalStitch(*args, **keywords): ...
def EnableIKSolvers(*args, **keywords): ...
def EnableMemoryCaching(*args, **keywords): ...
def EnableNCloths(*args, **keywords): ...
def EnableNParticles(*args, **keywords): ...
def EnableNRigids(*args, **keywords): ...
def EnableNucleuses(*args, **keywords): ...
def EnableParticles(*args, **keywords): ...
def EnableRigidBodies(*args, **keywords): ...
def EnableSelectTool(*args, **keywords): ...
def EnableSelectedIKHandles(*args, **keywords): ...
def EnableSnapshots(*args, **keywords): ...
def EnableTimeChangeUndoConsolidation(*args, **keywords): ...
def EnableTimeWarp(*args, **keywords): ...
def EnableWeightNrm(*args, **keywords): ...
def EnableWeightNrmOptions(*args, **keywords): ...
def EnableWeightPostNrm(*args, **keywords): ...
def EnableWeightPostNrmOptions(*args, **keywords): ...
def EnterConnectTool(*args, **keywords): ...
def EnterEditMode(*args, **keywords): ...
def EnterEditModePress(*args, **keywords): ...
def EnterEditModeRelease(*args, **keywords): ...
def EvaluationToolkit(*args, **keywords): ...
def ExpandSelectedComponents(*args, **keywords): ...
def Export(*args, **keywords): ...
def ExportAllChannelSets(*args, **keywords): ...
def ExportAnim(*args, **keywords): ...
def ExportBluePencilFrames(*args, **keywords): ...
def ExportChannelSets(*args, **keywords): ...
def ExportDeformerWeights(*args, **keywords): ...
def ExportDeformerWeightsOptions(*args, **keywords): ...
def ExportOfflineFile(*args, **keywords): ...
def ExportOfflineFileFromRefEd(*args, **keywords): ...
def ExportOfflineFileFromRefEdOptions(*args, **keywords): ...
def ExportOfflineFileOptions(*args, **keywords): ...
def ExportOptions(*args, **keywords): ...
def ExportProxyContainer(*args, **keywords): ...
def ExportProxyContainerOptions(*args, **keywords): ...
def ExportSelection(*args, **keywords): ...
def ExportSelectionOptions(*args, **keywords): ...
def ExportSkinWeightMaps(*args, **keywords): ...
def ExportSkinWeightMapsOptions(*args, **keywords): ...
def ExpressionEditor(*args, **keywords): ...
def ExtendCurve(*args, **keywords): ...
def ExtendCurveOnSurface(*args, **keywords): ...
def ExtendCurveOnSurfaceOptions(*args, **keywords): ...
def ExtendCurveOptions(*args, **keywords): ...
def ExtendFluid(*args, **keywords): ...
def ExtendFluidOptions(*args, **keywords): ...
def ExtendSurfaces(*args, **keywords): ...
def ExtendSurfacesOptions(*args, **keywords): ...
def ExtractFace(*args, **keywords): ...
def ExtractFaceOptions(*args, **keywords): ...
def ExtractSubdivSurfaceVertices(*args, **keywords): ...
def ExtractSubdivSurfaceVerticesOptions(*args, **keywords): ...
def Extrude(*args, **keywords): ...
def ExtrudeEdge(*args, **keywords): ...
def ExtrudeEdgeOptions(*args, **keywords): ...
def ExtrudeFace(*args, **keywords): ...
def ExtrudeFaceOptions(*args, **keywords): ...
def ExtrudeOptions(*args, **keywords): ...
def ExtrudeVertex(*args, **keywords): ...
def ExtrudeVertexOptions(*args, **keywords): ...
def FBIKLabelArm(*args, **keywords): ...
def FBIKLabelBigToe(*args, **keywords): ...
def FBIKLabelCenter(*args, **keywords): ...
def FBIKLabelCollar(*args, **keywords): ...
def FBIKLabelElbow(*args, **keywords): ...
def FBIKLabelExtraFinger(*args, **keywords): ...
def FBIKLabelFingerBase(*args, **keywords): ...
def FBIKLabelFoot(*args, **keywords): ...
def FBIKLabelFootThumb(*args, **keywords): ...
def FBIKLabelHand(*args, **keywords): ...
def FBIKLabelHead(*args, **keywords): ...
def FBIKLabelHip(*args, **keywords): ...
def FBIKLabelIndex(*args, **keywords): ...
def FBIKLabelIndexToe(*args, **keywords): ...
def FBIKLabelKnee(*args, **keywords): ...
def FBIKLabelLeft(*args, **keywords): ...
def FBIKLabelLeg(*args, **keywords): ...
def FBIKLabelMiddleFinger(*args, **keywords): ...
def FBIKLabelMiddleToe(*args, **keywords): ...
def FBIKLabelNeck(*args, **keywords): ...
def FBIKLabelNone(*args, **keywords): ...
def FBIKLabelPinky(*args, **keywords): ...
def FBIKLabelPinkyToe(*args, **keywords): ...
def FBIKLabelRight(*args, **keywords): ...
def FBIKLabelRingFinger(*args, **keywords): ...
def FBIKLabelRingToe(*args, **keywords): ...
def FBIKLabelRoot(*args, **keywords): ...
def FBIKLabelShoulder(*args, **keywords): ...
def FBIKLabelSpine(*args, **keywords): ...
def FBIKLabelThumb(*args, **keywords): ...
def FBIKLabelToeBase(*args, **keywords): ...
def FilePathEditor(*args, **keywords): ...
def FillHole(*args, **keywords): ...
def FilletBlendTool(*args, **keywords): ...
def FilletBlendToolOptions(*args, **keywords): ...
def FineLevelComponentDisplay(*args, **keywords): ...
def Fire(*args, **keywords): ...
def FireOptions(*args, **keywords): ...
def Fireworks(*args, **keywords): ...
def FireworksOptions(*args, **keywords): ...
def FitBSpline(*args, **keywords): ...
def FitBSplineOptions(*args, **keywords): ...
def Flare(*args, **keywords): ...
def FlareOptions(*args, **keywords): ...
def FlipMesh(*args, **keywords): ...
def FlipTriangleEdge(*args, **keywords): ...
def FlipTubeDirection(*args, **keywords): ...
def FlipUVs(*args, **keywords): ...
def FlipUVsOptions(*args, **keywords): ...
def FloatSelectedObjects(*args, **keywords): ...
def FloatSelectedObjectsOptions(*args, **keywords): ...
def FloatSelectedPondObjects(*args, **keywords): ...
def FloatSelectedPondObjectsOptions(*args, **keywords): ...
def FloodSurfaces(*args, **keywords): ...
def FlowPathObject(*args, **keywords): ...
def FlowPathObjectOptions(*args, **keywords): ...
def FluidEmitter(*args, **keywords): ...
def FluidEmitterOptions(*args, **keywords): ...
def FluidGradients(*args, **keywords): ...
def FluidGradientsOptions(*args, **keywords): ...
def FluidsToPolygons(*args, **keywords): ...
def FourViewArrangement(*args, **keywords): ...
def FourViewLayout(*args, **keywords): ...
def FrameAll(*args, **keywords): ...
def FrameAllInAllViews(*args, **keywords): ...
def FrameNextTimeSliderBookmark(*args, **keywords): ...
def FramePreviousTimeSliderBookmark(*args, **keywords): ...
def FrameSelected(*args, **keywords): ...
def FrameSelected2(*args, **keywords): ...
def FrameSelectedInAllViews(*args, **keywords): ...
def FrameSelectedWithoutChildren(*args, **keywords): ...
def FrameSelectedWithoutChildrenInAllViews(*args, **keywords): ...
def FrameTimeSliderBookmark(*args, **keywords): ...
def FreeTangentWeight(*args, **keywords): ...
def FreeformFillet(*args, **keywords): ...
def FreeformFilletOptions(*args, **keywords): ...
def FreezeTransformations(*args, **keywords): ...
def FreezeTransformationsOptions(*args, **keywords): ...
def FrontPerspViewLayout(*args, **keywords): ...
def FullCreaseSubdivSurface(*args, **keywords): ...
def FullHotboxDisplay(*args, **keywords): ...
def GameExporterWnd(*args, **keywords): ...
def GeometryConstraint(*args, **keywords): ...
def GeometryConstraintOptions(*args, **keywords): ...
def GeometryToBoundingBox(*args, **keywords): ...
def GeometryToBoundingBoxOptions(*args, **keywords): ...
def GetCartoonExample(*args, **keywords): ...
def GetFluidExample(*args, **keywords): ...
def GetHairExample(*args, **keywords): ...
def GetOceanPondExample(*args, **keywords): ...
def GetSettingsFromSelectedStroke(*args, **keywords): ...
def GetToonExample(*args, **keywords): ...
def GlobalDiskCacheControl(*args, **keywords): ...
def GlobalStitch(*args, **keywords): ...
def GlobalStitchOptions(*args, **keywords): ...
def GoToBindPose(*args, **keywords): ...
def GoToBindPoseOptions(*args, **keywords): ...
def GoToDefaultView(*args, **keywords): ...
def GoToMaxFrame(*args, **keywords): ...
def GoToMinFrame(*args, **keywords): ...
def GoToNextDrivenKey(*args, **keywords): ...
def GoToPreviousDrivenKey(*args, **keywords): ...
def GoToWorkingFrame(*args, **keywords): ...
def Goal(*args, **keywords): ...
def GoalOptions(*args, **keywords): ...
def GraphCopy(*args, **keywords): ...
def GraphCopyOptions(*args, **keywords): ...
def GraphCut(*args, **keywords): ...
def GraphCutOptions(*args, **keywords): ...
def GraphDelete(*args, **keywords): ...
def GraphDeleteOptions(*args, **keywords): ...
def GraphEditor(*args, **keywords): ...
def GraphEditorAbsoluteView(*args, **keywords): ...
def GraphEditorAddInbetween(*args, **keywords): ...
def GraphEditorAlwaysDisplayTangents(*args, **keywords): ...
def GraphEditorDisableCurveSelection(*args, **keywords): ...
def GraphEditorDisplayTangentActive(*args, **keywords): ...
def GraphEditorDisplayValues(*args, **keywords): ...
def GraphEditorEnableCurveSelection(*args, **keywords): ...
def GraphEditorFrameAll(*args, **keywords): ...
def GraphEditorFrameCenterView(*args, **keywords): ...
def GraphEditorFramePlaybackRange(*args, **keywords): ...
def GraphEditorFrameSelected(*args, **keywords): ...
def GraphEditorLockChannel(*args, **keywords): ...
def GraphEditorNeverDisplayTangents(*args, **keywords): ...
def GraphEditorNormalizedView(*args, **keywords): ...
def GraphEditorRemoveInbetween(*args, **keywords): ...
def GraphEditorStackedView(*args, **keywords): ...
def GraphEditorUnlockChannel(*args, **keywords): ...
def GraphEditorValueLinesToggle(*args, **keywords): ...
def GraphPaste(*args, **keywords): ...
def GraphPasteOptions(*args, **keywords): ...
def GraphSnap(*args, **keywords): ...
def GraphSnapOptions(*args, **keywords): ...
def Gravity(*args, **keywords): ...
def GravityOptions(*args, **keywords): ...
def GridOptions(*args, **keywords): ...
def GridUV(*args, **keywords): ...
def GridUVOptions(*args, **keywords): ...
def Group(*args, **keywords): ...
def GroupOptions(*args, **keywords): ...
def GrowLoopPolygonSelectionRegion(*args, **keywords): ...
def GrowPolygonSelectionRegion(*args, **keywords): ...
def HIKBodyPartMode(*args, **keywords): ...
def HIKCharacterControlsTool(*args, **keywords): ...
def HIKCycleMode(*args, **keywords): ...
def HIKFullBodyMode(*args, **keywords): ...
def HIKLiveConnectionTool(*args, **keywords): ...
def HIKPinRotate(*args, **keywords): ...
def HIKPinTranslate(*args, **keywords): ...
def HIKSelectedMode(*args, **keywords): ...
def HIKSetBodyPartKey(*args, **keywords): ...
def HIKSetFullBodyKey(*args, **keywords): ...
def HIKSetSelectionKey(*args, **keywords): ...
def HIKToggleReleasePinning(*args, **keywords): ...
def HairScaleTool(*args, **keywords): ...
def HairUVSetLinkingEditor(*args, **keywords): ...
def HardwareRenderBuffer(*args, **keywords): ...
def Help(*args, **keywords): ...
def HideAll(*args, **keywords): ...
def HideAllLabels(*args, **keywords): ...
def HideBoundingBox(*args, **keywords): ...
def HideCameraManipulators(*args, **keywords): ...
def HideCameras(*args, **keywords): ...
def HideClusters(*args, **keywords): ...
def HideControllers(*args, **keywords): ...
def HideDeformers(*args, **keywords): ...
def HideDeformingGeometry(*args, **keywords): ...
def HideDynamicConstraints(*args, **keywords): ...
def HideFluids(*args, **keywords): ...
def HideFollicles(*args, **keywords): ...
def HideFur(*args, **keywords): ...
def HideGeometry(*args, **keywords): ...
def HideHairSystems(*args, **keywords): ...
def HideHotbox(*args, **keywords): ...
def HideIKHandles(*args, **keywords): ...
def HideIntermediateObjects(*args, **keywords): ...
def HideJoints(*args, **keywords): ...
def HideKinematics(*args, **keywords): ...
def HideLattices(*args, **keywords): ...
def HideLightManipulators(*args, **keywords): ...
def HideLights(*args, **keywords): ...
def HideManipulators(*args, **keywords): ...
def HideMarkers(*args, **keywords): ...
def HideNCloths(*args, **keywords): ...
def HideNParticles(*args, **keywords): ...
def HideNRigids(*args, **keywords): ...
def HideNURBSCurves(*args, **keywords): ...
def HideNURBSSurfaces(*args, **keywords): ...
def HideNonlinears(*args, **keywords): ...
def HideObjectGeometry(*args, **keywords): ...
def HidePlanes(*args, **keywords): ...
def HidePolygonSurfaces(*args, **keywords): ...
def HideSculptObjects(*args, **keywords): ...
def HideSelectedObjects(*args, **keywords): ...
def HideSmoothSkinInfluences(*args, **keywords): ...
def HideStrokeControlCurves(*args, **keywords): ...
def HideStrokePathCurves(*args, **keywords): ...
def HideStrokes(*args, **keywords): ...
def HideSubdivSurfaces(*args, **keywords): ...
def HideTexturePlacements(*args, **keywords): ...
def HideUIElements(*args, **keywords): ...
def HideUnselectedCVs(*args, **keywords): ...
def HideUnselectedObjects(*args, **keywords): ...
def HideWrapInfluences(*args, **keywords): ...
def HighQualityDisplay(*args, **keywords): ...
def HighlightWhatsNew(*args, **keywords): ...
def HoldCurrentKeys(*args, **keywords): ...
def HotkeyPreferencesWindow(*args, **keywords): ...
def HyperGraphPanelRedoViewChange(*args, **keywords): ...
def HyperGraphPanelUndoViewChange(*args, **keywords): ...
def HypergraphDGWindow(*args, **keywords): ...
def HypergraphDecreaseDepth(*args, **keywords): ...
def HypergraphHierarchyWindow(*args, **keywords): ...
def HypergraphIncreaseDepth(*args, **keywords): ...
def HypergraphWindow(*args, **keywords): ...
def HypershadeCloseActiveTab(*args, **keywords): ...
def HypershadeCloseAllTabs(*args, **keywords): ...
def HypershadeCollapseAsset(*args, **keywords): ...
def HypershadeConnectSelected(*args, **keywords): ...
def HypershadeConvertPSDToFileTexture(*args, **keywords): ...
def HypershadeConvertPSDToLayeredTexture(*args, **keywords): ...
def HypershadeConvertToFileTexture(*args, **keywords): ...
def HypershadeConvertToFileTextureOptionBox(*args, **keywords): ...
def HypershadeCreateAsset(*args, **keywords): ...
def HypershadeCreateContainerOptions(*args, **keywords): ...
def HypershadeCreateNewTab(*args, **keywords): ...
def HypershadeCreatePSDFile(*args, **keywords): ...
def HypershadeCreateTab(*args, **keywords): ...
def HypershadeDeleteAllBakeSets(*args, **keywords): ...
def HypershadeDeleteAllCamerasAndImagePlanes(*args, **keywords): ...
def HypershadeDeleteAllLights(*args, **keywords): ...
def HypershadeDeleteAllShadingGroupsAndMaterials(*args, **keywords): ...
def HypershadeDeleteAllTextures(*args, **keywords): ...
def HypershadeDeleteAllUtilities(*args, **keywords): ...
def HypershadeDeleteDuplicateShadingNetworks(*args, **keywords): ...
def HypershadeDeleteNodes(*args, **keywords): ...
def HypershadeDeleteSelected(*args, **keywords): ...
def HypershadeDeleteUnusedNodes(*args, **keywords): ...
def HypershadeDisplayAllShapes(*args, **keywords): ...
def HypershadeDisplayAsExtraLargeSwatches(*args, **keywords): ...
def HypershadeDisplayAsIcons(*args, **keywords): ...
def HypershadeDisplayAsLargeSwatches(*args, **keywords): ...
def HypershadeDisplayAsList(*args, **keywords): ...
def HypershadeDisplayAsMediumSwatches(*args, **keywords): ...
def HypershadeDisplayAsSmallSwatches(*args, **keywords): ...
def HypershadeDisplayInterestingShapes(*args, **keywords): ...
def HypershadeDisplayNoShapes(*args, **keywords): ...
def HypershadeDuplicateShadingNetwork(*args, **keywords): ...
def HypershadeDuplicateWithConnections(*args, **keywords): ...
def HypershadeDuplicateWithoutNetwork(*args, **keywords): ...
def HypershadeEditPSDFile(*args, **keywords): ...
def HypershadeEditTexture(*args, **keywords): ...
def HypershadeExpandAsset(*args, **keywords): ...
def HypershadeExportSelectedNetwork(*args, **keywords): ...
def HypershadeFrameAll(*args, **keywords): ...
def HypershadeFrameSelected(*args, **keywords): ...
def HypershadeGraphAddSelected(*args, **keywords): ...
def HypershadeGraphClearGraph(*args, **keywords): ...
def HypershadeGraphDownstream(*args, **keywords): ...
def HypershadeGraphMaterialsOnSelectedObjects(*args, **keywords): ...
def HypershadeGraphRearrange(*args, **keywords): ...
def HypershadeGraphRemoveDownstream(*args, **keywords): ...
def HypershadeGraphRemoveSelected(*args, **keywords): ...
def HypershadeGraphRemoveUnselected(*args, **keywords): ...
def HypershadeGraphRemoveUpstream(*args, **keywords): ...
def HypershadeGraphUpDownstream(*args, **keywords): ...
def HypershadeGraphUpstream(*args, **keywords): ...
def HypershadeGridToggleSnap(*args, **keywords): ...
def HypershadeGridToggleVisibility(*args, **keywords): ...
def HypershadeHideAttributes(*args, **keywords): ...
def HypershadeImport(*args, **keywords): ...
def HypershadeIncreaseTraversalDepth(*args, **keywords): ...
def HypershadeMoveTabDown(*args, **keywords): ...
def HypershadeMoveTabLeft(*args, **keywords): ...
def HypershadeMoveTabRight(*args, **keywords): ...
def HypershadeMoveTabUp(*args, **keywords): ...
def HypershadeOpenBinsWindow(*args, **keywords): ...
def HypershadeOpenBrowserWindow(*args, **keywords): ...
def HypershadeOpenConnectWindow(*args, **keywords): ...
def HypershadeOpenCreateWindow(*args, **keywords): ...
def HypershadeOpenGraphEditorWindow(*args, **keywords): ...
def HypershadeOpenMaterialViewerWindow(*args, **keywords): ...
def HypershadeOpenModelEditorWindow(*args, **keywords): ...
def HypershadeOpenOutlinerWindow(*args, **keywords): ...
def HypershadeOpenPropertyEditorWindow(*args, **keywords): ...
def HypershadeOpenRenderViewWindow(*args, **keywords): ...
def HypershadeOpenSpreadSheetWindow(*args, **keywords): ...
def HypershadeOpenUVEditorWindow(*args, **keywords): ...
def HypershadeOutlinerPerspLayout(*args, **keywords): ...
def HypershadePerspLayout(*args, **keywords): ...
def HypershadePickWalkDown(*args, **keywords): ...
def HypershadePickWalkLeft(*args, **keywords): ...
def HypershadePickWalkRight(*args, **keywords): ...
def HypershadePickWalkUp(*args, **keywords): ...
def HypershadePinSelected(*args, **keywords): ...
def HypershadePublishConnections(*args, **keywords): ...
def HypershadeReduceTraversalDepth(*args, **keywords): ...
def HypershadeRefreshAllSwatchesOnDisk(*args, **keywords): ...
def HypershadeRefreshFileListing(*args, **keywords): ...
def HypershadeRefreshSelectedSwatches(*args, **keywords): ...
def HypershadeRefreshSelectedSwatchesOnDisk(*args, **keywords): ...
def HypershadeRemoveAsset(*args, **keywords): ...
def HypershadeRemoveTab(*args, **keywords): ...
def HypershadeRenameActiveTab(*args, **keywords): ...
def HypershadeRenameTab(*args, **keywords): ...
def HypershadeRenderPerspLayout(*args, **keywords): ...
def HypershadeRenderTextureRange(*args, **keywords): ...
def HypershadeRenderTextureRangeOptions(*args, **keywords): ...
def HypershadeRestoreLastClosedTab(*args, **keywords): ...
def HypershadeRevertSelectedSwatches(*args, **keywords): ...
def HypershadeRevertToDefaultTabs(*args, **keywords): ...
def HypershadeSaveSwatchesToDisk(*args, **keywords): ...
def HypershadeSelectBakeSets(*args, **keywords): ...
def HypershadeSelectCamerasAndImagePlanes(*args, **keywords): ...
def HypershadeSelectConnected(*args, **keywords): ...
def HypershadeSelectDownStream(*args, **keywords): ...
def HypershadeSelectLights(*args, **keywords): ...
def HypershadeSelectMaterialsFromObjects(*args, **keywords): ...
def HypershadeSelectObjectsWithMaterials(*args, **keywords): ...
def HypershadeSelectShadingGroupsAndMaterials(*args, **keywords): ...
def HypershadeSelectTextures(*args, **keywords): ...
def HypershadeSelectUpStream(*args, **keywords): ...
def HypershadeSelectUtilities(*args, **keywords): ...
def HypershadeSetLargeNodeSwatchSize(*args, **keywords): ...
def HypershadeSetSmallNodeSwatchSize(*args, **keywords): ...
def HypershadeSetTraversalDepthUnlim(*args, **keywords): ...
def HypershadeSetTraversalDepthZero(*args, **keywords): ...
def HypershadeShapeMenuStateAll(*args, **keywords): ...
def HypershadeShapeMenuStateAllExceptShadingGroupMembers(*args, **keywords): ...
def HypershadeShapeMenuStateNoShapes(*args, **keywords): ...
def HypershadeShowAllAttrs(*args, **keywords): ...
def HypershadeShowConnectedAttrs(*args, **keywords): ...
def HypershadeShowCustomAttrs(*args, **keywords): ...
def HypershadeShowDirectoriesAndFiles(*args, **keywords): ...
def HypershadeShowDirectoriesOnly(*args, **keywords): ...
def HypershadeSortByName(*args, **keywords): ...
def HypershadeSortByTime(*args, **keywords): ...
def HypershadeSortByType(*args, **keywords): ...
def HypershadeSortReverseOrder(*args, **keywords): ...
def HypershadeTestTexture(*args, **keywords): ...
def HypershadeTestTextureOptions(*args, **keywords): ...
def HypershadeToggleAttrFilter(*args, **keywords): ...
def HypershadeToggleCrosshairOnEdgeDragging(*args, **keywords): ...
def HypershadeToggleNodeSwatchSize(*args, **keywords): ...
def HypershadeToggleNodeTitleMode(*args, **keywords): ...
def HypershadeToggleShowNamespace(*args, **keywords): ...
def HypershadeToggleTransformDisplay(*args, **keywords): ...
def HypershadeToggleUseAssetsAndPublishedAttributes(*args, **keywords): ...
def HypershadeToggleZoomIn(*args, **keywords): ...
def HypershadeToggleZoomOut(*args, **keywords): ...
def HypershadeTransferAttributeValues(*args, **keywords): ...
def HypershadeTransferAttributeValuesOptions(*args, **keywords): ...
def HypershadeUnpinSelected(*args, **keywords): ...
def HypershadeUpdatePSDNetworks(*args, **keywords): ...
def HypershadeWindow(*args, **keywords): ...
def IKHandleTool(*args, **keywords): ...
def IKHandleToolOptions(*args, **keywords): ...
def IKSplineHandleTool(*args, **keywords): ...
def IKSplineHandleToolOptions(*args, **keywords): ...
def IPROptions(*args, **keywords): ...
def IPRRenderIntoNewWindow(*args, **keywords): ...
def IgnoreHardwareShader(*args, **keywords): ...
def IkHdsWin(*args, **keywords): ...
def IkfkjdsWin(*args, **keywords): ...
def Import(*args, **keywords): ...
def ImportAnim(*args, **keywords): ...
def ImportBluePencilFrames(*args, **keywords): ...
def ImportChannelSets(*args, **keywords): ...
def ImportDeformerWeights(*args, **keywords): ...
def ImportDeformerWeightsOptions(*args, **keywords): ...
def ImportOptions(*args, **keywords): ...
def ImportSkinWeightMaps(*args, **keywords): ...
def ImportSkinWeightMapsOptions(*args, **keywords): ...
def ImportWorkspaceFiles(*args, **keywords): ...
def InTangentAuto(*args, **keywords): ...
def InTangentAutoCustom(*args, **keywords): ...
def InTangentAutoCustomOptions(*args, **keywords): ...
def InTangentAutoEase(*args, **keywords): ...
def InTangentAutoMix(*args, **keywords): ...
def InTangentClamped(*args, **keywords): ...
def InTangentFixed(*args, **keywords): ...
def InTangentFlat(*args, **keywords): ...
def InTangentLinear(*args, **keywords): ...
def InTangentPlateau(*args, **keywords): ...
def InTangentSpline(*args, **keywords): ...
def InTangentStepNext(*args, **keywords): ...
def InTangentStepped(*args, **keywords): ...
def IncreaseCheckerDensity(*args, **keywords): ...
def IncreaseExposureCoarse(*args, **keywords): ...
def IncreaseExposureFine(*args, **keywords): ...
def IncreaseGammaCoarse(*args, **keywords): ...
def IncreaseGammaFine(*args, **keywords): ...
def IncreaseManipulatorSize(*args, **keywords): ...
def IncrementAndSave(*args, **keywords): ...
def IncrementFluidCenter(*args, **keywords): ...
def InitialFluidStates(*args, **keywords): ...
def InitialFluidStatesOptions(*args, **keywords): ...
def InsertBluePencilFrame(*args, **keywords): ...
def InsertEdgeLoopTool(*args, **keywords): ...
def InsertEdgeLoopToolOptions(*args, **keywords): ...
def InsertIsoparms(*args, **keywords): ...
def InsertIsoparmsOptions(*args, **keywords): ...
def InsertJointTool(*args, **keywords): ...
def InsertKey(*args, **keywords): ...
def InsertKeyRotate(*args, **keywords): ...
def InsertKeyScale(*args, **keywords): ...
def InsertKeyToolActivate(*args, **keywords): ...
def InsertKeyToolDeactivate(*args, **keywords): ...
def InsertKeyTranslate(*args, **keywords): ...
def InsertKeysTool(*args, **keywords): ...
def InsertKeysToolOptions(*args, **keywords): ...
def InsertKnot(*args, **keywords): ...
def InsertKnotOptions(*args, **keywords): ...
def InteractiveBindSkin(*args, **keywords): ...
def InteractiveBindSkinOptions(*args, **keywords): ...
def InteractivePlayback(*args, **keywords): ...
def InteractiveSplitTool(*args, **keywords): ...
def InteractiveSplitToolOptions(*args, **keywords): ...
def IntersectCurve(*args, **keywords): ...
def IntersectCurveOptions(*args, **keywords): ...
def IntersectSurfaces(*args, **keywords): ...
def IntersectSurfacesOptions(*args, **keywords): ...
def InvertSelection(*args, **keywords): ...
def JdsWin(*args, **keywords): ...
def JointTool(*args, **keywords): ...
def JointToolOptions(*args, **keywords): ...
def KeyBlendShapeTargetsWeight(*args, **keywords): ...
def KeyframeTangentMarkingMenu(*args, **keywords): ...
def KeyframeTangentMarkingMenuPopDown(*args, **keywords): ...
def LODGenerateMeshes(*args, **keywords): ...
def LODGenerateMeshesOptions(*args, **keywords): ...
def LabelBasedOnJointNames(*args, **keywords): ...
def LassoTool(*args, **keywords): ...
def LastActionTool(*args, **keywords): ...
def LatticeDeformKeysTool(*args, **keywords): ...
def LatticeDeformKeysToolOptions(*args, **keywords): ...
def LatticeUVTool(*args, **keywords): ...
def LatticeUVToolOptions(*args, **keywords): ...
def LayerRelationshipEditor(*args, **keywords): ...
def LayoutUV(*args, **keywords): ...
def LayoutUVAlong(*args, **keywords): ...
def LayoutUVAlongOptions(*args, **keywords): ...
def LayoutUVOptions(*args, **keywords): ...
def LayoutUVRectangle(*args, **keywords): ...
def LevelOfDetailGroup(*args, **keywords): ...
def LevelOfDetailGroupOptions(*args, **keywords): ...
def LevelOfDetailUngroup(*args, **keywords): ...
def LightCentricLightLinkingEditor(*args, **keywords): ...
def Lightning(*args, **keywords): ...
def LightningOptions(*args, **keywords): ...
def LockCamera(*args, **keywords): ...
def LockContainer(*args, **keywords): ...
def LockCurveLength(*args, **keywords): ...
def LockNormals(*args, **keywords): ...
def LockTangentWeight(*args, **keywords): ...
def Loft(*args, **keywords): ...
def LoftOptions(*args, **keywords): ...
def LongPolygonNormals(*args, **keywords): ...
def LookAtSelection(*args, **keywords): ...
def LoopBrushAnimation(*args, **keywords): ...
def LoopBrushAnimationOptions(*args, **keywords): ...
def LowQualityDisplay(*args, **keywords): ...
def MLDeformer(*args, **keywords): ...
def MLDeformerOptions(*args, **keywords): ...
def MakeBoats(*args, **keywords): ...
def MakeBoatsOptions(*args, **keywords): ...
def MakeBrushSpring(*args, **keywords): ...
def MakeBrushSpringOptions(*args, **keywords): ...
def MakeCollide(*args, **keywords): ...
def MakeCollideHair(*args, **keywords): ...
def MakeCollideOptions(*args, **keywords): ...
def MakeCurvesDynamic(*args, **keywords): ...
def MakeCurvesDynamicOptions(*args, **keywords): ...
def MakeFluidCollide(*args, **keywords): ...
def MakeFluidCollideOptions(*args, **keywords): ...
def MakeHoleTool(*args, **keywords): ...
def MakeHoleToolOptions(*args, **keywords): ...
def MakeLightLinks(*args, **keywords): ...
def MakeLive(*args, **keywords): ...
def MakeMotionField(*args, **keywords): ...
def MakeMotorBoats(*args, **keywords): ...
def MakeMotorBoatsOptions(*args, **keywords): ...
def MakePaintable(*args, **keywords): ...
def MakePondBoats(*args, **keywords): ...
def MakePondBoatsOptions(*args, **keywords): ...
def MakePondMotorBoats(*args, **keywords): ...
def MakePondMotorBoatsOptions(*args, **keywords): ...
def MakePressureCurve(*args, **keywords): ...
def MakePressureCurveOptions(*args, **keywords): ...
def MakeShadowLinks(*args, **keywords): ...
def MakeStereoLinks(*args, **keywords): ...
def MakeUVInstanceCurrent(*args, **keywords): ...
def MapUVBorder(*args, **keywords): ...
def MapUVBorderOptions(*args, **keywords): ...
def MarkingMenuPopDown(*args, **keywords): ...
def MarkingMenuPreferencesWindow(*args, **keywords): ...
def MatchPivots(*args, **keywords): ...
def MatchPivotsOptions(*args, **keywords): ...
def MatchRotation(*args, **keywords): ...
def MatchRotationOptions(*args, **keywords): ...
def MatchScaling(*args, **keywords): ...
def MatchScalingOptions(*args, **keywords): ...
def MatchTransform(*args, **keywords): ...
def MatchTransformOptions(*args, **keywords): ...
def MatchTranslation(*args, **keywords): ...
def MatchTranslationOptions(*args, **keywords): ...
def MatchUVs(*args, **keywords): ...
def MatchUVsOptions(*args, **keywords): ...
def MediumPolygonNormals(*args, **keywords): ...
def MediumQualityDisplay(*args, **keywords): ...
def MergeCharacterSet(*args, **keywords): ...
def MergeEdgeTool(*args, **keywords): ...
def MergeEdgeToolOptions(*args, **keywords): ...
def MergeMultipleEdges(*args, **keywords): ...
def MergeMultipleEdgesOptions(*args, **keywords): ...
def MergeToCenter(*args, **keywords): ...
def MergeUV(*args, **keywords): ...
def MergeUVOptions(*args, **keywords): ...
def MergeVertexTool(*args, **keywords): ...
def MergeVertexToolOptions(*args, **keywords): ...
def MergeVertices(*args, **keywords): ...
def MergeVerticesOptions(*args, **keywords): ...
def MinimizeApplication(*args, **keywords): ...
def MirrorCutPolygonGeometry(*args, **keywords): ...
def MirrorCutPolygonGeometryOptions(*args, **keywords): ...
def MirrorDeformerWeights(*args, **keywords): ...
def MirrorDeformerWeightsOptions(*args, **keywords): ...
def MirrorJoint(*args, **keywords): ...
def MirrorJointOptions(*args, **keywords): ...
def MirrorPolygonGeometry(*args, **keywords): ...
def MirrorPolygonGeometryOptions(*args, **keywords): ...
def MirrorSkinWeights(*args, **keywords): ...
def MirrorSkinWeightsOptions(*args, **keywords): ...
def MirrorSubdivSurface(*args, **keywords): ...
def MirrorSubdivSurfaceOptions(*args, **keywords): ...
def ModelingPanelRedoViewChange(*args, **keywords): ...
def ModelingPanelUndoViewChange(*args, **keywords): ...
def ModifyConstraintAxis(*args, **keywords): ...
def ModifyConstraintAxisOptions(*args, **keywords): ...
def ModifyCurrentSet(*args, **keywords): ...
def ModifyDisplacementPress(*args, **keywords): ...
def ModifyDisplacementRelease(*args, **keywords): ...
def ModifyLowerRadiusPress(*args, **keywords): ...
def ModifyLowerRadiusRelease(*args, **keywords): ...
def ModifyOpacityPress(*args, **keywords): ...
def ModifyOpacityRelease(*args, **keywords): ...
def ModifyPaintValuePress(*args, **keywords): ...
def ModifyPaintValueRelease(*args, **keywords): ...
def ModifyStampDepthPress(*args, **keywords): ...
def ModifyStampDepthRelease(*args, **keywords): ...
def ModifyUVVectorPress(*args, **keywords): ...
def ModifyUVVectorRelease(*args, **keywords): ...
def ModifyUpperRadiusPress(*args, **keywords): ...
def ModifyUpperRadiusRelease(*args, **keywords): ...
def Morph(*args, **keywords): ...
def MorphOptions(*args, **keywords): ...
def MoveCacheToInput(*args, **keywords): ...
def MoveCurveSeam(*args, **keywords): ...
def MoveDown(*args, **keywords): ...
def MoveIKtoFK(*args, **keywords): ...
def MoveInfluence(*args, **keywords): ...
def MoveLeft(*args, **keywords): ...
def MoveNearestPickedKeyToolActivate(*args, **keywords): ...
def MoveNearestPickedKeyToolDeactivate(*args, **keywords): ...
def MoveNormalTool(*args, **keywords): ...
def MoveNormalToolOptions(*args, **keywords): ...
def MovePolygonComponent(*args, **keywords): ...
def MovePolygonComponentOptions(*args, **keywords): ...
def MoveRight(*args, **keywords): ...
def MoveRotateScaleTool(*args, **keywords): ...
def MoveRotateScaleToolToggleSnapMode(*args, **keywords): ...
def MoveRotateScaleToolToggleSnapRelativeMode(*args, **keywords): ...
def MoveSewUVs(*args, **keywords): ...
def MoveSkinJointsTool(*args, **keywords): ...
def MoveSkinJointsToolOptions(*args, **keywords): ...
def MoveSurfaceSeam(*args, **keywords): ...
def MoveTool(*args, **keywords): ...
def MoveToolOptions(*args, **keywords): ...
def MoveUVTool(*args, **keywords): ...
def MoveUp(*args, **keywords): ...
def MultiCutTool(*args, **keywords): ...
def NCreateEmitter(*args, **keywords): ...
def NCreateEmitterOptions(*args, **keywords): ...
def NEmitFromObject(*args, **keywords): ...
def NEmitFromObjectOptions(*args, **keywords): ...
def NParticleStyleBalls(*args, **keywords): ...
def NParticleStyleCloud(*args, **keywords): ...
def NParticleStylePoints(*args, **keywords): ...
def NParticleStyleThickCloud(*args, **keywords): ...
def NParticleStyleWater(*args, **keywords): ...
def NParticleToPolygons(*args, **keywords): ...
def NParticleTool(*args, **keywords): ...
def NParticleToolOptions(*args, **keywords): ...
def NURBSSmoothnessFine(*args, **keywords): ...
def NURBSSmoothnessFineOptions(*args, **keywords): ...
def NURBSSmoothnessHull(*args, **keywords): ...
def NURBSSmoothnessHullOptions(*args, **keywords): ...
def NURBSSmoothnessMedium(*args, **keywords): ...
def NURBSSmoothnessMediumOptions(*args, **keywords): ...
def NURBSSmoothnessRough(*args, **keywords): ...
def NURBSSmoothnessRoughOptions(*args, **keywords): ...
def NURBSTexturePlacementTool(*args, **keywords): ...
def NURBSTexturePlacementToolOptions(*args, **keywords): ...
def NURBSToPolygons(*args, **keywords): ...
def NURBSToPolygonsOptions(*args, **keywords): ...
def NamespaceEditor(*args, **keywords): ...
def NewScene(*args, **keywords): ...
def NewSceneOptions(*args, **keywords): ...
def Newton(*args, **keywords): ...
def NewtonOptions(*args, **keywords): ...
def NextBluePencilFrame(*args, **keywords): ...
def NextFrame(*args, **keywords): ...
def NextKey(*args, **keywords): ...
def NextManipulatorHandle(*args, **keywords): ...
def NextSkinPaintMode(*args, **keywords): ...
def NextTimeSliderBookmark(*args, **keywords): ...
def NextViewArrangement(*args, **keywords): ...
def NodeEditorAddOnNodeCreate(*args, **keywords): ...
def NodeEditorAdditiveGraphingMode(*args, **keywords): ...
def NodeEditorAutoSizeNodes(*args, **keywords): ...
def NodeEditorCloseActiveTab(*args, **keywords): ...
def NodeEditorCloseAllTabs(*args, **keywords): ...
def NodeEditorConnectNodeOnCreation(*args, **keywords): ...
def NodeEditorConnectOnDrop(*args, **keywords): ...
def NodeEditorConnectSelectedNodes(*args, **keywords): ...
def NodeEditorConnectedGraphingMode(*args, **keywords): ...
def NodeEditorConnectionStyleBezier(*args, **keywords): ...
def NodeEditorConnectionStyleCorner(*args, **keywords): ...
def NodeEditorConnectionStyleSShape(*args, **keywords): ...
def NodeEditorConnectionStyleStraight(*args, **keywords): ...
def NodeEditorCopy(*args, **keywords): ...
def NodeEditorCopyConnectionsOnPaste(*args, **keywords): ...
def NodeEditorCreateNodePopup(*args, **keywords): ...
def NodeEditorCreateTab(*args, **keywords): ...
def NodeEditorCut(*args, **keywords): ...
def NodeEditorDeleteNodes(*args, **keywords): ...
def NodeEditorExtendToShapes(*args, **keywords): ...
def NodeEditorGraphAddSelected(*args, **keywords): ...
def NodeEditorGraphAllShapes(*args, **keywords): ...
def NodeEditorGraphAllShapesExceptShading(*args, **keywords): ...
def NodeEditorGraphClearGraph(*args, **keywords): ...
def NodeEditorGraphDownstream(*args, **keywords): ...
def NodeEditorGraphNoShapes(*args, **keywords): ...
def NodeEditorGraphRearrange(*args, **keywords): ...
def NodeEditorGraphRemoveDownstream(*args, **keywords): ...
def NodeEditorGraphRemoveSelected(*args, **keywords): ...
def NodeEditorGraphRemoveUnselected(*args, **keywords): ...
def NodeEditorGraphRemoveUpstream(*args, **keywords): ...
def NodeEditorGraphUpDownstream(*args, **keywords): ...
def NodeEditorGraphUpstream(*args, **keywords): ...
def NodeEditorGridToggleCrosshairOnEdgeDragging(*args, **keywords): ...
def NodeEditorGridToggleSnap(*args, **keywords): ...
def NodeEditorGridToggleVisibility(*args, **keywords): ...
def NodeEditorHideAttributes(*args, **keywords): ...
def NodeEditorHighlightConnectionsOnNodeSelection(*args, **keywords): ...
def NodeEditorIncreaseTraversalDepth(*args, **keywords): ...
def NodeEditorLayout(*args, **keywords): ...
def NodeEditorPaste(*args, **keywords): ...
def NodeEditorPickWalkDown(*args, **keywords): ...
def NodeEditorPickWalkLeft(*args, **keywords): ...
def NodeEditorPickWalkRight(*args, **keywords): ...
def NodeEditorPickWalkUp(*args, **keywords): ...
def NodeEditorPinByDefault(*args, **keywords): ...
def NodeEditorPinSelected(*args, **keywords): ...
def NodeEditorRedockTornOffTab(*args, **keywords): ...
def NodeEditorReduceTraversalDepth(*args, **keywords): ...
def NodeEditorRenameActiveTab(*args, **keywords): ...
def NodeEditorRenderSwatches(*args, **keywords): ...
def NodeEditorRestoreLastClosedTab(*args, **keywords): ...
def NodeEditorSelectConnected(*args, **keywords): ...
def NodeEditorSelectDownStream(*args, **keywords): ...
def NodeEditorSelectUpStream(*args, **keywords): ...
def NodeEditorSetLargeNodeSwatchSize(*args, **keywords): ...
def NodeEditorSetSmallNodeSwatchSize(*args, **keywords): ...
def NodeEditorSetTraversalDepthUnlim(*args, **keywords): ...
def NodeEditorSetTraversalDepthZero(*args, **keywords): ...
def NodeEditorShapeMenuStateAll(*args, **keywords): ...
def NodeEditorShapeMenuStateAllExceptShadingGroupMembers(*args, **keywords): ...
def NodeEditorShapeMenuStateNoShapes(*args, **keywords): ...
def NodeEditorShowAllAttrs(*args, **keywords): ...
def NodeEditorShowAllCustomAttrs(*args, **keywords): ...
def NodeEditorShowConnectedAttrs(*args, **keywords): ...
def NodeEditorShowCustomAttrs(*args, **keywords): ...
def NodeEditorToggleAttrFilter(*args, **keywords): ...
def NodeEditorToggleConsistentNodeNameSize(*args, **keywords): ...
def NodeEditorToggleCreateNodePane(*args, **keywords): ...
def NodeEditorToggleLockUnlock(*args, **keywords): ...
def NodeEditorToggleNodeSelectedPins(*args, **keywords): ...
def NodeEditorToggleNodeSwatchSize(*args, **keywords): ...
def NodeEditorToggleNodeTitleMode(*args, **keywords): ...
def NodeEditorToggleShowNamespace(*args, **keywords): ...
def NodeEditorToggleSyncedSelection(*args, **keywords): ...
def NodeEditorToggleUseAssetsAndPublishedAttributes(*args, **keywords): ...
def NodeEditorToggleZoomIn(*args, **keywords): ...
def NodeEditorToggleZoomOut(*args, **keywords): ...
def NodeEditorTransforms(*args, **keywords): ...
def NodeEditorUnitConversions(*args, **keywords): ...
def NodeEditorUnpinSelected(*args, **keywords): ...
def NodeEditorWindow(*args, **keywords): ...
def NonSacredTool(*args, **keywords): ...
def NonWeightedTangents(*args, **keywords): ...
def NormalConstraint(*args, **keywords): ...
def NormalConstraintOptions(*args, **keywords): ...
def NormalizeUVs(*args, **keywords): ...
def NormalizeUVsOptions(*args, **keywords): ...
def NormalizeWeights(*args, **keywords): ...
def NormalizeWeightsOptions(*args, **keywords): ...
def NudgeSelectedKeysBackward(*args, **keywords): ...
def NudgeSelectedKeysForward(*args, **keywords): ...
def NurbsCurveToBezier(*args, **keywords): ...
def ObjectCentricLightLinkingEditor(*args, **keywords): ...
def OffsetCurve(*args, **keywords): ...
def OffsetCurveOnSurface(*args, **keywords): ...
def OffsetCurveOnSurfaceOptions(*args, **keywords): ...
def OffsetCurveOptions(*args, **keywords): ...
def OffsetEdgeLoopTool(*args, **keywords): ...
def OffsetEdgeLoopToolOptions(*args, **keywords): ...
def OffsetSurfaces(*args, **keywords): ...
def OffsetSurfacesOptions(*args, **keywords): ...
def OpenAELiveLink(*args, **keywords): ...
def OpenAREACommunity(*args, **keywords): ...
def OpenAREAForums(*args, **keywords): ...
def OpenAnimTutorial(*args, **keywords): ...
def OpenAutodeskAccount(*args, **keywords): ...
def OpenAutodeskExchange(*args, **keywords): ...
def OpenAutodeskStore(*args, **keywords): ...
def OpenBasicsTutorial(*args, **keywords): ...
def OpenBifContentBrowser(*args, **keywords): ...
def OpenBluePencil(*args, **keywords): ...
def OpenBrowserSetupAssistant(*args, **keywords): ...
def OpenBugReport(*args, **keywords): ...
def OpenChannelBox(*args, **keywords): ...
def OpenChannelsLayers(*args, **keywords): ...
def OpenCharacterGenerator(*args, **keywords): ...
def OpenCloseCurve(*args, **keywords): ...
def OpenCloseCurveOptions(*args, **keywords): ...
def OpenCloseSurfaces(*args, **keywords): ...
def OpenCloseSurfacesOptions(*args, **keywords): ...
def OpenColorSetEditor(*args, **keywords): ...
def OpenContentBrowser(*args, **keywords): ...
def OpenCreaseEditor(*args, **keywords): ...
def OpenDGProfiler(*args, **keywords): ...
def OpenDesktopAnalytics(*args, **keywords): ...
def OpenFBXReview(*args, **keywords): ...
def OpenFacebook(*args, **keywords): ...
def OpenFeatureRequest(*args, **keywords): ...
def OpenHomePage(*args, **keywords): ...
def OpenLSTutorial(*args, **keywords): ...
def OpenLayerEditor(*args, **keywords): ...
def OpenLearningChannel(*args, **keywords): ...
def OpenLearningPath(*args, **keywords): ...
def OpenLightEditor(*args, **keywords): ...
def OpenMASHContentBrowser(*args, **keywords): ...
def OpenMelCmdRef(*args, **keywords): ...
def OpenMenuFinder(*args, **keywords): ...
def OpenModTutorial(*args, **keywords): ...
def OpenModelingToolkit(*args, **keywords): ...
def OpenMotionTrailEditor(*args, **keywords): ...
def OpenNodeAttrRef(*args, **keywords): ...
def OpenProductResearch(*args, **keywords): ...
def OpenPyCmdRef(*args, **keywords): ...
def OpenReleaseNotes(*args, **keywords): ...
def OpenScene(*args, **keywords): ...
def OpenSceneOptions(*args, **keywords): ...
def OpenStartupMovies(*args, **keywords): ...
def OpenStereoRigManager(*args, **keywords): ...
def OpenSupportCenter(*args, **keywords): ...
def OpenTimeSliderPrefs(*args, **keywords): ...
def OpenTinkercad(*args, **keywords): ...
def OpenTrialTutorials(*args, **keywords): ...
def OpenTutorials(*args, **keywords): ...
def OpenViewportPrefs(*args, **keywords): ...
def OpenVisorForMeshes(*args, **keywords): ...
def OpenXGenEditor(*args, **keywords): ...
def OptimizeScene(*args, **keywords): ...
def OptimizeSceneOptions(*args, **keywords): ...
def OptimzeUVs(*args, **keywords): ...
def OptimzeUVsOptions(*args, **keywords): ...
def OrientConstraint(*args, **keywords): ...
def OrientConstraintOptions(*args, **keywords): ...
def OrientJoint(*args, **keywords): ...
def OrientJointOptions(*args, **keywords): ...
def OutTangentAuto(*args, **keywords): ...
def OutTangentAutoCustom(*args, **keywords): ...
def OutTangentAutoCustomOptions(*args, **keywords): ...
def OutTangentAutoEase(*args, **keywords): ...
def OutTangentAutoMix(*args, **keywords): ...
def OutTangentClamped(*args, **keywords): ...
def OutTangentFixed(*args, **keywords): ...
def OutTangentFlat(*args, **keywords): ...
def OutTangentLinear(*args, **keywords): ...
def OutTangentPlateau(*args, **keywords): ...
def OutTangentSpline(*args, **keywords): ...
def OutTangentStepNext(*args, **keywords): ...
def OutTangentStepped(*args, **keywords): ...
def OutlinerCollapseAllItems(*args, **keywords): ...
def OutlinerCollapseAllSelectedItems(*args, **keywords): ...
def OutlinerDoHide(*args, **keywords): ...
def OutlinerExpandAllItems(*args, **keywords): ...
def OutlinerExpandAllSelectedItems(*args, **keywords): ...
def OutlinerRenameSelectedItem(*args, **keywords): ...
def OutlinerRevealSelected(*args, **keywords): ...
def OutlinerToggleAssignedMaterials(*args, **keywords): ...
def OutlinerToggleAttributes(*args, **keywords): ...
def OutlinerToggleAutoExpandLayers(*args, **keywords): ...
def OutlinerToggleConnected(*args, **keywords): ...
def OutlinerToggleDAGOnly(*args, **keywords): ...
def OutlinerToggleIgnoreHidden(*args, **keywords): ...
def OutlinerToggleIgnoreUseColor(*args, **keywords): ...
def OutlinerToggleNamespace(*args, **keywords): ...
def OutlinerToggleOrganizeByClip(*args, **keywords): ...
def OutlinerToggleOrganizeByLayer(*args, **keywords): ...
def OutlinerToggleReferenceMembers(*args, **keywords): ...
def OutlinerToggleReferenceNodes(*args, **keywords): ...
def OutlinerToggleSetMembers(*args, **keywords): ...
def OutlinerToggleShapes(*args, **keywords): ...
def OutlinerToggleShowMuteInformation(*args, **keywords): ...
def OutlinerToggleTimeEditor(*args, **keywords): ...
def OutlinerUnhide(*args, **keywords): ...
def OutlinerWindow(*args, **keywords): ...
def OutputWindow(*args, **keywords): ...
def PFXUVSetLinkingEditor(*args, **keywords): ...
def PaintCacheTool(*args, **keywords): ...
def PaintCacheToolOptions(*args, **keywords): ...
def PaintClusterWeightsTool(*args, **keywords): ...
def PaintClusterWeightsToolOptions(*args, **keywords): ...
def PaintDeltaMushWeightsTool(*args, **keywords): ...
def PaintDeltaMushWeightsToolOptions(*args, **keywords): ...
def PaintEffectPanelActivate(*args, **keywords): ...
def PaintEffectPanelDeactivate(*args, **keywords): ...
def PaintEffectsGlobalSettings(*args, **keywords): ...
def PaintEffectsMeshQuality(*args, **keywords): ...
def PaintEffectsPanel(*args, **keywords): ...
def PaintEffectsToCurve(*args, **keywords): ...
def PaintEffectsToCurveOptions(*args, **keywords): ...
def PaintEffectsToNurbs(*args, **keywords): ...
def PaintEffectsToNurbsOptions(*args, **keywords): ...
def PaintEffectsToPoly(*args, **keywords): ...
def PaintEffectsToPolyOptions(*args, **keywords): ...
def PaintEffectsTool(*args, **keywords): ...
def PaintEffectsToolOptions(*args, **keywords): ...
def PaintEffectsWindow(*args, **keywords): ...
def PaintFluidsTool(*args, **keywords): ...
def PaintFluidsToolOptions(*args, **keywords): ...
def PaintGeomCacheTool(*args, **keywords): ...
def PaintGeomCacheToolOptions(*args, **keywords): ...
def PaintGrid(*args, **keywords): ...
def PaintGridOptions(*args, **keywords): ...
def PaintHairBaldness(*args, **keywords): ...
def PaintHairColor(*args, **keywords): ...
def PaintHairFollicles(*args, **keywords): ...
def PaintHairFolliclesOptions(*args, **keywords): ...
def PaintHairSpecularColor(*args, **keywords): ...
def PaintJiggleWeightsTool(*args, **keywords): ...
def PaintJiggleWeightsToolOptions(*args, **keywords): ...
def PaintLatticeWeightsTool(*args, **keywords): ...
def PaintLatticeWeightsToolOptions(*args, **keywords): ...
def PaintNonlinearWeightsTool(*args, **keywords): ...
def PaintNonlinearWeightsToolOptions(*args, **keywords): ...
def PaintOnPaintableObjects(*args, **keywords): ...
def PaintOnViewPlane(*args, **keywords): ...
def PaintOperationMarkingMenuPress(*args, **keywords): ...
def PaintOperationMarkingMenuRelease(*args, **keywords): ...
def PaintProximityWrapWeightsTool(*args, **keywords): ...
def PaintProximityWrapWeightsToolOptions(*args, **keywords): ...
def PaintRandom(*args, **keywords): ...
def PaintRandomOptions(*args, **keywords): ...
def PaintReduceWeightsTool(*args, **keywords): ...
def PaintReduceWeightsToolOptions(*args, **keywords): ...
def PaintSetMembershipTool(*args, **keywords): ...
def PaintSetMembershipToolOptions(*args, **keywords): ...
def PaintShrinkWrapWeightsTool(*args, **keywords): ...
def PaintShrinkWrapWeightsToolOptions(*args, **keywords): ...
def PaintSoftWeights(*args, **keywords): ...
def PaintSoftWeightsOptions(*args, **keywords): ...
def PaintTensionWeightsTool(*args, **keywords): ...
def PaintTensionWeightsToolOptions(*args, **keywords): ...
def PaintTextureDeformerWeightsTool(*args, **keywords): ...
def PaintTextureDeformerWeightsToolOptions(*args, **keywords): ...
def PaintToonBorderColor(*args, **keywords): ...
def PaintToonCreaseColor(*args, **keywords): ...
def PaintToonLineOffset(*args, **keywords): ...
def PaintToonLineOpacity(*args, **keywords): ...
def PaintToonLineWidth(*args, **keywords): ...
def PaintToonProfileColor(*args, **keywords): ...
def PaintTransferAttributes(*args, **keywords): ...
def PaintVertexColorTool(*args, **keywords): ...
def PaintVertexColorToolOptions(*args, **keywords): ...
def PaintWireWeightsTool(*args, **keywords): ...
def PaintWireWeightsToolOptions(*args, **keywords): ...
def PanZoomTool(*args, **keywords): ...
def PanePop(*args, **keywords): ...
def PanelPreferencesWindow(*args, **keywords): ...
def ParameterTool(*args, **keywords): ...
def Parent(*args, **keywords): ...
def ParentBaseWire(*args, **keywords): ...
def ParentBaseWireOptions(*args, **keywords): ...
def ParentConstraint(*args, **keywords): ...
def ParentConstraintOptions(*args, **keywords): ...
def ParentOptions(*args, **keywords): ...
def PartSpriteWizard(*args, **keywords): ...
def PartialCreaseSubdivSurface(*args, **keywords): ...
def ParticleCollisionEvents(*args, **keywords): ...
def ParticleFill(*args, **keywords): ...
def ParticleFillOptions(*args, **keywords): ...
def ParticleInstancer(*args, **keywords): ...
def ParticleInstancerOptions(*args, **keywords): ...
def ParticleTool(*args, **keywords): ...
def ParticleToolOptions(*args, **keywords): ...
def PartitionEditor(*args, **keywords): ...
def PasteBluePencilFrame(*args, **keywords): ...
def PasteKeys(*args, **keywords): ...
def PasteKeysOptions(*args, **keywords): ...
def PasteSelected(*args, **keywords): ...
def PasteUVs(*args, **keywords): ...
def PasteVertexSkinWeights(*args, **keywords): ...
def PasteVertexWeights(*args, **keywords): ...
def PasteVertexWeightsOptions(*args, **keywords): ...
def PauseViewportEval(*args, **keywords): ...
def PencilCurveTool(*args, **keywords): ...
def PencilCurveToolOptions(*args, **keywords): ...
def PerPointEmissionRates(*args, **keywords): ...
def PerformExportToBackburner(*args, **keywords): ...
def PerformPrecompExport(*args, **keywords): ...
def PerformPrecompExportOptions(*args, **keywords): ...
def PerformTessellationSetup(*args, **keywords): ...
def PerformTessellationSetupOptions(*args, **keywords): ...
def PerformanceSettingsWindow(*args, **keywords): ...
def PerspGraphHypergraphLayout(*args, **keywords): ...
def PerspGraphLayout(*args, **keywords): ...
def PerspGraphOutlinerLayout(*args, **keywords): ...
def PerspRelationshipEditorLayout(*args, **keywords): ...
def PerspTextureLayout(*args, **keywords): ...
def PfxBrushTransfer(*args, **keywords): ...
def PfxFlipTubeDir(*args, **keywords): ...
def PfxGetBrush(*args, **keywords): ...
def PfxMakeCollide(*args, **keywords): ...
def PfxPresetBlend(*args, **keywords): ...
def PfxSetLineModifierObject(*args, **keywords): ...
def PickColorActivate(*args, **keywords): ...
def PickColorDeactivate(*args, **keywords): ...
def PickWalkDown(*args, **keywords): ...
def PickWalkDownSelect(*args, **keywords): ...
def PickWalkIn(*args, **keywords): ...
def PickWalkLeft(*args, **keywords): ...
def PickWalkLeftSelect(*args, **keywords): ...
def PickWalkOut(*args, **keywords): ...
def PickWalkRight(*args, **keywords): ...
def PickWalkRightSelect(*args, **keywords): ...
def PickWalkStopAtTransform(*args, **keywords): ...
def PickWalkUp(*args, **keywords): ...
def PickWalkUpSelect(*args, **keywords): ...
def PickWalkUseController(*args, **keywords): ...
def PinSelection(*args, **keywords): ...
def PinSelectionOptions(*args, **keywords): ...
def PixelMoveDown(*args, **keywords): ...
def PixelMoveLeft(*args, **keywords): ...
def PixelMoveRight(*args, **keywords): ...
def PixelMoveUp(*args, **keywords): ...
def Planar(*args, **keywords): ...
def PlanarOptions(*args, **keywords): ...
def PlaybackBackward(*args, **keywords): ...
def PlaybackForward(*args, **keywords): ...
def PlaybackFree(*args, **keywords): ...
def PlaybackLoopContinuous(*args, **keywords): ...
def PlaybackLoopOnce(*args, **keywords): ...
def PlaybackLoopOscillate(*args, **keywords): ...
def PlaybackPefRealtime(*args, **keywords): ...
def PlaybackRangeAnimStartEnd(*args, **keywords): ...
def PlaybackRangeEnabledClips(*args, **keywords): ...
def PlaybackRangeHighlight(*args, **keywords): ...
def PlaybackRangeMinMax(*args, **keywords): ...
def PlaybackRangePrefs(*args, **keywords): ...
def PlaybackRangeSound(*args, **keywords): ...
def PlaybackRangeStartEnd(*args, **keywords): ...
def PlaybackRealtime(*args, **keywords): ...
def PlaybackSteppedPreview(*args, **keywords): ...
def PlaybackStop(*args, **keywords): ...
def PlaybackToggle(*args, **keywords): ...
def PlayblastOptions(*args, **keywords): ...
def PlayblastWindow(*args, **keywords): ...
def PlayblastWindowOptions(*args, **keywords): ...
def PluginManager(*args, **keywords): ...
def PointConstraint(*args, **keywords): ...
def PointConstraintOptions(*args, **keywords): ...
def PointOnCurve(*args, **keywords): ...
def PointOnCurveOptions(*args, **keywords): ...
def PointOnPolyConstraint(*args, **keywords): ...
def PointOnPolyConstraintOptions(*args, **keywords): ...
def PokePolygon(*args, **keywords): ...
def PokePolygonOptions(*args, **keywords): ...
def PoleVectorConstraint(*args, **keywords): ...
def PoleVectorConstraintOptions(*args, **keywords): ...
def PolyAssignSubdivHole(*args, **keywords): ...
def PolyAssignSubdivHoleOptions(*args, **keywords): ...
def PolyBevelCutback(*args, **keywords): ...
def PolyBevelCutbackOptions(*args, **keywords): ...
def PolyBrushMarkingMenu(*args, **keywords): ...
def PolyBrushMarkingMenuPopDown(*args, **keywords): ...
def PolyCircularize(*args, **keywords): ...
def PolyCircularizeOptions(*args, **keywords): ...
def PolyConvertToLoopAndDelete(*args, **keywords): ...
def PolyConvertToLoopAndDuplicate(*args, **keywords): ...
def PolyConvertToRingAndCollapse(*args, **keywords): ...
def PolyConvertToRingAndSplit(*args, **keywords): ...
def PolyCreaseTool(*args, **keywords): ...
def PolyCreaseToolOptions(*args, **keywords): ...
def PolyDisplayReset(*args, **keywords): ...
def PolyEditEdgeFlow(*args, **keywords): ...
def PolyEditEdgeFlowOptions(*args, **keywords): ...
def PolyExtrude(*args, **keywords): ...
def PolyExtrudeEdges(*args, **keywords): ...
def PolyExtrudeEdgesOptions(*args, **keywords): ...
def PolyExtrudeFaces(*args, **keywords): ...
def PolyExtrudeFacesOptions(*args, **keywords): ...
def PolyExtrudeOptions(*args, **keywords): ...
def PolyExtrudeVertices(*args, **keywords): ...
def PolyExtrudeVerticesOptions(*args, **keywords): ...
def PolyMerge(*args, **keywords): ...
def PolyMergeEdges(*args, **keywords): ...
def PolyMergeEdgesOptions(*args, **keywords): ...
def PolyMergeOptions(*args, **keywords): ...
def PolyMergeVertices(*args, **keywords): ...
def PolyMergeVerticesOptions(*args, **keywords): ...
def PolyRemesh(*args, **keywords): ...
def PolyRemeshOptions(*args, **keywords): ...
def PolyRemoveAllCrease(*args, **keywords): ...
def PolyRemoveCrease(*args, **keywords): ...
def PolyRetopo(*args, **keywords): ...
def PolyRetopoOptions(*args, **keywords): ...
def PolySelectTool(*args, **keywords): ...
def PolySelectToolOptions(*args, **keywords): ...
def PolySpinEdgeBackward(*args, **keywords): ...
def PolySpinEdgeForward(*args, **keywords): ...
def PolygonApplyColor(*args, **keywords): ...
def PolygonApplyColorOptions(*args, **keywords): ...
def PolygonBooleanCutOut(*args, **keywords): ...
def PolygonBooleanCutOutOptions(*args, **keywords): ...
def PolygonBooleanDifference(*args, **keywords): ...
def PolygonBooleanDifferenceBA(*args, **keywords): ...
def PolygonBooleanDifferenceBAOptions(*args, **keywords): ...
def PolygonBooleanDifferenceOptions(*args, **keywords): ...
def PolygonBooleanHolePunch(*args, **keywords): ...
def PolygonBooleanHolePunchOptions(*args, **keywords): ...
def PolygonBooleanIntersection(*args, **keywords): ...
def PolygonBooleanIntersectionOptions(*args, **keywords): ...
def PolygonBooleanSlice(*args, **keywords): ...
def PolygonBooleanSliceOptions(*args, **keywords): ...
def PolygonBooleanSplitEdges(*args, **keywords): ...
def PolygonBooleanSplitEdgesOptions(*args, **keywords): ...
def PolygonBooleanUnion(*args, **keywords): ...
def PolygonBooleanUnionOptions(*args, **keywords): ...
def PolygonClearClipboard(*args, **keywords): ...
def PolygonClearClipboardOptions(*args, **keywords): ...
def PolygonCollapse(*args, **keywords): ...
def PolygonCollapseEdges(*args, **keywords): ...
def PolygonCollapseFaces(*args, **keywords): ...
def PolygonCopy(*args, **keywords): ...
def PolygonCopyOptions(*args, **keywords): ...
def PolygonHardenEdge(*args, **keywords): ...
def PolygonNormalEditTool(*args, **keywords): ...
def PolygonPaste(*args, **keywords): ...
def PolygonPasteOptions(*args, **keywords): ...
def PolygonSelectionConstraints(*args, **keywords): ...
def PolygonSoftenEdge(*args, **keywords): ...
def PolygonSoftenHarden(*args, **keywords): ...
def PolygonSoftenHardenOptions(*args, **keywords): ...
def PoseEditor(*args, **keywords): ...
def PoseInterpolatorNewGroup(*args, **keywords): ...
def PositionAlongCurve(*args, **keywords): ...
def PostInfinityConstant(*args, **keywords): ...
def PostInfinityCycle(*args, **keywords): ...
def PostInfinityCycleOffset(*args, **keywords): ...
def PostInfinityLinear(*args, **keywords): ...
def PostInfinityOscillate(*args, **keywords): ...
def PreInfinityConstant(*args, **keywords): ...
def PreInfinityCycle(*args, **keywords): ...
def PreInfinityCycleOffset(*args, **keywords): ...
def PreInfinityLinear(*args, **keywords): ...
def PreInfinityOscillate(*args, **keywords): ...
def PreferencesWindow(*args, **keywords): ...
def PrefixHierarchyNames(*args, **keywords): ...
def PreflightPolygon(*args, **keywords): ...
def PreflightPolygonOptions(*args, **keywords): ...
def PrelightPolygon(*args, **keywords): ...
def PrelightPolygonOptions(*args, **keywords): ...
def PreloadReferenceEditor(*args, **keywords): ...
def PresetBlendingWindow(*args, **keywords): ...
def PrevSkinPaintMode(*args, **keywords): ...
def PreviousBluePencilFrame(*args, **keywords): ...
def PreviousFrame(*args, **keywords): ...
def PreviousKey(*args, **keywords): ...
def PreviousManipulatorHandle(*args, **keywords): ...
def PreviousTimeSliderBookmark(*args, **keywords): ...
def PreviousViewArrangement(*args, **keywords): ...
def ProductInformation(*args, **keywords): ...
def ProfilerTool(*args, **keywords): ...
def ProfilerToolCategoryView(*args, **keywords): ...
def ProfilerToolCpuView(*args, **keywords): ...
def ProfilerToolHideSelected(*args, **keywords): ...
def ProfilerToolHideSelectedRepetition(*args, **keywords): ...
def ProfilerToolReset(*args, **keywords): ...
def ProfilerToolShowAll(*args, **keywords): ...
def ProfilerToolShowSelected(*args, **keywords): ...
def ProfilerToolShowSelectedRepetition(*args, **keywords): ...
def ProfilerToolThreadView(*args, **keywords): ...
def ProfilerToolToggleRecording(*args, **keywords): ...
def ProjectCurveOnMesh(*args, **keywords): ...
def ProjectCurveOnMeshOptions(*args, **keywords): ...
def ProjectCurveOnSurface(*args, **keywords): ...
def ProjectCurveOnSurfaceOptions(*args, **keywords): ...
def ProjectTangent(*args, **keywords): ...
def ProjectTangentOptions(*args, **keywords): ...
def ProjectWindow(*args, **keywords): ...
def ProportionalModificationTool(*args, **keywords): ...
def ProximityPin(*args, **keywords): ...
def ProximityPinOptions(*args, **keywords): ...
def ProximityWrap(*args, **keywords): ...
def ProximityWrapOptions(*args, **keywords): ...
def PruneCluster(*args, **keywords): ...
def PruneLattice(*args, **keywords): ...
def PruneSculpt(*args, **keywords): ...
def PruneSmallWeights(*args, **keywords): ...
def PruneSmallWeightsOptions(*args, **keywords): ...
def PruneWire(*args, **keywords): ...
def PublishAttributes(*args, **keywords): ...
def PublishAttributesOptions(*args, **keywords): ...
def PublishChildAnchor(*args, **keywords): ...
def PublishChildAnchorOptions(*args, **keywords): ...
def PublishConnections(*args, **keywords): ...
def PublishConnectionsOptions(*args, **keywords): ...
def PublishNode(*args, **keywords): ...
def PublishParentAnchor(*args, **keywords): ...
def PublishParentAnchorOptions(*args, **keywords): ...
def PublishRootTransform(*args, **keywords): ...
def PublishRootTransformOptions(*args, **keywords): ...
def QuadDrawTool(*args, **keywords): ...
def Quadrangulate(*args, **keywords): ...
def QuadrangulateOptions(*args, **keywords): ...
def QualityDisplayMarkingMenu(*args, **keywords): ...
def QualityDisplayMarkingMenuPopDown(*args, **keywords): ...
def QuickCreateTimeSliderBookmark(*args, **keywords): ...
def QuickRigEditor(*args, **keywords): ...
def QuickTour(*args, **keywords): ...
def Quit(*args, **keywords): ...
def Radial(*args, **keywords): ...
def RadialOptions(*args, **keywords): ...
def RaiseApplicationWindows(*args, **keywords): ...
def RaiseMainWindow(*args, **keywords): ...
def RandomizeFollicles(*args, **keywords): ...
def RandomizeFolliclesOptions(*args, **keywords): ...
def RandomizeShells(*args, **keywords): ...
def RandomizeShellsOptions(*args, **keywords): ...
def ReassignBoneLatticeJoint(*args, **keywords): ...
def ReattachSkeleton(*args, **keywords): ...
def ReattachSkeletonJoints(*args, **keywords): ...
def RebuildCurve(*args, **keywords): ...
def RebuildCurveOptions(*args, **keywords): ...
def RebuildSurfaces(*args, **keywords): ...
def RebuildSurfacesOptions(*args, **keywords): ...
def RecentCommandsWindow(*args, **keywords): ...
def Redo(*args, **keywords): ...
def RedoPreviousIPRRender(*args, **keywords): ...
def RedoPreviousRender(*args, **keywords): ...
def RedoViewChange(*args, **keywords): ...
def ReducePolygon(*args, **keywords): ...
def ReducePolygonOptions(*args, **keywords): ...
def ReferenceEditor(*args, **keywords): ...
def RefineSelectedComponents(*args, **keywords): ...
def RegionKeysTool(*args, **keywords): ...
def RelaxInitialState(*args, **keywords): ...
def RelaxInitialStateOptions(*args, **keywords): ...
def RelaxUVShell(*args, **keywords): ...
def RelaxUVShellOptions(*args, **keywords): ...
def RemoveBindingSet(*args, **keywords): ...
def RemoveBlendShape(*args, **keywords): ...
def RemoveBlendShapeOptions(*args, **keywords): ...
def RemoveBrushSharing(*args, **keywords): ...
def RemoveConstraintTarget(*args, **keywords): ...
def RemoveConstraintTargetOptions(*args, **keywords): ...
def RemoveFromCharacterSet(*args, **keywords): ...
def RemoveFromContainer(*args, **keywords): ...
def RemoveFromContainerOptions(*args, **keywords): ...
def RemoveInfluence(*args, **keywords): ...
def RemoveInfluenceOptions(*args, **keywords): ...
def RemoveJoint(*args, **keywords): ...
def RemoveLatticeTweaks(*args, **keywords): ...
def RemoveMaterialSoloing(*args, **keywords): ...
def RemoveNewPfxToon(*args, **keywords): ...
def RemoveShrinkWrapInnerObject(*args, **keywords): ...
def RemoveShrinkWrapSurfaces(*args, **keywords): ...
def RemoveShrinkWrapTarget(*args, **keywords): ...
def RemoveSubdivProxyMirror(*args, **keywords): ...
def RemoveSubdivProxyMirrorOptions(*args, **keywords): ...
def RemoveUnusedInfluences(*args, **keywords): ...
def RemoveUnusedInfluencesOptions(*args, **keywords): ...
def RemoveWire(*args, **keywords): ...
def RemoveWireOptions(*args, **keywords): ...
def RemoveWrapInfluence(*args, **keywords): ...
def RenameAttribute(*args, **keywords): ...
def RenameCurrentColorSet(*args, **keywords): ...
def RenameCurrentSet(*args, **keywords): ...
def RenameCurrentUVSet(*args, **keywords): ...
def RenameJointsFromLabels(*args, **keywords): ...
def RenderDiagnostics(*args, **keywords): ...
def RenderFlagsWindow(*args, **keywords): ...
def RenderGlobalsWindow(*args, **keywords): ...
def RenderIntoNewWindow(*args, **keywords): ...
def RenderLayerEditorWindow(*args, **keywords): ...
def RenderLayerRelationshipEditor(*args, **keywords): ...
def RenderOptions(*args, **keywords): ...
def RenderPassSetEditor(*args, **keywords): ...
def RenderSequence(*args, **keywords): ...
def RenderSequenceOptions(*args, **keywords): ...
def RenderSetupWindow(*args, **keywords): ...
def RenderTextureRange(*args, **keywords): ...
def RenderTextureRangeOptions(*args, **keywords): ...
def RenderViewNextImage(*args, **keywords): ...
def RenderViewPrevImage(*args, **keywords): ...
def RenderViewWindow(*args, **keywords): ...
def ReorderRotationDialog(*args, **keywords): ...
def ReorderVertex(*args, **keywords): ...
def RepeatLast(*args, **keywords): ...
def RepeatLastActionAtMousePosition(*args, **keywords): ...
def ReplaceObjects(*args, **keywords): ...
def ReplaceObjectsOptions(*args, **keywords): ...
def RerootSkeleton(*args, **keywords): ...
def ResampleCurve(*args, **keywords): ...
def ResampleCurveOptions(*args, **keywords): ...
def ResetChannelSetColors(*args, **keywords): ...
def ResetCurrentWorkspace(*args, **keywords): ...
def ResetDisplay(*args, **keywords): ...
def ResetLattice(*args, **keywords): ...
def ResetReflectionOptions(*args, **keywords): ...
def ResetSoftSelectOptions(*args, **keywords): ...
def ResetTemplateBrush(*args, **keywords): ...
def ResetTransformations(*args, **keywords): ...
def ResetTransformationsOptions(*args, **keywords): ...
def ResetViewport(*args, **keywords): ...
def ResetWeightsToDefault(*args, **keywords): ...
def ResetWeightsToDefaultOptions(*args, **keywords): ...
def ResetWire(*args, **keywords): ...
def ResetWireOptions(*args, **keywords): ...
def ResolveInterpenetration(*args, **keywords): ...
def ResolveInterpenetrationOptions(*args, **keywords): ...
def RestoreUIElements(*args, **keywords): ...
def RetimeKeysTool(*args, **keywords): ...
def RetimeKeysToolOptions(*args, **keywords): ...
def ReverseCurve(*args, **keywords): ...
def ReverseCurveOptions(*args, **keywords): ...
def ReversePolygonNormals(*args, **keywords): ...
def ReversePolygonNormalsOptions(*args, **keywords): ...
def ReverseSurfaceDirection(*args, **keywords): ...
def ReverseSurfaceDirectionOptions(*args, **keywords): ...
def ReverseToonObjects(*args, **keywords): ...
def Revolve(*args, **keywords): ...
def RevolveOptions(*args, **keywords): ...
def RigidBindSkin(*args, **keywords): ...
def RigidBindSkinOptions(*args, **keywords): ...
def RigidBodySolver(*args, **keywords): ...
def Rivet(*args, **keywords): ...
def RotateTool(*args, **keywords): ...
def RotateToolMarkingMenu(*args, **keywords): ...
def RotateToolMarkingMenuPopDown(*args, **keywords): ...
def RotateToolOptions(*args, **keywords): ...
def RotateToolWithSnapMarkingMenu(*args, **keywords): ...
def RotateToolWithSnapMarkingMenuPopDown(*args, **keywords): ...
def RotateUVTool(*args, **keywords): ...
def RotateUVs(*args, **keywords): ...
def RotateUVsOptions(*args, **keywords): ...
def RoundTool(*args, **keywords): ...
def RoundToolOptions(*args, **keywords): ...
def STRSTweakModeOff(*args, **keywords): ...
def STRSTweakModeOn(*args, **keywords): ...
def STRSTweakModeToggle(*args, **keywords): ...
def SaveBrushPreset(*args, **keywords): ...
def SaveCurrentLayout(*args, **keywords): ...
def SaveCurrentWorkspace(*args, **keywords): ...
def SaveFluidStateAs(*args, **keywords): ...
def SaveInitialStateAll(*args, **keywords): ...
def SavePreferences(*args, **keywords): ...
def SaveScene(*args, **keywords): ...
def SaveSceneAs(*args, **keywords): ...
def SaveSceneAsOptions(*args, **keywords): ...
def SaveSceneOptions(*args, **keywords): ...
def SaveScriptEditorTabs(*args, **keywords): ...
def ScaleConstraint(*args, **keywords): ...
def ScaleConstraintOptions(*args, **keywords): ...
def ScaleCurvature(*args, **keywords): ...
def ScaleCurvatureOptions(*args, **keywords): ...
def ScaleKeys(*args, **keywords): ...
def ScaleKeysOptions(*args, **keywords): ...
def ScaleTool(*args, **keywords): ...
def ScaleToolMarkingMenu(*args, **keywords): ...
def ScaleToolMarkingMenuPopDown(*args, **keywords): ...
def ScaleToolOptions(*args, **keywords): ...
def ScaleToolWithSnapMarkingMenu(*args, **keywords): ...
def ScaleToolWithSnapMarkingMenuPopDown(*args, **keywords): ...
def ScaleUVTool(*args, **keywords): ...
def ScriptEditor(*args, **keywords): ...
def ScriptPaintTool(*args, **keywords): ...
def ScriptPaintToolOptions(*args, **keywords): ...
def SculptGeometryTool(*args, **keywords): ...
def SculptGeometryToolOptions(*args, **keywords): ...
def SculptKeysActivateEditRadius(*args, **keywords): ...
def SculptKeysActivateEditStrength(*args, **keywords): ...
def SculptKeysDeactivateEditRadius(*args, **keywords): ...
def SculptKeysDeactivateEditStrength(*args, **keywords): ...
def SculptKeysGrabTool(*args, **keywords): ...
def SculptKeysGrabToolOptions(*args, **keywords): ...
def SculptKeysReduceTool(*args, **keywords): ...
def SculptKeysReduceToolOptions(*args, **keywords): ...
def SculptKeysSmearTool(*args, **keywords): ...
def SculptKeysSmearToolOptions(*args, **keywords): ...
def SculptKeysSmoothTool(*args, **keywords): ...
def SculptKeysSmoothToolOptions(*args, **keywords): ...
def SculptMeshActivateBrushSize(*args, **keywords): ...
def SculptMeshActivateBrushStrength(*args, **keywords): ...
def SculptMeshDeactivateBrushSize(*args, **keywords): ...
def SculptMeshDeactivateBrushStrength(*args, **keywords): ...
def SculptMeshFrame(*args, **keywords): ...
def SculptMeshInvertFreeze(*args, **keywords): ...
def SculptMeshUnfreezeAll(*args, **keywords): ...
def SculptPolygonsTool(*args, **keywords): ...
def SculptPolygonsToolOptions(*args, **keywords): ...
def SculptReferenceVectorMarkingMenuPress(*args, **keywords): ...
def SculptReferenceVectorMarkingMenuRelease(*args, **keywords): ...
def SculptSubdivsTool(*args, **keywords): ...
def SculptSubdivsToolOptions(*args, **keywords): ...
def SculptSurfacesTool(*args, **keywords): ...
def SculptSurfacesToolOptions(*args, **keywords): ...
def SearchAndReplaceNames(*args, **keywords): ...
def SearchEngine(*args, **keywords): ...
def SelectAll(*args, **keywords): ...
def SelectAllAssets(*args, **keywords): ...
def SelectAllBrushes(*args, **keywords): ...
def SelectAllCameras(*args, **keywords): ...
def SelectAllClusters(*args, **keywords): ...
def SelectAllDynamicConstraints(*args, **keywords): ...
def SelectAllFluids(*args, **keywords): ...
def SelectAllFollicles(*args, **keywords): ...
def SelectAllFurs(*args, **keywords): ...
def SelectAllGeometry(*args, **keywords): ...
def SelectAllHairSystem(*args, **keywords): ...
def SelectAllIKHandles(*args, **keywords): ...
def SelectAllImagePlanes(*args, **keywords): ...
def SelectAllInput(*args, **keywords): ...
def SelectAllJoints(*args, **keywords): ...
def SelectAllLattices(*args, **keywords): ...
def SelectAllLights(*args, **keywords): ...
def SelectAllMarkingMenu(*args, **keywords): ...
def SelectAllMarkingMenuPopDown(*args, **keywords): ...
def SelectAllNCloths(*args, **keywords): ...
def SelectAllNParticles(*args, **keywords): ...
def SelectAllNRigids(*args, **keywords): ...
def SelectAllNURBSCurves(*args, **keywords): ...
def SelectAllNURBSSurfaces(*args, **keywords): ...
def SelectAllOutput(*args, **keywords): ...
def SelectAllParticles(*args, **keywords): ...
def SelectAllPolygonGeometry(*args, **keywords): ...
def SelectAllRigidBodies(*args, **keywords): ...
def SelectAllRigidConstraints(*args, **keywords): ...
def SelectAllSculptObjects(*args, **keywords): ...
def SelectAllStrokes(*args, **keywords): ...
def SelectAllSubdivGeometry(*args, **keywords): ...
def SelectAllTransforms(*args, **keywords): ...
def SelectAllWires(*args, **keywords): ...
def SelectBorderEdgeTool(*args, **keywords): ...
def SelectBrushNames(*args, **keywords): ...
def SelectCVSelectionBoundary(*args, **keywords): ...
def SelectCVsMask(*args, **keywords): ...
def SelectComponentToolMarkingMenu(*args, **keywords): ...
def SelectComponentToolMarkingMenuPopDown(*args, **keywords): ...
def SelectContainerContents(*args, **keywords): ...
def SelectContiguousEdges(*args, **keywords): ...
def SelectContiguousEdgesOptions(*args, **keywords): ...
def SelectCurveCVsAll(*args, **keywords): ...
def SelectCurveCVsFirst(*args, **keywords): ...
def SelectCurveCVsLast(*args, **keywords): ...
def SelectCurvePointsMask(*args, **keywords): ...
def SelectEdgeLoop(*args, **keywords): ...
def SelectEdgeLoopSp(*args, **keywords): ...
def SelectEdgeMask(*args, **keywords): ...
def SelectEdgeRing(*args, **keywords): ...
def SelectEdgeRingSp(*args, **keywords): ...
def SelectFacePath(*args, **keywords): ...
def SelectFacetMask(*args, **keywords): ...
def SelectHierarchy(*args, **keywords): ...
def SelectHullsMask(*args, **keywords): ...
def SelectIsolate(*args, **keywords): ...
def SelectLightsIlluminatingObject(*args, **keywords): ...
def SelectLightsShadowingObject(*args, **keywords): ...
def SelectLinesMask(*args, **keywords): ...
def SelectMaskToolMarkingMenu(*args, **keywords): ...
def SelectMaskToolMarkingMenuPopDown(*args, **keywords): ...
def SelectMeshUVShell(*args, **keywords): ...
def SelectMultiComponentMask(*args, **keywords): ...
def SelectNextIntermediatObject(*args, **keywords): ...
def SelectNextKey(*args, **keywords): ...
def SelectNone(*args, **keywords): ...
def SelectObjectsIlluminatedByLight(*args, **keywords): ...
def SelectObjectsShadowedByLight(*args, **keywords): ...
def SelectPointsMask(*args, **keywords): ...
def SelectPolygonSelectionBoundary(*args, **keywords): ...
def SelectPolygonToolMarkingMenu(*args, **keywords): ...
def SelectPolygonToolMarkingMenuPopDown(*args, **keywords): ...
def SelectPreviousKey(*args, **keywords): ...
def SelectPreviousObjects3dsMax(*args, **keywords): ...
def SelectPreviousObjectsFlame(*args, **keywords): ...
def SelectPreviousObjectsFlare(*args, **keywords): ...
def SelectPreviousObjectsMotionBuilder(*args, **keywords): ...
def SelectPreviousObjectsMudbox(*args, **keywords): ...
def SelectSharedColorInstances(*args, **keywords): ...
def SelectSharedUVInstances(*args, **keywords): ...
def SelectShortestEdgePathTool(*args, **keywords): ...
def SelectSimilar(*args, **keywords): ...
def SelectSimilarOptions(*args, **keywords): ...
def SelectSurfaceBorder(*args, **keywords): ...
def SelectSurfaceBorderOptions(*args, **keywords): ...
def SelectSurfacePointsMask(*args, **keywords): ...
def SelectTextureReferenceObject(*args, **keywords): ...
def SelectTimeWarp(*args, **keywords): ...
def SelectToggleMode(*args, **keywords): ...
def SelectTool(*args, **keywords): ...
def SelectToolMarkingMenu(*args, **keywords): ...
def SelectToolMarkingMenuPopDown(*args, **keywords): ...
def SelectToolOptionsMarkingMenu(*args, **keywords): ...
def SelectToolOptionsMarkingMenuPopDown(*args, **keywords): ...
def SelectUVBackFacingComponents(*args, **keywords): ...
def SelectUVBorder(*args, **keywords): ...
def SelectUVBorderComponents(*args, **keywords): ...
def SelectUVFrontFacingComponents(*args, **keywords): ...
def SelectUVMask(*args, **keywords): ...
def SelectUVNonOverlappingComponents(*args, **keywords): ...
def SelectUVNonOverlappingComponentsPerObject(*args, **keywords): ...
def SelectUVOverlappingComponents(*args, **keywords): ...
def SelectUVOverlappingComponentsPerObject(*args, **keywords): ...
def SelectUVShell(*args, **keywords): ...
def SelectUVTool(*args, **keywords): ...
def SelectUnmappedFaces(*args, **keywords): ...
def SelectVertexFaceMask(*args, **keywords): ...
def SelectVertexMask(*args, **keywords): ...
def SendAsNewScene3dsMax(*args, **keywords): ...
def SendAsNewSceneFlame(*args, **keywords): ...
def SendAsNewSceneFlare(*args, **keywords): ...
def SendAsNewSceneMotionBuilder(*args, **keywords): ...
def SendAsNewSceneMudbox(*args, **keywords): ...
def SeparatePolygon(*args, **keywords): ...
def SequenceEditor(*args, **keywords): ...
def SetActiveKey(*args, **keywords): ...
def SetAlignTool(*args, **keywords): ...
def SetAsCombinationTarget(*args, **keywords): ...
def SetAsCombinationTargetOptions(*args, **keywords): ...
def SetBreakdownKey(*args, **keywords): ...
def SetBreakdownKeyOptions(*args, **keywords): ...
def SetCMCAmbient(*args, **keywords): ...
def SetCMCAmbientDiffuse(*args, **keywords): ...
def SetCMCDiffuse(*args, **keywords): ...
def SetCMCEmission(*args, **keywords): ...
def SetCMCNone(*args, **keywords): ...
def SetCMCSpecular(*args, **keywords): ...
def SetCurrentColorSet(*args, **keywords): ...
def SetCurrentUVSet(*args, **keywords): ...
def SetCutSewUVTool(*args, **keywords): ...
def SetDefaultManipMove(*args, **keywords): ...
def SetDefaultManipNone(*args, **keywords): ...
def SetDefaultManipRotate(*args, **keywords): ...
def SetDefaultManipScale(*args, **keywords): ...
def SetDefaultManipTransform(*args, **keywords): ...
def SetDrivenKey(*args, **keywords): ...
def SetEditor(*args, **keywords): ...
def SetExclusiveToCamera(*args, **keywords): ...
def SetFluidAttrFromCurve(*args, **keywords): ...
def SetFluidAttrFromCurveOptions(*args, **keywords): ...
def SetFocusToCommandLine(*args, **keywords): ...
def SetFocusToNumericInputLine(*args, **keywords): ...
def SetFullBodyIKKeys(*args, **keywords): ...
def SetFullBodyIKKeysAll(*args, **keywords): ...
def SetFullBodyIKKeysBodyPart(*args, **keywords): ...
def SetFullBodyIKKeysKeyToPin(*args, **keywords): ...
def SetFullBodyIKKeysOptions(*args, **keywords): ...
def SetFullBodyIKKeysSelected(*args, **keywords): ...
def SetHairRestPositionFromCurrent(*args, **keywords): ...
def SetHairRestPositionFromStart(*args, **keywords): ...
def SetHairStartPositionFromCurrent(*args, **keywords): ...
def SetHairStartPositionFromRest(*args, **keywords): ...
def SetHiddenFromCamera(*args, **keywords): ...
def SetIKFKKeyframe(*args, **keywords): ...
def SetInitialState(*args, **keywords): ...
def SetInitialStateOptions(*args, **keywords): ...
def SetKey(*args, **keywords): ...
def SetKeyAnimated(*args, **keywords): ...
def SetKeyOptions(*args, **keywords): ...
def SetKeyPath(*args, **keywords): ...
def SetKeyRotate(*args, **keywords): ...
def SetKeyScale(*args, **keywords): ...
def SetKeyTranslate(*args, **keywords): ...
def SetKeyVertexColor(*args, **keywords): ...
def SetKeyframeForVertexColor(*args, **keywords): ...
def SetMBSAdd(*args, **keywords): ...
def SetMBSAverage(*args, **keywords): ...
def SetMBSDivide(*args, **keywords): ...
def SetMBSModulate2(*args, **keywords): ...
def SetMBSMultiply(*args, **keywords): ...
def SetMBSOverwrite(*args, **keywords): ...
def SetMBSSubtract(*args, **keywords): ...
def SetMaxInfluences(*args, **keywords): ...
def SetMeshAmplifyTool(*args, **keywords): ...
def SetMeshBulgeTool(*args, **keywords): ...
def SetMeshCloneTargetTool(*args, **keywords): ...
def SetMeshEraseTool(*args, **keywords): ...
def SetMeshFillTool(*args, **keywords): ...
def SetMeshFlattenTool(*args, **keywords): ...
def SetMeshFoamyTool(*args, **keywords): ...
def SetMeshFreezeTool(*args, **keywords): ...
def SetMeshGrabTool(*args, **keywords): ...
def SetMeshGrabUVTool(*args, **keywords): ...
def SetMeshImprintTool(*args, **keywords): ...
def SetMeshKnifeTool(*args, **keywords): ...
def SetMeshMaskTool(*args, **keywords): ...
def SetMeshPinchTool(*args, **keywords): ...
def SetMeshRelaxTool(*args, **keywords): ...
def SetMeshRepeatTool(*args, **keywords): ...
def SetMeshScrapeTool(*args, **keywords): ...
def SetMeshSculptTool(*args, **keywords): ...
def SetMeshSmearTool(*args, **keywords): ...
def SetMeshSmoothTargetTool(*args, **keywords): ...
def SetMeshSmoothTool(*args, **keywords): ...
def SetMeshSprayTool(*args, **keywords): ...
def SetMeshWaxTool(*args, **keywords): ...
def SetNClothStartFromMesh(*args, **keywords): ...
def SetNormalAngle(*args, **keywords): ...
def SetPassiveKey(*args, **keywords): ...
def SetPreferredAngle(*args, **keywords): ...
def SetPreferredAngleOptions(*args, **keywords): ...
def SetProject(*args, **keywords): ...
def SetReFormTool(*args, **keywords): ...
def SetRestPosition(*args, **keywords): ...
def SetRigidBodyCollision(*args, **keywords): ...
def SetRigidBodyInterpenetration(*args, **keywords): ...
def SetShrinkWrapInnerObject(*args, **keywords): ...
def SetShrinkWrapTarget(*args, **keywords): ...
def SetSnapTogetherTool(*args, **keywords): ...
def SetSnapTogetherToolOptions(*args, **keywords): ...
def SetStrokeControlCurves(*args, **keywords): ...
def SetTimecode(*args, **keywords): ...
def SetToFaceNormals(*args, **keywords): ...
def SetToFaceNormalsOptions(*args, **keywords): ...
def SetVertexNormal(*args, **keywords): ...
def SetVertexNormalOptions(*args, **keywords): ...
def SetWireframeColor(*args, **keywords): ...
def SetWorkingFrame(*args, **keywords): ...
def SetupAnimatedDisplacement(*args, **keywords): ...
def SewUVs(*args, **keywords): ...
def SewUVs3D(*args, **keywords): ...
def SewUVsWithoutHotkey(*args, **keywords): ...
def ShadingGroupAttributeEditor(*args, **keywords): ...
def ShapeEditor(*args, **keywords): ...
def ShapeEditorDuplicateTarget(*args, **keywords): ...
def ShapeEditorNewGroup(*args, **keywords): ...
def ShapeEditorSelectNone(*args, **keywords): ...
def ShareColorInstances(*args, **keywords): ...
def ShareOneBrush(*args, **keywords): ...
def ShareUVInstances(*args, **keywords): ...
def Shatter(*args, **keywords): ...
def ShatterOptions(*args, **keywords): ...
def ShelfPreferencesWindow(*args, **keywords): ...
def ShortPolygonNormals(*args, **keywords): ...
def ShotPlaylistEditor(*args, **keywords): ...
def ShowAll(*args, **keywords): ...
def ShowAllComponents(*args, **keywords): ...
def ShowAllEditedComponents(*args, **keywords): ...
def ShowAllLabels(*args, **keywords): ...
def ShowAllPolyComponents(*args, **keywords): ...
def ShowAllUI(*args, **keywords): ...
def ShowAnimationUI(*args, **keywords): ...
def ShowAttributeEditorOrChannelBox(*args, **keywords): ...
def ShowBaseWire(*args, **keywords): ...
def ShowBatchRender(*args, **keywords): ...
def ShowBoundingBox(*args, **keywords): ...
def ShowCameraManipulators(*args, **keywords): ...
def ShowCameras(*args, **keywords): ...
def ShowClusters(*args, **keywords): ...
def ShowControllers(*args, **keywords): ...
def ShowDeformers(*args, **keywords): ...
def ShowDeformingGeometry(*args, **keywords): ...
def ShowDynamicConstraints(*args, **keywords): ...
def ShowDynamicsUI(*args, **keywords): ...
def ShowFluids(*args, **keywords): ...
def ShowFollicles(*args, **keywords): ...
def ShowFur(*args, **keywords): ...
def ShowGeometry(*args, **keywords): ...
def ShowHairSystems(*args, **keywords): ...
def ShowHotbox(*args, **keywords): ...
def ShowIKHandles(*args, **keywords): ...
def ShowJoints(*args, **keywords): ...
def ShowKinematics(*args, **keywords): ...
def ShowLastHidden(*args, **keywords): ...
def ShowLattices(*args, **keywords): ...
def ShowLightManipulators(*args, **keywords): ...
def ShowLights(*args, **keywords): ...
def ShowManipulatorTool(*args, **keywords): ...
def ShowManipulators(*args, **keywords): ...
def ShowMarkers(*args, **keywords): ...
def ShowMeshAmplifyToolOptions(*args, **keywords): ...
def ShowMeshBulgeToolOptions(*args, **keywords): ...
def ShowMeshCloneTargetToolOptions(*args, **keywords): ...
def ShowMeshEraseToolOptions(*args, **keywords): ...
def ShowMeshFillToolOptions(*args, **keywords): ...
def ShowMeshFlattenToolOptions(*args, **keywords): ...
def ShowMeshFoamyToolOptions(*args, **keywords): ...
def ShowMeshFreezeToolOptions(*args, **keywords): ...
def ShowMeshGrabToolOptions(*args, **keywords): ...
def ShowMeshGrabUVToolOptions(*args, **keywords): ...
def ShowMeshImprintToolOptions(*args, **keywords): ...
def ShowMeshKnifeToolOptions(*args, **keywords): ...
def ShowMeshMaskToolOptions(*args, **keywords): ...
def ShowMeshPinchToolOptions(*args, **keywords): ...
def ShowMeshRelaxToolOptions(*args, **keywords): ...
def ShowMeshRepeatToolOptions(*args, **keywords): ...
def ShowMeshScrapeToolOptions(*args, **keywords): ...
def ShowMeshSculptToolOptions(*args, **keywords): ...
def ShowMeshSmearToolOptions(*args, **keywords): ...
def ShowMeshSmoothTargetToolOptions(*args, **keywords): ...
def ShowMeshSmoothToolOptions(*args, **keywords): ...
def ShowMeshSprayToolOptions(*args, **keywords): ...
def ShowMeshWaxToolOptions(*args, **keywords): ...
def ShowModelingUI(*args, **keywords): ...
def ShowNCloths(*args, **keywords): ...
def ShowNParticles(*args, **keywords): ...
def ShowNRigids(*args, **keywords): ...
def ShowNURBSCurves(*args, **keywords): ...
def ShowNURBSSurfaces(*args, **keywords): ...
def ShowNonlinears(*args, **keywords): ...
def ShowObjectGeometry(*args, **keywords): ...
def ShowPlanes(*args, **keywords): ...
def ShowPolygonSurfaces(*args, **keywords): ...
def ShowRenderingUI(*args, **keywords): ...
def ShowResultsOptions(*args, **keywords): ...
def ShowRiggingUI(*args, **keywords): ...
def ShowSculptObjects(*args, **keywords): ...
def ShowSelectedObjects(*args, **keywords): ...
def ShowShadingGroupAttributeEditor(*args, **keywords): ...
def ShowSmoothSkinInfluences(*args, **keywords): ...
def ShowStrokeControlCurves(*args, **keywords): ...
def ShowStrokePathCurves(*args, **keywords): ...
def ShowStrokes(*args, **keywords): ...
def ShowSubdivSurfaces(*args, **keywords): ...
def ShowSurfaceCVs(*args, **keywords): ...
def ShowTexturePlacements(*args, **keywords): ...
def ShowUIElements(*args, **keywords): ...
def ShowWhatsNew(*args, **keywords): ...
def ShowWrapInfluences(*args, **keywords): ...
def ShrinkLoopPolygonSelectionRegion(*args, **keywords): ...
def ShrinkPolygonSelectionRegion(*args, **keywords): ...
def SimplifyCurve(*args, **keywords): ...
def SimplifyCurveOptions(*args, **keywords): ...
def SimplifyStrokePathCurves(*args, **keywords): ...
def Sine(*args, **keywords): ...
def SineOptions(*args, **keywords): ...
def SinglePerspectiveViewLayout(*args, **keywords): ...
def SingleViewArrangement(*args, **keywords): ...
def SlideEdgeTool(*args, **keywords): ...
def SlideEdgeToolOptions(*args, **keywords): ...
def SmartExtrude(*args, **keywords): ...
def Smoke(*args, **keywords): ...
def SmokeOptions(*args, **keywords): ...
def SmoothBindSkin(*args, **keywords): ...
def SmoothBindSkinOptions(*args, **keywords): ...
def SmoothCurve(*args, **keywords): ...
def SmoothCurveOptions(*args, **keywords): ...
def SmoothHairCurves(*args, **keywords): ...
def SmoothHairCurvesOptions(*args, **keywords): ...
def SmoothPolygon(*args, **keywords): ...
def SmoothPolygonOptions(*args, **keywords): ...
def SmoothProxy(*args, **keywords): ...
def SmoothProxyOptions(*args, **keywords): ...
def SmoothSkinWeights(*args, **keywords): ...
def SmoothSkinWeightsOptions(*args, **keywords): ...
def SmoothTangent(*args, **keywords): ...
def SmoothingDisplayShowBoth(*args, **keywords): ...
def SmoothingDisplayToggle(*args, **keywords): ...
def SmoothingLevelDecrease(*args, **keywords): ...
def SmoothingLevelIncrease(*args, **keywords): ...
def Snap2PointsTo2Points(*args, **keywords): ...
def Snap2PointsTo2PointsOptions(*args, **keywords): ...
def Snap3PointsTo3Points(*args, **keywords): ...
def Snap3PointsTo3PointsOptions(*args, **keywords): ...
def SnapKeys(*args, **keywords): ...
def SnapKeysOptions(*args, **keywords): ...
def SnapPointToPoint(*args, **keywords): ...
def SnapPointToPointOptions(*args, **keywords): ...
def SnapRotation(*args, **keywords): ...
def SnapTimeToSelection(*args, **keywords): ...
def SnapToCurve(*args, **keywords): ...
def SnapToCurvePress(*args, **keywords): ...
def SnapToCurveRelease(*args, **keywords): ...
def SnapToGrid(*args, **keywords): ...
def SnapToGridPress(*args, **keywords): ...
def SnapToGridRelease(*args, **keywords): ...
def SnapToMeshCenter(*args, **keywords): ...
def SnapToMeshCenterPress(*args, **keywords): ...
def SnapToMeshCenterRelease(*args, **keywords): ...
def SnapToPixel(*args, **keywords): ...
def SnapToPoint(*args, **keywords): ...
def SnapToPointPress(*args, **keywords): ...
def SnapToPointRelease(*args, **keywords): ...
def SoftModDeformer(*args, **keywords): ...
def SoftModDeformerOptions(*args, **keywords): ...
def SoftModTool(*args, **keywords): ...
def SoftModToolOptions(*args, **keywords): ...
def Solidify(*args, **keywords): ...
def SolidifyOptions(*args, **keywords): ...
def SoloLastOutput(*args, **keywords): ...
def SoloMaterial(*args, **keywords): ...
def SplitEdge(*args, **keywords): ...
def SplitEdgeRingTool(*args, **keywords): ...
def SplitEdgeRingToolOptions(*args, **keywords): ...
def SplitMeshWithProjectedCurve(*args, **keywords): ...
def SplitMeshWithProjectedCurveOptions(*args, **keywords): ...
def SplitPolygonTool(*args, **keywords): ...
def SplitPolygonToolOptions(*args, **keywords): ...
def SplitUV(*args, **keywords): ...
def SplitVertex(*args, **keywords): ...
def SpreadSheetEditor(*args, **keywords): ...
def SquareSurface(*args, **keywords): ...
def SquareSurfaceOptions(*args, **keywords): ...
def Squash(*args, **keywords): ...
def SquashOptions(*args, **keywords): ...
def StitchEdgesTool(*args, **keywords): ...
def StitchEdgesToolOptions(*args, **keywords): ...
def StitchSurfacePoints(*args, **keywords): ...
def StitchSurfacePointsOptions(*args, **keywords): ...
def StitchTogether(*args, **keywords): ...
def StitchTogetherOptions(*args, **keywords): ...
def StraightenCurves(*args, **keywords): ...
def StraightenCurvesOptions(*args, **keywords): ...
def StraightenUVBorder(*args, **keywords): ...
def StraightenUVBorderOptions(*args, **keywords): ...
def SubdCutUVs(*args, **keywords): ...
def SubdivProxy(*args, **keywords): ...
def SubdivProxyOptions(*args, **keywords): ...
def SubdivSmoothnessFine(*args, **keywords): ...
def SubdivSmoothnessFineOptions(*args, **keywords): ...
def SubdivSmoothnessHull(*args, **keywords): ...
def SubdivSmoothnessHullOptions(*args, **keywords): ...
def SubdivSmoothnessMedium(*args, **keywords): ...
def SubdivSmoothnessMediumOptions(*args, **keywords): ...
def SubdivSmoothnessRough(*args, **keywords): ...
def SubdivSmoothnessRoughOptions(*args, **keywords): ...
def SubdivSurfaceCleanTopology(*args, **keywords): ...
def SubdivSurfaceHierarchyMode(*args, **keywords): ...
def SubdivSurfaceMatchTopology(*args, **keywords): ...
def SubdivSurfacePolygonProxyMode(*args, **keywords): ...
def SubdivToNURBS(*args, **keywords): ...
def SubdivToNURBSOptions(*args, **keywords): ...
def SubdividePolygon(*args, **keywords): ...
def SubdividePolygonOptions(*args, **keywords): ...
def SubstituteGeometry(*args, **keywords): ...
def SubstituteGeometryOptions(*args, **keywords): ...
def SurfaceBooleanIntersectTool(*args, **keywords): ...
def SurfaceBooleanIntersectToolOptions(*args, **keywords): ...
def SurfaceBooleanSubtractTool(*args, **keywords): ...
def SurfaceBooleanSubtractToolOptions(*args, **keywords): ...
def SurfaceBooleanUnionTool(*args, **keywords): ...
def SurfaceBooleanUnionToolOptions(*args, **keywords): ...
def SurfaceEditingTool(*args, **keywords): ...
def SurfaceEditingToolOptions(*args, **keywords): ...
def SurfaceFlow(*args, **keywords): ...
def SurfaceFlowOptions(*args, **keywords): ...
def SwapBlendShape(*args, **keywords): ...
def SwapBlendShapeOptions(*args, **keywords): ...
def SwapBufferCurve(*args, **keywords): ...
def Symmetrize(*args, **keywords): ...
def SymmetrizeSelection(*args, **keywords): ...
def SymmetrizeUV(*args, **keywords): ...
def SymmetrizeUVBrushSizeOff(*args, **keywords): ...
def SymmetrizeUVBrushSizeOn(*args, **keywords): ...
def SymmetrizeUVOptions(*args, **keywords): ...
def TagAsController(*args, **keywords): ...
def TagAsControllerParent(*args, **keywords): ...
def TangentAuto(*args, **keywords): ...
def TangentAutoCustom(*args, **keywords): ...
def TangentAutoCustomOptions(*args, **keywords): ...
def TangentAutoEase(*args, **keywords): ...
def TangentAutoMix(*args, **keywords): ...
def TangentClamped(*args, **keywords): ...
def TangentConstraint(*args, **keywords): ...
def TangentConstraintOptions(*args, **keywords): ...
def TangentFixed(*args, **keywords): ...
def TangentFlat(*args, **keywords): ...
def TangentLinear(*args, **keywords): ...
def TangentPlateau(*args, **keywords): ...
def TangentSpline(*args, **keywords): ...
def TangentStepNext(*args, **keywords): ...
def TangentStepped(*args, **keywords): ...
def TanimLayer(*args) -> Any: ...
def TemplateBrushSettings(*args, **keywords): ...
def TemplateObject(*args, **keywords): ...
def Tension(*args, **keywords): ...
def TensionOptions(*args, **keywords): ...
def TesselateSubdivSurface(*args, **keywords): ...
def TesselateSubdivSurfaceOptions(*args, **keywords): ...
def TestTexture(*args, **keywords): ...
def TestTextureOptions(*args, **keywords): ...
def TexSculptActivateBrushSize(*args, **keywords): ...
def TexSculptActivateBrushStrength(*args, **keywords): ...
def TexSculptDeactivateBrushSize(*args, **keywords): ...
def TexSculptDeactivateBrushStrength(*args, **keywords): ...
def TexSculptInvertPin(*args, **keywords): ...
def TexSculptUnpinAll(*args, **keywords): ...
def TexSewActivateBrushSize(*args, **keywords): ...
def TexSewDeactivateBrushSize(*args, **keywords): ...
def TextureCentricUVLinkingEditor(*args, **keywords): ...
def TextureToGeometry(*args, **keywords): ...
def TextureToGeometryOptions(*args, **keywords): ...
def TextureViewWindow(*args, **keywords): ...
def ThreeBottomSplitViewArrangement(*args, **keywords): ...
def ThreeLeftSplitViewArrangement(*args, **keywords): ...
def ThreePointArcTool(*args, **keywords): ...
def ThreePointArcToolOptions(*args, **keywords): ...
def ThreeRightSplitViewArrangement(*args, **keywords): ...
def ThreeTopSplitViewArrangement(*args, **keywords): ...
def TimeDraggerToolActivate(*args, **keywords): ...
def TimeDraggerToolDeactivate(*args, **keywords): ...
def TimeEditorAddToSoloSelectedTracks(*args, **keywords): ...
def TimeEditorClipHoldToggle(*args, **keywords): ...
def TimeEditorClipLoopToggle(*args, **keywords): ...
def TimeEditorClipRazor(*args, **keywords): ...
def TimeEditorClipResetTiming(*args, **keywords): ...
def TimeEditorClipScaleEnd(*args, **keywords): ...
def TimeEditorClipScaleStart(*args, **keywords): ...
def TimeEditorClipScaleToggle(*args, **keywords): ...
def TimeEditorClipTrimEnd(*args, **keywords): ...
def TimeEditorClipTrimStart(*args, **keywords): ...
def TimeEditorClipTrimToggle(*args, **keywords): ...
def TimeEditorCopyClips(*args, **keywords): ...
def TimeEditorCreateAdditiveLayer(*args, **keywords): ...
def TimeEditorCreateAnimTracksAtEnd(*args, **keywords): ...
def TimeEditorCreateAudioClip(*args, **keywords): ...
def TimeEditorCreateAudioTracksAtEnd(*args, **keywords): ...
def TimeEditorCreateClip(*args, **keywords): ...
def TimeEditorCreateClipOptions(*args, **keywords): ...
def TimeEditorCreateGroupFromSelection(*args, **keywords): ...
def TimeEditorCreateOverrideLayer(*args, **keywords): ...
def TimeEditorCreatePoseClip(*args, **keywords): ...
def TimeEditorCreatePoseClipOptions(*args, **keywords): ...
def TimeEditorCutClips(*args, **keywords): ...
def TimeEditorDeleteClips(*args, **keywords): ...
def TimeEditorDeleteSelectedTracks(*args, **keywords): ...
def TimeEditorExplodeGroup(*args, **keywords): ...
def TimeEditorExportSelection(*args, **keywords): ...
def TimeEditorExportSelectionOpt(*args, **keywords): ...
def TimeEditorFbxExportAll(*args, **keywords): ...
def TimeEditorFrameAll(*args, **keywords): ...
def TimeEditorFrameCenterView(*args, **keywords): ...
def TimeEditorFramePlaybackRange(*args, **keywords): ...
def TimeEditorFrameSelected(*args, **keywords): ...
def TimeEditorGhostTrackToggle(*args, **keywords): ...
def TimeEditorImportAnimation(*args, **keywords): ...
def TimeEditorKeepTransitionsTogglePress(*args, **keywords): ...
def TimeEditorKeepTransitionsToggleRelease(*args, **keywords): ...
def TimeEditorMuteSelectedTracks(*args, **keywords): ...
def TimeEditorOpenContentBrowser(*args, **keywords): ...
def TimeEditorPasteClips(*args, **keywords): ...
def TimeEditorRealTimeRefreshToggle(*args, **keywords): ...
def TimeEditorRippleEditTogglePress(*args, **keywords): ...
def TimeEditorRippleEditToggleRelease(*args, **keywords): ...
def TimeEditorSceneAuthoringToggle(*args, **keywords): ...
def TimeEditorSetKey(*args, **keywords): ...
def TimeEditorSetZeroKey(*args, **keywords): ...
def TimeEditorSoloSelectedTracks(*args, **keywords): ...
def TimeEditorToggleMuteSelectedTracks(*args, **keywords): ...
def TimeEditorToggleSnapToClipPress(*args, **keywords): ...
def TimeEditorToggleSnapToClipRelease(*args, **keywords): ...
def TimeEditorToggleSoloSelectedTracks(*args, **keywords): ...
def TimeEditorToggleTimeCursorPress(*args, **keywords): ...
def TimeEditorToggleTimeCursorRelease(*args, **keywords): ...
def TimeEditorUnmuteAllTracks(*args, **keywords): ...
def TimeEditorUnmuteSelectedTracks(*args, **keywords): ...
def TimeEditorUnsoloAllTracks(*args, **keywords): ...
def TimeEditorWindow(*args, **keywords): ...
def ToggleAnimationDetails(*args, **keywords): ...
def ToggleAttributeEditor(*args, **keywords): ...
def ToggleAutoActivateBodyPart(*args, **keywords): ...
def ToggleAutoFrame(*args, **keywords): ...
def ToggleAutoFrameTime(*args, **keywords): ...
def ToggleAutoSmooth(*args, **keywords): ...
def ToggleBackfaceCulling(*args, **keywords): ...
def ToggleBackfaceGeometry(*args, **keywords): ...
def ToggleBluePencilToolBar(*args, **keywords): ...
def ToggleBookmarkVisibility(*args, **keywords): ...
def ToggleBorderEdges(*args, **keywords): ...
def ToggleCVs(*args, **keywords): ...
def ToggleCameraNames(*args, **keywords): ...
def ToggleCapsLockDisplay(*args, **keywords): ...
def ToggleChannelBox(*args, **keywords): ...
def ToggleChannelsLayers(*args, **keywords): ...
def ToggleCharacterControls(*args, **keywords): ...
def ToggleColorFeedback(*args, **keywords): ...
def ToggleCommandLine(*args, **keywords): ...
def ToggleCompIDs(*args, **keywords): ...
def ToggleContainerCentric(*args, **keywords): ...
def ToggleCreaseEdges(*args, **keywords): ...
def ToggleCreaseVertices(*args, **keywords): ...
def ToggleCreateNurbsPrimitivesAsTool(*args, **keywords): ...
def ToggleCreatePolyPrimitivesAsTool(*args, **keywords): ...
def ToggleCullingVertices(*args, **keywords): ...
def ToggleCurrentContainerHud(*args, **keywords): ...
def ToggleCurrentFrame(*args, **keywords): ...
def ToggleCustomNURBSComponents(*args, **keywords): ...
def ToggleDisplacement(*args, **keywords): ...
def ToggleDisplayColorsAttr(*args, **keywords): ...
def ToggleDisplayGradient(*args, **keywords): ...
def ToggleEdgeIDs(*args, **keywords): ...
def ToggleEdgeMetadata(*args, **keywords): ...
def ToggleEditPivot(*args, **keywords): ...
def ToggleEditPoints(*args, **keywords): ...
def ToggleEffectsMeshDisplay(*args, **keywords): ...
def ToggleEvaluationManagerVisibility(*args, **keywords): ...
def ToggleFaceIDs(*args, **keywords): ...
def ToggleFaceMetadata(*args, **keywords): ...
def ToggleFaceNormalDisplay(*args, **keywords): ...
def ToggleFaceNormals(*args, **keywords): ...
def ToggleFastInteraction(*args, **keywords): ...
def ToggleFkIk(*args, **keywords): ...
def ToggleFocalLength(*args, **keywords): ...
def ToggleFrameRate(*args, **keywords): ...
def ToggleFullScreenMode(*args, **keywords): ...
def ToggleGrid(*args, **keywords): ...
def ToggleHelpLine(*args, **keywords): ...
def ToggleHikDetails(*args, **keywords): ...
def ToggleHoleFaces(*args, **keywords): ...
def ToggleHulls(*args, **keywords): ...
def ToggleIKAllowRotation(*args, **keywords): ...
def ToggleIKHandleSnap(*args, **keywords): ...
def ToggleIKSolvers(*args, **keywords): ...
def ToggleImagePlaneOptionCmd(*args, **keywords): ...
def ToggleInViewEditor(*args, **keywords): ...
def ToggleInViewMessage(*args, **keywords): ...
def ToggleIsolateSelect(*args, **keywords): ...
def ToggleJointLabels(*args, **keywords): ...
def ToggleKeepHardEdgeCulling(*args, **keywords): ...
def ToggleKeepWireCulling(*args, **keywords): ...
def ToggleLatticePoints(*args, **keywords): ...
def ToggleLatticeShape(*args, **keywords): ...
def ToggleLayerBar(*args, **keywords): ...
def ToggleLocalRotationAxes(*args, **keywords): ...
def ToggleMainMenubar(*args, **keywords): ...
def ToggleMaterialLoadingDetailsVisibility(*args, **keywords): ...
def ToggleMeshEdges(*args, **keywords): ...
def ToggleMeshFaces(*args, **keywords): ...
def ToggleMeshMaps(*args, **keywords): ...
def ToggleMeshPoints(*args, **keywords): ...
def ToggleMeshUVBorders(*args, **keywords): ...
def ToggleMetadata(*args, **keywords): ...
def ToggleModelEditorBars(*args, **keywords): ...
def ToggleModelingToolkit(*args, **keywords): ...
def ToggleMultiColorFeedback(*args, **keywords): ...
def ToggleNormals(*args, **keywords): ...
def ToggleNurbsCurvesOptionCmd(*args, **keywords): ...
def ToggleNurbsPrimitivesAsToolExitOnComplete(*args, **keywords): ...
def ToggleObjectDetails(*args, **keywords): ...
def ToggleOppositeFlagOfSelectedShapes(*args, **keywords): ...
def ToggleOriginAxis(*args, **keywords): ...
def ToggleOutliner(*args, **keywords): ...
def TogglePaintAtDepth(*args, **keywords): ...
def TogglePaintOnPaintableObjects(*args, **keywords): ...
def TogglePanZoomPress(*args, **keywords): ...
def TogglePanZoomRelease(*args, **keywords): ...
def TogglePanelMenubar(*args, **keywords): ...
def ToggleParticleCount(*args, **keywords): ...
def TogglePolyCount(*args, **keywords): ...
def TogglePolyDisplayEdges(*args, **keywords): ...
def TogglePolyDisplayHardEdges(*args, **keywords): ...
def TogglePolyDisplayHardEdgesColor(*args, **keywords): ...
def TogglePolyDisplayLimitToSelected(*args, **keywords): ...
def TogglePolyDisplaySoftEdges(*args, **keywords): ...
def TogglePolyNonPlanarFaceDisplay(*args, **keywords): ...
def TogglePolyPrimitivesAsToolExitOnComplete(*args, **keywords): ...
def TogglePolyUVsCreateShader(*args, **keywords): ...
def TogglePolygonFaceCenters(*args, **keywords): ...
def TogglePolygonFaceTriangles(*args, **keywords): ...
def TogglePolygonFaceTrianglesDisplay(*args, **keywords): ...
def TogglePolygonsOptionCmd(*args, **keywords): ...
def ToggleProxyDisplay(*args, **keywords): ...
def ToggleRangeSlider(*args, **keywords): ...
def ToggleReflection(*args, **keywords): ...
def ToggleRotationPivots(*args, **keywords): ...
def ToggleScalePivots(*args, **keywords): ...
def ToggleSceneTimecode(*args, **keywords): ...
def ToggleSelectDetails(*args, **keywords): ...
def ToggleSelectedLabels(*args, **keywords): ...
def ToggleSelectionHandles(*args, **keywords): ...
def ToggleShelf(*args, **keywords): ...
def ToggleShowBufferCurves(*args, **keywords): ...
def ToggleShowResults(*args, **keywords): ...
def ToggleSoftEdges(*args, **keywords): ...
def ToggleStatusLine(*args, **keywords): ...
def ToggleSubdDetails(*args, **keywords): ...
def ToggleSurfaceFaceCenters(*args, **keywords): ...
def ToggleSurfaceOrigin(*args, **keywords): ...
def ToggleSymmetryDisplay(*args, **keywords): ...
def ToggleTangentDisplay(*args, **keywords): ...
def ToggleTextureBorder(*args, **keywords): ...
def ToggleTextureBorderEdges(*args, **keywords): ...
def ToggleTimeSlider(*args, **keywords): ...
def ToggleToolSettings(*args, **keywords): ...
def ToggleToolbox(*args, **keywords): ...
def ToggleUIElements(*args, **keywords): ...
def ToggleUVDistortion(*args, **keywords): ...
def ToggleUVEditorIsolateSelectHUD(*args, **keywords): ...
def ToggleUVEditorUVPositionHUD(*args, **keywords): ...
def ToggleUVEditorUVStatisticsHUD(*args, **keywords): ...
def ToggleUVEditorUVStatisticsHUDOptions(*args, **keywords): ...
def ToggleUVIsolateViewSelected(*args, **keywords): ...
def ToggleUVShellBorder(*args, **keywords): ...
def ToggleUVTextureImage(*args, **keywords): ...
def ToggleUVs(*args, **keywords): ...
def ToggleUnsharedUVs(*args, **keywords): ...
def ToggleUseDefaultMaterial(*args, **keywords): ...
def ToggleVertIDs(*args, **keywords): ...
def ToggleVertMetadata(*args, **keywords): ...
def ToggleVertexNormalDisplay(*args, **keywords): ...
def ToggleVertices(*args, **keywords): ...
def ToggleViewAxis(*args, **keywords): ...
def ToggleViewCube(*args, **keywords): ...
def ToggleViewportRenderer(*args, **keywords): ...
def ToggleVisibilityAndKeepSelection(*args, **keywords): ...
def ToggleVisibilityAndKeepSelectionOptions(*args, **keywords): ...
def ToggleWireframeInArtisan(*args, **keywords): ...
def ToggleWireframeOnShadedCmd(*args, **keywords): ...
def ToggleZoomInMode(*args, **keywords): ...
def ToolSettingsWindow(*args, **keywords): ...
def TrackTool(*args, **keywords): ...
def TransferAttributeValues(*args, **keywords): ...
def TransferAttributeValuesOptions(*args, **keywords): ...
def TransferAttributes(*args, **keywords): ...
def TransferShadingSets(*args, **keywords): ...
def TransferVertexOrder(*args, **keywords): ...
def TransformNoSelectOffTool(*args, **keywords): ...
def TransformNoSelectOnTool(*args, **keywords): ...
def TransformPolygonComponent(*args, **keywords): ...
def TransformPolygonComponentOptions(*args, **keywords): ...
def TranslateToolMarkingMenu(*args, **keywords): ...
def TranslateToolMarkingMenuPopDown(*args, **keywords): ...
def TranslateToolWithSnapMarkingMenu(*args, **keywords): ...
def TranslateToolWithSnapMarkingMenuPopDown(*args, **keywords): ...
def TransplantHair(*args, **keywords): ...
def TransplantHairOptions(*args, **keywords): ...
def TrenderSetupStates(*args) -> Any: ...
def Triangulate(*args, **keywords): ...
def TrimTool(*args, **keywords): ...
def TrimToolOptions(*args, **keywords): ...
def TruncateHairCache(*args, **keywords): ...
def TumbleTool(*args, **keywords): ...
def Turbulence(*args, **keywords): ...
def TurbulenceOptions(*args, **keywords): ...
def Twist(*args, **keywords): ...
def TwistOptions(*args, **keywords): ...
def TwoPointArcTool(*args, **keywords): ...
def TwoPointArcToolOptions(*args, **keywords): ...
def TwoSideBySideViewArrangement(*args, **keywords): ...
def TwoStackedViewArrangement(*args, **keywords): ...
def U3DBrushPressureOff(*args, **keywords): ...
def U3DBrushPressureOn(*args, **keywords): ...
def U3DBrushSizeOff(*args, **keywords): ...
def U3DBrushSizeOn(*args, **keywords): ...
def UIModeMarkingMenu(*args, **keywords): ...
def UIModeMarkingMenuPopDown(*args, **keywords): ...
def UVAutomaticProjection(*args, **keywords): ...
def UVAutomaticProjectionOptions(*args, **keywords): ...
def UVCameraBasedProjection(*args, **keywords): ...
def UVCameraBasedProjectionOptions(*args, **keywords): ...
def UVCentricUVLinkingEditor(*args, **keywords): ...
def UVContourStretchProjection(*args, **keywords): ...
def UVContourStretchProjectionOptions(*args, **keywords): ...
def UVCreateSnapshot(*args, **keywords): ...
def UVCylindricProjection(*args, **keywords): ...
def UVCylindricProjectionOptions(*args, **keywords): ...
def UVEditorFrameAll(*args, **keywords): ...
def UVEditorFrameSelected(*args, **keywords): ...
def UVEditorInvertPin(*args, **keywords): ...
def UVEditorResetAllToDefault(*args, **keywords): ...
def UVEditorToggleTextureBorderDisplay(*args, **keywords): ...
def UVEditorUnpinAll(*args, **keywords): ...
def UVGatherShells(*args, **keywords): ...
def UVIsolateLoadSet(*args, **keywords): ...
def UVNormalBasedProjection(*args, **keywords): ...
def UVNormalBasedProjectionOptions(*args, **keywords): ...
def UVOrientShells(*args, **keywords): ...
def UVPin(*args, **keywords): ...
def UVPinOptions(*args, **keywords): ...
def UVPlanarProjection(*args, **keywords): ...
def UVPlanarProjectionOptions(*args, **keywords): ...
def UVSetEditor(*args, **keywords): ...
def UVSnapTogether(*args, **keywords): ...
def UVSnapTogetherOptions(*args, **keywords): ...
def UVSphericalProjection(*args, **keywords): ...
def UVSphericalProjectionOptions(*args, **keywords): ...
def UVStackSimilarShells(*args, **keywords): ...
def UVStackSimilarShellsOptions(*args, **keywords): ...
def UVStraighten(*args, **keywords): ...
def UVStraightenOptions(*args, **keywords): ...
def UVUnstackShells(*args, **keywords): ...
def UVUnstackShellsOptions(*args, **keywords): ...
def UfeCommandObject(*args) -> Any: ...
def UncreaseSubdivSurface(*args, **keywords): ...
def Undo(*args, **keywords): ...
def UndoCanvas(*args, **keywords): ...
def UndoViewChange(*args, **keywords): ...
def UnfoldPackUVs3DInCurrentTile(*args, **keywords): ...
def UnfoldPackUVs3DInEmptyTile(*args, **keywords): ...
def UnfoldUV(*args, **keywords): ...
def UnfoldUVOptions(*args, **keywords): ...
def Ungroup(*args, **keywords): ...
def UngroupOptions(*args, **keywords): ...
def Uniform(*args, **keywords): ...
def UniformOptions(*args, **keywords): ...
def UnifyTangents(*args, **keywords): ...
def UnitizeUVs(*args, **keywords): ...
def UnitizeUVsOptions(*args, **keywords): ...
def UniversalManip(*args, **keywords): ...
def UniversalManipOptions(*args, **keywords): ...
def UnlockContainer(*args, **keywords): ...
def UnlockCurveLength(*args, **keywords): ...
def UnlockNormals(*args, **keywords): ...
def UnmirrorSmoothProxy(*args, **keywords): ...
def UnmirrorSmoothProxyOptions(*args, **keywords): ...
def Unparent(*args, **keywords): ...
def UnparentOptions(*args, **keywords): ...
def UnpinSelection(*args, **keywords): ...
def UnpublishAttributes(*args, **keywords): ...
def UnpublishChildAnchor(*args, **keywords): ...
def UnpublishNode(*args, **keywords): ...
def UnpublishParentAnchor(*args, **keywords): ...
def UnpublishRootTransform(*args, **keywords): ...
def UnsmoothPolygon(*args, **keywords): ...
def UnsmoothPolygonOptions(*args, **keywords): ...
def UntemplateObject(*args, **keywords): ...
def UntrimSurfaces(*args, **keywords): ...
def UntrimSurfacesOptions(*args, **keywords): ...
def UpdateBindingSet(*args, **keywords): ...
def UpdateBindingSetOptions(*args, **keywords): ...
def UpdateBookmarkWithSelection(*args, **keywords): ...
def UpdateCurrentScene3dsMax(*args, **keywords): ...
def UpdateCurrentSceneFlame(*args, **keywords): ...
def UpdateCurrentSceneFlare(*args, **keywords): ...
def UpdateCurrentSceneMotionBuilder(*args, **keywords): ...
def UpdateCurrentSceneMudbox(*args, **keywords): ...
def UpdateEraseSurface(*args, **keywords): ...
def UpdatePSDTextureItem(*args, **keywords): ...
def UpdateReferenceSurface(*args, **keywords): ...
def UpdateSnapshot(*args, **keywords): ...
def UseHardwareShader(*args, **keywords): ...
def UseSelectedEmitter(*args, **keywords): ...
def VertexNormalEditTool(*args, **keywords): ...
def ViewAllTutorials(*args, **keywords): ...
def ViewAlongAxisNegativeX(*args, **keywords): ...
def ViewAlongAxisNegativeY(*args, **keywords): ...
def ViewAlongAxisNegativeZ(*args, **keywords): ...
def ViewAlongAxisX(*args, **keywords): ...
def ViewAlongAxisY(*args, **keywords): ...
def ViewAlongAxisZ(*args, **keywords): ...
def ViewImage(*args, **keywords): ...
def ViewSequence(*args, **keywords): ...
def ViewportEnableSmoothing(*args, **keywords): ...
def VisorWindow(*args, **keywords): ...
def VisualizeMetadataOptions(*args, **keywords): ...
def VolumeAxis(*args, **keywords): ...
def VolumeAxisOptions(*args, **keywords): ...
def VolumeSkinBinding(*args, **keywords): ...
def VolumeSkinBindingOptions(*args, **keywords): ...
def Vortex(*args, **keywords): ...
def VortexOptions(*args, **keywords): ...
def WalkTool(*args, **keywords): ...
def WarpImage(*args, **keywords): ...
def WarpImageOptions(*args, **keywords): ...
def Wave(*args, **keywords): ...
def WaveOptions(*args, **keywords): ...
def WedgePolygon(*args, **keywords): ...
def WedgePolygonOptions(*args, **keywords): ...
def WeightHammer(*args, **keywords): ...
def WeightHammerOptions(*args, **keywords): ...
def WeightedTangents(*args, **keywords): ...
def WhatsNewHighlightingOff(*args, **keywords): ...
def WhatsNewHighlightingOn(*args, **keywords): ...
def WireDropoffLocator(*args, **keywords): ...
def WireDropoffLocatorOptions(*args, **keywords): ...
def WireTool(*args, **keywords): ...
def WireToolOptions(*args, **keywords): ...
def WrinkleTool(*args, **keywords): ...
def WrinkleToolOptions(*args, **keywords): ...
def XgCreateIgSplineEditor(*args, **keywords): ...
def XgmCreateInteractiveGroomSplines(*args, **keywords): ...
def XgmCreateInteractiveGroomSplinesOption(*args, **keywords): ...
def XgmSetClumpBrushTool(*args, **keywords): ...
def XgmSetClumpBrushToolOption(*args, **keywords): ...
def XgmSetCombBrushTool(*args, **keywords): ...
def XgmSetCombBrushToolOption(*args, **keywords): ...
def XgmSetCutBrushTool(*args, **keywords): ...
def XgmSetCutBrushToolOption(*args, **keywords): ...
def XgmSetDensityBrushTool(*args, **keywords): ...
def XgmSetDensityBrushToolOption(*args, **keywords): ...
def XgmSetDirectionBrushTool(*args, **keywords): ...
def XgmSetDirectionBrushToolOption(*args, **keywords): ...
def XgmSetFreezeBrushTool(*args, **keywords): ...
def XgmSetFreezeBrushToolOption(*args, **keywords): ...
def XgmSetGrabBrushTool(*args, **keywords): ...
def XgmSetGrabBrushToolOption(*args, **keywords): ...
def XgmSetLengthBrushTool(*args, **keywords): ...
def XgmSetLengthBrushToolOption(*args, **keywords): ...
def XgmSetNoiseBrushTool(*args, **keywords): ...
def XgmSetNoiseBrushToolOption(*args, **keywords): ...
def XgmSetPartBrushTool(*args, **keywords): ...
def XgmSetPartBrushToolOption(*args, **keywords): ...
def XgmSetPlaceBrushTool(*args, **keywords): ...
def XgmSetPlaceBrushToolOption(*args, **keywords): ...
def XgmSetSelectBrushTool(*args, **keywords): ...
def XgmSetSelectBrushToolOption(*args, **keywords): ...
def XgmSetSmoothBrushTool(*args, **keywords): ...
def XgmSetSmoothBrushToolOption(*args, **keywords): ...
def XgmSetWidthBrushTool(*args, **keywords): ...
def XgmSetWidthBrushToolOption(*args, **keywords): ...
def XgmSplineCacheCreate(*args, **keywords): ...
def XgmSplineCacheCreateOptions(*args, **keywords): ...
def XgmSplineCacheDelete(*args, **keywords): ...
def XgmSplineCacheDeleteNodesAhead(*args, **keywords): ...
def XgmSplineCacheDeleteOptions(*args, **keywords): ...
def XgmSplineCacheDisableSelectedCache(*args, **keywords): ...
def XgmSplineCacheEnableSelectedCache(*args, **keywords): ...
def XgmSplineCacheExport(*args, **keywords): ...
def XgmSplineCacheExportOptions(*args, **keywords): ...
def XgmSplineCacheImport(*args, **keywords): ...
def XgmSplineCacheImportOptions(*args, **keywords): ...
def XgmSplineCacheReplace(*args, **keywords): ...
def XgmSplineCacheReplaceOptions(*args, **keywords): ...
def XgmSplineGeometryConvert(*args, **keywords): ...
def XgmSplinePresetExport(*args, **keywords): ...
def XgmSplinePresetImport(*args, **keywords): ...
def XgmSplineSelectConvertToFreeze(*args, **keywords): ...
def XgmSplineSelectReplaceBySelectedFaces(*args, **keywords): ...
def ZeroPivot(*args, **keywords): ...
def ZoomTool(*args, **keywords): ...
def aaf2fcp(*args, deleteFile: bool | int = ..., dstPath: str = ..., getFileName: int = ..., progress: int = ..., srcFile: str = ..., terminate: int = ..., waitCompletion: int = ...) -> Any: ...
def about(*args, apiVersion: bool | int = ..., application: bool | int = ..., arm64: bool | int = ..., batch: bool | int = ..., buildDirectory: bool | int = ..., buildVariant: bool | int = ..., codeset: bool | int = ..., compositingManager: bool | int = ..., connected: bool | int = ..., creativeVersion: bool | int = ..., ctime: bool | int = ..., currentDate: bool | int = ..., currentTime: bool | int = ..., customVersion: bool | int = ..., customVersionClient: bool | int = ..., customVersionMajor: bool | int = ..., customVersionMinor: bool | int = ..., customVersionString: bool | int = ..., cutIdentifier: bool | int = ..., date: bool | int = ..., environmentFile: bool | int = ..., evalVersion: bool | int = ..., file: bool | int = ..., fontInfo: bool | int = ..., helpDataDirectory: bool | int = ..., installedVersion: bool | int = ..., ioVersion: bool | int = ..., irix: bool | int = ..., is64: bool | int = ..., languageResources: bool | int = ..., linux: bool | int = ..., linux64: bool | int = ..., liveUpdate: bool | int = ..., localizedResourceLocation: bool | int = ..., ltVersion: bool | int = ..., macOS: bool | int = ..., macOSASi: bool | int = ..., macOSppc: bool | int = ..., macOSx86: bool | int = ..., majorVersion: bool | int = ..., minorVersion: bool | int = ..., ntOS: bool | int = ..., operatingSystem: bool | int = ..., operatingSystemVersion: bool | int = ..., patchVersion: bool | int = ..., preferences: bool | int = ..., product: bool | int = ..., qtVersion: bool | int = ..., query: bool | int = ..., tablet: bool | int = ..., tabletMode: bool | int = ..., uiLanguage: bool | int = ..., uiLanguageForStartup: bool | int = ..., uiLanguageIsLocalized: bool | int = ..., uiLocaleLanguage: bool | int = ..., version: bool | int = ..., win64: bool | int = ..., windowManager: bool | int = ..., windows: bool | int = ...) -> Any: ...

@overload
def addAttr(*args, edit: Literal[True], category: str | list[str] = ..., defaultValue: float = ..., enumName: str = ..., hasMaxValue: bool | int = ..., hasMinValue: bool | int = ..., maxValue: float = ..., minValue: float = ..., niceName: str = ..., softMaxValue: float = ..., softMinValue: float = ...) -> None: ...

@overload
def addAttr(*args, attributeType: bool | int | str = ..., binaryTag: bool | int | str = ..., cachedInternally: bool | int = ..., category: bool | int | str | list[str] = ..., dataType: bool | int | str | list[str] = ..., defaultValue: bool | int | float = ..., disconnectBehaviour: int = ..., enforcingUniqueName: bool | int = ..., enumName: bool | int | str = ..., exists: bool | int = ..., fromPlugin: bool | int = ..., hasMaxValue: bool | int = ..., hasMinValue: bool | int = ..., hasSoftMaxValue: bool | int = ..., hasSoftMinValue: bool | int = ..., hidden: bool | int = ..., indexMatters: bool | int = ..., internalSet: bool | int = ..., keyable: bool | int = ..., longName: bool | int | str = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., multi: bool | int = ..., niceName: bool | int | str = ..., numberOfChildren: int = ..., parent: bool | int | str = ..., proxy: bool | int | str = ..., query: bool | int = ..., readable: bool | int = ..., shortName: bool | int | str = ..., softMaxValue: bool | int | float = ..., softMinValue: bool | int | float = ..., storable: bool | int = ..., usedAsColor: bool | int = ..., usedAsFilename: bool | int = ..., usedAsProxy: bool | int = ..., worldSpace: bool | int = ..., writable: bool | int = ...) -> Any: ...
def addDynamic(*args) -> Any: ...
def addDynamicAttribute(*args, **keywords): ...

@overload
def addExtension(*args, edit: Literal[True], category: str | list[str] = ..., defaultValue: float = ..., enumName: str = ..., hasMaxValue: bool | int = ..., hasMinValue: bool | int = ..., maxValue: float = ..., minValue: float = ..., niceName: str = ..., nodeType: str = ..., softMaxValue: float = ..., softMinValue: float = ...) -> None: ...

@overload
def addExtension(*args, attributeType: bool | int | str = ..., binaryTag: bool | int | str = ..., cachedInternally: bool | int = ..., category: bool | int | str | list[str] = ..., dataType: bool | int | str | list[str] = ..., defaultValue: bool | int | float = ..., disconnectBehaviour: int = ..., enforcingUniqueName: bool | int = ..., enumName: bool | int | str = ..., exists: bool | int = ..., fromPlugin: bool | int = ..., hasMaxValue: bool | int = ..., hasMinValue: bool | int = ..., hasSoftMaxValue: bool | int = ..., hasSoftMinValue: bool | int = ..., hidden: bool | int = ..., indexMatters: bool | int = ..., internalSet: bool | int = ..., keyable: bool | int = ..., longName: bool | int | str = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., multi: bool | int = ..., niceName: bool | int | str = ..., nodeType: bool | int | str = ..., numberOfChildren: int = ..., parent: bool | int | str = ..., proxy: bool | int | str = ..., query: bool | int = ..., readable: bool | int = ..., shortName: bool | int | str = ..., softMaxValue: bool | int | float = ..., softMinValue: bool | int | float = ..., storable: bool | int = ..., usedAsColor: bool | int = ..., usedAsFilename: bool | int = ..., usedAsProxy: bool | int = ..., worldSpace: bool | int = ..., writable: bool | int = ...) -> Any: ...
def addMetadata(*args, channelName: bool | int | str = ..., channelType: bool | int | str = ..., indexType: bool | int | str = ..., query: bool | int = ..., scene: bool | int = ..., streamName: bool | int | str = ..., structure: bool | int | str = ...) -> Any: ...
def addPP(*args, attribute: str = ...) -> Any: ...
def adpAnalyticsDialog(*args, activeNotification: bool | int = ..., desktopAnalytics: bool | int = ...) -> Any: ...
def adpWaypoint(*args, name: str = ..., property: str | list[str] = ...) -> Any: ...
def adskAsset(*args, assetID: str = ..., library: str = ..., query: bool | int = ..., resolved: bool | int = ...) -> Any: ...
def adskAssetLibrary(*args, unload: bool | int = ..., unloadAll: bool | int = ...) -> Any: ...
def adskAssetList(*args, infoType: str = ...) -> Any: ...
def adskAssetListUI(*args, commandSuffix: str = ..., materialLoaded: bool | int = ..., query: bool | int = ..., uiCommand: str = ...) -> Any: ...
def affectedNet(*args, edit: bool | int = ..., query: bool | int = ..., type: str = ...) -> Any: ...
def affects(*args, by: Any = ..., type: str = ...) -> Any: ...
def agFormatIn(*args, file: str = ..., name: str = ...) -> Any: ...
def agFormatOut(*args, file: str = ...) -> Any: ...

@overload
def aimConstraint(*args, edit: Literal[True], aimVector: tuple[float, float, float] = ..., layer: str = ..., name: str = ..., offset: tuple[float, float, float] = ..., remove: bool | int = ..., skip: str | list[str] = ..., upVector: tuple[float, float, float] = ..., weight: float = ..., worldUpObject: str = ..., worldUpType: str = ..., worldUpVector: tuple[float, float, float] = ...) -> None: ...

@overload
def aimConstraint(*args, aimVector: bool | int | tuple[float, float, float] = ..., layer: str = ..., maintainOffset: bool | int = ..., name: bool | int | str = ..., offset: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., remove: bool | int = ..., skip: str | list[str] = ..., targetList: bool | int = ..., upVector: bool | int | tuple[float, float, float] = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ..., worldUpObject: bool | int | str = ..., worldUpType: bool | int | str = ..., worldUpVector: bool | int | tuple[float, float, float] = ...) -> Any: ...

@overload
def air(*args, edit: Literal[True], attenuation: float = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., enableSpread: bool | int = ..., fanSetup: bool | int = ..., inheritRotation: bool | int = ..., inheritVelocity: float = ..., magnitude: float = ..., maxDistance: float = ..., name: str = ..., perVertex: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., speed: float = ..., spread: float = ..., torusSectionRadius: float = ..., velocityComponentOnly: bool | int = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ..., wakeSetup: bool | int = ..., windSetup: bool | int = ...) -> None: ...

@overload
def air(*args, attenuation: bool | int | float = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., enableSpread: bool | int = ..., fanSetup: bool | int = ..., inheritRotation: bool | int = ..., inheritVelocity: bool | int | float = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., name: bool | int | str = ..., perVertex: bool | int = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., speed: bool | int | float = ..., spread: bool | int | float = ..., torusSectionRadius: bool | int | float = ..., velocityComponentOnly: bool | int = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ..., wakeSetup: bool | int = ..., windSetup: bool | int = ...) -> Any: ...
def aliasAttr(*args, edit: bool | int = ..., query: bool | int = ..., remove: bool | int = ...) -> Any: ...
def align(*args, alignToLead: bool | int = ..., coordinateSystem: str = ..., xAxis: str = ..., yAxis: str = ..., zAxis: str = ...) -> Any: ...

@overload
def alignCtx(*args, edit: Literal[True], align: bool | int = ..., anchorFirstObject: bool | int = ..., distribute: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., showAlignTouch: bool | int = ...) -> None: ...

@overload
def alignCtx(*args, align: bool | int = ..., anchorFirstObject: bool | int = ..., distribute: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., showAlignTouch: bool | int = ...) -> Any: ...

@overload
def alignCurve(*args, edit: Literal[True], caching: bool | int = ..., curvatureContinuity: bool | int = ..., curvatureScale1: float = ..., curvatureScale2: float = ..., joinParameter: float = ..., nodeState: int = ..., positionalContinuity: bool | int = ..., positionalContinuityType: int = ..., reverse1: bool | int = ..., reverse2: bool | int = ..., tangentContinuity: bool | int = ..., tangentContinuityType: int = ..., tangentScale1: float = ..., tangentScale2: float = ...) -> None: ...

@overload
def alignCurve(*args, attach: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., curvatureContinuity: bool | int = ..., curvatureScale1: bool | int | float = ..., curvatureScale2: bool | int | float = ..., frozen: bool | int = ..., joinParameter: bool | int | float = ..., keepMultipleKnots: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., positionalContinuity: bool | int = ..., positionalContinuityType: int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., reverse1: bool | int = ..., reverse2: bool | int = ..., tangentContinuity: bool | int = ..., tangentContinuityType: int = ..., tangentScale1: bool | int | float = ..., tangentScale2: bool | int | float = ...) -> Any: ...

@overload
def alignSurface(*args, edit: Literal[True], caching: bool | int = ..., curvatureContinuity: bool | int = ..., curvatureScale1: float = ..., curvatureScale2: float = ..., directionU: bool | int = ..., joinParameter: float = ..., nodeState: int = ..., positionalContinuity: bool | int = ..., positionalContinuityType: int = ..., reverse1: bool | int = ..., reverse2: bool | int = ..., swap1: bool | int = ..., swap2: bool | int = ..., tangentContinuity: bool | int = ..., tangentContinuityType: int = ..., tangentScale1: float = ..., tangentScale2: float = ..., twist: bool | int = ...) -> None: ...

@overload
def alignSurface(*args, attach: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., curvatureContinuity: bool | int = ..., curvatureScale1: bool | int | float = ..., curvatureScale2: bool | int | float = ..., directionU: bool | int = ..., frozen: bool | int = ..., joinParameter: bool | int | float = ..., keepMultipleKnots: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., positionalContinuity: bool | int = ..., positionalContinuityType: int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., reverse1: bool | int = ..., reverse2: bool | int = ..., swap1: bool | int = ..., swap2: bool | int = ..., tangentContinuity: bool | int = ..., tangentContinuityType: int = ..., tangentScale1: bool | int | float = ..., tangentScale2: bool | int | float = ..., twist: bool | int = ...) -> Any: ...
def allNodeTypes(*args, includeAbstract: bool | int = ...) -> Any: ...

@overload
def ambientLight(*args, edit: Literal[True], ambientShade: float = ..., discRadius: float = ..., shadowDither: float = ..., shadowSamples: int = ..., softShadow: bool | int = ...) -> None: ...

@overload
def ambientLight(*args, ambientShade: bool | int | float = ..., discRadius: bool | int | float = ..., exclusive: bool | int = ..., intensity: bool | int | float = ..., name: bool | int | str = ..., position: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., rgb: bool | int | tuple[float, float, float] = ..., rotation: bool | int | tuple[float, float, float] = ..., shadowColor: bool | int | tuple[float, float, float] = ..., shadowDither: bool | int | float = ..., shadowSamples: int = ..., softShadow: bool | int = ..., useRayTraceShadows: bool | int = ...) -> Any: ...
def angleBetween(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., euler: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., vector1: tuple[float, float, float] = ..., vector1X: float = ..., vector1Y: float = ..., vector1Z: float = ..., vector2: tuple[float, float, float] = ..., vector2X: float = ..., vector2Y: float = ..., vector2Z: float = ...) -> Any: ...

@overload
def animCurveEditor(*args, edit: Literal[True], autoFit: str = ..., autoFitTime: str = ..., classicMode: bool | int = ..., clipTime: str = ..., constrainDrag: int = ..., denormalizeCurvesCommand: str = ..., displayActiveKeyTangents: str = ..., displayActiveKeys: str = ..., displayInfinities: str = ..., displayKeys: str = ..., displayNormalized: bool | int = ..., displayTangents: str = ..., displayValues: str = ..., docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightAffectedCurves: bool | int = ..., highlightConnection: str = ..., keyMinScale: float = ..., keyScale: float = ..., limitToSelectedCurves: bool | int = ..., lockMainConnection: bool | int = ..., lockPlayRangeShades: str = ..., lookAt: str = ..., mainListConnection: str = ..., normalizeCurvesCommand: str = ..., outliner: str = ..., parent: str = ..., preSelectionHighlight: bool | int = ..., renormalizeCurves: bool | int = ..., resultSamples: int | float = ..., resultScreenSamples: int = ..., resultUpdate: str = ..., selectionConnection: str = ..., showActiveCurveNames: bool | int = ..., showBufferCurves: str = ..., showCurveNames: bool | int = ..., showPlayRangeShades: str = ..., showResults: str = ..., showUpstreamCurves: bool | int = ..., simpleKeyView: bool | int = ..., smoothness: str = ..., snapTime: str = ..., snapValue: str = ..., stackedCurves: bool | int = ..., stackedCurvesMax: float = ..., stackedCurvesMin: float = ..., stackedCurvesSpace: float = ..., timelinePositionTop: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., valueLinesToggle: str = ...) -> None: ...

@overload
def animCurveEditor(*args, areCurvesSelected: bool | int = ..., autoFit: bool | int | str = ..., autoFitTime: bool | int | str = ..., classicMode: bool | int = ..., clipTime: bool | int | str = ..., constrainDrag: int = ..., control: bool | int = ..., curvesShown: bool | int = ..., curvesShownForceUpdate: bool | int = ..., defineTemplate: str = ..., denormalizeCurvesCommand: str = ..., displayActiveKeyTangents: str = ..., displayActiveKeys: str = ..., displayInfinities: str = ..., displayKeys: str = ..., displayNormalized: bool | int = ..., displayTangents: str = ..., displayValues: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightAffectedCurves: bool | int = ..., highlightConnection: bool | int | str = ..., keyMinScale: bool | int | float = ..., keyScale: bool | int | float = ..., keyingTime: bool | int | str = ..., limitToSelectedCurves: bool | int = ..., lockMainConnection: bool | int = ..., lockPlayRangeShades: bool | int | str = ..., lookAt: str = ..., mainListConnection: bool | int | str = ..., menu: str | Callable = ..., normalizeCurvesCommand: str = ..., outliner: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., preSelectionHighlight: bool | int = ..., query: bool | int = ..., renormalizeCurves: bool | int = ..., resultSamples: bool | int | int | float = ..., resultScreenSamples: int = ..., resultUpdate: bool | int | str = ..., selectionConnection: bool | int | str = ..., showActiveCurveNames: bool | int = ..., showBufferCurves: bool | int | str = ..., showCurveNames: bool | int = ..., showPlayRangeShades: bool | int | str = ..., showResults: bool | int | str = ..., showUpstreamCurves: bool | int = ..., simpleKeyView: bool | int = ..., smoothness: bool | int | str = ..., snapTime: bool | int | str = ..., snapValue: bool | int | str = ..., stackedCurves: bool | int = ..., stackedCurvesMax: bool | int | float = ..., stackedCurvesMin: bool | int | float = ..., stackedCurvesSpace: bool | int | float = ..., stateString: bool | int = ..., timelinePositionTop: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., valueLinesToggle: str = ..., viewLeft: float = ..., viewRight: float = ...) -> Any: ...

@overload
def animDisplay(*args, edit: Literal[True], modelUpdate: str = ..., refAnimCurvesEditable: bool | int = ..., timeCode: str = ..., timeCodeOffset: str = ...) -> None: ...

@overload
def animDisplay(*args, modelUpdate: bool | int | str = ..., query: bool | int = ..., refAnimCurvesEditable: bool | int = ..., timeCode: bool | int | str = ..., timeCodeOffset: bool | int | str = ...) -> Any: ...

@overload
def animLayer(*args, edit: Literal[True], addRelatedKG: bool | int = ..., addSelectedObjects: bool | int = ..., animCurves: bool | int = ..., attribute: str | list[str] = ..., baseAnimCurves: bool | int = ..., bestAnimLayer: bool | int = ..., blendNodes: bool | int = ..., collapse: bool | int = ..., copy: str = ..., copyAnimation: str = ..., copyNoAnimation: str = ..., excludeBoolean: bool | int = ..., excludeDynamic: bool | int = ..., excludeEnum: bool | int = ..., excludeProxy: bool | int = ..., excludeRotate: bool | int = ..., excludeScale: bool | int = ..., excludeTranslate: bool | int = ..., excludeVisibility: bool | int = ..., extractAnimation: str = ..., findCurveForPlug: str = ..., lock: bool | int = ..., moveLayerAfter: str = ..., moveLayerBefore: str = ..., mute: bool | int = ..., override: bool | int = ..., parent: str = ..., passthrough: bool | int = ..., preferred: bool | int = ..., removeAllAttributes: bool | int = ..., removeAttribute: str | list[str] = ..., removeSelectedObjects: bool | int = ..., selected: bool | int = ..., solo: bool | int = ..., weight: float = ..., writeBlendnodeDestinations: bool | int = ...) -> None: ...

@overload
def animLayer(*args, addRelatedKG: bool | int = ..., addSelectedObjects: bool | int = ..., affectedLayers: bool | int = ..., animCurves: bool | int = ..., attribute: bool | int | str | list[str] = ..., baseAnimCurves: bool | int = ..., bestAnimLayer: bool | int = ..., bestLayer: bool | int = ..., blendNodes: bool | int = ..., children: bool | int | str = ..., collapse: bool | int = ..., copy: str = ..., copyAnimation: str = ..., copyNoAnimation: str = ..., excludeBoolean: bool | int = ..., excludeDynamic: bool | int = ..., excludeEnum: bool | int = ..., excludeProxy: bool | int = ..., excludeRotate: bool | int = ..., excludeScale: bool | int = ..., excludeTranslate: bool | int = ..., excludeVisibility: bool | int = ..., exists: bool | int = ..., extractAnimation: str = ..., findCurveForPlug: bool | int | str = ..., forceUIRebuild: bool | int = ..., forceUIRefresh: bool | int = ..., layeredPlug: bool | int | str = ..., lock: bool | int = ..., maxLayers: bool | int = ..., moveLayerAfter: str = ..., moveLayerBefore: str = ..., mute: bool | int = ..., override: bool | int = ..., parent: bool | int | str = ..., passthrough: bool | int = ..., preferred: bool | int = ..., query: bool | int = ..., removeAllAttributes: bool | int = ..., removeAttribute: str | list[str] = ..., removeSelectedObjects: bool | int = ..., root: bool | int | str = ..., selected: bool | int = ..., solo: bool | int = ..., weight: bool | int | float = ..., writeBlendnodeDestinations: bool | int = ...) -> Any: ...

@overload
def animView(*args, edit: Literal[True], nextView: bool | int = ..., previousView: bool | int = ...) -> None: ...

@overload
def animView(*args, endTime: int | float = ..., maxValue: float = ..., minValue: float = ..., nextView: bool | int = ..., previousView: bool | int = ..., query: bool | int = ..., startTime: int | float = ...) -> Any: ...
def annotate(*args, point: tuple[float, float, float] = ..., text: str = ...) -> Any: ...

@overload
def appHome(*args, edit: Literal[True], iconVisible: bool | int = ..., setTab: str = ..., toggleVisibility: bool | int = ..., updateRecentFiles: bool | int = ..., visible: bool | int = ...) -> None: ...

@overload
def appHome(*args, iconVisible: bool | int = ..., instrument: str = ..., query: bool | int = ..., setTab: str = ..., toggleVisibility: bool | int = ..., updateRecentFiles: bool | int = ..., visible: bool | int = ...) -> Any: ...
def appendListItem(*args, **keywords): ...
def applyAttrPattern(*args, nodeType: str = ..., patternName: str = ...) -> Any: ...
def applyMetadata(*args, format: str = ..., scene: bool | int = ..., value: str = ...) -> Any: ...
def applyTake(*args, channel: str | list[str] = ..., device: str | list[str] = ..., filter: str | list[str] = ..., preview: bool | int = ..., recurseChannel: bool | int = ..., reset: bool | int = ..., specifyChannel: bool | int = ..., startTime: int | float = ...) -> Any: ...

@overload
def arcLenDimContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def arcLenDimContext(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def arcLengthDimension(*args) -> Any: ...

@overload
def arclen(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def arclen(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ...) -> Any: ...
def arrayMapper(*args, destAttr: str = ..., inputU: str = ..., inputV: str = ..., mapTo: str = ..., target: str | list[str] = ..., type: str = ...) -> Any: ...

@overload
def art3dPaintCtx(*args, edit: Literal[True], accopacity: bool | int = ..., afterStrokeCmd: str = ..., alphablendmode: str = ..., assigntxt: bool | int = ..., attrnames: str = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushdepth: float = ..., brushfeedback: bool | int = ..., brushtype: str = ..., clear: bool | int = ..., dragSlider: str = ..., dynclonemode: bool | int = ..., expandfilename: bool | int = ..., extendFillColor: bool | int = ..., fileformat: str = ..., filetxtaspectratio: float = ..., filetxtsizex: int = ..., filetxtsizey: int = ..., floodOpacity: float = ..., floodall: bool | int = ..., floodselect: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., keepaspectratio: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintmode: str = ..., paintoperationtype: str = ..., painttxtattr: str = ..., painttxtattrname: str = ..., pfxScale: float = ..., pfxWidth: float = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., pressureMapping1: int = ..., pressureMapping2: int = ..., pressureMapping3: int = ..., pressureMax1: float = ..., pressureMax2: float = ..., pressureMax3: float = ..., pressureMin1: float = ..., pressureMin2: float = ..., pressureMin3: float = ..., profileShapeFile: str = ..., projective: bool | int = ..., radius: float = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., reloadtexfile: bool | int = ..., resizeratio: float = ..., resizetxt: bool | int = ..., rgbcolor: tuple[float, float, float] = ..., rgbflood: tuple[float, float, float] = ..., saveTextureOnStroke: bool | int = ..., saveonstroke: bool | int = ..., savetexture: bool | int = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., shapeattr: bool | int = ..., showactive: bool | int = ..., soloAsDiffuse: bool | int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., updateEraseTex: bool | int = ..., usepressure: bool | int = ..., worldRadius: float = ...) -> None: ...

@overload
def art3dPaintCtx(*args, accopacity: bool | int = ..., afterStrokeCmd: bool | int | str = ..., alphablendmode: bool | int | str = ..., alwaysKeepFile: bool | int = ..., assigntxt: bool | int = ..., attrnames: bool | int | str = ..., beforeStrokeCmd: bool | int | str = ..., brushalignment: bool | int = ..., brushdepth: bool | int | float = ..., brushfeedback: bool | int = ..., brushtype: bool | int | str = ..., clear: bool | int = ..., commonattr: bool | int | str = ..., dragSlider: str = ..., dynclonemode: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., extendFillColor: bool | int = ..., fileformat: bool | int | str = ..., filetxtaspectratio: bool | int | float = ..., filetxtsizex: int = ..., filetxtsizey: int = ..., floodOpacity: bool | int | float = ..., floodall: bool | int = ..., floodselect: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., keepaspectratio: bool | int = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., name: str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., painttxtattr: bool | int | str = ..., painttxtattrname: bool | int | str = ..., pfxScale: bool | int | float = ..., pfxWidth: bool | int | float = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., preserveclonesource: bool | int = ..., pressureMapping1: int = ..., pressureMapping2: int = ..., pressureMapping3: int = ..., pressureMax1: bool | int | float = ..., pressureMax2: bool | int | float = ..., pressureMax3: bool | int | float = ..., pressureMin1: bool | int | float = ..., pressureMin2: bool | int | float = ..., pressureMin3: bool | int | float = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., reloadtexfile: bool | int = ..., resizeratio: bool | int | float = ..., resizetxt: bool | int = ..., rgbcolor: bool | int | tuple[float, float, float] = ..., rgbflood: bool | int | tuple[float, float, float] = ..., saveTextureOnStroke: bool | int = ..., saveonstroke: bool | int = ..., savetexture: bool | int = ..., screenRadius: bool | int | float = ..., selectclonesource: bool | int = ..., shadernames: bool | int | str = ..., shapeattr: bool | int = ..., shapenames: bool | int | str = ..., showactive: bool | int = ..., soloAsDiffuse: bool | int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., textureFilenames: bool | int = ..., updateEraseTex: bool | int = ..., usepressure: bool | int = ..., worldRadius: bool | int | float = ...) -> Any: ...
def artAttr(*args) -> Any: ...

@overload
def artAttrCtx(*args, edit: Literal[True], accopacity: bool | int = ..., activeListChangedProc: str = ..., afterStrokeCmd: str = ..., alphaclamp: str = ..., alphaclamplower: float = ..., alphaclampupper: float = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: str = ..., clamplower: float = ..., clampupper: float = ..., clear: bool | int = ..., colorAlphaValue: float = ..., colorRGBAValue: tuple[float, float, float, float] = ..., colorRGBValue: tuple[float, float, float] = ..., colorRamp: str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: float = ..., colorrangeupper: float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: str = ..., dynclonemode: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., filterNodes: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., maxvalue: float = ..., minvalue: float = ..., numericColorRamp: str = ..., numericDisplayColor: tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: tuple[float, float, float] = ..., numericMinColor: tuple[float, float, float] = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintattrselected: str = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., radius: float = ..., rampMaxColor: tuple[float, float, float] = ..., rampMinColor: tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., selectedattroper: str = ..., showactive: bool | int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: str = ..., toolOnProc: str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: float = ..., whichTool: str = ..., worldRadius: float = ...) -> None: ...

@overload
def artAttrCtx(*args, accopacity: bool | int = ..., activeListChangedProc: bool | int | str = ..., afterStrokeCmd: bool | int | str = ..., alphaclamp: bool | int | str = ..., alphaclamplower: bool | int | float = ..., alphaclampupper: bool | int | float = ..., attrSelected: bool | int | str = ..., beforeStrokeCmd: bool | int | str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: bool | int | str = ..., clamplower: bool | int | float = ..., clampupper: bool | int | float = ..., clear: bool | int = ..., colorAlphaValue: bool | int | float = ..., colorRGBAValue: bool | int | tuple[float, float, float, float] = ..., colorRGBValue: bool | int | tuple[float, float, float] = ..., colorRamp: bool | int | str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: bool | int | float = ..., colorrangeupper: bool | int | float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: bool | int | str = ..., dynclonemode: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: bool | int | float = ..., exportfilemode: bool | int | str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: bool | int | str = ..., filterNodes: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: bool | int | str = ..., importreassign: bool | int = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., maxvalue: bool | int | float = ..., minvalue: bool | int | float = ..., name: str = ..., numericColorRamp: bool | int | str = ..., numericDisplayColor: bool | int | tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: bool | int | tuple[float, float, float] = ..., numericMinColor: bool | int | tuple[float, float, float] = ..., objattrArray: bool | int | str = ..., objattrArrayNoMenu: bool | int | str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintNodeArray: bool | int | str = ..., paintattrselected: str = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., rampMaxColor: bool | int | tuple[float, float, float] = ..., rampMinColor: bool | int | tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., screenRadius: bool | int | float = ..., selectclonesource: bool | int = ..., selectedattroper: bool | int | str = ..., showactive: bool | int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: bool | int | str = ..., toolOnProc: bool | int | str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: bool | int | float = ..., whichTool: bool | int | str = ..., worldRadius: bool | int | float = ...) -> Any: ...

@overload
def artAttrPaintVertexCtx(*args, edit: Literal[True], accopacity: bool | int = ..., activeListChangedProc: str = ..., afterStrokeCmd: str = ..., alphaclamp: str = ..., alphaclamplower: float = ..., alphaclampupper: float = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: str = ..., clamplower: float = ..., clampupper: float = ..., clear: bool | int = ..., colorAlphaValue: float = ..., colorRGBAValue: tuple[float, float, float, float] = ..., colorRGBValue: tuple[float, float, float] = ..., colorRamp: str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: float = ..., colorrangeupper: float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: str = ..., dynclonemode: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., filterNodes: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., maxvalue: float = ..., minvalue: float = ..., numericColorRamp: str = ..., numericDisplayColor: tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: tuple[float, float, float] = ..., numericMinColor: tuple[float, float, float] = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintChannel: str = ..., paintComponent: int = ..., paintNumChannels: int = ..., paintRGBA: bool | int = ..., paintVertexFace: bool | int = ..., paintattrselected: str = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., radius: float = ..., rampMaxColor: tuple[float, float, float] = ..., rampMinColor: tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., selectedattroper: str = ..., showactive: bool | int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: str = ..., toolOnProc: str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: float = ..., vertexColorRange: bool | int = ..., vertexColorRangeLower: float = ..., vertexColorRangeUpper: float = ..., whichTool: str = ..., worldRadius: float = ...) -> None: ...

@overload
def artAttrPaintVertexCtx(*args, accopacity: bool | int = ..., activeListChangedProc: bool | int | str = ..., afterStrokeCmd: bool | int | str = ..., alphaclamp: bool | int | str = ..., alphaclamplower: bool | int | float = ..., alphaclampupper: bool | int | float = ..., attrSelected: bool | int | str = ..., beforeStrokeCmd: bool | int | str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: bool | int | str = ..., clamplower: bool | int | float = ..., clampupper: bool | int | float = ..., clear: bool | int = ..., colorAlphaValue: bool | int | float = ..., colorRGBAValue: bool | int | tuple[float, float, float, float] = ..., colorRGBValue: bool | int | tuple[float, float, float] = ..., colorRamp: bool | int | str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: bool | int | float = ..., colorrangeupper: bool | int | float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: bool | int | str = ..., dynclonemode: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: bool | int | float = ..., exportfilemode: bool | int | str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: bool | int | str = ..., filterNodes: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: bool | int | str = ..., importreassign: bool | int = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., maxvalue: bool | int | float = ..., minvalue: bool | int | float = ..., name: str = ..., numericColorRamp: bool | int | str = ..., numericDisplayColor: bool | int | tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: bool | int | tuple[float, float, float] = ..., numericMinColor: bool | int | tuple[float, float, float] = ..., objattrArray: bool | int | str = ..., objattrArrayNoMenu: bool | int | str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintChannel: bool | int | str = ..., paintComponent: int = ..., paintNodeArray: bool | int | str = ..., paintNumChannels: int = ..., paintRGBA: bool | int = ..., paintVertexFace: bool | int = ..., paintattrselected: str = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., rampMaxColor: bool | int | tuple[float, float, float] = ..., rampMinColor: bool | int | tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., screenRadius: bool | int | float = ..., selectclonesource: bool | int = ..., selectedattroper: bool | int | str = ..., showactive: bool | int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: bool | int | str = ..., toolOnProc: bool | int | str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: bool | int | float = ..., vertexColorRange: bool | int = ..., vertexColorRangeLower: bool | int | float = ..., vertexColorRangeUpper: bool | int | float = ..., whichTool: bool | int | str = ..., worldRadius: bool | int | float = ...) -> Any: ...
def artAttrSkinPaintCmd(*args) -> Any: ...

@overload
def artAttrSkinPaintCtx(*args, edit: Literal[True], accopacity: bool | int = ..., activeListChangedProc: str = ..., afterStrokeCmd: str = ..., alphaclamp: str = ..., alphaclamplower: float = ..., alphaclampupper: float = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: str = ..., clamplower: float = ..., clampupper: float = ..., clear: bool | int = ..., colorAlphaValue: float = ..., colorRGBAValue: tuple[float, float, float, float] = ..., colorRGBValue: tuple[float, float, float] = ..., colorRamp: str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: float = ..., colorrangeupper: float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: str = ..., dynclonemode: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., filterNodes: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., influence: str = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., maxvalue: float = ..., minvalue: float = ..., numericColorRamp: str = ..., numericDisplayColor: tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: tuple[float, float, float] = ..., numericMinColor: tuple[float, float, float] = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintSelectMode: int = ..., paintattrselected: str = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., radius: float = ..., rampMaxColor: tuple[float, float, float] = ..., rampMinColor: tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., selectedattroper: str = ..., showactive: bool | int = ..., skinPaintMode: int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: str = ..., toolOnProc: str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: float = ..., whichTool: str = ..., worldRadius: float = ..., xrayJoints: bool | int = ...) -> None: ...

@overload
def artAttrSkinPaintCtx(*args, accopacity: bool | int = ..., activeListChangedProc: bool | int | str = ..., afterStrokeCmd: bool | int | str = ..., alphaclamp: bool | int | str = ..., alphaclamplower: bool | int | float = ..., alphaclampupper: bool | int | float = ..., attrSelected: bool | int | str = ..., beforeStrokeCmd: bool | int | str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: bool | int | str = ..., clamplower: bool | int | float = ..., clampupper: bool | int | float = ..., clear: bool | int = ..., colorAlphaValue: bool | int | float = ..., colorRGBAValue: bool | int | tuple[float, float, float, float] = ..., colorRGBValue: bool | int | tuple[float, float, float] = ..., colorRamp: bool | int | str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: bool | int | float = ..., colorrangeupper: bool | int | float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: bool | int | str = ..., dynclonemode: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: bool | int | float = ..., exportfilemode: bool | int | str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: bool | int | str = ..., filterNodes: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: bool | int | str = ..., importreassign: bool | int = ..., influence: bool | int | str = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., maxvalue: bool | int | float = ..., minvalue: bool | int | float = ..., name: str = ..., numericColorRamp: bool | int | str = ..., numericDisplayColor: bool | int | tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: bool | int | tuple[float, float, float] = ..., numericMinColor: bool | int | tuple[float, float, float] = ..., objattrArray: bool | int | str = ..., objattrArrayNoMenu: bool | int | str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintNodeArray: bool | int | str = ..., paintSelectMode: int = ..., paintattrselected: str = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., rampMaxColor: bool | int | tuple[float, float, float] = ..., rampMinColor: bool | int | tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., screenRadius: bool | int | float = ..., selectclonesource: bool | int = ..., selectedattroper: bool | int | str = ..., showactive: bool | int = ..., skinPaintMode: int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: bool | int | str = ..., toolOnProc: bool | int | str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: bool | int | float = ..., whichTool: bool | int | str = ..., worldRadius: bool | int | float = ..., xrayJoints: bool | int = ...) -> Any: ...
def artAttrTool(*args, add: Any = ..., exists: bool | int | str = ..., query: bool | int = ..., remove: str = ...) -> Any: ...
def artBaseCtx(*args, accopacity: bool | int = ..., afterStrokeCmd: str = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clear: bool | int = ..., dragSlider: str = ..., dynclonemode: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., name: str = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., query: bool | int = ..., radius: float = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., showactive: bool | int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., usepressure: bool | int = ..., worldRadius: float = ...) -> Any: ...
def artBuildPaintMenu(*args) -> Any: ...
def artFluidAttr(*args) -> Any: ...

@overload
def artFluidAttrCtx(*args, edit: Literal[True], accopacity: bool | int = ..., activeListChangedProc: str = ..., afterStrokeCmd: str = ..., alphaclamp: str = ..., alphaclamplower: float = ..., alphaclampupper: float = ..., autoSave: str = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: str = ..., clamplower: float = ..., clampupper: float = ..., clear: bool | int = ..., colorAlphaValue: float = ..., colorRGBAValue: tuple[float, float, float, float] = ..., colorRGBValue: tuple[float, float, float] = ..., colorRamp: str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: float = ..., colorrangeupper: float = ..., dataTypeIndex: int = ..., delaySelectionChanged: bool | int = ..., disablelighting: bool | int = ..., displayAsRender: bool | int = ..., displayVelocity: bool | int = ..., doAutoSave: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: str = ..., dynclonemode: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., filterNodes: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., maxvalue: float = ..., minvalue: float = ..., numericColorRamp: str = ..., numericDisplayColor: tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: tuple[float, float, float] = ..., numericMinColor: tuple[float, float, float] = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintattrselected: str = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., property: str = ..., radius: float = ..., rampMaxColor: tuple[float, float, float] = ..., rampMinColor: tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., rgbValue: tuple[float, float, float] = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., selectedattroper: str = ..., showactive: bool | int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: str = ..., toolOnProc: str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., useStrokeDirection: bool | int = ..., usepressure: bool | int = ..., value: float = ..., velocity: tuple[float, float, float] = ..., whichTool: str = ..., worldRadius: float = ...) -> None: ...

@overload
def artFluidAttrCtx(*args, accopacity: bool | int = ..., activeListChangedProc: bool | int | str = ..., afterStrokeCmd: bool | int | str = ..., alphaclamp: bool | int | str = ..., alphaclamplower: bool | int | float = ..., alphaclampupper: bool | int | float = ..., attrSelected: bool | int | str = ..., autoSave: bool | int | str = ..., beforeStrokeCmd: bool | int | str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: bool | int | str = ..., clamplower: bool | int | float = ..., clampupper: bool | int | float = ..., clear: bool | int = ..., colorAlphaValue: bool | int | float = ..., colorRGBAValue: bool | int | tuple[float, float, float, float] = ..., colorRGBValue: bool | int | tuple[float, float, float] = ..., colorRamp: bool | int | str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: bool | int | float = ..., colorrangeupper: bool | int | float = ..., currentPaintableFluid: bool | int | str = ..., dataTypeIndex: int = ..., delaySelectionChanged: bool | int = ..., disablelighting: bool | int = ..., displayAsRender: bool | int = ..., displayVelocity: bool | int = ..., doAutoSave: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: bool | int | str = ..., dynclonemode: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: bool | int | float = ..., exportfilemode: bool | int | str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: bool | int | str = ..., filterNodes: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: bool | int | str = ..., importreassign: bool | int = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., maxvalue: bool | int | float = ..., minvalue: bool | int | float = ..., name: str = ..., numericColorRamp: bool | int | str = ..., numericDisplayColor: bool | int | tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: bool | int | tuple[float, float, float] = ..., numericMinColor: bool | int | tuple[float, float, float] = ..., objattrArray: bool | int | str = ..., objattrArrayNoMenu: bool | int | str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintNodeArray: bool | int | str = ..., paintattrselected: str = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., property: bool | int | str = ..., query: bool | int = ..., radius: bool | int | float = ..., rampMaxColor: bool | int | tuple[float, float, float] = ..., rampMinColor: bool | int | tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., rgbValue: bool | int | tuple[float, float, float] = ..., screenRadius: bool | int | float = ..., selectclonesource: bool | int = ..., selectedattroper: bool | int | str = ..., showactive: bool | int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: bool | int | str = ..., toolOnProc: bool | int | str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., useStrokeDirection: bool | int = ..., usepressure: bool | int = ..., value: bool | int | float = ..., velocity: bool | int | tuple[float, float, float] = ..., whichTool: bool | int | str = ..., worldRadius: bool | int | float = ...) -> Any: ...

@overload
def artPuttyCtx(*args, edit: Literal[True], accopacity: bool | int = ..., activeListChangedProc: str = ..., afterStrokeCmd: str = ..., alphaclamp: str = ..., alphaclamplower: float = ..., alphaclampupper: float = ..., autosmooth: bool | int = ..., beforeStrokeCmd: str = ..., brushStrength: float = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: str = ..., clamplower: float = ..., clampupper: float = ..., clear: bool | int = ..., collapsecvtol: float = ..., colorAlphaValue: float = ..., colorRGBAValue: tuple[float, float, float, float] = ..., colorRGBValue: tuple[float, float, float] = ..., colorRamp: str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: float = ..., colorrangeupper: float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dispdecr: bool | int = ..., dispincr: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: str = ..., dynclonemode: bool | int = ..., erasesrfupd: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., filterNodes: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., interactiveUpdate: bool | int = ..., invertrefvector: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., maxdisp: float = ..., maxvalue: float = ..., minvalue: float = ..., mouldtypehead: str = ..., mouldtypemouse: str = ..., mouldtypetail: str = ..., numericColorRamp: str = ..., numericDisplayColor: tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: tuple[float, float, float] = ..., numericMinColor: tuple[float, float, float] = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintattrselected: str = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., polecv: bool | int = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., radius: float = ..., rampMaxColor: tuple[float, float, float] = ..., rampMinColor: tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., refsurface: bool | int = ..., refvector: str = ..., refvectoru: float = ..., refvectorv: float = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., selectedattroper: str = ..., showactive: bool | int = ..., smoothiters: int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., stitchcorner: bool | int = ..., stitchedgeflood: bool | int = ..., stitchtype: str = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: str = ..., toolOnProc: str = ..., updateerasesrf: bool | int = ..., updaterefsrf: bool | int = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: float = ..., whichTool: str = ..., worldRadius: float = ...) -> None: ...

@overload
def artPuttyCtx(*args, accopacity: bool | int = ..., activeListChangedProc: bool | int | str = ..., afterStrokeCmd: bool | int | str = ..., alphaclamp: bool | int | str = ..., alphaclamplower: bool | int | float = ..., alphaclampupper: bool | int | float = ..., attrSelected: bool | int | str = ..., autosmooth: bool | int = ..., beforeStrokeCmd: bool | int | str = ..., brushStrength: bool | int | float = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clamp: bool | int | str = ..., clamplower: bool | int | float = ..., clampupper: bool | int | float = ..., clear: bool | int = ..., collapsecvtol: bool | int | float = ..., colorAlphaValue: bool | int | float = ..., colorRGBAValue: bool | int | tuple[float, float, float, float] = ..., colorRGBValue: bool | int | tuple[float, float, float] = ..., colorRamp: bool | int | str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: bool | int | float = ..., colorrangeupper: bool | int | float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dispdecr: bool | int = ..., dispincr: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: bool | int | str = ..., dynclonemode: bool | int = ..., erasesrfupd: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: bool | int | float = ..., exportfilemode: bool | int | str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: bool | int | str = ..., filterNodes: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: bool | int | str = ..., importreassign: bool | int = ..., interactiveUpdate: bool | int = ..., invertrefvector: bool | int = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., maxdisp: bool | int | float = ..., maxvalue: bool | int | float = ..., minvalue: bool | int | float = ..., mouldtypehead: bool | int | str = ..., mouldtypemouse: bool | int | str = ..., mouldtypetail: bool | int | str = ..., name: str = ..., numericColorRamp: bool | int | str = ..., numericDisplayColor: bool | int | tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: bool | int | tuple[float, float, float] = ..., numericMinColor: bool | int | tuple[float, float, float] = ..., objattrArray: bool | int | str = ..., objattrArrayNoMenu: bool | int | str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintNodeArray: bool | int | str = ..., paintattrselected: str = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., polecv: bool | int = ..., preserveclonesource: bool | int = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., rampMaxColor: bool | int | tuple[float, float, float] = ..., rampMinColor: bool | int | tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., refsurface: bool | int = ..., refvector: bool | int | str = ..., refvectoru: bool | int | float = ..., refvectorv: bool | int | float = ..., screenRadius: bool | int | float = ..., selectclonesource: bool | int = ..., selectedattroper: bool | int | str = ..., showactive: bool | int = ..., smoothiters: int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., stitchcorner: bool | int = ..., stitchedgeflood: bool | int = ..., stitchtype: bool | int | str = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., toolOffProc: bool | int | str = ..., toolOnProc: bool | int | str = ..., updateerasesrf: bool | int = ..., updaterefsrf: bool | int = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: bool | int | float = ..., whichTool: bool | int | str = ..., worldRadius: bool | int | float = ...) -> Any: ...
def artSelect(*args) -> Any: ...

@overload
def artSelectCtx(*args, edit: Literal[True], accopacity: bool | int = ..., addselection: bool | int = ..., afterStrokeCmd: str = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clear: bool | int = ..., dragSlider: str = ..., dynclonemode: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., importthreshold: float = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., radius: float = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., screenRadius: float = ..., selectall: bool | int = ..., selectclonesource: bool | int = ..., selectop: str = ..., showactive: bool | int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., toggleall: bool | int = ..., unselectall: bool | int = ..., usepressure: bool | int = ..., worldRadius: float = ...) -> None: ...

@overload
def artSelectCtx(*args, accopacity: bool | int = ..., addselection: bool | int = ..., afterStrokeCmd: bool | int | str = ..., beforeStrokeCmd: bool | int | str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clear: bool | int = ..., dragSlider: str = ..., dynclonemode: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: bool | int | float = ..., exportfilemode: bool | int | str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: bool | int | str = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: bool | int | str = ..., importreassign: bool | int = ..., importthreshold: bool | int | float = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., name: str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., screenRadius: bool | int | float = ..., selectall: bool | int = ..., selectclonesource: bool | int = ..., selectop: bool | int | str = ..., showactive: bool | int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., toggleall: bool | int = ..., unselectall: bool | int = ..., usepressure: bool | int = ..., worldRadius: bool | int | float = ...) -> Any: ...
def artSetPaint(*args) -> Any: ...

@overload
def artSetPaintCtx(*args, edit: Literal[True], accopacity: bool | int = ..., afterStrokeCmd: str = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clear: bool | int = ..., dragSlider: str = ..., dynclonemode: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., objectsetnames: str = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., radius: float = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., setcolorfeedback: bool | int = ..., setdisplaycvs: bool | int = ..., setopertype: str = ..., settomodify: str = ..., showactive: bool | int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., usepressure: bool | int = ..., worldRadius: float = ...) -> None: ...

@overload
def artSetPaintCtx(*args, accopacity: bool | int = ..., afterStrokeCmd: bool | int | str = ..., beforeStrokeCmd: bool | int | str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., clear: bool | int = ..., dragSlider: str = ..., dynclonemode: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: bool | int | float = ..., exportfilemode: bool | int | str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: bool | int | str = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: bool | int | str = ..., importreassign: bool | int = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., name: str = ..., objectsetnames: bool | int | str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., screenRadius: bool | int | float = ..., selectclonesource: bool | int = ..., setcolorfeedback: bool | int = ..., setdisplaycvs: bool | int = ..., setopertype: bool | int | str = ..., settomodify: bool | int | str = ..., showactive: bool | int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., usepressure: bool | int = ..., worldRadius: bool | int | float = ...) -> Any: ...

@overload
def artUserPaintCtx(*args, edit: Literal[True], accopacity: bool | int = ..., activeListChangedProc: str = ..., afterStrokeCmd: str = ..., alphaclamp: str = ..., alphaclamplower: float = ..., alphaclampupper: float = ..., beforeStrokeCmd: str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., chunkCommand: str = ..., clamp: str = ..., clamplower: float = ..., clampupper: float = ..., clear: bool | int = ..., colorAlphaValue: float = ..., colorRGBAValue: tuple[float, float, float, float] = ..., colorRGBValue: tuple[float, float, float] = ..., colorRamp: str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: float = ..., colorrangeupper: float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: str = ..., dynclonemode: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: float = ..., exportfilemode: str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: str = ..., filterNodes: bool | int = ..., finalizeCmd: str = ..., fullpaths: bool | int = ..., getArrayAttrCommand: str = ..., getSurfaceCommand: str = ..., getValueCommand: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., importfileload: str = ..., importfilemode: str = ..., importreassign: bool | int = ..., initializeCmd: str = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: str = ..., lastStampName: str = ..., lowerradius: float = ..., makeStroke: int | list[int] = ..., mappressure: str = ..., maxvalue: float = ..., minvalue: float = ..., numericColorRamp: str = ..., numericDisplayColor: tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: tuple[float, float, float] = ..., numericMinColor: tuple[float, float, float] = ..., opacity: float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintattrselected: str = ..., paintmode: str = ..., paintoperationtype: str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: str = ..., projective: bool | int = ..., radius: float = ..., rampMaxColor: tuple[float, float, float] = ..., rampMinColor: tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: str = ..., screenRadius: float = ..., selectclonesource: bool | int = ..., selectedattroper: str = ..., setArrayValueCommand: str = ..., setValueCommand: str = ..., showactive: bool | int = ..., stampDepth: float = ..., stampProfile: str = ..., stampSpacing: float = ..., strokesmooth: str = ..., surfaceConformedBrushVertices: bool | int = ..., tangentOutline: bool | int = ..., toolCleanupCmd: str = ..., toolOffProc: str = ..., toolOnProc: str = ..., toolSetupCmd: str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: float = ..., whichTool: str = ..., worldRadius: float = ...) -> None: ...

@overload
def artUserPaintCtx(*args, accopacity: bool | int = ..., activeListChangedProc: bool | int | str = ..., afterStrokeCmd: bool | int | str = ..., alphaclamp: bool | int | str = ..., alphaclamplower: bool | int | float = ..., alphaclampupper: bool | int | float = ..., attrSelected: bool | int | str = ..., beforeStrokeCmd: bool | int | str = ..., brushalignment: bool | int = ..., brushfeedback: bool | int = ..., chunkCommand: bool | int | str = ..., clamp: bool | int | str = ..., clamplower: bool | int | float = ..., clampupper: bool | int | float = ..., clear: bool | int = ..., colorAlphaValue: bool | int | float = ..., colorRGBAValue: bool | int | tuple[float, float, float, float] = ..., colorRGBValue: bool | int | tuple[float, float, float] = ..., colorRamp: bool | int | str = ..., colorfeedback: bool | int = ..., colorfeedbackOverride: bool | int = ..., colorrangelower: bool | int | float = ..., colorrangeupper: bool | int | float = ..., dataTypeIndex: int = ..., disablelighting: bool | int = ..., dragSlider: str = ..., duringStrokeCmd: bool | int | str = ..., dynclonemode: bool | int = ..., exists: bool | int = ..., expandfilename: bool | int = ..., exportaspectratio: bool | int | float = ..., exportfilemode: bool | int | str = ..., exportfilesave: str = ..., exportfilesizex: int = ..., exportfilesizey: int = ..., exportfiletype: bool | int | str = ..., filterNodes: bool | int = ..., finalizeCmd: bool | int | str = ..., fullpaths: bool | int = ..., getArrayAttrCommand: bool | int | str = ..., getSurfaceCommand: bool | int | str = ..., getValueCommand: bool | int | str = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., importfileload: str = ..., importfilemode: bool | int | str = ..., importreassign: bool | int = ..., initializeCmd: bool | int | str = ..., interactiveUpdate: bool | int = ..., lastRecorderCmd: bool | int | str = ..., lastStampName: bool | int | str = ..., lowerradius: bool | int | float = ..., makeStroke: bool | int | int | list[int] = ..., mappressure: bool | int | str = ..., maxvalue: bool | int | float = ..., minvalue: bool | int | float = ..., name: str = ..., numericColorRamp: bool | int | str = ..., numericDisplayColor: bool | int | tuple[float, float, float] = ..., numericDisplayPrecision: int = ..., numericMaxColor: bool | int | tuple[float, float, float] = ..., numericMinColor: bool | int | tuple[float, float, float] = ..., objattrArray: bool | int | str = ..., objattrArrayNoMenu: bool | int | str = ..., opacity: bool | int | float = ..., outline: bool | int = ..., outwhilepaint: bool | int = ..., paintNodeArray: bool | int | str = ..., paintattrselected: str = ..., paintmode: bool | int | str = ..., paintoperationtype: bool | int | str = ..., pickColor: bool | int = ..., pickValue: bool | int = ..., playbackCursor: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., playbackPressure: bool | int | float | list[float] = ..., preserveclonesource: bool | int = ..., profileShapeFile: bool | int | str = ..., projective: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., rampMaxColor: bool | int | tuple[float, float, float] = ..., rampMinColor: bool | int | tuple[float, float, float] = ..., record: bool | int = ..., reflection: bool | int = ..., reflectionaboutorigin: bool | int = ..., reflectionaxis: bool | int | str = ..., screenRadius: bool | int | float = ..., selectclonesource: bool | int = ..., selectedattroper: bool | int | str = ..., setArrayValueCommand: bool | int | str = ..., setValueCommand: bool | int | str = ..., showactive: bool | int = ..., stampDepth: bool | int | float = ..., stampProfile: bool | int | str = ..., stampSpacing: bool | int | float = ..., strokesmooth: bool | int | str = ..., surfaceConformedBrushVertices: bool | int = ..., tablet: bool | int = ..., tangentOutline: bool | int = ..., toolCleanupCmd: bool | int | str = ..., toolOffProc: bool | int | str = ..., toolOnProc: bool | int | str = ..., toolSetupCmd: bool | int | str = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ..., useNumericColorRamp: bool | int = ..., useNumericDisplay: bool | int = ..., usepressure: bool | int = ..., value: bool | int | float = ..., whichTool: bool | int | str = ..., worldRadius: bool | int | float = ...) -> Any: ...

@overload
def arubaNurbsToPoly(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def arubaNurbsToPoly(*args, adaptive: bool | int = ..., caching: bool | int = ..., chordalDeviation: float = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., localSpace: bool | int = ..., maxChordLength: float = ..., minChordLength: float = ..., name: str = ..., nodeState: int = ..., normalTolerance: float = ..., object: bool | int = ..., query: bool | int = ..., sampleType: int = ..., samples: int = ..., tolerance: float = ..., useSurfaceShader: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def assembly(*args, edit: Literal[True], active: str = ..., activeLabel: str = ..., createOptionBoxProc: str | Callable = ..., createRepresentation: str = ..., defaultType: str = ..., deleteRepresentation: str = ..., deregister: str = ..., input: str = ..., label: str = ..., listRepTypesProc: str | Callable = ..., newRepLabel: str = ..., postCreateUIProc: str | Callable = ..., proc: str | Callable = ..., renameRepresentation: str = ..., repLabel: str = ..., repName: str = ..., repPostCreateUIProc: str = ..., repPreCreateUIProc: str = ..., repTypeLabelProc: str | Callable = ..., type: str = ...) -> None: ...

@overload
def assembly(*args, active: bool | int | str = ..., activeLabel: bool | int | str = ..., canCreate: bool | int | str = ..., createOptionBoxProc: bool | int | str | Callable = ..., createRepresentation: str = ..., defaultType: bool | int | str = ..., deleteRepresentation: str = ..., deregister: str = ..., input: str = ..., isAType: bool | int | str = ..., isTrackingMemberEdits: bool | int | str = ..., label: bool | int | str = ..., listRepTypes: bool | int = ..., listRepTypesProc: bool | int | str | Callable = ..., listRepresentations: bool | int = ..., listTypes: bool | int = ..., name: str = ..., newRepLabel: str = ..., postCreateUIProc: bool | int | str | Callable = ..., proc: str | Callable = ..., query: bool | int = ..., renameRepresentation: str = ..., repLabel: bool | int | str = ..., repName: str = ..., repNamespace: bool | int | str = ..., repPostCreateUIProc: bool | int | str = ..., repPreCreateUIProc: bool | int | str = ..., repType: bool | int | str = ..., repTypeLabel: bool | int | str = ..., repTypeLabelProc: bool | int | str | Callable = ..., type: bool | int | str = ...) -> Any: ...

@overload
def assignCommand(*args, edit: Literal[True], addDivider: str = ..., altModifier: bool | int = ..., annotation: str = ..., command: str | Callable = ..., commandModifier: bool | int = ..., ctrlModifier: bool | int = ..., data1: str = ..., data2: str = ..., data3: str = ..., delete: int = ..., enableCommandRepeat: bool | int = ..., factorySettings: bool | int = ..., index: int = ..., keyString: str = ..., keyUp: bool | int = ..., optionModifier: bool | int = ..., sortByKey: bool | int = ..., sourceUserCommands: bool | int = ...) -> None: ...

@overload
def assignCommand(*args, addDivider: str = ..., altModifier: bool | int = ..., annotation: bool | int | str = ..., command: bool | int | str | Callable = ..., commandModifier: bool | int = ..., ctrlModifier: bool | int = ..., data1: bool | int | str = ..., data2: bool | int | str = ..., data3: bool | int | str = ..., delete: int = ..., dividerString: bool | int | str = ..., enableCommandRepeat: bool | int = ..., factorySettings: bool | int = ..., index: int = ..., keyArray: bool | int = ..., keyString: bool | int | str = ..., keyUp: bool | int = ..., name: bool | int = ..., numDividersPreceding: int = ..., numElements: bool | int = ..., optionModifier: bool | int = ..., query: bool | int = ..., sortByKey: bool | int = ..., sourceUserCommands: bool | int = ...) -> Any: ...
def assignInputDevice(*args, clutch: str = ..., continuous: bool | int = ..., device: str = ..., immediate: bool | int = ..., multiple: bool | int = ...) -> Any: ...

@overload
def assignViewportFactories(*args, edit: Literal[True], materialFactory: str = ..., nodeType: str = ..., textureFactory: str = ...) -> None: ...

@overload
def assignViewportFactories(*args, materialFactory: bool | int | str = ..., nodeType: bool | int | str = ..., query: bool | int = ..., textureFactory: bool | int | str = ...) -> Any: ...
def attachCache(*args, **keywords): ...

@overload
def attachCurve(*args, edit: Literal[True], blendBias: float = ..., blendKnotInsertion: bool | int = ..., caching: bool | int = ..., keepMultipleKnots: bool | int = ..., method: int = ..., nodeState: int = ..., parameter: float = ..., reverse1: bool | int = ..., reverse2: bool | int = ...) -> None: ...

@overload
def attachCurve(*args, blendBias: bool | int | float = ..., blendKnotInsertion: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., keepMultipleKnots: bool | int = ..., method: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., parameter: bool | int | float = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., reverse1: bool | int = ..., reverse2: bool | int = ...) -> Any: ...
def attachDeviceAttr(*args, attribute: str | list[str] = ..., axis: str = ..., camera: bool | int = ..., cameraRotate: bool | int = ..., cameraTranslate: bool | int = ..., clutch: str = ..., device: str = ..., selection: bool | int = ...) -> Any: ...
def attachFluidCache(*args, **keywords): ...
def attachGeometryCache(*args, **keywords): ...
def attachNclothCache(*args, **keywords): ...

@overload
def attachSurface(*args, edit: Literal[True], blendBias: float = ..., blendKnotInsertion: bool | int = ..., caching: bool | int = ..., directionU: bool | int = ..., keepMultipleKnots: bool | int = ..., method: int = ..., nodeState: int = ..., parameter: float = ..., reverse1: bool | int = ..., reverse2: bool | int = ..., swap1: bool | int = ..., swap2: bool | int = ..., twist: bool | int = ...) -> None: ...

@overload
def attachSurface(*args, blendBias: bool | int | float = ..., blendKnotInsertion: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., directionU: bool | int = ..., frozen: bool | int = ..., keepMultipleKnots: bool | int = ..., method: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., parameter: bool | int | float = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., reverse1: bool | int = ..., reverse2: bool | int = ..., swap1: bool | int = ..., swap2: bool | int = ..., twist: bool | int = ...) -> Any: ...

@overload
def attrColorSliderGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., alphaValue: float = ..., annotation: str = ..., attrNavDecision: tuple[str, str] = ..., attribute: str = ..., backgroundColor: tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., hsvValue: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rgbValue: tuple[float, float, float] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., showButton: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def attrColorSliderGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., alphaValue: bool | int | float = ..., annotation: bool | int | str = ..., attrNavDecision: bool | int | tuple[str, str] = ..., attribute: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., hsvValue: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rgbValue: bool | int | tuple[float, float, float] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., showButton: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def attrCompatibility(*args, addAttr: bool | int = ..., clear: bool | int = ..., dumpTable: bool | int = ..., enable: bool | int = ..., nodeRename: str = ..., pluginNode: str = ..., removeAttr: bool | int = ..., renameAttr: str = ..., type: str = ..., version: str = ...) -> Any: ...

@overload
def attrControlGrp(*args, edit: Literal[True], annotation: str = ..., attribute: str = ..., changeCommand: str | Callable = ..., enable: bool | int = ..., exists: bool | int = ..., handlesAttribute: str = ..., hideMapButton: bool | int = ..., label: str = ..., preventOverride: bool | int = ...) -> None: ...

@overload
def attrControlGrp(*args, annotation: bool | int | str = ..., attribute: bool | int | str = ..., changeCommand: bool | int | str | Callable = ..., enable: bool | int = ..., exists: bool | int = ..., handlesAttribute: bool | int | str = ..., hideMapButton: bool | int = ..., label: bool | int | str = ..., preventOverride: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def attrEnumOptionMenu(*args, edit: Literal[True], annotation: str = ..., attribute: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def attrEnumOptionMenu(*args, annotation: bool | int | str = ..., attribute: str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enumeratedItem: tuple[int, str] | list[tuple[int, str]] = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def attrEnumOptionMenuGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., attribute: str = ..., backgroundColor: tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def attrEnumOptionMenuGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., attribute: str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enumeratedItem: tuple[int, str] | list[tuple[int, str]] = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def attrFieldGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., attribute: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraButtonCommand: str | Callable = ..., extraButtonIcon: str = ..., extraLabel: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., maxValue: float = ..., minValue: float = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., step: float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def attrFieldGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., attribute: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraButton: bool | int = ..., extraButtonCommand: str | Callable = ..., extraButtonIcon: bool | int | str = ..., extraLabel: bool | int | str = ..., forceAddMapButton: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., hideMapButton: bool | int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., noBackground: bool | int = ..., numberOfFields: int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., step: bool | int | float = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def attrFieldSliderGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., attribute: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraButtonCommand: str | Callable = ..., extraButtonIcon: str = ..., fieldMaxValue: float = ..., fieldMinValue: float = ..., fieldStep: float = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., maxValue: float = ..., minValue: float = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., sliderMaxValue: float = ..., sliderMinValue: float = ..., sliderStep: float = ..., statusBarMessage: str = ..., step: float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def attrFieldSliderGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., attribute: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraButton: bool | int = ..., extraButtonCommand: str | Callable = ..., extraButtonIcon: bool | int | str = ..., fieldMaxValue: bool | int | float = ..., fieldMinValue: bool | int | float = ..., fieldStep: bool | int | float = ..., forceAddMapButton: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., hideMapButton: bool | int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., sliderMaxValue: bool | int | float = ..., sliderMinValue: bool | int | float = ..., sliderStep: bool | int | float = ..., statusBarMessage: str = ..., step: bool | int | float = ..., useTemplate: str = ..., vertical: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def attrNavigationControlGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., attrNavDecision: tuple[str, str] = ..., attribute: str = ..., backgroundColor: tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., connectAttrToDropped: str | Callable = ..., connectNodeToDropped: str | Callable = ..., connectToExisting: str | Callable = ..., createNew: str | Callable = ..., defaultTraversal: str | Callable = ..., delete: str = ..., disconnect: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraButtonCommand: str | Callable = ..., extraButtonIcon: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., ignore: str | Callable = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., noIgnorableMenu: bool | int = ..., noKeyableMenu: bool | int = ..., preventOverride: bool | int = ..., relatedNodes: str | Callable = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., unignore: str | Callable = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def attrNavigationControlGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., attrNavDecision: bool | int | tuple[str, str] = ..., attribute: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., connectAttrToDropped: bool | int | str | Callable = ..., connectNodeToDropped: bool | int | str | Callable = ..., connectToExisting: bool | int | str | Callable = ..., createNew: bool | int | str | Callable = ..., defaultTraversal: bool | int | str | Callable = ..., defineTemplate: str = ..., delete: bool | int | str = ..., disconnect: bool | int | str | Callable = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraButton: bool | int = ..., extraButtonCommand: str | Callable = ..., extraButtonIcon: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., ignore: bool | int | str | Callable = ..., ignoreNotSupported: bool | int = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., noIgnorableMenu: bool | int = ..., noKeyableMenu: bool | int = ..., notIgnorableMenu: bool | int = ..., notKeyableMenu: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., relatedNodes: bool | int | str | Callable = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., unignore: bool | int | str | Callable = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def attributeInfo(*args, allAttributes: bool | int = ..., bool: bool | int = ..., enumerated: bool | int = ..., hidden: bool | int = ..., inherited: bool | int = ..., internal: bool | int = ..., leaf: bool | int = ..., logicalAnd: bool | int = ..., multi: bool | int = ..., short: bool | int = ..., type: str = ..., userInterface: bool | int = ..., writable: bool | int = ...) -> Any: ...
def attributeMenu(*args, beginMenu: bool | int = ..., editor: str = ..., finishMenu: bool | int = ..., inputs: bool | int = ..., plug: str = ..., regPulldownMenuCommand: str = ..., unregPulldownMenuCommand: int = ...) -> Any: ...
def attributeName(*args, leaf: bool | int = ..., long: bool | int = ..., nice: bool | int = ..., short: bool | int = ...) -> Any: ...
def attributeQuery(*args, affectsAppearance: bool | int = ..., affectsWorldspace: bool | int = ..., attributeType: bool | int = ..., cachedInternally: bool | int = ..., categories: bool | int = ..., channelBox: bool | int = ..., computeModifies: bool | int = ..., connectable: bool | int = ..., enum: bool | int = ..., exists: bool | int = ..., hidden: bool | int = ..., indeterminant: bool | int = ..., indexMatters: bool | int = ..., internal: bool | int = ..., internalGet: bool | int = ..., internalSet: bool | int = ..., keyable: bool | int = ..., listChildren: bool | int = ..., listDefault: bool | int = ..., listEnum: bool | int = ..., listParent: bool | int = ..., listSiblings: bool | int = ..., localizedListEnum: bool | int = ..., longName: bool | int = ..., maxExists: bool | int = ..., maximum: bool | int = ..., message: bool | int = ..., minExists: bool | int = ..., minimum: bool | int = ..., multi: bool | int = ..., niceName: bool | int = ..., node: str = ..., numberOfChildren: bool | int = ..., range: bool | int = ..., rangeExists: bool | int = ..., readable: bool | int = ..., renderSource: bool | int = ..., shortName: bool | int = ..., softMax: bool | int = ..., softMaxExists: bool | int = ..., softMin: bool | int = ..., softMinExists: bool | int = ..., softRange: bool | int = ..., softRangeExists: bool | int = ..., storable: bool | int = ..., type: str = ..., typeExact: str = ..., usedAsColor: bool | int = ..., usedAsFilename: bool | int = ..., usesMultiBuilder: bool | int = ..., worldspace: bool | int = ..., writable: bool | int = ...) -> Any: ...

@overload
def audioTrack(*args, edit: Literal[True], lock: bool | int = ..., mute: bool | int = ..., solo: bool | int = ..., title: str = ..., track: int = ...) -> None: ...

@overload
def audioTrack(*args, insertTrack: int = ..., lock: bool | int = ..., mute: bool | int = ..., numTracks: int = ..., query: bool | int = ..., removeEmptyTracks: bool | int = ..., removeTrack: int = ..., solo: bool | int = ..., swapTracks: tuple[int, int] = ..., title: bool | int | str = ..., track: int = ...) -> Any: ...

@overload
def autoKeyframe(*args, edit: Literal[True], addAttr: str = ..., characterOption: str = ..., noReset: bool | int = ..., state: bool | int = ...) -> None: ...

@overload
def autoKeyframe(*args, addAttr: str = ..., characterOption: bool | int | str = ..., listAttr: bool | int = ..., noReset: bool | int = ..., query: bool | int = ..., state: bool | int = ...) -> Any: ...
def autoPlace(*args, useMouse: bool | int = ...) -> Any: ...
def autoSave(*args, destination: int = ..., destinationFolder: bool | int = ..., enable: bool | int = ..., folder: bool | int | str = ..., interval: bool | int | float = ..., limitBackups: bool | int = ..., maxBackups: int = ..., perform: bool | int = ..., prompt: bool | int = ..., query: bool | int = ...) -> Any: ...
def backgroundEvaluationManager(*args, interrupt: bool | int = ..., mode: bool | int | str = ..., pause: bool | int = ..., query: bool | int = ..., resume: bool | int = ...) -> Any: ...
def bakeClip(*args, blend: tuple[int, int] = ..., clipIndex: int | list[int] = ..., keepOriginals: bool | int = ..., name: str = ...) -> Any: ...
def bakeDeformer(*args, bakeRangeOfMotion: bool | int = ..., colorizeSkeleton: bool | int = ..., customRangeOfMotion: str | tuple[float, float] | tuple[float] = ..., dstMeshName: str = ..., dstSkeletonName: str = ..., hierarchy: bool | int = ..., influences: str = ..., maxInfluences: int = ..., pruneWeights: float = ..., smoothWeights: int = ..., srcMeshName: str = ..., srcSkeletonName: str = ...) -> Any: ...
def bakePartialHistory(*args, allShapes: bool | int = ..., edit: bool | int = ..., postSmooth: bool | int = ..., preCache: bool | int = ..., preDeformers: bool | int = ..., prePostDeformers: bool | int = ..., query: bool | int = ...) -> Any: ...
def bakeResults(*args, animation: str = ..., attribute: str | list[str] = ..., bakeOnOverrideLayer: bool | int = ..., controlPoints: bool | int = ..., destinationLayer: str = ..., disableImplicitControl: bool | int = ..., edit: bool | int = ..., float: str | int | float | list[str | int | float] = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., minimizeRotation: bool | int = ..., oversamplingRate: int = ..., preserveOutsideKeys: bool | int = ..., query: bool | int = ..., removeBakedAnimFromLayer: bool | int = ..., removeBakedAttributeFromLayer: bool | int = ..., resolveWithoutLayer: str | list[str] = ..., sampleBy: int | float = ..., shape: bool | int = ..., simulation: bool | int = ..., smart: tuple[bool | int, float] = ..., sparseAnimCurveBake: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ...) -> Any: ...
def bakeSimulation(*args, animation: str = ..., attribute: str | list[str] = ..., bakeOnOverrideLayer: bool | int = ..., controlPoints: bool | int = ..., destinationLayer: str = ..., disableImplicitControl: bool | int = ..., edit: bool | int = ..., float: str | int | float | list[str | int | float] = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., minimizeRotation: bool | int = ..., oversamplingRate: int = ..., preserveOutsideKeys: bool | int = ..., query: bool | int = ..., removeBakedAnimFromLayer: bool | int = ..., removeBakedAttributeFromLayer: bool | int = ..., resolveWithoutLayer: str | list[str] = ..., sampleBy: int | float = ..., shape: bool | int = ..., simulation: bool | int = ..., smart: tuple[bool | int, float] = ..., sparseAnimCurveBake: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ...) -> Any: ...

@overload
def baseTemplate(*args, edit: Literal[True], silent: bool | int = ...) -> None: ...

@overload
def baseTemplate(*args, exists: bool | int = ..., fileName: bool | int | str = ..., force: bool | int = ..., load: bool | int = ..., matchFile: bool | int | str = ..., query: bool | int = ..., silent: bool | int = ..., unload: bool | int = ..., viewList: bool | int | str = ...) -> Any: ...
def baseView(*args, edit: bool | int = ..., itemInfo: bool | int | str = ..., itemList: bool | int = ..., query: bool | int = ..., viewDescription: bool | int = ..., viewLabel: bool | int = ..., viewList: bool | int = ..., viewName: bool | int | str = ...) -> Any: ...
def batchRender(*args, filename: str = ..., melCommand: str = ..., numProcs: int = ..., preRenderCommand: str = ..., remoteRenderMachine: str = ..., renderCommandOptions: str = ..., showImage: bool | int = ..., status: str = ..., useRemoteRender: bool | int = ..., useStandalone: bool | int = ..., verbosity: int = ...) -> Any: ...

@overload
def bevel(*args, edit: Literal[True], bevelShapeType: int = ..., caching: bool | int = ..., cornerType: int = ..., depth: float = ..., extrudeDepth: float = ..., joinSurfaces: bool | int = ..., nodeState: int = ..., numberOfSides: int = ..., tolerance: float = ..., width: float = ...) -> None: ...

@overload
def bevel(*args, bevelShapeType: int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., cornerType: int = ..., depth: bool | int | float = ..., extrudeDepth: bool | int | float = ..., frozen: bool | int = ..., joinSurfaces: bool | int = ..., name: str = ..., nodeState: int = ..., numberOfSides: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., range: bool | int = ..., tolerance: bool | int | float = ..., width: bool | int | float = ...) -> Any: ...

@overload
def bevelPlus(*args, edit: Literal[True], bevelInside: bool | int = ..., innerStyle: int = ..., joinSurfaces: bool | int = ..., normalsOutwards: bool | int = ..., numberOfSides: int = ..., outerStyle: int = ...) -> None: ...

@overload
def bevelPlus(*args, bevelInside: bool | int = ..., caching: bool | int = ..., capSides: int = ..., constructionHistory: bool | int = ..., depth: float = ..., extrudeDepth: float = ..., frozen: bool | int = ..., innerStyle: int = ..., joinSurfaces: bool | int = ..., name: str = ..., nodeState: int = ..., normalsOutwards: bool | int = ..., numberOfSides: int = ..., outerStyle: int = ..., polyOutChordHeight: float = ..., polyOutChordHeightRatio: float = ..., polyOutCount: int = ..., polyOutCurveSamples: int = ..., polyOutCurveType: int = ..., polyOutExtrusionSamples: int = ..., polyOutExtrusionType: int = ..., polyOutMethod: int = ..., polyOutUseChordHeight: bool | int = ..., polyOutUseChordHeightRatio: bool | int = ..., polygon: int = ..., query: bool | int = ..., range: bool | int = ..., tolerance: float = ..., width: float = ...) -> Any: ...
def bezierAnchorPreset(*args, preset: int = ...) -> Any: ...
def bezierAnchorState(*args, even: bool | int = ..., smooth: bool | int = ...) -> Any: ...
def bezierCurveToNurbs(*args) -> Any: ...
def bezierInfo(*args, anchorFromCV: int = ..., cvFromAnchor: int = ..., isAnchorSelected: bool | int = ..., isTangentSelected: bool | int = ..., onlyAnchorsSelected: bool | int = ..., onlyTangentsSelected: bool | int = ...) -> Any: ...
def binMembership(*args, addToBin: str = ..., exists: str = ..., inheritBinsFromNodes: str = ..., isValidBinName: str = ..., listBins: bool | int = ..., makeExclusive: str = ..., notifyChanged: bool | int = ..., query: bool | int = ..., removeFromBin: str = ...) -> Any: ...
def bindSkin(*args, byClosestPoint: bool | int = ..., byPartition: bool | int = ..., colorJoints: bool | int = ..., delete: bool | int = ..., doNotDescend: bool | int = ..., edit: bool | int = ..., enable: bool | int = ..., name: str = ..., partition: str = ..., query: bool | int = ..., toAll: bool | int = ..., toSelectedBones: bool | int = ..., toSkeleton: bool | int = ..., unbind: bool | int = ..., unbindKeepHistory: bool | int = ..., unlock: bool | int = ...) -> Any: ...
def blend(*args, autoDirection: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., crvsInFirstRail: int = ..., edit: bool | int = ..., flipLeft: bool | int = ..., flipRight: bool | int = ..., frozen: bool | int = ..., leftParameter: float = ..., multipleKnots: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., positionTolerance: float = ..., query: bool | int = ..., rightParameter: float = ..., tangentTolerance: float = ...) -> Any: ...

@overload
def blend2(*args, edit: Literal[True], autoAnchor: bool | int = ..., autoNormal: bool | int = ..., caching: bool | int = ..., crvsInFirstRail: int = ..., flipLeftNormal: bool | int = ..., flipRightNormal: bool | int = ..., leftAnchor: float = ..., leftEnd: float = ..., leftStart: float = ..., multipleKnots: bool | int = ..., nodeState: int = ..., positionTolerance: float = ..., reverseLeft: bool | int = ..., reverseRight: bool | int = ..., rightAnchor: float = ..., rightEnd: float = ..., rightStart: float = ..., tangentTolerance: float = ...) -> None: ...

@overload
def blend2(*args, autoAnchor: bool | int = ..., autoNormal: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., crvsInFirstRail: int = ..., flipLeftNormal: bool | int = ..., flipRightNormal: bool | int = ..., frozen: bool | int = ..., leftAnchor: bool | int | float = ..., leftEnd: bool | int | float = ..., leftStart: bool | int | float = ..., multipleKnots: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., positionTolerance: bool | int | float = ..., query: bool | int = ..., reverseLeft: bool | int = ..., reverseRight: bool | int = ..., rightAnchor: bool | int | float = ..., rightEnd: bool | int | float = ..., rightStart: bool | int | float = ..., tangentTolerance: bool | int | float = ...) -> Any: ...
def blendCtx(*args, activeNodes: bool | int = ..., autoCreate: bool | int = ..., autoDirection: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., crvsInFirstRail: int = ..., edit: bool | int = ..., exists: bool | int = ..., flipLeft: bool | int = ..., flipRight: bool | int = ..., frozen: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., leftParameter: float = ..., multipleKnots: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., positionTolerance: float = ..., query: bool | int = ..., reset: bool | int = ..., rightParameter: float = ..., tangentTolerance: float = ..., toolNode: bool | int = ..., useGlobalTol: bool | int = ...) -> Any: ...

@overload
def blendShape(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., automatic: bool | int = ..., before: bool | int = ..., copyDelta: tuple[int, int, int] = ..., copyInBetweenDelta: tuple[int, int, int, int] = ..., copyWeights: tuple[int, int, int] = ..., envelope: float = ..., export: str = ..., exportTarget: tuple[int, int] | list[tuple[int, int]] = ..., flipTarget: tuple[int, int] | list[tuple[int, int]] = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., inBetween: bool | int = ..., inBetweenIndex: int = ..., inBetweenType: str = ..., ip: str = ..., mergeSource: int | list[int] = ..., mergeTarget: int = ..., mirrorDirection: int = ..., mirrorTarget: tuple[int, int] | list[tuple[int, int]] = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., resetTargetDelta: tuple[int, int] | list[tuple[int, int]] = ..., split: bool | int = ..., suppressDialog: bool | int = ..., symmetryAxis: str = ..., symmetryEdge: str | list[str] = ..., symmetrySpace: int = ..., tangentSpace: bool | int = ..., target: tuple[str, int, str, float] | list[tuple[str, int, str, float]] = ..., transform: str = ..., weight: tuple[int, float] | list[tuple[int, float]] = ..., weightCount: int = ...) -> None: ...

@overload
def blendShape(*args, after: bool | int = ..., afterReference: bool | int = ..., automatic: bool | int = ..., before: bool | int = ..., components: bool | int = ..., copyDelta: tuple[int, int, int] = ..., copyInBetweenDelta: tuple[int, int, int, int] = ..., copyWeights: tuple[int, int, int] = ..., deformerTools: bool | int = ..., editTarget: bool | int = ..., envelope: bool | int | float = ..., exclusive: bool | int | str = ..., export: str = ..., exportTarget: tuple[int, int] | list[tuple[int, int]] = ..., flipTarget: tuple[int, int] | list[tuple[int, int]] = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., inBetween: bool | int = ..., inBetweenIndex: int = ..., inBetweenType: str = ..., includeHiddenSelections: bool | int = ..., ip: str = ..., mergeSource: int | list[int] = ..., mergeTarget: int = ..., mirrorDirection: int = ..., mirrorTarget: tuple[int, int] | list[tuple[int, int]] = ..., name: str = ..., normalizationGroups: bool | int = ..., origin: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., resetTargetDelta: tuple[int, int] | list[tuple[int, int]] = ..., selectedComponents: bool | int = ..., split: bool | int = ..., suppressDialog: bool | int = ..., symmetryAxis: bool | int | str = ..., symmetryEdge: bool | int | str | list[str] = ..., symmetrySpace: int = ..., tangentSpace: bool | int = ..., target: bool | int | tuple[str, int, str, float] | list[tuple[str, int, str, float]] = ..., topologyCheck: bool | int = ..., transform: bool | int | str = ..., useComponentTags: bool | int = ..., weight: bool | int | tuple[int, float] | list[tuple[int, float]] = ..., weightCount: int = ...) -> Any: ...

@overload
def blendShapeEditor(*args, edit: Literal[True], docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., parent: str = ..., selectionConnection: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., verticalSliders: bool | int = ...) -> None: ...

@overload
def blendShapeEditor(*args, control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectionConnection: bool | int | str = ..., stateString: bool | int = ..., targetControlList: bool | int = ..., targetList: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., verticalSliders: bool | int = ...) -> Any: ...

@overload
def blendShapePanel(*args, edit: Literal[True], copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def blendShapePanel(*args, blendShapeEditor: bool | int = ..., control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., query: bool | int = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def blendTwoAttr(*args, edit: Literal[True], attribute0: str = ..., attribute1: str = ..., blender: str = ..., driver: int = ...) -> None: ...

@overload
def blendTwoAttr(*args, attribute: str | list[str] = ..., attribute0: bool | int | str = ..., attribute1: bool | int | str = ..., blender: bool | int | str = ..., controlPoints: bool | int = ..., driver: int = ..., name: bool | int | str = ..., query: bool | int = ..., shape: bool | int = ..., time: str | tuple[float, float] | tuple[float] = ...) -> Any: ...
def blindDataType(*args, dataType: str | list[str] = ..., longDataName: str | list[str] = ..., longNames: bool | int = ..., query: bool | int = ..., shortDataName: str | list[str] = ..., shortNames: bool | int = ..., typeId: int = ..., typeNames: bool | int = ...) -> Any: ...

@overload
def boneLattice(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., bicep: float = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., joint: str = ..., lengthIn: float = ..., lengthOut: float = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., split: bool | int = ..., tricep: float = ..., widthLeft: float = ..., widthRight: float = ...) -> None: ...

@overload
def boneLattice(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., bicep: bool | int | float = ..., components: bool | int = ..., deformerTools: bool | int = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., joint: bool | int | str = ..., lengthIn: bool | int | float = ..., lengthOut: bool | int | float = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., selectedComponents: bool | int = ..., split: bool | int = ..., transform: str = ..., tricep: bool | int | float = ..., useComponentTags: bool | int = ..., widthLeft: bool | int | float = ..., widthRight: bool | int | float = ...) -> Any: ...

@overload
def boundary(*args, edit: Literal[True], caching: bool | int = ..., endPoint: bool | int = ..., endPointTolerance: float = ..., nodeState: int = ..., order: bool | int = ...) -> None: ...

@overload
def boundary(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., endPoint: bool | int = ..., endPointTolerance: bool | int | float = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., order: bool | int = ..., polygon: int = ..., query: bool | int = ..., range: bool | int = ...) -> Any: ...

@overload
def boxDollyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def boxDollyCtx(*args, alternateContext: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., toolName: bool | int | str = ...) -> Any: ...

@overload
def boxZoomCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., zoomScale: float = ...) -> None: ...

@overload
def boxZoomCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., zoomScale: bool | int | float = ...) -> Any: ...
def bufferCurve(*args, animation: str = ..., attribute: str | list[str] = ..., controlPoints: bool | int = ..., exists: bool | int = ..., float: str | int | float | list[str | int | float] = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., overwrite: bool | int = ..., query: bool | int = ..., shape: bool | int = ..., swap: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ..., useReferencedCurve: bool | int = ...) -> Any: ...
def buildBookmarkMenu(*args, editor: str = ..., type: str = ...) -> Any: ...
def buildKeyframeMenu(*args) -> Any: ...
def buildSendToBackburnerDialog(*args, **keywords): ...

@overload
def button(*args, edit: Literal[True], actOnPress: bool | int = ..., actionIsSubstitute: bool | int = ..., align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., command: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., recomputeSize: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def button(*args, actOnPress: bool | int = ..., actionIsSubstitute: bool | int = ..., align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., command: bool | int | str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., recomputeSize: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def buttonManip(*args, icon: str = ...) -> Any: ...
def cacheAppend(*args, **keywords): ...
def cacheAppendOpt(*args, **keywords): ...
def cacheEvaluator(*args, **kwargs): ...

@overload
def cacheFile(*args, edit: Literal[True], replaceWithoutSimulating: bool | int = ..., runupFrames: int = ..., sampleMultiplier: int = ..., simulationRate: int | float = ...) -> None: ...

@overload
def cacheFile(*args, appendFrame: bool | int = ..., attachFile: bool | int = ..., cacheFileNode: str | list[str] = ..., cacheFormat: bool | int | str = ..., cacheInfo: bool | int | str | list[str] = ..., cacheableAttrs: bool | int | str = ..., cacheableNode: str | list[str] = ..., channelIndex: bool | int = ..., channelName: bool | int | str | list[str] = ..., convertPc2: bool | int = ..., createCacheNode: bool | int = ..., creationChannelName: str | list[str] = ..., dataSize: bool | int = ..., deleteCachedFrame: bool | int = ..., descriptionFileName: bool | int = ..., directory: bool | int | str = ..., doubleToFloat: bool | int = ..., endTime: int | float = ..., fileName: bool | int | str = ..., format: str = ..., geometry: bool | int = ..., inAttr: str | list[str] = ..., inTangent: str = ..., interpEndTime: int | float = ..., interpStartTime: int | float = ..., noBackup: bool | int = ..., outAttr: str | list[str] = ..., outTangent: str = ..., pc2File: str = ..., pointCount: bool | int = ..., points: str | list[str] = ..., pointsAndNormals: str | list[str] = ..., prefix: bool | int = ..., query: bool | int = ..., refresh: bool | int = ..., replaceCachedFrame: bool | int = ..., replaceWithoutSimulating: bool | int = ..., runupFrames: int = ..., sampleMultiplier: int = ..., simulationRate: bool | int | int | float = ..., singleCache: bool | int = ..., startTime: int | float = ..., staticCache: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def cacheFileCombine(*args, edit: Literal[True], channelName: str | list[str] = ..., connectCache: str = ..., keepWeights: bool | int = ..., objectIndex: int = ...) -> None: ...

@overload
def cacheFileCombine(*args, cacheIndex: bool | int = ..., channelName: str | list[str] = ..., connectCache: bool | int | str = ..., keepWeights: bool | int = ..., layerNode: bool | int = ..., nextAvailable: bool | int = ..., object: bool | int | str = ..., objectIndex: int = ..., query: bool | int = ...) -> Any: ...
def cacheFileMerge(*args, edit: bool | int = ..., endTime: int | float = ..., geometry: bool | int = ..., query: bool | int = ..., startTime: int | float = ...) -> Any: ...

@overload
def cacheFileTrack(*args, edit: Literal[True], lock: bool | int = ..., mute: bool | int = ..., solo: bool | int = ..., track: int = ...) -> None: ...

@overload
def cacheFileTrack(*args, insertTrack: int = ..., lock: bool | int = ..., mute: bool | int = ..., query: bool | int = ..., removeEmptyTracks: bool | int = ..., removeTrack: int = ..., solo: bool | int = ..., track: int = ...) -> Any: ...
def caddyManip(*args) -> Any: ...
def callbacks(*args, addCallback: str | Callable = ..., clearAllCallbacks: bool | int = ..., clearCallbacks: bool | int = ..., describeHooks: bool | int = ..., dumpCallbacks: bool | int = ..., executeCallbacks: bool | int = ..., hook: str = ..., listCallbacks: bool | int = ..., owner: str = ..., removeCallback: str | Callable = ...) -> Any: ...

@overload
def camera(*args, edit: Literal[True], aspectRatio: float = ..., cameraScale: float = ..., centerOfInterest: float = ..., clippingPlanes: bool | int = ..., depthOfField: bool | int = ..., displayFieldChart: bool | int = ..., displayFilmGate: bool | int = ..., displayFilmOrigin: bool | int = ..., displayFilmPivot: bool | int = ..., displayGateMask: bool | int = ..., displayResolution: bool | int = ..., displaySafeAction: bool | int = ..., displaySafeTitle: bool | int = ..., fStop: float = ..., farClipPlane: float = ..., farFocusDistance: float = ..., filmFit: str = ..., filmFitOffset: float = ..., filmRollOrder: str = ..., filmRollValue: float = ..., filmTranslateH: float = ..., filmTranslateV: float = ..., focalLength: float = ..., focusDistance: float = ..., homeCommand: str = ..., horizontalFieldOfView: float = ..., horizontalFilmAperture: float = ..., horizontalFilmOffset: float = ..., horizontalPan: float = ..., horizontalRollPivot: float = ..., horizontalShake: float = ..., journalCommand: bool | int = ..., lensSqueezeRatio: float = ..., lockTransform: bool | int = ..., motionBlur: bool | int = ..., name: str = ..., nearClipPlane: float = ..., nearFocusDistance: float = ..., orthographic: bool | int = ..., orthographicWidth: float = ..., overscan: float = ..., panZoomEnabled: bool | int = ..., position: tuple[float, float, float] = ..., postScale: float = ..., preScale: float = ..., renderPanZoom: bool | int = ..., rotation: tuple[float, float, float] = ..., shakeEnabled: bool | int = ..., shakeOverscan: float = ..., shakeOverscanEnabled: bool | int = ..., shutterAngle: float = ..., startupCamera: bool | int = ..., stereoHorizontalImageTranslate: float = ..., stereoHorizontalImageTranslateEnabled: bool | int = ..., verticalFieldOfView: float = ..., verticalFilmAperture: float = ..., verticalFilmOffset: float = ..., verticalLock: bool | int = ..., verticalPan: float = ..., verticalRollPivot: float = ..., verticalShake: float = ..., worldCenterOfInterest: tuple[float, float, float] = ..., worldUp: tuple[float, float, float] = ..., zoom: float = ...) -> None: ...

@overload
def camera(*args, aspectRatio: bool | int | float = ..., cameraScale: bool | int | float = ..., centerOfInterest: bool | int | float = ..., clippingPlanes: bool | int = ..., depthOfField: bool | int = ..., displayFieldChart: bool | int = ..., displayFilmGate: bool | int = ..., displayFilmOrigin: bool | int = ..., displayFilmPivot: bool | int = ..., displayGateMask: bool | int = ..., displayResolution: bool | int = ..., displaySafeAction: bool | int = ..., displaySafeTitle: bool | int = ..., fStop: bool | int | float = ..., farClipPlane: bool | int | float = ..., farFocusDistance: bool | int | float = ..., filmFit: bool | int | str = ..., filmFitOffset: bool | int | float = ..., filmRollOrder: bool | int | str = ..., filmRollValue: bool | int | float = ..., filmTranslateH: bool | int | float = ..., filmTranslateV: bool | int | float = ..., focalLength: bool | int | float = ..., focusDistance: bool | int | float = ..., homeCommand: bool | int | str = ..., horizontalFieldOfView: bool | int | float = ..., horizontalFilmAperture: bool | int | float = ..., horizontalFilmOffset: bool | int | float = ..., horizontalPan: bool | int | float = ..., horizontalRollPivot: bool | int | float = ..., horizontalShake: bool | int | float = ..., journalCommand: bool | int = ..., lensSqueezeRatio: bool | int | float = ..., lockTransform: bool | int = ..., motionBlur: bool | int = ..., name: bool | int | str = ..., nearClipPlane: bool | int | float = ..., nearFocusDistance: bool | int | float = ..., orthographic: bool | int = ..., orthographicWidth: bool | int | float = ..., overscan: bool | int | float = ..., panZoomEnabled: bool | int = ..., position: bool | int | tuple[float, float, float] = ..., postScale: bool | int | float = ..., preScale: bool | int | float = ..., query: bool | int = ..., renderPanZoom: bool | int = ..., rotation: bool | int | tuple[float, float, float] = ..., shakeEnabled: bool | int = ..., shakeOverscan: bool | int | float = ..., shakeOverscanEnabled: bool | int = ..., shutterAngle: bool | int | float = ..., startupCamera: bool | int = ..., stereoHorizontalImageTranslate: bool | int | float = ..., stereoHorizontalImageTranslateEnabled: bool | int = ..., verticalFieldOfView: bool | int | float = ..., verticalFilmAperture: bool | int | float = ..., verticalFilmOffset: bool | int | float = ..., verticalLock: bool | int = ..., verticalPan: bool | int | float = ..., verticalRollPivot: bool | int | float = ..., verticalShake: bool | int | float = ..., worldCenterOfInterest: bool | int | tuple[float, float, float] = ..., worldUp: bool | int | tuple[float, float, float] = ..., zoom: bool | int | float = ...) -> Any: ...

@overload
def cameraSet(*args, edit: Literal[True], active: bool | int = ..., appendTo: bool | int = ..., camera: str = ..., clearDepth: bool | int = ..., deleteAll: bool | int = ..., deleteLayer: bool | int = ..., insertAt: bool | int = ..., layer: int = ..., objectSet: str = ..., order: int = ...) -> None: ...

@overload
def cameraSet(*args, active: bool | int = ..., appendTo: bool | int = ..., camera: bool | int | str = ..., clearDepth: bool | int = ..., deleteAll: bool | int = ..., deleteLayer: bool | int = ..., insertAt: bool | int = ..., layer: int = ..., name: bool | int | str = ..., numLayers: bool | int = ..., objectSet: bool | int | str = ..., order: int = ..., query: bool | int = ...) -> Any: ...

@overload
def cameraView(*args, edit: Literal[True], addBookmark: bool | int = ..., animate: bool | int = ..., camera: str = ..., removeBookmark: bool | int = ..., setCamera: bool | int = ..., setView: bool | int = ...) -> None: ...

@overload
def cameraView(*args, addBookmark: bool | int = ..., animate: bool | int = ..., bookmarkType: int = ..., camera: str = ..., name: str = ..., removeBookmark: bool | int = ..., setCamera: bool | int = ..., setView: bool | int = ...) -> Any: ...
def canCreateCaddyManip(*args) -> Any: ...
def canCreateManip(*args) -> Any: ...

@overload
def canvas(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., hsvValue: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., pressCommand: str | Callable = ..., preventOverride: bool | int = ..., rgbValue: tuple[float, float, float] = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def canvas(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., hsvValue: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., pressCommand: str | Callable = ..., preventOverride: bool | int = ..., query: bool | int = ..., rgbValue: bool | int | tuple[float, float, float] = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def changeSubdivComponentDisplayLevel(*args, level: int = ..., query: bool | int = ..., relative: bool | int = ...) -> Any: ...
def changeSubdivRegion(*args, action: int = ..., level: int = ...) -> Any: ...

@overload
def channelBox(*args, edit: Literal[True], annotation: str = ..., attrBgColor: tuple[float, float, float] = ..., attrColor: tuple[float, float, float] = ..., attrFilter: str = ..., attrRegex: str = ..., attributeEditorMode: bool | int = ..., backgroundColor: tuple[float, float, float] = ..., containerAtTop: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enableLabelSelection: bool | int = ..., execute: tuple[str, bool | int] = ..., fieldWidth: int = ..., fixedAttrList: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., hyperbolic: bool | int = ..., labelWidth: int = ..., longNames: bool | int = ..., mainListConnection: str = ..., manage: bool | int = ..., maxHeight: int = ..., maxWidth: int = ..., niceNames: bool | int = ..., noBackground: bool | int = ..., nodeRegex: str = ..., precision: int = ..., preventOverride: bool | int = ..., rebuildCommand: str | Callable = ..., select: str | list[str] = ..., showNamespace: bool | int = ..., showTransforms: bool | int = ..., speed: float = ..., statusBarMessage: str = ..., takeFocus: bool | int = ..., ufeFixedAttrList: tuple[str, str] = ..., update: bool | int = ..., useManips: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def channelBox(*args, annotation: bool | int | str = ..., attrBgColor: bool | int | tuple[float, float, float] = ..., attrColor: bool | int | tuple[float, float, float] = ..., attrFilter: bool | int | str = ..., attrRegex: bool | int | str = ..., attributeEditorMode: bool | int = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., containerAtTop: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enableLabelSelection: bool | int = ..., execute: tuple[str, bool | int] = ..., exists: bool | int = ..., fieldWidth: int = ..., fixedAttrList: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., historyObjectList: bool | int = ..., hyperbolic: bool | int = ..., inputs: bool | int = ..., isObscured: bool | int = ..., labelWidth: int = ..., longNames: bool | int = ..., mainListConnection: bool | int | str = ..., mainObjectList: bool | int = ..., manage: bool | int = ..., maxHeight: int = ..., maxWidth: int = ..., niceNames: bool | int = ..., noBackground: bool | int = ..., nodeRegex: bool | int | str = ..., numberOfPopupMenus: bool | int = ..., outputObjectList: bool | int = ..., outputs: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rebuildCommand: bool | int | str | Callable = ..., select: str | list[str] = ..., selectedHistoryAttributes: bool | int = ..., selectedMainAttributes: bool | int = ..., selectedOutputAttributes: bool | int = ..., selectedShapeAttributes: bool | int = ..., shapeObjectList: bool | int = ..., shapes: bool | int = ..., showNamespace: bool | int = ..., showTransforms: bool | int = ..., speed: bool | int | float = ..., statusBarMessage: str = ..., takeFocus: bool | int = ..., ufeFixedAttrList: bool | int | tuple[str, str] = ..., update: bool | int = ..., useManips: bool | int | str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def character(*args, edit: Literal[True], addElement: str = ..., addOffsetObject: str = ..., clear: str = ..., flatten: str = ..., forceElement: str = ..., include: str = ..., remove: str = ..., removeOffsetObject: str = ..., text: str = ...) -> None: ...

@overload
def character(*args, addElement: str = ..., addOffsetObject: bool | int | str = ..., anyMember: str = ..., characterPlug: bool | int = ..., clear: str = ..., empty: bool | int = ..., excludeDynamic: bool | int = ..., excludeRotate: bool | int = ..., excludeScale: bool | int = ..., excludeTranslate: bool | int = ..., excludeVisibility: bool | int = ..., flatten: str = ..., forceElement: str = ..., include: str = ..., intersection: bool | int | str = ..., isIntersecting: bool | int | str = ..., isMember: bool | int | str = ..., library: bool | int = ..., memberIndex: int = ..., name: str = ..., noWarnings: bool | int = ..., nodesOnly: bool | int = ..., offsetNode: bool | int = ..., query: bool | int = ..., remove: str = ..., removeOffsetObject: str = ..., root: str = ..., scheduler: bool | int = ..., split: str = ..., subtract: bool | int | str = ..., text: bool | int | str = ..., union: bool | int | str = ..., userAlias: bool | int | str = ...) -> Any: ...

@overload
def characterMap(*args, edit: Literal[True], mapAttr: tuple[str, str] = ..., unmapAttr: tuple[str, str] = ...) -> None: ...

@overload
def characterMap(*args, mapAttr: bool | int | tuple[str, str] = ..., mapMethod: str = ..., mapNode: bool | int | tuple[str, str] = ..., mapping: bool | int | str = ..., proposedMapping: bool | int = ..., query: bool | int = ..., unmapAttr: tuple[str, str] = ..., unmapNode: tuple[str, str] = ...) -> Any: ...

@overload
def characterize(*args, edit: Literal[True], activatePivot: bool | int = ..., addAuxEffector: bool | int = ..., addFloorContactPlane: bool | int = ..., addMissingEffectors: bool | int = ..., autoActivateBodyPart: bool | int = ..., changePivotPlacement: bool | int = ..., fkSkeleton: str = ..., placeNewPivot: bool | int = ..., sourceSkeleton: str = ...) -> None: ...

@overload
def characterize(*args, activatePivot: bool | int = ..., addAuxEffector: bool | int = ..., addFloorContactPlane: bool | int = ..., addMissingEffectors: bool | int = ..., attributeFromHIKProperty: bool | int | str = ..., attributeFromHIKPropertyMode: bool | int | str = ..., autoActivateBodyPart: bool | int = ..., changePivotPlacement: bool | int = ..., effectors: str = ..., fkSkeleton: str = ..., name: str = ..., pinHandFeet: bool | int = ..., placeNewPivot: bool | int = ..., posture: str = ..., query: bool | int = ..., sourceSkeleton: str = ..., stancePose: bool | int | str = ..., type: str = ...) -> Any: ...

@overload
def checkBox(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., offCommand: str | Callable = ..., onCommand: str | Callable = ..., preventOverride: bool | int = ..., recomputeSize: bool | int = ..., statusBarMessage: str = ..., value: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def checkBox(*args, align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: bool | int | str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., offCommand: bool | int | str | Callable = ..., onCommand: bool | int | str | Callable = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., recomputeSize: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., value: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def checkBoxGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., changeCommand1: str | Callable = ..., changeCommand2: str | Callable = ..., changeCommand3: str | Callable = ..., changeCommand4: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., label1: str = ..., label2: str = ..., label3: str = ..., label4: str = ..., labelArray2: tuple[str, str] = ..., labelArray3: tuple[str, str, str] = ..., labelArray4: tuple[str, str, str, str] = ..., manage: bool | int = ..., noBackground: bool | int = ..., offCommand: str | Callable = ..., offCommand1: str | Callable = ..., offCommand2: str | Callable = ..., offCommand3: str | Callable = ..., offCommand4: str | Callable = ..., onCommand: str | Callable = ..., onCommand1: str | Callable = ..., onCommand2: str | Callable = ..., onCommand3: str | Callable = ..., onCommand4: str | Callable = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., value1: bool | int = ..., value2: bool | int = ..., value3: bool | int = ..., value4: bool | int = ..., valueArray2: tuple[bool | int, bool | int] = ..., valueArray3: tuple[bool | int, bool | int, bool | int] = ..., valueArray4: tuple[bool | int, bool | int, bool | int, bool | int] = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def checkBoxGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., changeCommand1: str | Callable = ..., changeCommand2: str | Callable = ..., changeCommand3: str | Callable = ..., changeCommand4: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., label1: bool | int | str = ..., label2: bool | int | str = ..., label3: bool | int | str = ..., label4: bool | int | str = ..., labelArray2: bool | int | tuple[str, str] = ..., labelArray3: bool | int | tuple[str, str, str] = ..., labelArray4: bool | int | tuple[str, str, str, str] = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfCheckBoxes: int = ..., numberOfPopupMenus: bool | int = ..., offCommand: str | Callable = ..., offCommand1: str | Callable = ..., offCommand2: str | Callable = ..., offCommand3: str | Callable = ..., offCommand4: str | Callable = ..., onCommand: str | Callable = ..., onCommand1: str | Callable = ..., onCommand2: str | Callable = ..., onCommand3: str | Callable = ..., onCommand4: str | Callable = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., value1: bool | int = ..., value2: bool | int = ..., value3: bool | int = ..., value4: bool | int = ..., valueArray2: bool | int | tuple[bool | int, bool | int] = ..., valueArray3: bool | int | tuple[bool | int, bool | int, bool | int] = ..., valueArray4: bool | int | tuple[bool | int, bool | int, bool | int, bool | int] = ..., vertical: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def checkDefaultRenderGlobals(*args, edit: bool | int = ..., query: bool | int = ...) -> Any: ...
def choice(*args, attribute: str | list[str] = ..., controlPoints: bool | int = ..., edit: bool | int = ..., index: int = ..., name: bool | int | str = ..., query: bool | int = ..., selector: bool | int | str = ..., shape: bool | int = ..., sourceAttribute: str = ..., time: int | float | list[int | float] = ...) -> Any: ...

@overload
def circle(*args, edit: Literal[True], caching: bool | int = ..., center: tuple[float, float, float] = ..., centerX: float = ..., centerY: float = ..., centerZ: float = ..., degree: int = ..., first: tuple[float, float, float] = ..., firstPointX: float = ..., firstPointY: float = ..., firstPointZ: float = ..., fixCenter: bool | int = ..., frozen: bool | int = ..., nodeState: int = ..., normal: tuple[float, float, float] = ..., normalX: float = ..., normalY: float = ..., normalZ: float = ..., radius: float = ..., sections: int = ..., sweep: float = ..., tolerance: float = ..., useTolerance: bool | int = ...) -> None: ...

@overload
def circle(*args, caching: bool | int = ..., center: bool | int | tuple[float, float, float] = ..., centerX: bool | int | float = ..., centerY: bool | int | float = ..., centerZ: bool | int | float = ..., constructionHistory: bool | int = ..., degree: int = ..., first: bool | int | tuple[float, float, float] = ..., firstPointX: bool | int | float = ..., firstPointY: bool | int | float = ..., firstPointZ: bool | int | float = ..., fixCenter: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., normal: bool | int | tuple[float, float, float] = ..., normalX: bool | int | float = ..., normalY: bool | int | float = ..., normalZ: bool | int | float = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., sections: int = ..., sweep: bool | int | float = ..., tolerance: bool | int | float = ..., useTolerance: bool | int = ...) -> Any: ...

@overload
def circularFillet(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., positionTolerance: float = ..., primaryRadius: float = ..., secondaryRadius: float = ..., tangentTolerance: float = ...) -> None: ...

@overload
def circularFillet(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., curveOnSurface: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., positionTolerance: bool | int | float = ..., primaryRadius: bool | int | float = ..., query: bool | int = ..., secondaryRadius: bool | int | float = ..., tangentTolerance: bool | int | float = ...) -> Any: ...
def clearCache(*args, allNodes: bool | int = ..., computed: bool | int = ..., dirty: bool | int = ...) -> Any: ...
def clearDynStartState(*args, **keywords): ...
def clearNClothStartState(*args, **keywords): ...
def clearShear(*args) -> Any: ...

@overload
def clip(*args, edit: Literal[True], active: str = ..., endTime: int | float = ..., split: int | float = ..., startTime: int | float = ...) -> None: ...

@overload
def clip(*args, absolute: bool | int = ..., absoluteRotations: bool | int = ..., active: bool | int | str = ..., addTrack: bool | int = ..., allAbsolute: bool | int = ..., allClips: bool | int = ..., allRelative: bool | int = ..., allSourceClips: bool | int = ..., animCurveRange: bool | int = ..., character: bool | int = ..., constraint: bool | int = ..., copy: bool | int = ..., defaultAbsolute: bool | int = ..., duplicate: bool | int = ..., endTime: bool | int | int | float = ..., expression: bool | int = ..., ignoreSubcharacters: bool | int = ..., isolate: bool | int = ..., leaveOriginal: bool | int = ..., mapMethod: str = ..., name: bool | int | str | list[str] = ..., newName: str = ..., paste: bool | int = ..., pasteInstance: bool | int = ..., query: bool | int = ..., remove: bool | int = ..., removeTrack: bool | int = ..., rotationOffset: bool | int | tuple[float, float, float] = ..., rotationsAbsolute: bool | int = ..., scheduleClip: bool | int = ..., sourceClipName: bool | int = ..., split: int | float = ..., startTime: bool | int | int | float = ..., translationOffset: bool | int | tuple[float, float, float] = ..., useChannel: str | list[str] = ...) -> Any: ...

@overload
def clipEditor(*args, edit: Literal[True], autoFit: str = ..., autoFitTime: str = ..., clipDropCmd: str = ..., clipStyle: int = ..., deleteCmd: str = ..., deselectAll: bool | int = ..., displayActiveKeyTangents: str = ..., displayActiveKeys: str = ..., displayInfinities: str = ..., displayKeys: str = ..., displayTangents: str = ..., displayValues: str = ..., docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., frameAll: bool | int = ..., frameRange: tuple[float, float] = ..., highlightConnection: str = ..., listAllCharacters: bool | int = ..., listCurrentCharacters: bool | int = ..., lockMainConnection: bool | int = ..., lookAt: str = ..., mainListConnection: str = ..., manageSequencer: bool | int = ..., parent: str = ..., selectBlend: tuple[str, str, str] = ..., selectClip: tuple[str, str] = ..., selectionConnection: str = ..., snapTime: str = ..., snapValue: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def clipEditor(*args, allTrackHeights: int = ..., autoFit: bool | int | str = ..., autoFitTime: bool | int | str = ..., characterOutline: str = ..., clipDropCmd: str = ..., clipStyle: int = ..., control: bool | int = ..., defineTemplate: str = ..., deleteCmd: str = ..., deselectAll: bool | int = ..., displayActiveKeyTangents: str = ..., displayActiveKeys: str = ..., displayInfinities: str = ..., displayKeys: str = ..., displayTangents: str = ..., displayValues: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., frameAll: bool | int = ..., frameRange: bool | int | tuple[float, float] = ..., highlightConnection: bool | int | str = ..., highlightedBlend: bool | int | tuple[str, str] = ..., highlightedClip: bool | int | tuple[str, str] = ..., initialized: bool | int = ..., listAllCharacters: bool | int = ..., listCurrentCharacters: bool | int = ..., lockMainConnection: bool | int = ..., lookAt: str = ..., mainListConnection: bool | int | str = ..., manageSequencer: bool | int = ..., menuContext: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectBlend: bool | int | tuple[str, str, str] = ..., selectClip: bool | int | tuple[str, str] = ..., selectionConnection: bool | int | str = ..., snapTime: bool | int | str = ..., snapValue: bool | int | str = ..., stateString: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def clipEditorCurrentTimeCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def clipEditorCurrentTimeCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def clipMatching(*args, clipDst: tuple[str, float] = ..., clipSrc: tuple[str, float] = ..., matchRotation: int = ..., matchTranslation: int = ...) -> Any: ...

@overload
def clipSchedule(*args, edit: Literal[True], allAbsolute: bool | int = ..., allRelative: bool | int = ..., defaultAbsolute: bool | int = ..., lock: bool | int = ..., mute: bool | int = ..., rotationsAbsolute: bool | int = ..., solo: bool | int = ...) -> None: ...

@overload
def clipSchedule(*args, allAbsolute: bool | int = ..., allRelative: bool | int = ..., blend: bool | int | tuple[int, int] = ..., blendNode: bool | int | tuple[int, int] = ..., blendUsingNode: str = ..., character: bool | int = ..., clipIndex: int = ..., cycle: bool | int | float = ..., defaultAbsolute: bool | int = ..., enable: bool | int = ..., group: bool | int = ..., groupIndex: int | list[int] = ..., groupName: bool | int | str = ..., hold: bool | int | int | float = ..., insertTrack: int = ..., instance: str = ..., listCurves: bool | int = ..., listPairs: bool | int = ..., lock: bool | int = ..., mute: bool | int = ..., name: bool | int | str = ..., postCycle: bool | int | float = ..., preCycle: bool | int | float = ..., query: bool | int = ..., remove: bool | int = ..., removeBlend: tuple[int, int] = ..., removeEmptyTracks: bool | int = ..., removeTrack: int = ..., rotationsAbsolute: bool | int = ..., scale: bool | int | float = ..., shift: int = ..., shiftIndex: int | list[int] = ..., solo: bool | int = ..., sourceClipName: bool | int = ..., sourceEnd: bool | int | int | float = ..., sourceStart: bool | int | int | float = ..., start: bool | int | int | float = ..., track: int = ..., weight: bool | int | float = ..., weightStyle: int = ...) -> Any: ...

@overload
def clipSchedulerOutliner(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., clipScheduler: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def clipSchedulerOutliner(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., clipScheduler: str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def closeCurve(*args, edit: Literal[True], blendBias: float = ..., blendKnotInsertion: bool | int = ..., caching: bool | int = ..., nodeState: int = ..., parameter: float = ..., preserveShape: int = ...) -> None: ...

@overload
def closeCurve(*args, blendBias: bool | int | float = ..., blendKnotInsertion: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., curveOnSurface: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., parameter: bool | int | float = ..., preserveShape: int = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...

@overload
def closeSurface(*args, edit: Literal[True], blendBias: float = ..., blendKnotInsertion: bool | int = ..., caching: bool | int = ..., direction: int = ..., nodeState: int = ..., parameter: float = ..., preserveShape: int = ...) -> None: ...

@overload
def closeSurface(*args, blendBias: bool | int | float = ..., blendKnotInsertion: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., direction: int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., parameter: bool | int | float = ..., preserveShape: int = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...

@overload
def cluster(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., envelope: float = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., resetGeometry: bool | int = ..., split: bool | int = ..., weightedNode: tuple[str, str] = ...) -> None: ...

@overload
def cluster(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., bindState: bool | int = ..., components: bool | int = ..., deformerTools: bool | int = ..., envelope: bool | int | float = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., relative: bool | int = ..., remove: bool | int | list[bool | int] = ..., resetGeometry: bool | int = ..., selectedComponents: bool | int = ..., split: bool | int = ..., useComponentTags: bool | int = ..., weightedNode: bool | int | tuple[str, str] = ...) -> Any: ...
def cmdFileOutput(*args, close: int = ..., closeAll: bool | int = ..., open: bool | int | str = ..., query: bool | int = ..., status: int = ...) -> Any: ...

@overload
def cmdScrollFieldExecuter(*args, edit: Literal[True], annotation: str = ..., appendText: str = ..., autoCloseBraces: bool | int = ..., backgroundColor: tuple[float, float, float] = ..., clear: bool | int = ..., commandCompletion: bool | int = ..., copySelection: bool | int = ..., currentLine: int = ..., cutSelection: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., execute: bool | int = ..., executeAll: bool | int = ..., fileChangedCommand: str | Callable = ..., filterKeyPress: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., insertText: str = ..., load: bool | int = ..., loadContents: str = ..., loadFile: str = ..., manage: bool | int = ..., modificationChangedCommand: str | Callable = ..., modified: bool | int = ..., noBackground: bool | int = ..., objectPathCompletion: bool | int = ..., pasteSelection: bool | int = ..., preventOverride: bool | int = ..., redo: bool | int = ..., removeStoredContents: str = ..., replaceAll: tuple[str, str] = ..., saveFile: str = ..., saveSelection: str = ..., saveSelectionToShelf: bool | int = ..., searchDown: bool | int = ..., searchMatchCase: bool | int = ..., searchString: str = ..., searchWraps: bool | int = ..., select: tuple[int, int] = ..., selectAll: bool | int = ..., showLineNumbers: bool | int = ..., showTabsAndSpaces: bool | int = ..., showTooltipHelp: bool | int = ..., source: bool | int = ..., spacesPerTab: int = ..., statusBarMessage: str = ..., storeContents: str = ..., tabsForIndent: bool | int = ..., text: str = ..., undo: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def cmdScrollFieldExecuter(*args, annotation: bool | int | str = ..., appendText: str = ..., autoCloseBraces: bool | int = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., clear: bool | int = ..., commandCompletion: bool | int = ..., copySelection: bool | int = ..., currentLine: int = ..., cutSelection: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., execute: bool | int = ..., executeAll: bool | int = ..., exists: bool | int = ..., fileChangedCommand: str | Callable = ..., filename: bool | int = ..., filterKeyPress: bool | int | str | Callable = ..., fullPathName: bool | int = ..., hasFocus: bool | int = ..., hasSelection: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., indentSelection: bool | int = ..., insertText: str = ..., isObscured: bool | int = ..., load: bool | int = ..., loadContents: str = ..., loadFile: str = ..., manage: bool | int = ..., modificationChangedCommand: str | Callable = ..., modified: bool | int = ..., noBackground: bool | int = ..., numberOfLines: int = ..., numberOfPopupMenus: bool | int = ..., objectPathCompletion: bool | int = ..., parent: bool | int | str = ..., pasteSelection: bool | int = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., receiveFocusCommand: callable = ..., redo: bool | int = ..., removeStoredContents: str = ..., replaceAll: tuple[str, str] = ..., saveFile: str = ..., saveSelection: str = ..., saveSelectionToShelf: bool | int = ..., searchAndSelect: bool | int = ..., searchDown: bool | int = ..., searchMatchCase: bool | int = ..., searchString: bool | int | str = ..., searchWraps: bool | int = ..., select: tuple[int, int] = ..., selectAll: bool | int = ..., selectedText: bool | int = ..., showLineNumbers: bool | int = ..., showTabsAndSpaces: bool | int = ..., showTooltipHelp: bool | int = ..., source: bool | int = ..., sourceType: bool | int | str = ..., spacesPerTab: int = ..., statusBarMessage: str = ..., storeContents: str = ..., tabsForIndent: bool | int = ..., text: bool | int | str = ..., textLength: bool | int = ..., undo: bool | int = ..., unindentSelection: bool | int = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...  # type: ignore[valid-type]

@overload
def cmdScrollFieldReporter(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., clear: bool | int = ..., copySelection: bool | int = ..., cutSelection: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., echoAllCommands: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., filterSourceType: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., lineNumbers: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., pasteSelection: bool | int = ..., preventOverride: bool | int = ..., receiveFocusCommand: str | Callable = ..., saveSelection: str = ..., saveSelectionToShelf: bool | int = ..., select: tuple[int, int] = ..., selectAll: bool | int = ..., stackTrace: bool | int = ..., statusBarMessage: str = ..., suppressErrors: bool | int = ..., suppressInfo: bool | int = ..., suppressResults: bool | int = ..., suppressStackTrace: bool | int = ..., suppressWarnings: bool | int = ..., text: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def cmdScrollFieldReporter(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., clear: bool | int = ..., copySelection: bool | int = ..., cutSelection: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., echoAllCommands: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., filterSourceType: bool | int | str = ..., fullPathName: bool | int = ..., hasFocus: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., lineNumbers: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., pasteSelection: bool | int = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., receiveFocusCommand: str | Callable = ..., saveSelection: str = ..., saveSelectionToShelf: bool | int = ..., select: tuple[int, int] = ..., selectAll: bool | int = ..., stackTrace: bool | int = ..., statusBarMessage: str = ..., suppressErrors: bool | int = ..., suppressInfo: bool | int = ..., suppressResults: bool | int = ..., suppressStackTrace: bool | int = ..., suppressWarnings: bool | int = ..., text: bool | int | str = ..., textLength: bool | int = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def cmdShell(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., command: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfHistoryLines: int = ..., numberOfSavedLines: int = ..., preventOverride: bool | int = ..., prompt: str = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def cmdShell(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., clear: bool | int = ..., command: bool | int | str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfHistoryLines: int = ..., numberOfPopupMenus: bool | int = ..., numberOfSavedLines: int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., prompt: bool | int | str = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def coarsenSubdivSelectionList(*args) -> Any: ...

@overload
def collision(*args, edit: Literal[True], friction: float = ..., name: str = ..., offset: float = ..., resilience: float = ...) -> None: ...

@overload
def collision(*args, friction: bool | int | float = ..., name: bool | int | str = ..., offset: bool | int | float = ..., query: bool | int = ..., resilience: bool | int | float = ...) -> Any: ...
def color(*args, rgbColor: tuple[float, float, float] = ..., userDefined: int = ...) -> Any: ...
def colorAtPoint(*args, coordU: float | list[float] = ..., coordV: float | list[float] = ..., maxU: float = ..., maxV: float = ..., minU: float = ..., minV: float = ..., output: str = ..., samplesU: int = ..., samplesV: int = ...) -> Any: ...
def colorEditor(*args, alpha: bool | int | float = ..., hsvValue: bool | int | tuple[float, float, float] = ..., mini: bool | int = ..., parent: str = ..., position: tuple[int, int] = ..., query: bool | int = ..., result: bool | int = ..., rgbValue: bool | int | tuple[float, float, float] = ...) -> Any: ...
def colorIndex(*args, active: bool | int = ..., dormant: bool | int = ..., hueSaturationValue: bool | int = ..., query: bool | int = ..., resetToFactory: bool | int = ..., resetToSaved: bool | int = ..., userColor: bool | int = ...) -> Any: ...

@overload
def colorIndexSliderGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraLabel: str = ..., forceDragRefresh: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., invisible: int = ..., label: str = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def colorIndexSliderGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraLabel: bool | int | str = ..., forceDragRefresh: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., invisible: int = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def colorInputWidgetGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., alphaValue: float = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., hsvValue: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rgbValue: tuple[float, float, float] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def colorInputWidgetGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., alphaValue: bool | int | float = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., forceDragRefresh: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., hsvValue: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rgbValue: bool | int | tuple[float, float, float] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def colorManagementCatalog(*args, addTransform: str = ..., editUserTransformPath: str = ..., listSupportedExtensions: bool | int = ..., listTransformConnections: bool | int = ..., path: str = ..., queryUserTransformPath: bool | int = ..., removeTransform: str = ..., transformConnection: str = ..., type: str = ...) -> Any: ...
def colorManagementConvert(*args, toDisplaySpace: tuple[float, float, float] = ...) -> Any: ...

@overload
def colorManagementFileRules(*args, edit: Literal[True], colorSpace: str = ..., extension: str = ..., pattern: str = ...) -> None: ...

@overload
def colorManagementFileRules(*args, addRule: str = ..., colorSpace: bool | int | str = ..., colorSpaceDescription: bool | int | str = ..., colorSpaceFamilies: bool | int | str = ..., colorSpaceNames: bool | int = ..., down: str = ..., enabled: bool | int = ..., evaluate: str = ..., extension: bool | int | str = ..., listRules: bool | int = ..., load: bool | int = ..., moveUp: str = ..., pattern: bool | int | str = ..., query: bool | int = ..., remove: str = ..., restoreDefaults: bool | int = ..., save: bool | int = ...) -> Any: ...

@overload
def colorManagementPrefs(*args, edit: Literal[True], cmConfigFileEnabled: bool | int = ..., cmEnabled: bool | int = ..., colorManagePots: bool | int = ..., configFilePath: str = ..., defaultInputSpaceName: str = ..., displayName: str = ..., ocioRulesEnabled: bool | int = ..., outputTarget: str = ..., outputTransformEnabled: bool | int = ..., outputTransformName: str = ..., outputTransformUseColorConversion: bool | int = ..., outputUseViewTransform: bool | int = ..., policyFileName: str = ..., popupOnError: bool | int = ..., renderingSpaceName: str = ..., viewName: str = ..., viewTransformName: str = ...) -> None: ...

@overload
def colorManagementPrefs(*args, cmConfigFileEnabled: bool | int = ..., cmEnabled: bool | int = ..., colorManageAllNodes: bool | int = ..., colorManagePots: bool | int = ..., colorManagedNodes: bool | int = ..., colorManagementSDKVersion: bool | int | str = ..., configFilePath: bool | int | str = ..., configFileVersion: bool | int | str = ..., defaultInputSpaceName: bool | int | str = ..., displayName: bool | int | str = ..., displayNames: bool | int = ..., equalsToPolicyFile: bool | int | str = ..., exportPolicy: str = ..., inhibitEvents: bool | int = ..., inputSpaceDescription: bool | int | str = ..., inputSpaceFamilies: bool | int | str = ..., inputSpaceNames: bool | int = ..., loadPolicy: str = ..., loadedDefaultInputSpaceName: bool | int | str = ..., loadedDisplayName: bool | int | str = ..., loadedOutputTransformName: bool | int | str = ..., loadedRenderingSpaceName: bool | int | str = ..., loadedViewName: bool | int | str = ..., loadedViewTransformName: bool | int | str = ..., missingColorSpaceNodes: bool | int = ..., ocioRulesEnabled: bool | int = ..., ociov2Enabled: bool | int = ..., outputTarget: bool | int | str = ..., outputTransformEnabled: bool | int = ..., outputTransformName: bool | int | str = ..., outputTransformNames: bool | int = ..., outputTransformUseColorConversion: bool | int = ..., outputUseViewTransform: bool | int = ..., policyFileName: bool | int | str = ..., popupOnError: bool | int = ..., query: bool | int = ..., refresh: bool | int = ..., renderingSpaceName: bool | int | str = ..., renderingSpaceNames: bool | int = ..., restoreDefaults: bool | int = ..., viewDisplayNames: bool | int | str = ..., viewName: bool | int | str = ..., viewNames: bool | int = ..., viewTransformName: bool | int | str = ..., viewTransformNames: bool | int = ...) -> Any: ...

@overload
def colorSliderButtonGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., alphaValue: float = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., buttonCommand: str | Callable = ..., buttonLabel: str = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., forceDragRefresh: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., hsvValue: tuple[float, float, float] = ..., image: str = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rgbValue: tuple[float, float, float] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., symbolButtonCommand: str | Callable = ..., symbolButtonDisplay: bool | int = ..., useDisplaySpace: bool | int = ..., useVpColorPicker: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def colorSliderButtonGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., alphaValue: bool | int | float = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., buttonCommand: str | Callable = ..., buttonLabel: bool | int | str = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., forceDragRefresh: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., hsvValue: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rgbValue: bool | int | tuple[float, float, float] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., symbolButtonCommand: str | Callable = ..., symbolButtonDisplay: bool | int = ..., useDisplaySpace: bool | int = ..., useTemplate: str = ..., useVpColorPicker: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def colorSliderGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., alphaValue: float = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., forceDragRefresh: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., hsvValue: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rgbValue: tuple[float, float, float] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., useDisplaySpace: bool | int = ..., useVpColorPicker: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def colorSliderGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., alphaValue: bool | int | float = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., forceDragRefresh: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., hsvValue: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rgbValue: bool | int | tuple[float, float, float] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., useDisplaySpace: bool | int = ..., useTemplate: str = ..., useVpColorPicker: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def columnLayout(*args, edit: Literal[True], adjustableColumn: bool | int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., columnAlign: str = ..., columnAttach: tuple[str, int] = ..., columnOffset: tuple[str, int] = ..., columnWidth: int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rowSpacing: int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def columnLayout(*args, adjustableColumn: bool | int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., childArray: bool | int = ..., columnAlign: str = ..., columnAttach: tuple[str, int] = ..., columnOffset: tuple[str, int] = ..., columnWidth: int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowSpacing: int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def combinationShape(*args, edit: Literal[True], combineMethod: int = ...) -> None: ...

@overload
def combinationShape(*args, addDriver: bool | int = ..., allDrivers: bool | int = ..., blendShape: str = ..., combinationTargetIndex: int = ..., combinationTargetName: str = ..., combineMethod: int = ..., driverTargetIndex: int | list[int] = ..., driverTargetName: str | list[str] = ..., exist: bool | int = ..., query: bool | int = ..., removeDriver: bool | int = ...) -> Any: ...
def commandEcho(*args, addFilter: str = ..., filter: bool | int | str = ..., lineNumbers: bool | int = ..., query: bool | int = ..., state: bool | int = ...) -> Any: ...

@overload
def commandLine(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., command: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., holdFocus: bool | int = ..., inputAnnotation: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfHistoryLines: int = ..., outputAnnotation: str = ..., preventOverride: bool | int = ..., sourceType: str = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def commandLine(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., command: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., holdFocus: bool | int = ..., inputAnnotation: bool | int | str = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfHistoryLines: int = ..., numberOfPopupMenus: bool | int = ..., outputAnnotation: bool | int | str = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., sourceType: bool | int | str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def commandLogging(*args, historySize: int = ..., logCommands: bool | int = ..., logFile: bool | int | str = ..., query: bool | int = ..., recordCommands: bool | int = ..., resetLogFile: bool | int = ...) -> Any: ...
def commandPort(*args, bufferSize: int = ..., close: bool | int = ..., echoOutput: bool | int = ..., listPorts: bool | int = ..., name: str = ..., noreturn: bool | int = ..., outputVar: str = ..., pickleOutput: bool | int = ..., prefix: str = ..., query: bool | int = ..., returnNumCommands: bool | int = ..., securityWarning: bool | int = ..., sourceType: str = ...) -> Any: ...

@overload
def componentBox(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., execute: tuple[str, bool | int] = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., labelWidth: int = ..., manage: bool | int = ..., maxHeight: int = ..., maxWidth: int = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., rowHeight: int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def componentBox(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., execute: tuple[str, bool | int] = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., labelWidth: int = ..., manage: bool | int = ..., maxHeight: int = ..., maxWidth: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowHeight: int = ..., selectedAttr: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def componentEditor(*args, edit: Literal[True], docTag: str = ..., filter: str = ..., floatField: str = ..., floatSlider: str = ..., forceMainConnection: str = ..., hidePathName: bool | int = ..., hideZeroColumns: bool | int = ..., highlightConnection: str = ..., justifyHeaders: int = ..., lockInput: bool | int = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., newTab: tuple[str, str, str] = ..., normalizeWeights: int = ..., operationType: int = ..., parent: str = ..., precision: int = ..., removeTab: str = ..., selectionConnection: str = ..., setOperationLabel: tuple[int, str] = ..., showNamespaces: bool | int = ..., showSelected: bool | int = ..., sortAlpha: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def componentEditor(*args, control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., floatField: bool | int | str = ..., floatSlider: bool | int | str = ..., forceMainConnection: bool | int | str = ..., hidePathName: bool | int = ..., hideZeroColumns: bool | int = ..., highlightConnection: bool | int | str = ..., justifyHeaders: int = ..., lockInput: bool | int = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., newTab: tuple[str, str, str] = ..., normalizeWeights: int = ..., operationCount: bool | int = ..., operationLabels: bool | int = ..., operationType: int = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., precision: int = ..., query: bool | int = ..., removeTab: str = ..., selected: bool | int = ..., selectionConnection: bool | int | str = ..., setOperationLabel: tuple[int, str] = ..., showNamespaces: bool | int = ..., showObjects: bool | int = ..., showSelected: bool | int = ..., sortAlpha: bool | int = ..., stateString: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...
def componentTag(*args, create: bool | int = ..., delete: bool | int = ..., injectionLocation: str = ..., modify: str = ..., newTagName: str = ..., queryEdit: bool | int = ..., rename: bool | int = ..., tagName: str | list[str] = ..., uniqueTagName: bool | int = ...) -> Any: ...

@overload
def condition(*args, edit: Literal[True], state: bool | int = ...) -> None: ...

@overload
def condition(*args, delete: bool | int = ..., dependency: str | list[str] = ..., initialize: bool | int = ..., query: bool | int = ..., script: str = ..., state: bool | int = ...) -> Any: ...

@overload
def cone(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., degree: int = ..., endSweep: float = ..., frozen: bool | int = ..., heightRatio: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., radius: float = ..., sections: int = ..., spans: int = ..., startSweep: float = ..., tolerance: float = ..., useOldInitBehaviour: bool | int = ..., useTolerance: bool | int = ...) -> None: ...

@overload
def cone(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., endSweep: bool | int | float = ..., frozen: bool | int = ..., heightRatio: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., pivot: bool | int | tuple[float, float, float] = ..., polygon: int = ..., query: bool | int = ..., radius: bool | int | float = ..., sections: int = ..., spans: int = ..., startSweep: bool | int | float = ..., tolerance: bool | int | float = ..., useOldInitBehaviour: bool | int = ..., useTolerance: bool | int = ...) -> Any: ...
def confirmDialog(*args, annotation: str | list[str] = ..., backgroundColor: tuple[float, float, float] = ..., button: str | list[str] = ..., cancelButton: str = ..., defaultButton: str = ..., dismissString: str = ..., icon: str = ..., message: str = ..., messageAlign: str = ..., parent: str = ..., title: str = ...) -> Any: ...
def connectAttr(*args, force: bool | int = ..., lock: bool | int = ..., nextAvailable: bool | int = ..., referenceDest: str = ...) -> None: ...
def connectControl(*args, fileName: bool | int = ..., includeChildren: bool | int = ..., index: int = ..., preventContextualMenu: bool | int = ..., preventOverride: bool | int = ...) -> Any: ...
def connectDynamic(*args, addScriptHandler: str | Callable = ..., collisions: str | list[str] = ..., delete: bool | int = ..., emitters: str | list[str] = ..., fields: str | list[str] = ..., removeScriptHandler: int = ...) -> Any: ...
def connectJoint(*args, connectMode: bool | int = ..., parentMode: bool | int = ...) -> Any: ...

@overload
def connectionInfo(attribute: str, destinationFromSource: Literal[True]) -> list[str]: ...

@overload
def connectionInfo(attribute: str, getExactDestination: Literal[True]) -> str: ...

@overload
def connectionInfo(attribute: str, getLockedAncestor: Literal[True]) -> str: ...

@overload
def connectionInfo(attribute: str, getSource: Literal[True]) -> str: ...

@overload
def connectionInfo(attribute: str, isDestination: Literal[True]) -> bool: ...

@overload
def connectionInfo(attribute: str, isExactDestination: Literal[True]) -> bool: ...

@overload
def connectionInfo(attribute: str, isExactSource: Literal[True]) -> bool: ...

@overload
def connectionInfo(attribute: str, isLocked: Literal[True]) -> bool: ...

@overload
def connectionInfo(attribute: str, isSource: Literal[True]) -> bool: ...

@overload
def connectionInfo(attribute: str, sourceFromDestination: Literal[True]) -> str: ...

@overload
def constrain(*args, edit: Literal[True], damping: float = ..., interpenetrate: bool | int = ..., name: str = ..., orientation: tuple[float, float, float] = ..., position: tuple[float, float, float] = ..., restLength: float = ..., stiffness: float = ...) -> None: ...

@overload
def constrain(*args, barrier: bool | int = ..., damping: bool | int | float = ..., directionalHinge: bool | int = ..., hinge: bool | int = ..., interpenetrate: bool | int = ..., nail: bool | int = ..., name: bool | int | str = ..., orientation: bool | int | tuple[float, float, float] = ..., pinConstraint: bool | int = ..., position: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., restLength: bool | int | float = ..., spring: bool | int = ..., stiffness: bool | int | float = ...) -> Any: ...
def constructionHistory(*args, query: bool | int = ..., toggle: bool | int = ...) -> Any: ...

@overload
def container(*args, edit: Literal[True], addNode: str = ..., bindAttr: tuple[str, str] = ..., current: bool | int = ..., force: bool | int = ..., includeHierarchyAbove: bool | int = ..., includeHierarchyBelow: bool | int = ..., includeNetwork: bool | int = ..., includeNetworkDetails: str | list[str] = ..., includeShaders: bool | int = ..., includeShapes: bool | int = ..., includeTransform: bool | int = ..., nodeNamePrefix: bool | int = ..., publishAndBind: tuple[str, str] = ..., publishAsChild: tuple[str, str] = ..., publishAsParent: tuple[str, str] = ..., publishAsRoot: tuple[str, bool | int] = ..., publishConnections: bool | int = ..., publishName: str = ..., removeContainer: bool | int = ..., removeNode: str = ..., unbindAndUnpublish: str = ..., unbindAttr: tuple[str, str] = ..., unbindChild: str = ..., unbindParent: str = ..., unpublishChild: str = ..., unpublishName: str = ..., unpublishParent: str = ...) -> None: ...

@overload
def container(*args, addNode: str = ..., asset: bool | int | str = ..., assetMember: bool | int | str = ..., bindAttr: bool | int | tuple[str, str] = ..., connectionList: bool | int = ..., current: bool | int = ..., fileName: bool | int | str = ..., findContainer: bool | int | str = ..., force: bool | int = ..., includeHierarchyAbove: bool | int = ..., includeHierarchyBelow: bool | int = ..., includeNetwork: bool | int = ..., includeNetworkDetails: str | list[str] = ..., includeShaders: bool | int = ..., includeShapes: bool | int = ..., includeTransform: bool | int = ..., isContainer: bool | int = ..., name: str = ..., nodeList: bool | int = ..., nodeNamePrefix: bool | int = ..., parentContainer: bool | int = ..., preview: bool | int = ..., publishAndBind: tuple[str, str] = ..., publishAsChild: bool | int | tuple[str, str] = ..., publishAsParent: bool | int | tuple[str, str] = ..., publishAsRoot: bool | int | tuple[str, bool | int] = ..., publishAttr: bool | int | str = ..., publishConnections: bool | int = ..., publishName: bool | int | str = ..., query: bool | int = ..., removeContainer: bool | int = ..., removeNode: str = ..., type: bool | int | str = ..., unbindAndUnpublish: str = ..., unbindAttr: bool | int | tuple[str, str] = ..., unbindChild: str = ..., unbindParent: str = ..., unpublishChild: str = ..., unpublishName: str = ..., unpublishParent: str = ..., unsortedOrder: bool | int = ...) -> Any: ...

@overload
def containerBind(*args, edit: Literal[True], bindingSetList: bool | int = ...) -> None: ...

@overload
def containerBind(*args, allNames: bool | int = ..., bindingSet: bool | int | str = ..., bindingSetConditions: bool | int = ..., bindingSetList: bool | int = ..., force: bool | int = ..., preview: bool | int = ..., query: bool | int = ...) -> Any: ...
def containerProxy(*args, edit: bool | int = ..., fromTemplate: str = ..., query: bool | int = ..., type: str = ...) -> Any: ...

@overload
def containerPublish(*args, edit: Literal[True], bindNode: tuple[str, str] = ..., bindTemplateStandins: bool | int = ..., publishNode: tuple[str, str] = ..., unbindNode: str = ..., unpublishNode: str = ...) -> None: ...

@overload
def containerPublish(*args, bindNode: bool | int | tuple[str, str] = ..., bindTemplateStandins: bool | int = ..., inConnections: bool | int = ..., mergeShared: bool | int = ..., outConnections: bool | int = ..., publishNode: bool | int | tuple[str, str] = ..., query: bool | int = ..., unbindNode: bool | int | str = ..., unpublishNode: bool | int | str = ...) -> Any: ...

@overload
def containerTemplate(*args, edit: Literal[True], addBindingSet: str = ..., addNames: bool | int = ..., addView: str = ..., allKeyable: bool | int = ..., attribute: str | list[str] = ..., attributeList: str = ..., expandCompounds: bool | int = ..., fromSelection: bool | int = ..., publishedNodeList: str = ..., removeBindingSet: str = ..., removeView: str = ..., searchPath: str = ..., silent: bool | int = ..., updateBindingSet: str = ..., useHierarchy: bool | int = ...) -> None: ...

@overload
def containerTemplate(*args, addBindingSet: str = ..., addNames: bool | int = ..., addView: str = ..., allKeyable: bool | int = ..., attribute: str | list[str] = ..., attributeList: bool | int | str = ..., baseName: bool | int | str = ..., bindingSetList: bool | int | str = ..., childAnchor: bool | int = ..., delete: bool | int = ..., exists: bool | int = ..., expandCompounds: bool | int = ..., fileName: bool | int | str = ..., force: bool | int = ..., fromContainer: str = ..., fromSelection: bool | int = ..., layoutMode: int = ..., load: bool | int = ..., matchFile: bool | int | str = ..., matchName: bool | int | str = ..., parentAnchor: bool | int = ..., publishedNodeList: bool | int | str = ..., query: bool | int = ..., removeBindingSet: str = ..., removeView: str = ..., rootTransform: bool | int = ..., save: bool | int = ..., searchPath: bool | int | str = ..., silent: bool | int = ..., templateList: bool | int | str = ..., unload: bool | int = ..., updateBindingSet: str = ..., useHierarchy: bool | int = ..., viewList: bool | int | str = ...) -> Any: ...
def containerView(*args, edit: bool | int = ..., itemInfo: bool | int | str = ..., itemList: bool | int = ..., query: bool | int = ..., viewDescription: bool | int = ..., viewLabel: bool | int = ..., viewList: bool | int = ..., viewName: bool | int | str = ...) -> Any: ...

@overload
def contentBrowser(*args, edit: Literal[True], addContentPath: str = ..., context: tuple[str, str, str] = ..., docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., location: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., parent: str = ..., preview: bool | int = ..., refreshTreeView: bool | int = ..., removeContentPath: str = ..., saveCurrentContext: bool | int = ..., selectionConnection: str = ..., thumbnailView: bool | int = ..., treeView: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def contentBrowser(*args, addContentPath: str = ..., context: bool | int | tuple[str, str, str] = ..., control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., location: str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., preview: bool | int = ..., query: bool | int = ..., refreshTreeView: bool | int = ..., removeContentPath: str = ..., saveCurrentContext: bool | int = ..., selectionConnection: bool | int | str = ..., stateString: bool | int = ..., thumbnailView: bool | int = ..., treeView: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...
def contextInfo(*args, apiImage1: str = ..., c: bool | int = ..., edit: bool | int = ..., escapeContext: bool | int = ..., exists: bool | int = ..., image1: bool | int = ..., image2: bool | int = ..., image3: bool | int = ..., query: bool | int = ..., title: bool | int = ...) -> Any: ...

@overload
def control(*args, exists: Literal[True]) -> bool: ...

@overload
def control(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def control(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def controller(*args, edit: Literal[True], index: int = ..., parent: bool | int = ..., unparent: bool | int = ...) -> None: ...

@overload
def controller(*args, allControllers: bool | int = ..., children: bool | int = ..., group: bool | int = ..., index: int = ..., isController: bool | int | str = ..., parent: bool | int = ..., pickWalkDown: bool | int = ..., pickWalkLeft: bool | int = ..., pickWalkRight: bool | int = ..., pickWalkUp: bool | int = ..., query: bool | int = ..., unparent: bool | int = ...) -> Any: ...
def convertIffToPsd(*args, iffFileName: bool | int | str = ..., psdFileName: bool | int | str = ..., query: bool | int = ..., xResolution: int = ..., yResolution: int = ...) -> Any: ...
def convertSolidTx(*args, alpha: bool | int = ..., antiAlias: bool | int = ..., backgroundColor: tuple[int, int, int] = ..., backgroundMode: str = ..., camera: str = ..., componentRange: bool | int = ..., doubleSided: bool | int = ..., edit: bool | int = ..., fileFormat: str = ..., fileImageName: str = ..., fillTextureSeams: bool | int = ..., force: bool | int = ..., fullUvRange: bool | int = ..., name: str = ..., pixelFormat: str = ..., query: bool | int = ..., resolutionX: int = ..., resolutionY: int = ..., reuseDepthMap: bool | int = ..., samplePlane: bool | int = ..., samplePlaneRange: tuple[float, float, float, float] = ..., shadows: bool | int = ..., uvBBoxIntersect: bool | int = ..., uvRange: tuple[float, float, float, float] = ..., uvSetName: str = ...) -> Any: ...
def convertTessellation(*args, allCameras: bool | int = ..., camera: str = ...) -> Any: ...
def convertUnit(*args, fromUnit: str = ..., toUnit: str = ...) -> Any: ...
def copyAttr(*args, attribute: str | list[str] = ..., containerParentChild: bool | int = ..., edit: bool | int = ..., inConnections: bool | int = ..., keepSourceConnections: bool | int = ..., outConnections: bool | int = ..., query: bool | int = ..., renameTargetContainer: bool | int = ..., values: bool | int = ...) -> Any: ...

@overload
def copyDeformerWeights(*args, edit: Literal[True], destinationDeformer: str = ..., destinationShape: str = ..., mirrorInverse: bool | int = ..., mirrorMode: str = ..., noMirror: bool | int = ..., smooth: bool | int = ..., sourceDeformer: str = ..., sourceShape: str = ..., surfaceAssociation: str = ..., uvSpace: tuple[str, str] = ...) -> None: ...

@overload
def copyDeformerWeights(*args, destinationDeformer: bool | int | str = ..., destinationShape: bool | int | str = ..., mirrorInverse: bool | int = ..., mirrorMode: bool | int | str = ..., noMirror: bool | int = ..., query: bool | int = ..., smooth: bool | int = ..., sourceDeformer: bool | int | str = ..., sourceShape: bool | int | str = ..., surfaceAssociation: bool | int | str = ..., uvSpace: bool | int | tuple[str, str] = ...) -> Any: ...
def copyFlexor(*args) -> Any: ...
def copyKey(*args, animLayer: str = ..., animation: str = ..., attribute: str | list[str] = ..., clipboard: str = ..., controlPoints: bool | int = ..., float: str | int | float | list[str | int | float] = ..., forceIndependentEulerAngles: bool | int = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., option: str = ..., shape: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ...) -> Any: ...
def copyNode(*args) -> Any: ...

@overload
def copySkinWeights(*args, edit: Literal[True], destinationSkin: str = ..., influenceAssociation: str | list[str] = ..., mirrorInverse: bool | int = ..., mirrorMode: str = ..., noBlendWeight: bool | int = ..., noMirror: bool | int = ..., normalize: bool | int = ..., sampleSpace: int = ..., selectedComponents: bool | int = ..., smooth: bool | int = ..., sourceSkin: str = ..., surfaceAssociation: str = ..., uvSpace: tuple[str, str] = ...) -> None: ...

@overload
def copySkinWeights(*args, destinationSkin: bool | int | str = ..., influenceAssociation: bool | int | str | list[str] = ..., mirrorInverse: bool | int = ..., mirrorMode: bool | int | str = ..., noBlendWeight: bool | int = ..., noMirror: bool | int = ..., normalize: bool | int = ..., query: bool | int = ..., sampleSpace: int = ..., selectedComponents: bool | int = ..., smooth: bool | int = ..., sourceSkin: bool | int | str = ..., surfaceAssociation: bool | int | str = ..., uvSpace: bool | int | tuple[str, str] = ...) -> Any: ...
def crashInfo(*args, crashFile: bool | int = ..., crashLog: bool | int = ..., query: bool | int = ..., savedBeforeCrash: bool | int = ...) -> Any: ...
def crashInfoCmd(*args) -> Any: ...
def createAttrPatterns(*args, patternDefinition: str = ..., patternFile: str = ..., patternType: str = ...) -> Any: ...
def createDisplayLayer(*args, empty: bool | int = ..., makeCurrent: bool | int = ..., name: str = ..., noRecurse: bool | int = ..., number: int = ...) -> Any: ...
def createEditor(*args, noCloseOnDelete: bool | int = ..., queueForDelete: bool | int = ...) -> Any: ...
def createLayeredPsdFile(*args, imageFileName: tuple[str, str, str] | list[tuple[str, str, str]] = ..., psdFileName: str = ..., xResolution: int = ..., yResolution: int = ...) -> Any: ...
def createNode(*args, name: str = ..., parent: str = ..., shared: bool | int = ..., skipSelect: bool | int = ...) -> str: ...
def createNurbsCircleCtx(*args, attachToSections: bool | int = ..., degree: int = ..., doDragEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., normal: tuple[float, float, float] = ..., normalType: int = ..., query: bool | int = ..., radius: float = ..., sections: int = ..., sweep: float = ..., tolerance: float = ..., toleranceType: int = ..., useTolerance: bool | int = ...) -> Any: ...
def createNurbsConeCtx(*args, attachToHeightRatio: bool | int = ..., attachToSections: bool | int = ..., attachToSpans: bool | int = ..., axis: tuple[float, float, float] = ..., axisType: int = ..., caps: int = ..., doDragEdit: bool | int = ..., edit: bool | int = ..., endSweep: float = ..., exists: bool | int = ..., extraTransformOnCaps: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., sections: int = ..., spans: int = ..., startSweep: float = ..., surfaceDegree: int = ..., tolerance: float = ..., toleranceType: int = ..., useTolerance: bool | int = ...) -> Any: ...
def createNurbsCubeCtx(*args, attachToPatchesU: bool | int = ..., attachToPatchesV: bool | int = ..., axis: tuple[float, float, float] = ..., axisType: int = ..., depth: float = ..., doDragEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., surfaceDegree: int = ..., uPatches: int = ..., vPatches: int = ..., width: float = ...) -> Any: ...
def createNurbsCylinderCtx(*args, attachToHeightRatio: bool | int = ..., attachToSections: bool | int = ..., attachToSpans: bool | int = ..., axis: tuple[float, float, float] = ..., axisType: int = ..., caps: int = ..., doDragEdit: bool | int = ..., edit: bool | int = ..., endSweep: float = ..., exists: bool | int = ..., extraTransformOnCaps: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., sections: int = ..., spans: int = ..., startSweep: float = ..., surfaceDegree: int = ..., tolerance: float = ..., toleranceType: int = ..., useTolerance: bool | int = ...) -> Any: ...
def createNurbsPlaneCtx(*args, attachToPatchesU: bool | int = ..., attachToPatchesV: bool | int = ..., axis: tuple[float, float, float] = ..., axisType: int = ..., doDragEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., surfaceDegree: int = ..., uPatches: int = ..., vPatches: int = ..., width: float = ...) -> Any: ...
def createNurbsSphereCtx(*args, attachToHeightRatio: bool | int = ..., attachToSections: bool | int = ..., attachToSpans: bool | int = ..., axis: tuple[float, float, float] = ..., axisType: int = ..., degree: int = ..., doDragEdit: bool | int = ..., edit: bool | int = ..., endSweep: float = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., sections: int = ..., spans: int = ..., startSweep: float = ..., tolerance: float = ..., toleranceType: int = ..., useTolerance: bool | int = ...) -> Any: ...
def createNurbsSquareCtx(*args, attachToSpans: bool | int = ..., axis: tuple[float, float, float] = ..., axisType: int = ..., doDragEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., spans: int = ..., surfaceDegree: int = ..., width: float = ...) -> Any: ...
def createNurbsTorusCtx(*args, attachToHeightRatio: bool | int = ..., attachToSections: bool | int = ..., attachToSpans: bool | int = ..., axis: tuple[float, float, float] = ..., axisType: int = ..., doDragEdit: bool | int = ..., edit: bool | int = ..., endSweep: float = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., minorRadius: float = ..., minorSweep: float = ..., name: str = ..., query: bool | int = ..., radius: float = ..., sections: int = ..., spans: int = ..., startSweep: float = ..., surfaceDegree: int = ..., tolerance: float = ..., toleranceType: int = ..., useTolerance: bool | int = ...) -> Any: ...
def createPolyConeCtx(*args, attachToSubdivisionsAxis: bool | int = ..., attachToSubdivisionsCap: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., roundCap: bool | int = ..., subdivisionsDepth: int = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ...) -> Any: ...
def createPolyCubeCtx(*args, attachToSubdivisionsAll: bool | int = ..., attachToSubdivisionsDepth: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., attachToSubdivisionsWidth: bool | int = ..., axis: int = ..., createUVs: int = ..., depth: float = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., subdivisionsDepth: int = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ..., width: float = ...) -> Any: ...
def createPolyCylinderCtx(*args, attachToSubdivisionsAxis: bool | int = ..., attachToSubdivisionsCap: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., roundCap: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCap: int = ..., subdivisionsHeight: int = ...) -> Any: ...
def createPolyHelixCtx(*args, attachToNumberCoils: bool | int = ..., attachToRadius: bool | int = ..., attachToSubdivisionsAxis: bool | int = ..., attachToSubdivisionsCap: bool | int = ..., attachToSubdivisionsCoil: bool | int = ..., axis: int = ..., coils: float = ..., createUVs: int = ..., direction: bool | int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., roundCap: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCap: int = ..., subdivisionsCoil: int = ..., width: float = ...) -> Any: ...
def createPolyPipeCtx(*args, attachToSubdivisionsAxis: bool | int = ..., attachToSubdivisionsCap: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., attachToThickness: bool | int = ..., axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., roundCap: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCap: int = ..., subdivisionsHeight: int = ..., thickness: float = ...) -> Any: ...
def createPolyPlaneCtx(*args, attachToSubdivisionsAll: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., attachToSubdivisionsWidth: bool | int = ..., axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., height: float = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ..., width: float = ...) -> Any: ...
def createPolyPlatonicSolidCtx(*args, axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., sideLength: float = ..., solidType: int = ...) -> Any: ...
def createPolyPrismCtx(*args, attachToNumSides: bool | int = ..., attachToSubdivisionsCap: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., length: float = ..., name: str = ..., numberOfSides: int = ..., query: bool | int = ..., sideLength: float = ..., subdivisionsCap: int = ..., subdivisionsHeight: int = ...) -> Any: ...
def createPolyPyramidCtx(*args, attachToSubdivisionsCap: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., numberOfSides: int = ..., query: bool | int = ..., sideLength: float = ..., subdivisionsDepth: int = ..., subdivisionsHeight: int = ...) -> Any: ...
def createPolySoccerBallCtx(*args, axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., sideLength: float = ...) -> Any: ...
def createPolySphereCtx(*args, attachToSubdivisionsAll: bool | int = ..., attachToSubdivisionsAxis: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ...) -> Any: ...
def createPolyTorusCtx(*args, attachToSectionRadius: bool | int = ..., attachToSubdivisionsAxis: bool | int = ..., attachToSubdivisionsHeight: bool | int = ..., axis: int = ..., createUVs: int = ..., doDragEdit: bool | int = ..., doSubdivisionsCapsEdit: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., radius: float = ..., sectionRadius: float = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ..., twist: float = ...) -> Any: ...
def createRenderLayer(*args, empty: bool | int = ..., g: bool | int = ..., makeCurrent: bool | int = ..., name: str = ..., noRecurse: bool | int = ..., number: int = ...) -> Any: ...
def createSubdivRegion(*args) -> Any: ...
def ctxAbort(*args) -> Any: ...
def ctxCompletion(*args) -> Any: ...
def ctxEditMode(*args, buttonDown: bool | int = ..., buttonUp: bool | int = ...) -> Any: ...
def ctxTraverse(*args, down: bool | int = ..., left: bool | int = ..., right: bool | int = ..., up: bool | int = ...) -> Any: ...
def currentCtx(*args) -> Any: ...
def currentTime(*args, edit: bool | int = ..., query: bool | int = ..., update: bool | int = ...) -> Any: ...

@overload
def currentTimeCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def currentTimeCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def currentUnit(*args, angle: bool | int | str = ..., fullName: bool | int = ..., linear: bool | int | str = ..., query: bool | int = ..., time: bool | int | str = ..., updateAnimation: bool | int = ...) -> Any: ...
def curve(*args, append: bool | int = ..., bezier: bool | int = ..., degree: float = ..., editPoint: tuple[float, float, float] | list[tuple[float, float, float]] = ..., knot: float | list[float] = ..., name: str = ..., objectSpace: bool | int = ..., periodic: bool | int = ..., point: tuple[float, float, float] | list[tuple[float, float, float]] = ..., pointWeight: tuple[float, float, float, float] | list[tuple[float, float, float, float]] = ..., replace: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def curveAddPtCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def curveAddPtCtx(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...
def curveBezierCtx(*args, degree: int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., manipMode: str = ..., name: str = ..., preserveShape: bool | int = ..., preserveShapeFraction: float = ..., query: bool | int = ..., refit: bool | int = ..., selectMode: str = ..., uniform: bool | int = ...) -> Any: ...

@overload
def curveCVCtx(*args, edit: Literal[True], bezier: bool | int = ..., degree: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., multEndKnots: bool | int = ..., preserveShape: bool | int = ..., rational: bool | int = ..., refit: bool | int = ..., symmetry: bool | int = ..., uniform: bool | int = ...) -> None: ...

@overload
def curveCVCtx(*args, bezier: bool | int = ..., degree: int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., multEndKnots: bool | int = ..., name: str = ..., preserveShape: bool | int = ..., query: bool | int = ..., rational: bool | int = ..., refit: bool | int = ..., symmetry: bool | int = ..., uniform: bool | int = ...) -> Any: ...

@overload
def curveEPCtx(*args, edit: Literal[True], bezier: bool | int = ..., degree: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., preserveShape: bool | int = ..., preserveShapeFraction: float = ..., refit: bool | int = ..., uniform: bool | int = ...) -> None: ...

@overload
def curveEPCtx(*args, bezier: bool | int = ..., degree: int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., preserveShape: bool | int = ..., preserveShapeFraction: bool | int | float = ..., query: bool | int = ..., refit: bool | int = ..., uniform: bool | int = ...) -> Any: ...

@overload
def curveEditorCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., relativeTangentSize: float = ..., title: str = ...) -> None: ...

@overload
def curveEditorCtx(*args, direction: int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., relativeTangentSize: bool | int | float = ..., title: bool | int | str = ...) -> Any: ...

@overload
def curveIntersect(*args, edit: Literal[True], caching: bool | int = ..., direction: tuple[float, float, float] = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., nodeState: int = ..., tolerance: float = ..., useDirection: bool | int = ...) -> None: ...

@overload
def curveIntersect(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., direction: bool | int | tuple[float, float, float] = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., frozen: bool | int = ..., nodeState: int = ..., query: bool | int = ..., tolerance: bool | int | float = ..., useDirection: bool | int = ...) -> Any: ...

@overload
def curveMoveEPCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def curveMoveEPCtx(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...
def curveOnSurface(*args, append: bool | int = ..., degree: float = ..., knot: float | list[float] = ..., name: str = ..., periodic: bool | int = ..., positionUV: tuple[float, float] | list[tuple[float, float]] = ..., replace: bool | int = ...) -> Any: ...
def curveRGBColor(*args, hueSaturationValue: bool | int = ..., list: bool | int = ..., listNames: bool | int = ..., query: bool | int = ..., remove: bool | int = ..., resetToFactory: bool | int = ..., resetToSaved: bool | int = ...) -> Any: ...

@overload
def curveSketchCtx(*args, edit: Literal[True], degree: int = ..., image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def curveSketchCtx(*args, degree: int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def cutKey(*args, animation: str = ..., attribute: str | list[str] = ..., clear: bool | int = ..., controlPoints: bool | int = ..., float: str | int | float | list[str | int | float] = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., option: str = ..., selectKey: bool | int = ..., shape: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ...) -> Any: ...
def cycleCheck(*args, all: bool | int = ..., children: bool | int = ..., dag: bool | int = ..., evaluation: bool | int = ..., firstCycleOnly: bool | int = ..., firstPlugPerNode: bool | int = ..., lastPlugPerNode: bool | int = ..., list: bool | int = ..., listSeparator: str = ..., parents: bool | int = ..., query: bool | int = ..., secondary: bool | int = ..., timeLimit: int | float = ...) -> Any: ...

@overload
def cylinder(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., degree: int = ..., endSweep: float = ..., frozen: bool | int = ..., heightRatio: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., radius: float = ..., sections: int = ..., spans: int = ..., startSweep: float = ..., tolerance: float = ..., useTolerance: bool | int = ...) -> None: ...

@overload
def cylinder(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., endSweep: bool | int | float = ..., frozen: bool | int = ..., heightRatio: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., pivot: bool | int | tuple[float, float, float] = ..., polygon: int = ..., query: bool | int = ..., radius: bool | int | float = ..., sections: int = ..., spans: int = ..., startSweep: bool | int | float = ..., tolerance: bool | int | float = ..., useTolerance: bool | int = ...) -> Any: ...
def dagCommandWrapper(*args) -> Any: ...
def dagObjectCompare(*args, attribute: bool | int = ..., bail: str = ..., connection: bool | int = ..., namespace: str = ..., relative: bool | int = ..., short: bool | int = ..., type: bool | int = ...) -> Any: ...
def dagObjectHit(*args, cache: bool | int = ..., menu: str = ..., multiple: bool | int = ..., targetSize: int = ...) -> Any: ...
def dagPose(*args, addToPose: bool | int = ..., atPose: bool | int = ..., bindPose: bool | int = ..., edit: bool | int = ..., g: bool | int = ..., members: bool | int = ..., name: bool | int | str = ..., query: bool | int = ..., remove: bool | int = ..., reset: bool | int = ..., restore: bool | int = ..., save: bool | int = ..., selection: bool | int = ..., worldParent: bool | int = ...) -> Any: ...
def dataStructure(*args, asFile: bool | int | str = ..., asString: bool | int | str = ..., dataType: bool | int = ..., format: bool | int | str = ..., listMemberNames: bool | int | str = ..., name: bool | int | str = ..., query: bool | int = ..., remove: bool | int = ..., removeAll: bool | int = ...) -> Any: ...
def date(*args, date: bool | int = ..., format: str = ..., shortDate: bool | int = ..., shortTime: bool | int = ..., time: bool | int = ...) -> Any: ...
def dbcount(*args, enabled: bool | int = ..., file: str = ..., keyword: str = ..., list: bool | int = ..., maxdepth: int = ..., quick: bool | int = ..., reset: bool | int = ..., spreadsheet: bool | int = ...) -> Any: ...
def dbfootprint(*args, allObjects: bool | int = ..., outputFile: str = ..., query: bool | int = ..., type: bool | int | str = ...) -> Any: ...
def dbmessage(*args, file: str = ..., list: bool | int = ..., monitor: bool | int = ..., type: str = ...) -> Any: ...
def dbpeek(*args, allObjects: bool | int = ..., argument: bool | int | str | list[str] = ..., count: int = ..., evaluationGraph: bool | int = ..., operation: bool | int | str = ..., outputFile: bool | int | str = ..., query: bool | int = ...) -> Any: ...
def dbtrace(*args, filter: bool | int | str = ..., info: bool | int = ..., keyword: bool | int | str | list[str] = ..., level: bool | int | int | list[int] = ..., mark: bool | int = ..., off: Any = ..., output: bool | int | str = ..., query: bool | int = ..., timed: bool | int = ..., title: str = ..., verbose: bool | int = ...) -> Any: ...
def debug(*args) -> Any: ...
def debugNamespace(*args) -> Any: ...
def debugVar(*args) -> Any: ...

@overload
def defaultLightListCheckBox(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., shadingGroup: str = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def defaultLightListCheckBox(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., shadingGroup: str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def defaultNavigation(*args, connectToExisting: bool | int = ..., createNew: bool | int = ..., defaultAttribute: bool | int = ..., defaultTraversal: bool | int = ..., defaultWorkingNode: bool | int = ..., delete: bool | int = ..., destination: str = ..., disconnect: bool | int = ..., force: bool | int = ..., ignore: bool | int = ..., navigatorDecisionString: str = ..., quiet: bool | int = ..., relatedNodes: bool | int = ..., source: str = ..., unignore: bool | int = ...) -> Any: ...
def defineDataServer(*args, device: str = ..., server: str = ..., undefine: bool | int = ...) -> Any: ...
def defineVirtualDevice(*args, axis: int = ..., channel: str = ..., clear: bool | int = ..., create: bool | int = ..., device: str = ..., parent: str = ..., undefine: bool | int = ..., usage: str = ...) -> Any: ...
def deformableShape(*args, chain: bool | int = ..., chainHistory: bool | int = ..., createOriginalGeometry: bool | int = ..., createTweakNode: bool | int = ..., createUpstreamTagInjectionNode: bool | int = ..., deformShapeInAttr: bool | int = ..., deformShapeOutAttr: bool | int = ..., frontOfChain: bool | int = ..., localShapeInAttr: bool | int = ..., localShapeOutAttr: bool | int = ..., nodeChain: bool | int = ..., originalGeometry: bool | int = ..., outputPlugChain: bool | int = ..., plugChain: bool | int = ..., supportsComponentTags: bool | int = ..., tagInjectionList: bool | int = ..., tagInjectionNode: bool | int = ..., tweakAttr: bool | int = ..., tweakNode: bool | int = ..., upstreamTagInjectionNode: bool | int = ..., worldShapeOutAttr: bool | int = ...) -> Any: ...

@overload
def deformer(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., split: bool | int = ...) -> None: ...

@overload
def deformer(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., components: bool | int = ..., deformerTools: bool | int = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., selectedComponents: bool | int = ..., split: bool | int = ..., type: str = ..., useComponentTags: bool | int = ...) -> Any: ...

@overload
def deformerWeights(*args, edit: Literal[True], attribute: str | list[str] = ..., defaultValue: float = ..., deformer: str | list[str] = ..., export: bool | int = ..., format: str = ..., ignoreName: bool | int = ..., im: bool | int = ..., method: str = ..., path: str = ..., positionTolerance: float = ..., remap: str | list[str] = ..., shape: str | list[str] = ..., skip: str | list[str] = ..., vertexConnections: bool | int = ..., weightPrecision: int = ..., weightTolerance: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def deformerWeights(*args, attribute: bool | int | str | list[str] = ..., defaultValue: bool | int | float = ..., deformer: bool | int | str | list[str] = ..., export: bool | int = ..., format: bool | int | str = ..., ignoreName: bool | int = ..., im: bool | int = ..., method: bool | int | str = ..., path: bool | int | str = ..., positionTolerance: bool | int | float = ..., query: bool | int = ..., remap: bool | int | str | list[str] = ..., shape: bool | int | str | list[str] = ..., skip: bool | int | str | list[str] = ..., vertexConnections: bool | int = ..., weightPrecision: int = ..., weightTolerance: bool | int | float = ..., worldSpace: bool | int = ...) -> Any: ...
def delete(*args, all: bool | int = ..., attribute: str | list[str] = ..., channels: bool | int = ..., constraints: bool | int = ..., constructionHistory: bool | int = ..., controlPoints: bool | int = ..., expressions: bool | int = ..., hierarchy: str = ..., inputConnectionsAndNodes: bool | int = ..., motionPaths: bool | int = ..., shape: bool | int = ..., staticChannels: bool | int = ..., timeAnimationCurves: bool | int = ..., unitlessAnimationCurves: bool | int = ...) -> Any: ...
def deleteAttr(*args, attribute: str = ..., edit: bool | int = ..., query: bool | int = ...) -> Any: ...
def deleteAttrPattern(*args, allPatterns: bool | int = ..., patternName: str = ..., patternType: str = ...) -> Any: ...
def deleteExtension(*args, attribute: str = ..., forceDelete: bool | int = ..., nodeType: str = ...) -> Any: ...
def deleteGeometryCache(*args, **keywords): ...
def deleteHistoryAheadOfGeomCache(*args, **keywords): ...
def deleteNclothCache(*args, **keywords): ...
def deleteUI(*args, collection: bool | int = ..., control: bool | int = ..., editor: bool | int = ..., layout: bool | int = ..., menu: bool | int = ..., menuItem: bool | int = ..., panel: bool | int = ..., panelConfig: bool | int = ..., radioMenuItemCollection: bool | int = ..., toolContext: bool | int = ..., uiTemplate: bool | int = ..., window: bool | int = ...) -> Any: ...

@overload
def deltaMush(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., envelope: float = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., inwardConstraint: float = ..., outwardConstraint: float = ..., parallel: bool | int = ..., pinBorderVertices: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., smoothingIterations: int = ..., smoothingStep: float = ..., split: bool | int = ...) -> None: ...

@overload
def deltaMush(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., components: bool | int = ..., deformerTools: bool | int = ..., envelope: bool | int | float = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., inwardConstraint: bool | int | float = ..., name: str = ..., outwardConstraint: bool | int | float = ..., parallel: bool | int = ..., pinBorderVertices: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., selectedComponents: bool | int = ..., smoothingIterations: int = ..., smoothingStep: bool | int | float = ..., split: bool | int = ..., useComponentTags: bool | int = ...) -> Any: ...

@overload
def detachCurve(*args, edit: Literal[True], caching: bool | int = ..., keep: bool | int | list[bool | int] = ..., nodeState: int = ..., parameter: float | list[float] = ...) -> None: ...

@overload
def detachCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., curveOnSurface: bool | int = ..., frozen: bool | int = ..., keep: bool | int | bool | int | list[bool | int] = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., parameter: bool | int | float | list[float] = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...
def detachDeviceAttr(*args, all: bool | int = ..., attribute: str = ..., axis: str = ..., device: str = ..., selection: bool | int = ...) -> Any: ...

@overload
def detachSurface(*args, edit: Literal[True], caching: bool | int = ..., direction: int = ..., keep: bool | int | list[bool | int] = ..., nodeState: int = ..., parameter: float | list[float] = ...) -> None: ...

@overload
def detachSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., direction: int = ..., frozen: bool | int = ..., keep: bool | int | bool | int | list[bool | int] = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., parameter: bool | int | float | list[float] = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...

@overload
def deviceEditor(*args, edit: Literal[True], docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., parent: str = ..., selectionConnection: str = ..., takePath: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def deviceEditor(*args, control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., selectionConnection: bool | int | str = ..., stateString: bool | int = ..., takePath: bool | int | str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def deviceManager(*args, edit: Literal[True], axisIndex: int = ..., deviceIndex: int = ...) -> None: ...

@overload
def deviceManager(*args, attachment: bool | int = ..., axisCoordChanges: bool | int = ..., axisIndex: int = ..., axisName: bool | int = ..., axisOffset: bool | int = ..., axisScale: bool | int = ..., deviceIndex: int = ..., deviceNameFromIndex: int = ..., numAxis: bool | int = ..., numDevices: bool | int = ...) -> Any: ...

@overload
def devicePanel(*args, edit: Literal[True], copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def devicePanel(*args, control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...
def dgControl(*args) -> Any: ...
def dgInfo(*args, allNodes: bool | int = ..., connections: bool | int = ..., dirty: bool | int = ..., nodes: bool | int = ..., nonDeletable: bool | int = ..., outputFile: str = ..., propagation: bool | int = ..., short: bool | int = ..., size: bool | int = ..., subgraph: bool | int = ..., type: str = ...) -> Any: ...
def dgPerformance(*args) -> Any: ...
def dgValidateCurve(*args, allCurves: bool | int = ..., verbose: bool | int = ...) -> Any: ...
def dgcontrol(*args, iomode: bool | int = ...) -> Any: ...
def dgdebug(*args) -> Any: ...
def dgdirty(*args, allPlugs: bool | int = ..., clean: bool | int = ..., implicit: bool | int = ..., list: bool | int | str = ..., propagation: bool | int = ..., query: bool | int = ..., showTiming: bool | int = ..., verbose: bool | int = ...) -> Any: ...
def dgeval(*args, src: bool | int = ..., verbose: bool | int = ...) -> Any: ...
def dgfilter(*args, attribute: str = ..., list: bool | int = ..., logicalAnd: tuple[str, str] = ..., logicalNot: str = ..., logicalOr: tuple[str, str] = ..., name: str = ..., node: str = ..., nodeType: str = ..., plug: str = ...) -> Any: ...
def dgmodified(*args) -> Any: ...
def dgstats(*args) -> Any: ...
def dgtimer(*args, combineType: bool | int = ..., hide: bool | int | str | list[str] = ..., hierarchy: bool | int = ..., maxDisplay: int = ..., name: bool | int | str = ..., noHeader: bool | int = ..., outputFile: bool | int | str = ..., overhead: bool | int = ..., query: bool | int = ..., rangeLower: float = ..., rangeUpper: float = ..., reset: bool | int = ..., returnCode: bool | int | str = ..., returnType: bool | int | str = ..., show: bool | int | str | list[str] = ..., sortMetric: bool | int | str = ..., sortType: bool | int | str = ..., threshold: bool | int | float = ..., timerOff: bool | int = ..., timerOn: bool | int = ..., trace: bool | int = ..., type: bool | int | str = ..., uniqueName: bool | int = ..., updateHeatMap: int = ...) -> Any: ...
def dimWhen(*args, clear: bool | int = ..., false: bool | int = ..., true: bool | int = ...) -> Any: ...
def directConnectPath(*args) -> Any: ...

@overload
def directKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., option: str = ..., selectedOnly: bool | int = ...) -> None: ...

@overload
def directKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., option: bool | int | str = ..., query: bool | int = ..., selectedOnly: bool | int = ...) -> Any: ...
def directionalLight(*args, decayRate: int = ..., discRadius: bool | int | float = ..., edit: bool | int = ..., exclusive: bool | int = ..., intensity: bool | int | float = ..., name: bool | int | str = ..., position: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., rgb: bool | int | tuple[float, float, float] = ..., rotation: bool | int | tuple[float, float, float] = ..., shadowColor: bool | int | tuple[float, float, float] = ..., shadowDither: bool | int | float = ..., shadowSamples: int = ..., softShadow: bool | int = ..., useRayTraceShadows: bool | int = ...) -> Any: ...
def dirmap(*args, convertDirectory: str = ..., enable: bool | int = ..., getAllMappings: bool | int = ..., getMappedDirectory: str = ..., mapDirectory: tuple[str, str] = ..., query: bool | int = ..., unmapDirectory: str = ...) -> Any: ...
def disable(*args, value: bool | int = ...) -> Any: ...
def disableIncorrectNameWarning(*args) -> Any: ...
def disconnectAttr(*args, nextAvailable: bool | int = ...) -> None: ...
def disconnectJoint(*args, attachHandleMode: bool | int = ..., deleteHandleMode: bool | int = ...) -> Any: ...
def diskCache(*args, append: bool | int = ..., cacheType: bool | int | str = ..., close: bool | int | str = ..., closeAll: bool | int = ..., delete: bool | int | str = ..., deleteAll: bool | int = ..., empty: bool | int | str = ..., emptyAll: bool | int = ..., enabledCachesOnly: bool | int = ..., endTime: bool | int | int | float = ..., frameRangeType: bool | int | str = ..., overSample: bool | int = ..., query: bool | int = ..., samplingRate: int = ..., startTime: bool | int | int | float = ..., tempDir: bool | int = ...) -> Any: ...
def dispatchGenericCommand(*args) -> Any: ...

@overload
def displacementToPoly(*args, edit: Literal[True], findBboxOnly: bool | int = ...) -> None: ...

@overload
def displacementToPoly(*args, findBboxOnly: bool | int = ..., query: bool | int = ...) -> Any: ...
def displayAffected(*args, query: bool | int = ...) -> Any: ...
def displayColor(*args, active: bool | int = ..., create: bool | int = ..., dormant: bool | int = ..., list: bool | int = ..., query: bool | int = ..., queryIndex: int = ..., resetToFactory: bool | int = ..., resetToSaved: bool | int = ...) -> Any: ...
def displayCull(*args, backFaceCulling: bool | int = ..., query: bool | int = ...) -> Any: ...
def displayLevelOfDetail(*args, levelOfDetail: bool | int = ..., query: bool | int = ...) -> Any: ...
def displayPref(*args, activeObjectPivots: bool | int = ..., defaultFontSize: int = ..., displayAffected: bool | int = ..., displayGradient: bool | int = ..., fontSettingMode: int = ..., ghostFrames: bool | int | tuple[int, int, int] = ..., lineWidth: float = ..., materialLoadingMode: bool | int | str = ..., maxHardwareTextureResolution: bool | int = ..., maxTextureResolution: int = ..., purgeExistingTextures: bool | int = ..., query: bool | int = ..., regionOfEffect: bool | int = ..., shadeTemplates: bool | int = ..., smallFontSize: int = ..., textureDrawPixel: bool | int = ..., wireframeOnShadedActive: bool | int | str = ...) -> Any: ...
def displayRGBColor(*args, alpha: bool | int = ..., create: bool | int = ..., hueSaturationValue: bool | int = ..., list: bool | int = ..., query: bool | int = ..., resetToFactory: bool | int = ..., resetToSaved: bool | int = ...) -> Any: ...
def displaySmoothness(*args, all: bool | int = ..., boundary: bool | int = ..., defaultCreation: bool | int = ..., divisionsU: int = ..., divisionsV: int = ..., full: bool | int = ..., hull: bool | int = ..., pointsShaded: int = ..., pointsWire: int = ..., polygonObject: int = ..., query: bool | int = ..., renderTessellation: bool | int = ..., simplifyU: int = ..., simplifyV: int = ...) -> Any: ...
def displayStats(*args, frameRate: bool | int = ..., query: bool | int = ...) -> Any: ...
def displayString(*args, delete: bool | int = ..., exists: bool | int = ..., keys: bool | int = ..., query: bool | int = ..., replace: bool | int = ..., value: bool | int | str = ...) -> Any: ...
def displaySurface(*args, flipNormals: bool | int = ..., query: bool | int = ..., twoSidedLighting: bool | int = ..., xRay: bool | int = ...) -> Any: ...

@overload
def distanceDimContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def distanceDimContext(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def distanceDimension(*args, endPoint: tuple[float, float, float] = ..., startPoint: tuple[float, float, float] = ...) -> Any: ...
def doBlur(*args, colorFile: str = ..., length: float = ..., memCapSize: float = ..., sharpness: float = ..., smooth: float = ..., smoothColor: bool | int = ..., vectorFile: str = ...) -> Any: ...

@overload
def dockControl(*args, edit: Literal[True], allowedArea: str | list[str] = ..., annotation: str = ..., area: str = ..., backgroundColor: tuple[float, float, float] = ..., closeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enablePopupOption: bool | int = ..., fixedHeight: bool | int = ..., fixedWidth: bool | int = ..., floatChangeCommand: str | Callable = ..., floating: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., moveable: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., r: bool | int = ..., retain: bool | int = ..., sizeable: bool | int = ..., state: str = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def dockControl(*args, allowedArea: bool | int | str | list[str] = ..., annotation: bool | int | str = ..., area: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., closeCommand: str | Callable = ..., content: bool | int | str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dockStation: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enablePopupOption: bool | int = ..., exists: bool | int = ..., fixedHeight: bool | int = ..., fixedWidth: bool | int = ..., floatChangeCommand: str | Callable = ..., floating: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., moveable: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., r: bool | int = ..., retain: bool | int = ..., sizeable: bool | int = ..., splitLayout: str = ..., state: bool | int | str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def dolly(*args, absolute: bool | int = ..., distance: float = ..., dollyTowardsCenter: bool | int = ..., orthoScale: float = ..., relative: bool | int = ...) -> Any: ...

@overload
def dollyCtx(*args, edit: Literal[True], boxDollyType: str = ..., centerOfInterestDolly: bool | int = ..., dollyTowardsCenter: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., localDolly: bool | int = ..., orthoZoom: bool | int = ..., scale: float = ...) -> None: ...

@overload
def dollyCtx(*args, alternateContext: bool | int = ..., boxDollyType: bool | int | str = ..., centerOfInterestDolly: bool | int = ..., dollyTowardsCenter: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., localDolly: bool | int = ..., name: str = ..., orthoZoom: bool | int = ..., query: bool | int = ..., scale: bool | int | float = ..., toolName: bool | int | str = ...) -> Any: ...

@overload
def dopeSheetEditor(*args, edit: Literal[True], autoFit: str = ..., autoFitTime: str = ..., displayActiveKeyTangents: str = ..., displayActiveKeys: str = ..., displayInfinities: str = ..., displayKeys: str = ..., displayTangents: str = ..., displayValues: str = ..., docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., hierarchyBelow: bool | int = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., lookAt: str = ..., mainListConnection: str = ..., outliner: str = ..., parent: str = ..., selectionConnection: str = ..., selectionWindow: tuple[float, float, float, float] = ..., showChannelSets: bool | int = ..., showKeyValues: bool | int = ..., showScene: bool | int = ..., showSummary: bool | int = ..., snapTime: str = ..., snapValue: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def dopeSheetEditor(*args, autoFit: bool | int | str = ..., autoFitTime: bool | int | str = ..., control: bool | int = ..., defineTemplate: str = ..., displayActiveKeyTangents: str = ..., displayActiveKeys: str = ..., displayInfinities: str = ..., displayKeys: str = ..., displayTangents: str = ..., displayValues: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., hierarchyBelow: bool | int = ..., highlightConnection: bool | int | str = ..., highlightedAttributes: bool | int = ..., lockMainConnection: bool | int = ..., lookAt: str = ..., mainListConnection: bool | int | str = ..., outliner: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectionConnection: bool | int | str = ..., selectionWindow: bool | int | tuple[float, float, float, float] = ..., showChannelSets: bool | int = ..., showKeyValues: bool | int = ..., showScene: bool | int = ..., showSummary: bool | int = ..., showTicks: bool | int = ..., snapTime: bool | int | str = ..., snapValue: bool | int | str = ..., stateString: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def doubleProfileBirailSurface(*args, edit: Literal[True], blendFactor: float = ..., caching: bool | int = ..., nodeState: int = ..., tangentContinuityProfile1: bool | int = ..., tangentContinuityProfile2: bool | int = ..., transformMode: int = ...) -> None: ...

@overload
def doubleProfileBirailSurface(*args, blendFactor: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., tangentContinuityProfile1: bool | int = ..., tangentContinuityProfile2: bool | int = ..., transformMode: int = ...) -> Any: ...
def dpBirailCtx(*args, activeNodes: bool | int = ..., autoCreate: bool | int = ..., bldProfileFirst: bool | int = ..., bldProfileLast: bool | int = ..., bldProfiles: bool | int = ..., bldRailOne: bool | int = ..., bldRailTwo: bool | int = ..., blendFactor: float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., frozen: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., reset: bool | int = ..., tangentContinuityProfile1: bool | int = ..., tangentContinuityProfile2: bool | int = ..., toolNode: bool | int = ..., transformMode: int = ...) -> Any: ...

@overload
def drag(*args, edit: Literal[True], attenuation: float = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., magnitude: float = ..., maxDistance: float = ..., name: str = ..., perVertex: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., torusSectionRadius: float = ..., useDirection: bool | int = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def drag(*args, attenuation: bool | int | float = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., name: bool | int | str = ..., perVertex: bool | int = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., torusSectionRadius: bool | int | float = ..., useDirection: bool | int = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...

@overload
def dragAttrContext(*args, edit: Literal[True], connectTo: str | list[str] = ..., image1: str = ..., image2: str = ..., image3: str = ..., reset: bool | int = ...) -> None: ...

@overload
def dragAttrContext(*args, connectTo: bool | int | str | list[str] = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., reset: bool | int = ...) -> Any: ...

@overload
def draggerContext(*args, edit: Literal[True], cursor: str = ..., dragCommand: str | Callable = ..., drawString: str = ..., finalize: str | Callable = ..., holdCommand: str | Callable = ..., image1: str = ..., image2: str = ..., image3: str = ..., initialize: str | Callable = ..., plane: tuple[float, float, float] = ..., prePressCommand: str | Callable = ..., pressCommand: str | Callable = ..., projection: str = ..., releaseCommand: str | Callable = ..., snapping: bool | int = ..., space: str = ..., stepsCount: int = ..., undoMode: str = ...) -> None: ...

@overload
def draggerContext(*args, anchorPoint: bool | int | tuple[float, float, float] = ..., button: int = ..., currentStep: int = ..., cursor: bool | int | str = ..., dragCommand: bool | int | str | Callable = ..., dragPoint: bool | int | tuple[float, float, float] = ..., drawString: str = ..., exists: bool | int = ..., finalize: bool | int | str | Callable = ..., helpString: bool | int | str = ..., history: bool | int = ..., holdCommand: bool | int | str | Callable = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., initialize: bool | int | str | Callable = ..., modifier: bool | int | str = ..., name: str = ..., plane: tuple[float, float, float] = ..., prePressCommand: bool | int | str | Callable = ..., pressCommand: bool | int | str | Callable = ..., projection: bool | int | str = ..., query: bool | int = ..., releaseCommand: bool | int | str | Callable = ..., snapping: bool | int = ..., space: bool | int | str = ..., stepsCount: int = ..., undoMode: bool | int | str = ...) -> Any: ...
def drawExtrudeFacetCtx(*args, degree: int = ..., divisions: int = ..., edit: bool | int = ..., exists: bool | int = ..., facesTogether: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def dropoffLocator(*args) -> Any: ...
def duplicate(*args, fullPath: bool | int = ..., inputConnections: bool | int = ..., instanceLeaf: bool | int = ..., name: str = ..., parentOnly: bool | int = ..., renameChildren: bool | int = ..., returnRootsOnly: bool | int = ..., smartTransform: bool | int = ..., transformsOnly: bool | int = ..., upstreamNodes: bool | int = ...) -> Any: ...

@overload
def duplicateCurve(*args, edit: Literal[True], caching: bool | int = ..., maxValue: float = ..., minValue: float = ..., nodeState: int = ..., relative: bool | int = ...) -> None: ...

@overload
def duplicateCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., local: bool | int = ..., maxValue: bool | int | float = ..., mergeItems: bool | int = ..., minValue: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., range: bool | int = ..., relative: bool | int = ...) -> Any: ...

@overload
def duplicateSurface(*args, edit: Literal[True], caching: bool | int = ..., faceCountU: int = ..., faceCountV: int = ..., firstFaceU: int = ..., firstFaceV: int = ..., nodeState: int = ...) -> None: ...

@overload
def duplicateSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., faceCountU: int = ..., faceCountV: int = ..., firstFaceU: int = ..., firstFaceV: int = ..., frozen: bool | int = ..., local: bool | int = ..., mergeItems: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ...) -> Any: ...
def dynCache(*args) -> Any: ...
def dynControl(*args, autoCreate: bool | int = ..., oversample: int = ..., particleCache: bool | int = ..., particleLOD: float = ..., particlesOn: bool | int = ..., rigidOn: bool | int = ..., seed: int = ..., startTime: int | float = ..., traceDepth: int = ...) -> Any: ...
def dynExport(*args, allObjects: bool | int = ..., attribute: str | list[str] = ..., format: str = ..., maxFrame: int | float = ..., minFrame: int | float = ..., onlyUpdateParticles: bool | int = ..., overSampling: int = ..., path: str = ...) -> Any: ...

@overload
def dynExpression(*args, edit: Literal[True], creation: bool | int = ..., runtime: bool | int = ..., runtimeAfterDynamics: bool | int = ..., runtimeBeforeDynamics: bool | int = ..., string: str = ...) -> None: ...

@overload
def dynExpression(*args, creation: bool | int = ..., query: bool | int = ..., runtime: bool | int = ..., runtimeAfterDynamics: bool | int = ..., runtimeBeforeDynamics: bool | int = ..., string: str = ...) -> Any: ...

@overload
def dynGlobals(*args, edit: Literal[True], overSampling: int = ...) -> None: ...

@overload
def dynGlobals(*args, active: bool | int = ..., listAll: bool | int = ..., overSampling: int = ..., query: bool | int = ...) -> Any: ...
def dynPaintCtx(*args, brushDrag: float = ..., brushMass: float = ..., displayQuality: float = ..., doProject: int = ..., dragBrushSize: str = ..., drawAsMesh: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., inputSamples: int = ..., paintAtDepth: bool | int = ..., pixelMode: int = ..., pressureMapping1: int = ..., pressureMapping2: int = ..., pressureMapping3: int = ..., pressureMax1: float = ..., pressureMax2: float = ..., pressureMax3: float = ..., pressureMin1: float = ..., pressureMin2: float = ..., pressureMin3: float = ..., query: bool | int = ..., sampleSeparation: float = ..., setSelection: bool | int = ..., surfaceOffset: float = ..., usePressure: bool | int = ...) -> Any: ...

@overload
def dynPaintEditor(*args, edit: Literal[True], activeOnly: bool | int = ..., autoSave: bool | int = ..., camera: str = ..., canvasMode: bool | int = ..., canvasUndo: bool | int = ..., changeCommand: tuple[str, str, str, str] = ..., clear: tuple[float, float, float] = ..., displayAppearance: str = ..., displayFog: bool | int = ..., displayImage: int = ..., displayLights: str = ..., displayStyle: str = ..., displayTextures: bool | int = ..., docTag: str = ..., doubleBuffer: bool | int = ..., drawAxis: bool | int = ..., fileName: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., iconGrab: bool | int = ..., loadImage: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., newImage: tuple[int, int, float, float, float] = ..., paintAll: float = ..., parent: str = ..., redrawLast: bool | int = ..., refresh: bool | int = ..., refreshMode: int = ..., removeAllImages: bool | int = ..., removeImage: bool | int = ..., rollImage: tuple[float, float] = ..., saveAlpha: bool | int = ..., saveBumpmap: str = ..., saveImage: bool | int = ..., scaleBlue: float = ..., scaleGreen: float = ..., scaleRed: float = ..., selectionConnection: str = ..., singleBuffer: bool | int = ..., snapShot: bool | int = ..., tileSize: int = ..., unParent: bool | int = ..., undoCache: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., wrap: tuple[bool | int, bool | int] = ..., writeImage: str = ..., zoom: float = ...) -> None: ...

@overload
def dynPaintEditor(*args, activeOnly: bool | int = ..., autoSave: bool | int = ..., camera: bool | int | str = ..., canvasMode: bool | int = ..., canvasUndo: bool | int = ..., changeCommand: bool | int | tuple[str, str, str, str] = ..., clear: tuple[float, float, float] = ..., control: bool | int = ..., currentCanvasSize: bool | int = ..., defineTemplate: str = ..., displayAppearance: bool | int | str = ..., displayFog: bool | int = ..., displayImage: int = ..., displayLights: bool | int | str = ..., displayStyle: bool | int | str = ..., displayTextures: bool | int = ..., docTag: bool | int | str = ..., doubleBuffer: bool | int = ..., drawAxis: bool | int = ..., drawContext: bool | int = ..., exists: bool | int = ..., fastUpdate: int = ..., fileName: bool | int | str = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., iconGrab: bool | int = ..., loadImage: str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., menu: str = ..., nbImages: bool | int = ..., newImage: bool | int | tuple[int, int, float, float, float] = ..., paintAll: float = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., redrawLast: bool | int = ..., refresh: bool | int = ..., refreshMode: int = ..., removeAllImages: bool | int = ..., removeImage: bool | int = ..., rollImage: tuple[float, float] = ..., saveAlpha: bool | int = ..., saveBumpmap: bool | int | str = ..., saveImage: bool | int = ..., scaleBlue: bool | int | float = ..., scaleGreen: bool | int | float = ..., scaleRed: bool | int | float = ..., selectionConnection: bool | int | str = ..., singleBuffer: bool | int = ..., snapShot: bool | int = ..., stateString: bool | int = ..., swap: int = ..., tileSize: int = ..., unParent: bool | int = ..., undoCache: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., wrap: bool | int | tuple[bool | int, bool | int] = ..., writeImage: str = ..., zoom: bool | int | float = ...) -> Any: ...

@overload
def dynParticleCtx(*args, edit: Literal[True], conserve: float = ..., cursorPlacement: bool | int = ..., grid: bool | int = ..., gridSpacing: float = ..., image1: str = ..., image2: str = ..., image3: str = ..., jitterRadius: float = ..., lowerLeftX: float = ..., lowerLeftY: float = ..., lowerLeftZ: float = ..., nucleus: bool | int = ..., numJitters: int = ..., particleName: str = ..., sketch: bool | int = ..., sketchInterval: int = ..., textPlacement: bool | int = ..., upperRightX: float = ..., upperRightY: float = ..., upperZ: float = ...) -> None: ...

@overload
def dynParticleCtx(*args, conserve: bool | int | float = ..., cursorPlacement: bool | int = ..., exists: bool | int = ..., grid: bool | int = ..., gridSpacing: bool | int | float = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., jitterRadius: bool | int | float = ..., lowerLeftX: bool | int | float = ..., lowerLeftY: bool | int | float = ..., lowerLeftZ: bool | int | float = ..., name: str = ..., nucleus: bool | int = ..., numJitters: int = ..., particleName: bool | int | str = ..., query: bool | int = ..., sketch: bool | int = ..., sketchInterval: int = ..., textPlacement: bool | int = ..., upperRightX: bool | int | float = ..., upperRightY: bool | int | float = ..., upperZ: bool | int | float = ...) -> Any: ...
def dynPref(*args, autoCreate: bool | int = ..., echoCollision: bool | int = ..., query: bool | int = ..., runupFrom: int = ..., runupToCurrentTime: bool | int = ..., saveOnQuit: bool | int = ..., saveRuntimeState: bool | int = ...) -> Any: ...
def dynSelectCtx(*args, edit: bool | int = ..., enable: bool | int = ..., exists: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., query: bool | int = ...) -> Any: ...
def dynTestData(*args, arrayAttrs: bool | int = ..., verbose: bool | int = ...) -> Any: ...
def dynWireCtx(*args, brushDrag: float = ..., brushMass: float = ..., displayQuality: float = ..., doProject: int = ..., dragBrushSize: str = ..., drawAsMesh: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., inputSamples: int = ..., paintAtDepth: bool | int = ..., pixelMode: int = ..., pressureMapping1: int = ..., pressureMapping2: int = ..., pressureMapping3: int = ..., pressureMax1: float = ..., pressureMax2: float = ..., pressureMax3: float = ..., pressureMin1: float = ..., pressureMin2: float = ..., pressureMin3: float = ..., query: bool | int = ..., sampleSeparation: float = ..., setSelection: bool | int = ..., surfaceOffset: float = ..., usePressure: bool | int = ...) -> Any: ...
def dynamicConstraintRemove(*args, **keywords): ...
def dynamicLoad(*args, query: bool | int = ...) -> Any: ...
def editDisplayLayerGlobals(*args, baseId: int = ..., currentDisplayLayer: bool | int | str = ..., mergeType: int = ..., query: bool | int = ..., useCurrent: bool | int = ...) -> Any: ...
def editDisplayLayerMembers(*args, clear: bool | int = ..., fullNames: bool | int = ..., noRecurse: bool | int = ..., query: bool | int = ..., ufeObjects: bool | int = ...) -> Any: ...
def editImportedStatus(*args, **keywords): ...
def editMetadata(*args, channelName: bool | int | str = ..., channelType: bool | int | str = ..., endIndex: str = ..., index: bool | int | str | list[str] = ..., indexType: bool | int | str = ..., memberName: str = ..., remove: bool | int = ..., scene: bool | int = ..., startIndex: str = ..., streamName: bool | int | str = ..., stringValue: str | list[str] = ..., value: float | list[float] = ...) -> Any: ...
def editRenderLayerAdjustment(*args, attributeLog: bool | int = ..., layer: bool | int | str = ..., nodeLog: bool | int = ..., query: bool | int = ..., remove: bool | int = ...) -> Any: ...
def editRenderLayerGlobals(*args, baseId: int = ..., currentRenderLayer: bool | int | str = ..., enableAutoAdjustments: bool | int = ..., mergeType: int = ..., query: bool | int = ..., useCurrent: bool | int = ...) -> Any: ...
def editRenderLayerMembers(*args, fullNames: bool | int = ..., noRecurse: bool | int = ..., query: bool | int = ..., remove: bool | int = ...) -> Any: ...

@overload
def editor(*args, edit: Literal[True], docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., parent: str = ..., selectionConnection: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def editor(*args, control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectionConnection: bool | int | str = ..., stateString: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...
def editorTemplate(*args, addAdskAssetControls: bool | int = ..., addComponents: bool | int = ..., addControl: tuple[str, str | Callable] = ..., addDynamicControl: tuple[str, str | Callable] = ..., addExtraControls: bool | int = ..., addSeparator: bool | int = ..., annotateFieldOnly: bool | int = ..., annotation: str = ..., beginLayout: str = ..., beginNoOptimize: bool | int = ..., beginScrollLayout: bool | int = ..., callCustom: tuple[str | Callable, str | Callable] = ..., collapse: bool | int = ..., debugMode: bool | int = ..., dimControl: tuple[str, str, bool | int] = ..., endLayout: bool | int = ..., endNoOptimize: bool | int = ..., endScrollLayout: bool | int = ..., extraControlsLabel: str = ..., forceRebuild: bool | int = ..., interruptOptimize: bool | int = ..., label: str = ..., listExtraAttributes: str = ..., preventOverride: bool | int = ..., queryControl: tuple[str, str] = ..., queryLabel: tuple[str, str] = ..., queryName: tuple[str, str] = ..., suppress: str = ...) -> Any: ...

@overload
def effector(*args, edit: Literal[True], hide: bool | int = ..., name: str = ...) -> None: ...

@overload
def effector(*args, hide: bool | int = ..., name: bool | int | str = ..., query: bool | int = ...) -> Any: ...
def emit(*args, attribute: str | list[str] = ..., floatValue: float | list[float] = ..., object: str = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., vectorValue: tuple[float, float, float] | list[tuple[float, float, float]] = ...) -> Any: ...

@overload
def emitter(*args, edit: Literal[True], alongAxis: float = ..., aroundAxis: float = ..., awayFromAxis: float = ..., awayFromCenter: float = ..., cycleEmission: str = ..., cycleInterval: int = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., directionalSpeed: float = ..., maxDistance: float = ..., minDistance: float = ..., name: str = ..., needParentUV: bool | int = ..., normalSpeed: float = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., randomDirection: float = ..., rate: float = ..., scaleRateByObjectSize: bool | int = ..., scaleSpeedBySize: bool | int = ..., speed: float = ..., speedRandom: float = ..., spread: float = ..., tangentSpeed: float = ..., torusSectionRadius: float = ..., type: str = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def emitter(*args, alongAxis: bool | int | float = ..., aroundAxis: bool | int | float = ..., awayFromAxis: bool | int | float = ..., awayFromCenter: bool | int | float = ..., cycleEmission: bool | int | str = ..., cycleInterval: int = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., directionalSpeed: bool | int | float = ..., maxDistance: bool | int | float = ..., minDistance: bool | int | float = ..., name: bool | int | str = ..., needParentUV: bool | int = ..., normalSpeed: bool | int | float = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., randomDirection: bool | int | float = ..., rate: bool | int | float = ..., scaleRateByObjectSize: bool | int = ..., scaleSpeedBySize: bool | int = ..., speed: bool | int | float = ..., speedRandom: bool | int | float = ..., spread: bool | int | float = ..., tangentSpeed: bool | int | float = ..., torusSectionRadius: bool | int | float = ..., type: bool | int | str = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...
def enableDevice(*args, apply: bool | int = ..., device: bool | int | str = ..., enable: bool | int = ..., monitor: bool | int = ..., record: bool | int = ...) -> Any: ...
def encodeString(*args) -> Any: ...
def error(*args, noContext: bool | int = ..., showLineNumber: bool | int = ...) -> Any: ...
def eval(*args, undoEnabled: bool | int = ...) -> Any: ...
def evalContinue(*args) -> Any: ...
def evalDeferred(*args, evaluateNext: bool | int = ..., list: bool | int = ..., lowPriority: bool | int = ..., lowestPriority: bool | int = ...) -> Any: ...
def evalEcho(*args) -> Any: ...
def evalNoSelectNotify(*args) -> Any: ...
def evaluationManager(*args, cycleCluster: bool | int | str = ..., disableInfo: bool | int | str = ..., downstreamFrom: bool | int | str = ..., empty: bool | int = ..., enabled: bool | int = ..., fallbackTriggered: bool | int = ..., idleAction: int = ..., idleBuild: bool | int = ..., invalidate: bool | int = ..., manipulation: bool | int = ..., manipulationPrevalidation: bool | int = ..., manipulationReady: bool | int = ..., mode: bool | int | str = ..., nodeTypeGloballySerialize: bool | int = ..., nodeTypeParallel: bool | int = ..., nodeTypeSerialize: bool | int = ..., nodeTypeUntrusted: bool | int = ..., query: bool | int = ..., reduceGraphRebuild: bool | int = ..., safeMode: bool | int = ..., upstreamFrom: bool | int | str = ...) -> Any: ...
def evaluationManagerInternal(*args, dataSharing: bool | int = ..., dataTypeShare: bool | int = ..., query: bool | int = ...) -> Any: ...
def evaluator(*args, clusters: bool | int = ..., configuration: bool | int | str | list[str] = ..., enable: bool | int = ..., info: bool | int = ..., name: bool | int | str = ..., nodeType: bool | int | str | list[str] = ..., nodeTypeChildren: bool | int = ..., priority: int = ..., query: bool | int = ..., valueName: bool | int | str = ...) -> Any: ...
def evaluatorInternal(*args, name: str = ..., query: bool | int = ..., ready: bool | int = ...) -> Any: ...

@overload
def event(*args, edit: Literal[True], count: int = ..., dieAtCollision: bool | int = ..., emit: int = ..., name: str = ..., proc: str | Callable = ..., random: bool | int = ..., split: int = ..., spread: float = ..., target: str = ...) -> None: ...

@overload
def event(*args, count: int = ..., delete: bool | int = ..., dieAtCollision: bool | int = ..., emit: int = ..., idNumber: int = ..., list: bool | int = ..., name: bool | int | str = ..., proc: bool | int | str | Callable = ..., query: bool | int = ..., random: bool | int = ..., rename: bool | int | str = ..., select: bool | int = ..., split: int = ..., spread: bool | int | float = ..., target: bool | int | str = ...) -> Any: ...
def exactWorldBoundingBox(*args, calculateExactly: bool | int = ..., ignoreInvisible: bool | int = ...) -> Any: ...
def excludeObjectDisplayPreset(*args, delete: bool | int = ..., edit: bool | int = ..., initAllObjectPresets: tuple[str, str] = ..., listPresets: bool | int = ..., objectMask=..., pluginObject: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., preset: str = ..., query: bool | int = ...) -> Any: ...

@overload
def exclusiveLightCheckBox(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def exclusiveLightCheckBox(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: str = ..., light: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def expandedSelection(*args, depth: int = ..., expansionType: str = ...) -> Any: ...
def exportEdits(*args, editCommand: bool | int | str | list[str] = ..., excludeHierarchy: bool | int = ..., excludeNode: bool | int | str | list[str] = ..., exportSelected: bool | int = ..., force: bool | int = ..., includeAnimation: bool | int = ..., includeConstraints: bool | int = ..., includeDeformers: bool | int = ..., includeNetwork: bool | int = ..., includeNode: bool | int | str | list[str] = ..., includeSetAttrs: bool | int = ..., includeSetDrivenKeys: bool | int = ..., includeShaders: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., query: bool | int = ..., selected: bool | int = ..., type: bool | int | str = ...) -> Any: ...

@overload
def expression(*args, edit: Literal[True], alwaysEvaluate: int = ..., animated: int = ..., attribute: str = ..., name: str = ..., object: str = ..., shortNames: bool | int = ..., string: str = ..., unitConversion: str = ...) -> None: ...

@overload
def expression(*args, alwaysEvaluate: int = ..., animated: int = ..., attribute: bool | int | str = ..., name: bool | int | str = ..., object: bool | int | str = ..., query: bool | int = ..., safe: bool | int = ..., shortNames: bool | int = ..., string: bool | int | str = ..., timeDependent: bool | int = ..., unitConversion: bool | int | str = ...) -> Any: ...
def expressionEditorListen(*args, listenFile: str = ..., listenForAttr: str = ..., listenForExpression: str = ..., listenForName: str = ..., stopListenForAttr: str = ..., stopListenForExpression: str = ..., stopListenForName: str = ...) -> Any: ...

@overload
def extendCurve(*args, edit: Literal[True], caching: bool | int = ..., distance: float = ..., extendMethod: int = ..., extensionType: int = ..., inputPoint: tuple[float, float, float] = ..., join: bool | int = ..., noChanges: bool | int = ..., nodeState: int = ..., pointX: float = ..., pointY: float = ..., pointZ: float = ..., removeMultipleKnots: bool | int = ..., start: int = ...) -> None: ...

@overload
def extendCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., curveOnSurface: bool | int = ..., distance: bool | int | float = ..., extendMethod: int = ..., extensionType: int = ..., frozen: bool | int = ..., inputPoint: bool | int | tuple[float, float, float] = ..., join: bool | int = ..., name: str = ..., noChanges: bool | int = ..., nodeState: int = ..., object: bool | int = ..., pointX: bool | int | float = ..., pointY: bool | int | float = ..., pointZ: bool | int | float = ..., query: bool | int = ..., range: bool | int = ..., removeMultipleKnots: bool | int = ..., replaceOriginal: bool | int = ..., start: int = ...) -> Any: ...
def extendFluid(*args, edit: bool | int = ..., endD: int = ..., endH: int = ..., endW: int = ..., query: bool | int = ..., startD: int = ..., startH: int = ..., startW: int = ...) -> Any: ...

@overload
def extendSurface(*args, edit: Literal[True], caching: bool | int = ..., distance: float = ..., extendDirection: int = ..., extendMethod: int = ..., extendSide: int = ..., extensionType: int = ..., join: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def extendSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., distance: bool | int | float = ..., extendDirection: int = ..., extendMethod: int = ..., extendSide: int = ..., extensionType: int = ..., frozen: bool | int = ..., join: bool | int = ..., name: str = ..., noChanges: bool | int = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...

@overload
def extrude(*args, edit: Literal[True], caching: bool | int = ..., degreeAlongLength: int = ..., direction: tuple[float, float, float] = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., extrudeType: int = ..., fixedPath: bool | int = ..., length: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., reverseSurfaceIfPathReversed: bool | int = ..., rotation: float = ..., scale: float = ..., subCurveSubSurface: bool | int = ..., useComponentPivot: int = ..., useProfileNormal: bool | int = ...) -> None: ...

@overload
def extrude(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., degreeAlongLength: int = ..., direction: bool | int | tuple[float, float, float] = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., extrudeType: int = ..., fixedPath: bool | int = ..., frozen: bool | int = ..., length: bool | int | float = ..., mergeItems: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., pivot: bool | int | tuple[float, float, float] = ..., polygon: int = ..., query: bool | int = ..., range: bool | int = ..., rebuild: bool | int = ..., reverseSurfaceIfPathReversed: bool | int = ..., rotation: bool | int | float = ..., scale: bool | int | float = ..., subCurveSubSurface: bool | int = ..., useComponentPivot: int = ..., useProfileNormal: bool | int = ...) -> Any: ...

@overload
def falloffCurve(*args, edit: Literal[True], addControlVertex: str = ..., annotation: str = ..., asString: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., currentKey: int = ..., currentKeyValue: tuple[float, float] = ..., customCurveWidget: bool | int = ..., deleteControlVertex: int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., optionVar: str = ..., preventOverride: bool | int = ..., readOnly: bool | int = ..., snapToGrid: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def falloffCurve(*args, addControlVertex: str = ..., annotation: bool | int | str = ..., asString: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., currentKey: int = ..., currentKeyValue: bool | int | tuple[float, float] = ..., customCurveWidget: bool | int = ..., defineTemplate: str = ..., deleteControlVertex: int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., optionVar: bool | int | str = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., readOnly: bool | int = ..., snapToGrid: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def falloffCurveAttr(*args, edit: Literal[True], addControlVertex: str = ..., annotation: str = ..., asString: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., currentKey: int = ..., currentKeyValue: tuple[float, float] = ..., customCurveWidget: int = ..., deleteControlVertex: int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., readOnly: int = ..., selectedPositionControl: str = ..., selectedValueControl: str = ..., snapToGrid: int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def falloffCurveAttr(*args, addControlVertex: str = ..., annotation: bool | int | str = ..., asString: bool | int | str = ..., attribute: str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., currentKey: int = ..., currentKeyValue: bool | int | tuple[float, float] = ..., customCurveWidget: int = ..., defineTemplate: str = ..., deleteControlVertex: int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., readOnly: int = ..., selectedPositionControl: str = ..., selectedValueControl: str = ..., snapToGrid: int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def fcheck(*args) -> Any: ...

@overload
def file(*args, edit: Literal[True], mapPlaceHolderNamespace: tuple[str, str] | list[tuple[str, str]] = ..., moveSelected: bool | int = ..., namespace: str = ..., replaceName: tuple[str, str] | list[tuple[str, str]] = ...) -> None: ...

@overload
def file(*args, absoluteName: bool | int = ..., activate: bool | int = ..., activeProxy: bool | int = ..., add: bool | int = ..., anyModified: bool | int = ..., applyTo: str = ..., buildLoadSettings: bool | int = ..., channels: bool | int = ..., cleanReference: str = ..., command: bool | int | tuple[str, str] = ..., compress: bool | int = ..., constraints: bool | int = ..., constructionHistory: bool | int = ..., copyNumberList: bool | int = ..., defaultExtensions: bool | int = ..., defaultNamespace: bool | int = ..., deferReference: bool | int = ..., editCommand: str = ..., errorStatus: bool | int = ..., executeScriptNodes: bool | int = ..., exists: bool | int = ..., expandName: bool | int = ..., exportAll: bool | int = ..., exportAnim: bool | int = ..., exportAnimFromReference: bool | int = ..., exportAsReference: bool | int = ..., exportAsSegment: bool | int = ..., exportSelected: bool | int = ..., exportSelectedAnim: bool | int = ..., exportSelectedAnimFromReference: bool | int = ..., exportSelectedNoReference: bool | int = ..., exportSelectedStrict: bool | int = ..., exportSnapshotCallback: tuple[str | Callable, str] = ..., exportUnloadedReferences: bool | int = ..., expressions: bool | int = ..., fileMetaData: bool | int = ..., flushReference: str = ..., force: bool | int = ..., groupLocator: bool | int = ..., groupName: str = ..., groupReference: bool | int = ..., i: bool | int = ..., ignoreVersion: bool | int = ..., importFrameRate: bool | int = ..., importReference: bool | int = ..., importTimeRange: str = ..., lastFileOption: bool | int = ..., lastTempFile: bool | int = ..., list: bool | int = ..., loadAllDeferred: bool | int = ..., loadAllReferences: bool | int = ..., loadNoReferences: bool | int = ..., loadReference: bool | int | str = ..., loadReferenceDepth: str = ..., loadReferencePreview: str = ..., loadSettings: str = ..., location: bool | int = ..., lockContainerUnpublished: bool | int = ..., lockFile: bool | int = ..., lockReference: bool | int = ..., mapPlaceHolderNamespace: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., mergeBaseAnimLayer: bool | int = ..., mergeNamespaceWithParent: bool | int = ..., mergeNamespaceWithRoot: bool | int = ..., mergeNamespacesOnClash: bool | int = ..., modified: bool | int = ..., moveSelected: bool | int = ..., namespace: str = ..., newFile: bool | int = ..., open: bool | int = ..., options: bool | int | str = ..., parentNamespace: bool | int = ..., postSaveScript: str = ..., preSaveScript: str = ..., preserveName: bool | int = ..., preserveReferences: bool | int = ..., preserveUndo: bool | int = ..., preview: bool | int = ..., prompt: bool | int = ..., proxyManager: str = ..., proxyTag: str = ..., query: bool | int = ..., reference: bool | int = ..., referenceDepthInfo: int = ..., referenceNode: bool | int | str = ..., relativeNamespace: str = ..., removeDuplicateNetworks: bool | int = ..., removeReference: bool | int = ..., rename: str = ..., renameAll: bool | int = ..., renameToSave: bool | int = ..., renamingPrefix: bool | int | str = ..., renamingPrefixList: bool | int = ..., replaceName: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., reserveNamespaces: bool | int = ..., resetError: bool | int = ..., returnNewNodes: bool | int = ..., save: bool | int = ..., saveDiskCache: bool | int | str = ..., saveReference: bool | int = ..., saveReferencesUnloaded: bool | int = ..., saveTextures: bool | int | str = ..., sceneName: bool | int = ..., segment: str = ..., selectAll: bool | int = ..., shader: bool | int = ..., sharedNodes: str | list[str] = ..., sharedReferenceFile: bool | int = ..., shortName: bool | int = ..., strict: bool | int = ..., swapNamespace: tuple[str, str] | list[tuple[str, str]] = ..., type: bool | int | str = ..., uiConfiguration: bool | int = ..., uiLoadConfiguration: bool | int = ..., unloadReference: str = ..., unresolvedName: bool | int = ..., usingNamespaces: bool | int = ..., withoutCopyNumber: bool | int = ..., writable: bool | int = ...) -> Any: ...
def fileBrowserDialog(*args, actionName: str = ..., dialogStyle: int = ..., fileCommand: str | Callable = ..., fileType: str = ..., filterList: str | list[str] = ..., includeName: str = ..., mode: int = ..., operationMode: str = ..., tipMessage: str = ..., windowTitle: str = ...) -> Any: ...
def fileDialog(*args, application: bool | int = ..., defaultFileName: str = ..., directoryMask: str = ..., mode: int = ..., title: str = ...) -> Any: ...
def fileDialog2(*args, buttonBoxOrientation: int = ..., cancelCaption: str = ..., caption: str = ..., dialogStyle: int = ..., fileFilter: str = ..., fileMode: int = ..., fileTypeChanged: str | Callable = ..., hideFileExtensions: bool | int = ..., hideNameEdit: bool | int = ..., okCaption: str = ..., optionsUICancel: str | Callable = ..., optionsUICommit: str | Callable = ..., optionsUICommit2: str | Callable = ..., optionsUICreate: str | Callable = ..., optionsUIInit: str | Callable = ..., optionsUITitle: str = ..., returnFilter: bool | int = ..., selectFileFilter: str = ..., selectionChanged: str | Callable = ..., setProjectBtnEnabled: bool | int = ..., startingDirectory: str = ...) -> Any: ...
def fileInfo(*args, query: bool | int = ..., referenceNode: bool | int | str = ..., remove: bool | int | str = ...) -> Any: ...
def filePathEditor(*args, attributeOnly: bool | int = ..., attributeType: bool | int | str = ..., byType: bool | int | str = ..., copyAndRepath: tuple[str, str] = ..., deregisterType: str = ..., force: bool | int = ..., listDirectories: bool | int | str = ..., listFiles: bool | int | str = ..., listRegisteredTypes: bool | int = ..., preview: bool | int = ..., query: bool | int = ..., recursive: bool | int = ..., refresh: bool | int = ..., registerType: str = ..., relativeNames: bool | int = ..., repath: str = ..., replaceAll: bool | int = ..., replaceField: str = ..., replaceString: tuple[str, str] = ..., status: bool | int = ..., temporary: bool | int = ..., typeLabel: bool | int | str = ..., unresolved: bool | int = ..., withAttribute: bool | int = ...) -> Any: ...

@overload
def filletCurve(*args, edit: Literal[True], bias: float = ..., blendControl: bool | int = ..., caching: bool | int = ..., circular: bool | int = ..., curveParameter1: float = ..., curveParameter2: float = ..., depth: float = ..., freeformBlend: bool | int = ..., nodeState: int = ..., radius: float = ...) -> None: ...

@overload
def filletCurve(*args, bias: bool | int | float = ..., blendControl: bool | int = ..., caching: bool | int = ..., circular: bool | int = ..., constructionHistory: bool | int = ..., curveParameter1: bool | int | float = ..., curveParameter2: bool | int | float = ..., depth: bool | int | float = ..., freeformBlend: bool | int = ..., frozen: bool | int = ..., join: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., replaceOriginal: bool | int = ..., trim: bool | int = ...) -> Any: ...

@overload
def filter(*args, edit: Literal[True], name: str = ..., type: str = ...) -> None: ...

@overload
def filter(*args, name: bool | int | str = ..., type: bool | int | str = ...) -> Any: ...

@overload
def filterButterworthCtx(*args, edit: Literal[True], apply: bool | int = ..., cutoffFrequency: float = ..., endTime: int | float = ..., image1: str = ..., image2: str = ..., image3: str = ..., keepKeysOnFrame: bool | int = ..., samplingRate: float = ..., selectedKeys: bool | int = ..., startTime: int | float = ...) -> None: ...

@overload
def filterButterworthCtx(*args, apply: bool | int = ..., cutoffFrequency: bool | int | float = ..., endTime: bool | int | int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., keepKeysOnFrame: bool | int = ..., name: str = ..., preserveKeyTangent: str | list[str] = ..., query: bool | int = ..., samplingRate: bool | int | float = ..., selectedKeys: bool | int = ..., startTime: bool | int | int | float = ...) -> Any: ...
def filterCurve(*args, cutoffFrequency: float = ..., endTime: int | float = ..., filter: str = ..., keepKeysOnFrame: bool | int = ..., kernel: str = ..., keySync: bool | int = ..., maxTimeStep: float = ..., minTimeStep: float = ..., period: float = ..., precision: float = ..., precisionMode: int = ..., preserveKeyTangent: str | list[str] = ..., sampleCount: int = ..., samplingRate: float = ..., selectedKeys: bool | int = ..., startTime: int | float = ..., timeTolerance: float = ..., tolerance: float = ..., useQuaternion: bool | int = ..., width: int | float = ...) -> Any: ...
def filterExpand(*args, expand: bool | int = ..., fullPath: bool | int = ..., selectionMask: int | list[int] = ..., symActive: bool | int = ..., symNegative: bool | int = ..., symPositive: bool | int = ..., symSeam: bool | int = ...) -> Any: ...

@overload
def filterGaussianCtx(*args, edit: Literal[True], apply: bool | int = ..., endTime: int | float = ..., image1: str = ..., image2: str = ..., image3: str = ..., sampleCount: int = ..., selectedKeys: bool | int = ..., startTime: int | float = ..., useQuaternion: bool | int = ..., width: int | float = ...) -> None: ...

@overload
def filterGaussianCtx(*args, apply: bool | int = ..., endTime: bool | int | int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., sampleCount: int = ..., selectedKeys: bool | int = ..., startTime: bool | int | int | float = ..., useQuaternion: bool | int = ..., width: bool | int | int | float = ...) -> Any: ...
def filterInstances(*args, query: bool | int = ..., shapes: bool | int = ...) -> Any: ...

@overload
def filterKeyReducerCtx(*args, edit: Literal[True], apply: bool | int = ..., endTime: int | float = ..., image1: str = ..., image2: str = ..., image3: str = ..., keySync: bool | int = ..., precision: float = ..., precisionMode: int = ..., preserveKeyTangent: str | list[str] = ..., selectedKeys: bool | int = ..., startTime: int | float = ...) -> None: ...

@overload
def filterKeyReducerCtx(*args, apply: bool | int = ..., endTime: bool | int | int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., keySync: bool | int = ..., name: str = ..., precision: bool | int | float = ..., precisionMode: int = ..., preserveKeyTangent: bool | int | str | list[str] = ..., query: bool | int = ..., selectedKeys: bool | int = ..., startTime: bool | int | int | float = ...) -> Any: ...
def filterPeakRemoverCtx(*args, apply: bool | int = ..., edit: bool | int = ..., endTime: int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., selectedKeys: bool | int = ..., startTime: int | float = ...) -> Any: ...
def findDeformers(*args) -> Any: ...
def findKeyframe(*args, animation: str = ..., attribute: str | list[str] = ..., controlPoints: bool | int = ..., curve: bool | int = ..., float: str | int | float | list[str | int | float] = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., shape: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ..., timeSlider: bool | int = ..., which: str = ...) -> Any: ...
def findType(*args, deep: bool | int = ..., exact: bool | int = ..., forward: bool | int = ..., type: str = ...) -> Any: ...

@overload
def fitBspline(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., tolerance: float = ...) -> None: ...

@overload
def fitBspline(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., keepRange: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., tolerance: bool | int | float = ...) -> Any: ...
def flagTest(*args, edit: bool | int = ..., floatRange: None | list[None] = ..., indexRange: None | list[None] = ..., int64=..., multiUse: tuple[float, int, str] | list[tuple[float, int, str]] = ..., noReport: bool | int = ..., optionalQueryArgsFlag: tuple[float, int, str] = ..., pythonOptionalQueryArgsFlag: tuple[float, int, str] = ..., pythonQueryArgsFlag: tuple[float, int, str] = ..., query: bool | int = ..., queryArgsFlag: tuple[float, int, str] = ..., simpleFlag: bool | int = ..., stringArrayFlag=..., stringFlag: str = ..., timeRange: None | list[None] = ..., tripleFloat: tuple[float, float, float] = ...) -> Any: ...
def flexor(*args, atBones: bool | int = ..., atJoints: bool | int = ..., deformerCommand: str = ..., edit: bool | int = ..., list: bool | int = ..., name: str = ..., noScale: bool | int = ..., query: bool | int = ..., toSkeleton: bool | int = ..., type: str = ...) -> Any: ...

@overload
def floatField(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., maxValue: float = ..., minValue: float = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., receiveFocusCommand: str | Callable = ..., showTrailingZeros: bool | int = ..., statusBarMessage: str = ..., step: float = ..., value: float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def floatField(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., receiveFocusCommand: str | Callable = ..., showTrailingZeros: bool | int = ..., statusBarMessage: str = ..., step: bool | int | float = ..., useTemplate: str = ..., value: bool | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def floatFieldGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraLabel: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., showTrailingZeros: bool | int = ..., statusBarMessage: str = ..., step: float = ..., value: tuple[float, float, float, float] = ..., value1: float = ..., value2: float = ..., value3: float = ..., value4: float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def floatFieldGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraLabel: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfFields: int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., showTrailingZeros: bool | int = ..., statusBarMessage: str = ..., step: bool | int | float = ..., useTemplate: str = ..., value: bool | int | tuple[float, float, float, float] = ..., value1: bool | int | float = ..., value2: bool | int | float = ..., value3: bool | int | float = ..., value4: bool | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def floatScrollBar(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., largeStep: float = ..., manage: bool | int = ..., maxValue: float = ..., minValue: float = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., step: float = ..., value: float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def floatScrollBar(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontal: bool | int = ..., isObscured: bool | int = ..., largeStep: bool | int | float = ..., manage: bool | int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., step: bool | int | float = ..., useTemplate: str = ..., value: bool | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def floatSlider(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., maxValue: float = ..., minValue: float = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., step: float = ..., value: float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def floatSlider(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontal: bool | int = ..., isObscured: bool | int = ..., manage: bool | int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., step: bool | int | float = ..., useTemplate: str = ..., value: bool | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def floatSlider2(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand1: str = ..., changeCommand2: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., maximum: float = ..., minimum: float = ..., noBackground: bool | int = ..., polarity: int = ..., positionControl1: str = ..., positionControl2: str = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., value1: float = ..., value2: float = ..., values: tuple[float, float] = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def floatSlider2(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand1: str = ..., changeCommand2: str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., maximum: bool | int | float = ..., minimum: bool | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., polarity: int = ..., popupMenuArray: bool | int = ..., positionControl1: str = ..., positionControl2: str = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., value1: bool | int | float = ..., value2: bool | int | float = ..., values: tuple[float, float] = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def floatSliderButtonGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., buttonCommand: str | Callable = ..., buttonLabel: str = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraLabel: str = ..., fieldMaxValue: float = ..., fieldMinValue: float = ..., fieldStep: float = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: str = ..., label: str = ..., manage: bool | int = ..., maxValue: float = ..., minValue: float = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., sliderStep: float = ..., statusBarMessage: str = ..., step: float = ..., symbolButtonCommand: str | Callable = ..., symbolButtonDisplay: bool | int = ..., value: float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def floatSliderButtonGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., buttonCommand: str | Callable = ..., buttonLabel: bool | int | str = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraLabel: bool | int | str = ..., field: bool | int = ..., fieldMaxValue: bool | int | float = ..., fieldMinValue: bool | int | float = ..., fieldStep: bool | int | float = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., sliderStep: bool | int | float = ..., statusBarMessage: str = ..., step: bool | int | float = ..., symbolButtonCommand: str | Callable = ..., symbolButtonDisplay: bool | int = ..., useTemplate: str = ..., value: bool | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def floatSliderGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraLabel: str = ..., fieldMaxValue: float = ..., fieldMinValue: float = ..., fieldStep: float = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., maxValue: float = ..., minValue: float = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., sliderStep: float = ..., statusBarMessage: str = ..., step: float = ..., value: float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def floatSliderGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraLabel: bool | int | str = ..., field: bool | int = ..., fieldMaxValue: bool | int | float = ..., fieldMinValue: bool | int | float = ..., fieldStep: bool | int | float = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., sliderStep: bool | int | float = ..., statusBarMessage: str = ..., step: bool | int | float = ..., useTemplate: str = ..., value: bool | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def flow(*args, divisions: bool | int | tuple[int, int, int] = ..., edit: bool | int = ..., localCompute: bool | int = ..., localDivisions: bool | int | tuple[int, int, int] = ..., objectCentered: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def flowLayout(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., columnSpacing: int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., horizontal: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ..., wrap: bool | int = ...) -> None: ...

@overload
def flowLayout(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., childArray: bool | int = ..., columnSpacing: int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontal: bool | int = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., vertical: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ..., wrap: bool | int = ...) -> Any: ...
def fluidAppend(*args, **keywords): ...
def fluidAppendOpt(*args, **keywords): ...

@overload
def fluidCacheInfo(*args, edit: Literal[True], attribute: str = ..., cacheTime: int | float = ..., endFrame: bool | int = ..., hasCache: bool | int = ..., hasData: bool | int = ..., initialConditions: bool | int = ..., playback: bool | int = ..., resolution: bool | int = ..., startFrame: bool | int = ...) -> None: ...

@overload
def fluidCacheInfo(*args, attribute: bool | int | str = ..., cacheTime: bool | int | int | float = ..., endFrame: bool | int = ..., hasCache: bool | int = ..., hasData: bool | int = ..., initialConditions: bool | int = ..., playback: bool | int = ..., query: bool | int = ..., resolution: bool | int = ..., startFrame: bool | int = ...) -> Any: ...
def fluidDeleteCache(*args, **keywords): ...
def fluidDeleteCacheFrames(*args, **keywords): ...
def fluidDeleteCacheFramesOpt(*args, **keywords): ...
def fluidDeleteCacheOpt(*args, **keywords): ...

@overload
def fluidEmitter(*args, edit: Literal[True], cycleEmission: str = ..., cycleInterval: int = ..., densityEmissionRate: float = ..., fluidDropoff: float = ..., fuelEmissionRate: float = ..., heatEmissionRate: float = ..., maxDistance: float = ..., minDistance: float = ..., name: str = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., rate: float = ..., torusSectionRadius: float = ..., type: str = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def fluidEmitter(*args, cycleEmission: bool | int | str = ..., cycleInterval: int = ..., densityEmissionRate: bool | int | float = ..., fluidDropoff: bool | int | float = ..., fuelEmissionRate: bool | int | float = ..., heatEmissionRate: bool | int | float = ..., maxDistance: bool | int | float = ..., minDistance: bool | int | float = ..., name: bool | int | str = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., rate: bool | int | float = ..., torusSectionRadius: bool | int | float = ..., type: bool | int | str = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...
def fluidMergeCache(*args, **keywords): ...
def fluidMergeCacheOpt(*args, **keywords): ...
def fluidReplaceCache(*args, **keywords): ...
def fluidReplaceCacheOpt(*args, **keywords): ...
def fluidReplaceFrames(*args, **keywords): ...
def fluidReplaceFramesOpt(*args, **keywords): ...
def fluidVoxelInfo(*args, checkBounds: bool | int = ..., inBounds: tuple[int, int, int] = ..., objectSpace: bool | int = ..., radius: float = ..., voxel: tuple[float, float, float] = ..., voxelCenter: bool | int = ..., xIndex: int = ..., yIndex: int = ..., zIndex: int = ...) -> Any: ...
def flushIdleQueue(*args, resume: bool | int = ...) -> Any: ...
def flushThumbnailCache(*args) -> Any: ...
def flushUndo(*args) -> Any: ...
def fontDialog(*args, FontList: bool | int = ..., scalable: bool | int = ...) -> Any: ...

@overload
def formLayout(*args, edit: Literal[True], annotation: str = ..., attachControl: tuple[str, str, int, str] | list[tuple[str, str, int, str]] = ..., attachForm: tuple[str, str, int] | list[tuple[str, str, int]] = ..., attachNone: tuple[str, str] | list[tuple[str, str]] = ..., attachOppositeControl: tuple[str, str, int, str] | list[tuple[str, str, int, str]] = ..., attachOppositeForm: tuple[str, str, int] | list[tuple[str, str, int]] = ..., attachPosition: tuple[str, str, int, int] | list[tuple[str, str, int, int]] = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfDivisions: int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def formLayout(*args, annotation: bool | int | str = ..., attachControl: tuple[str, str, int, str] | list[tuple[str, str, int, str]] = ..., attachForm: tuple[str, str, int] | list[tuple[str, str, int]] = ..., attachNone: tuple[str, str] | list[tuple[str, str]] = ..., attachOppositeControl: tuple[str, str, int, str] | list[tuple[str, str, int, str]] = ..., attachOppositeForm: tuple[str, str, int] | list[tuple[str, str, int]] = ..., attachPosition: tuple[str, str, int, int] | list[tuple[str, str, int, int]] = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., childArray: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfDivisions: int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def format(*args, stringArg: str | list[str] = ...) -> Any: ...
def frameBufferName(*args, autoTruncate: bool | int = ..., camera: str = ..., renderLayer: str = ..., renderPass: str = ...) -> Any: ...

@overload
def frameLayout(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., backgroundShade: bool | int = ..., borderStyle: str = ..., borderVisible: bool | int = ..., collapsable: bool | int = ..., collapse: bool | int = ..., collapseCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., expandCommand: str | Callable = ..., font: str = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., labelAlign: str = ..., labelIndent: int = ..., labelVisible: bool | int = ..., labelWidth: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., preCollapseCommand: str | Callable = ..., preExpandCommand: str | Callable = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def frameLayout(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., backgroundShade: bool | int = ..., borderStyle: bool | int | str = ..., borderVisible: bool | int = ..., childArray: bool | int = ..., collapsable: bool | int = ..., collapse: bool | int = ..., collapseCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., expandCommand: str | Callable = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., labelAlign: bool | int | str = ..., labelIndent: int = ..., labelVisible: bool | int = ..., labelWidth: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preCollapseCommand: str | Callable = ..., preExpandCommand: str | Callable = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def framelessDialog(*args, button: str | list[str] = ..., message: str = ..., messageAlign: str = ..., parent: str = ..., path: str = ..., primary: str | list[str] = ..., title: str = ...) -> Any: ...

@overload
def freeFormFillet(*args, edit: Literal[True], bias: float = ..., caching: bool | int = ..., depth: float = ..., nodeState: int = ..., positionTolerance: float = ..., tangentTolerance: float = ...) -> None: ...

@overload
def freeFormFillet(*args, bias: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., depth: bool | int | float = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., positionTolerance: bool | int | float = ..., query: bool | int = ..., range: bool | int = ..., tangentTolerance: bool | int | float = ...) -> Any: ...
def freezeOptions(*args, displayLayers: bool | int = ..., downstream: bool | int | str = ..., explicitPropagation: bool | int = ..., invisible: bool | int = ..., query: bool | int = ..., referencedNodes: bool | int = ..., runtimePropagation: bool | int = ..., upstream: bool | int | str = ...) -> Any: ...

@overload
def geomBind(*args, edit: Literal[True], falloff: float = ..., geodesicVoxelParams: tuple[int, bool | int] = ..., maxInfluences: int = ...) -> None: ...

@overload
def geomBind(*args, bindMethod: int = ..., falloff: bool | int | float = ..., geodesicVoxelParams: bool | int | tuple[int, bool | int] = ..., maxInfluences: int = ..., query: bool | int = ...) -> Any: ...
def geomToBBox(*args, bakeAnimation: bool | int = ..., combineMesh: bool | int = ..., endTime: int | float = ..., keepOriginal: bool | int = ..., name: str = ..., nameSuffix: str = ..., sampleBy: int | float = ..., shaderColor: tuple[float, float, float] = ..., single: bool | int = ..., startTime: int | float = ...) -> Any: ...
def geometryAppendCache(*args, **keywords): ...
def geometryAppendCacheOpt(*args, **keywords): ...
def geometryAttrInfo(*args, boundingBox: bool | int = ..., castToEdges: bool | int = ..., castToFaces: bool | int = ..., castToVerts: bool | int = ..., componentTagCategory: bool | int = ..., componentTagExpression: str = ..., componentTagHash: bool | int = ..., componentTagHistory: bool | int = ..., componentTagHistoryHash: bool | int = ..., componentTagNames: bool | int = ..., components: bool | int = ..., deformerChain: bool | int = ..., elementCount: bool | int = ..., groupId: int = ..., matrix: bool | int = ..., nodeChain: bool | int = ..., originalGeometry: bool | int = ..., outputPlugChain: bool | int = ..., plugChain: bool | int = ..., pointCount: bool | int = ..., pointIndices: bool | int = ..., points: bool | int = ..., subsetState: bool | int = ...) -> Any: ...
def geometryCache(*args, **keywords): ...
def geometryCacheOpt(*args, **keywords): ...

@overload
def geometryConstraint(*args, edit: Literal[True], layer: str = ..., name: str = ..., remove: bool | int = ..., weight: float = ...) -> None: ...

@overload
def geometryConstraint(*args, layer: str = ..., name: bool | int | str = ..., query: bool | int = ..., remove: bool | int = ..., targetList: bool | int = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ...) -> Any: ...
def geometryDeleteCacheFrames(*args, **keywords): ...
def geometryDeleteCacheFramesOpt(*args, **keywords): ...
def geometryDeleteCacheOpt(*args, **keywords): ...
def geometryExportCache(*args, **keywords): ...
def geometryExportCacheOpt(*args, **keywords): ...
def geometryMergeCache(*args, **keywords): ...
def geometryMergeCacheOpt(*args, **keywords): ...
def geometryReplaceCache(*args, **keywords): ...
def geometryReplaceCacheFrames(*args, **keywords): ...
def geometryReplaceCacheFramesOpt(*args, **keywords): ...
def geometryReplaceCacheOpt(*args, **keywords): ...
def getAttr(*args, asString: bool | int = ..., caching: bool | int = ..., channelBox: bool | int = ..., expandEnvironmentVariables: bool | int = ..., keyable: bool | int = ..., lock: bool | int = ..., multiIndices: bool | int = ..., noEvaluation: bool | int = ..., settable: bool | int = ..., silent: bool | int = ..., size: bool | int = ..., time: int | float = ..., type: bool | int = ...) -> Any: ...
def getClassification(*args, satisfies: str = ...) -> Any: ...
def getDefaultBrush(*args) -> Any: ...
def getFileList(*args, filespec: str = ..., folder: str = ...) -> Any: ...
def getFluidAttr(*args, attribute: str = ..., lowerFace: bool | int = ..., xIndex: int = ..., xvalue: bool | int = ..., yIndex: int = ..., yvalue: bool | int = ..., zIndex: int = ..., zvalue: bool | int = ...) -> Any: ...
def getInputDeviceRange(*args, maxValue: bool | int = ..., minValue: bool | int = ...) -> Any: ...
def getLastError(*args) -> Any: ...
def getMetadata(*args, channelName: bool | int | str = ..., channelType: bool | int | str = ..., dataType: bool | int = ..., endIndex: str = ..., index: bool | int | str | list[str] = ..., indexType: bool | int | str = ..., listChannelNames: bool | int = ..., listMemberNames: bool | int = ..., listStreamNames: bool | int = ..., memberName: str = ..., scene: bool | int = ..., startIndex: str = ..., streamName: bool | int | str = ...) -> Any: ...
def getModifiers(*args) -> Any: ...
def getModulePath(*args, moduleName: str = ...) -> Any: ...
def getPanel(*args, allConfigs: bool | int = ..., allPanels: bool | int = ..., allScriptedTypes: bool | int = ..., allTypes: bool | int = ..., atPosition: tuple[int, int] = ..., configWithLabel: str = ..., containing: str = ..., invisiblePanels: bool | int = ..., scriptType: str = ..., type: str = ..., typeOf: str = ..., underPointer: bool | int = ..., visiblePanels: bool | int = ..., withFocus: bool | int = ..., withLabel: str = ...) -> Any: ...
def getParticleAttr(*args, array: bool | int = ..., attribute: str = ..., object: str = ...) -> Any: ...
def getProcArguments(*args) -> Any: ...
def getRenderDependencies(*args) -> Any: ...
def getRenderTasks(*args, camera: str = ..., renderLayer: str = ...) -> Any: ...

@overload
def ghosting(*args, edit: Literal[True], allGhostedObjects: bool | int = ..., allInRange: bool | int = ..., customFrames: int | list[int] = ..., farOpacity: float = ..., geometryFilter: bool | int = ..., ghostsStep: int = ..., hierarchy: bool | int = ..., jointFilter: bool | int = ..., locatorFilter: bool | int = ..., mode: str = ..., nearOpacity: float = ..., postColor: tuple[float, float, float] = ..., postFrames: int = ..., preColor: tuple[float, float, float] = ..., preFrames: int = ..., preset: str = ..., resetAll: bool | int = ..., useDriver: bool | int = ...) -> None: ...

@overload
def ghosting(*args, action: str = ..., allGhostedObjects: bool | int = ..., allInRange: bool | int = ..., customFrames: bool | int | int | list[int] = ..., enable: bool | int = ..., farOpacity: bool | int | float = ..., frames: bool | int = ..., geometryFilter: bool | int = ..., ghostedObjects: bool | int = ..., ghostsStep: int = ..., hierarchy: bool | int = ..., jointFilter: bool | int = ..., locatorFilter: bool | int = ..., mode: bool | int | str = ..., nearOpacity: bool | int | float = ..., postColor: bool | int | tuple[float, float, float] = ..., postFrames: int = ..., preColor: bool | int | tuple[float, float, float] = ..., preFrames: int = ..., preset: bool | int | str = ..., query: bool | int = ..., resetAll: bool | int = ..., useDriver: bool | int = ...) -> Any: ...

@overload
def glRender(*args, edit: Literal[True], accumBufferPasses: int = ..., alphaSource: str = ..., antiAliasMethod: str = ..., cameraIcons: bool | int = ..., clearClr: tuple[float, float, float] = ..., collisionIcons: bool | int = ..., crossingEffect: bool | int = ..., drawStyle: str = ..., edgeSmoothness: float = ..., emitterIcons: bool | int = ..., fieldIcons: bool | int = ..., flipbookCallback: str = ..., frameEnd: int = ..., frameIncrement: int = ..., frameStart: int = ..., fullResolution: bool | int = ..., grid: bool | int = ..., imageDirectory: str = ..., imageName: str = ..., imageSize: tuple[int, int, float] = ..., lightIcons: bool | int = ..., lightingMode: str = ..., lineSmoothing: bool | int = ..., offScreen: bool | int = ..., renderFrame: str = ..., renderSequence: str = ..., sharpness: float = ..., shutterAngle: float = ..., textureDisplay: bool | int = ..., transformIcons: bool | int = ..., useAccumBuffer: bool | int = ..., viewport: tuple[int, int, float] = ..., writeDepthMap: bool | int = ...) -> None: ...

@overload
def glRender(*args, accumBufferPasses: int = ..., alphaSource: bool | int | str = ..., antiAliasMethod: bool | int | str = ..., cameraIcons: bool | int = ..., clearClr: bool | int | tuple[float, float, float] = ..., collisionIcons: bool | int = ..., crossingEffect: bool | int = ..., currentFrame: bool | int = ..., drawStyle: bool | int | str = ..., edgeSmoothness: bool | int | float = ..., emitterIcons: bool | int = ..., fieldIcons: bool | int = ..., flipbookCallback: bool | int | str = ..., frameEnd: int = ..., frameIncrement: int = ..., frameStart: int = ..., fullResolution: bool | int = ..., grid: bool | int = ..., imageDirectory: bool | int | str = ..., imageName: bool | int | str = ..., imageSize: bool | int | tuple[int, int, float] = ..., lightIcons: bool | int = ..., lightingMode: bool | int | str = ..., lineSmoothing: bool | int = ..., offScreen: bool | int = ..., query: bool | int = ..., renderFrame: bool | int | str = ..., renderSequence: bool | int | str = ..., sharpness: bool | int | float = ..., shutterAngle: bool | int | float = ..., textureDisplay: bool | int = ..., transformIcons: bool | int = ..., useAccumBuffer: bool | int = ..., viewport: bool | int | tuple[int, int, float] = ..., writeDepthMap: bool | int = ...) -> Any: ...

@overload
def glRenderEditor(*args, edit: Literal[True], docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., lookThru: str = ..., mainListConnection: str = ..., parent: str = ..., selectionConnection: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def glRenderEditor(*args, control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., lockMainConnection: bool | int = ..., lookThru: bool | int | str = ..., mainListConnection: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectionConnection: bool | int | str = ..., stateString: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., viewCameraName: bool | int = ...) -> Any: ...

@overload
def globalStitch(*args, edit: Literal[True], caching: bool | int = ..., lockSurface: bool | int | list[bool | int] = ..., maxSeparation: float = ..., modificationResistance: float = ..., nodeState: int = ..., sampling: int = ..., stitchCorners: int = ..., stitchEdges: int = ..., stitchPartialEdges: bool | int = ..., stitchSmoothness: int = ...) -> None: ...

@overload
def globalStitch(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., lockSurface: bool | int | bool | int | list[bool | int] = ..., maxSeparation: bool | int | float = ..., modificationResistance: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., sampling: int = ..., stitchCorners: int = ..., stitchEdges: int = ..., stitchPartialEdges: bool | int = ..., stitchSmoothness: int = ...) -> Any: ...
def goal(*args, goal: bool | int | str | list[str] = ..., index: bool | int = ..., query: bool | int = ..., useTransformAsGoal: bool | int = ..., weight: float = ...) -> Any: ...
def grabColor(*args, alpha: bool | int = ..., hsvValue: bool | int = ..., rgbValue: bool | int = ...) -> Any: ...

@overload
def gradientControl(*args, edit: Literal[True], adaptiveScaling: bool | int = ..., annotation: str = ..., attribute: str = ..., backgroundColor: tuple[float, float, float] = ..., clearAttribute: bool | int = ..., displayKeyInfo: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., highlightMode: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., readOnly: bool | int = ..., refreshOnRelease: int = ..., selectedColorControl: str = ..., selectedInterpControl: str = ..., selectedPositionControl: str = ..., staticNumberOfControls: bool | int = ..., staticPositions: bool | int = ..., statusBarMessage: str = ..., upperLimitControl: str = ..., verticalLayout: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def gradientControl(*args, adaptiveScaling: bool | int = ..., annotation: bool | int | str = ..., attribute: str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., clearAttribute: bool | int = ..., defineTemplate: str = ..., displayKeyInfo: bool | int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., highlightMode: bool | int | str = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfControls: int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., readOnly: bool | int = ..., refreshOnRelease: int = ..., selectedColorControl: str = ..., selectedInterpControl: str = ..., selectedPositionControl: str = ..., staticNumberOfControls: bool | int = ..., staticPositions: bool | int = ..., statusBarMessage: str = ..., upperLimitControl: bool | int | str = ..., useTemplate: str = ..., verticalLayout: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def gradientControlNoAttr(*args, edit: Literal[True], addEntry: tuple[float, float, float, float, int] = ..., annotation: str = ..., asString: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., currentKey: int = ..., currentKeyChanged: str | Callable = ..., currentKeyColorValue: tuple[float, float, float] = ..., currentKeyCurveValue: bool | int = ..., currentKeyInterpValue: int = ..., displayKeyInfo: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., highlightMode: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., optionVar: str = ..., preventOverride: bool | int = ..., rampAsColor: bool | int = ..., readOnly: bool | int = ..., staticNumberOfControls: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def gradientControlNoAttr(*args, addEntry: tuple[float, float, float, float, int] = ..., annotation: bool | int | str = ..., asString: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., currentKey: int = ..., currentKeyChanged: str | Callable = ..., currentKeyColorValue: bool | int | tuple[float, float, float] = ..., currentKeyCurveValue: bool | int = ..., currentKeyInterpValue: int = ..., defineTemplate: str = ..., displayKeyInfo: bool | int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., highlightMode: bool | int | str = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., optionVar: bool | int | str = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rampAsColor: bool | int = ..., readOnly: bool | int = ..., staticNumberOfControls: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., valueAtPoint: bool | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def graphDollyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def graphDollyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def graphSelectContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def graphSelectContext(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def graphTrackCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def graphTrackCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def gravity(*args, edit: Literal[True], attenuation: float = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., magnitude: float = ..., maxDistance: float = ..., name: str = ..., perVertex: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., torusSectionRadius: float = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def gravity(*args, attenuation: bool | int | float = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., name: bool | int | str = ..., perVertex: bool | int = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., torusSectionRadius: bool | int | float = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...
def grid(*args, default: bool | int = ..., displayAxes: bool | int = ..., displayAxesBold: bool | int = ..., displayDivisionLines: bool | int = ..., displayGridLines: bool | int = ..., displayOrthographicLabels: bool | int = ..., displayPerspectiveLabels: bool | int = ..., divisions: int = ..., orthographicLabelPosition: bool | int | str = ..., perspectiveLabelPosition: bool | int | str = ..., query: bool | int = ..., reset: bool | int = ..., size: bool | int | float = ..., spacing: bool | int | float = ..., style: int = ..., toggle: bool | int = ...) -> Any: ...

@overload
def gridLayout(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., cellHeight: int = ..., cellWidth: int = ..., cellWidthHeight: tuple[int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfColumns: int = ..., numberOfRows: int = ..., numberOfRowsColumns: tuple[int, int] = ..., position: tuple[str, int] | list[tuple[str, int]] = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def gridLayout(*args, allowEmptyCells: bool | int = ..., annotation: bool | int | str = ..., autoGrow: bool | int = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., cellHeight: int = ..., cellWidth: int = ..., cellWidthHeight: tuple[int, int] = ..., childArray: bool | int = ..., columnsResizable: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., gridOrder: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfColumns: int = ..., numberOfPopupMenus: bool | int = ..., numberOfRows: int = ..., numberOfRowsColumns: tuple[int, int] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., position: tuple[str, int] | list[tuple[str, int]] = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def group(*args, absolute: bool | int = ..., empty: bool | int = ..., name: str = ..., parent: str = ..., relative: bool | int = ..., useAsGroup: str = ..., world: bool | int = ...) -> Any: ...
def groupParts(*args) -> Any: ...

@overload
def hardenPointCurve(*args, edit: Literal[True], caching: bool | int = ..., multiplicity: int = ..., nodeState: int = ...) -> None: ...

@overload
def hardenPointCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., multiplicity: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...
def hardware(*args, brdType: bool | int = ..., cpuType: bool | int = ..., graphicsType: bool | int = ..., megaHertz: bool | int = ..., numProcessors: bool | int = ...) -> Any: ...

@overload
def hardwareRenderPanel(*args, edit: Literal[True], camera: str = ..., copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def hardwareRenderPanel(*args, camera: bool | int | str = ..., control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., glRenderEditor: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., query: bool | int = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...
def hasMetadata(*args, asList: bool | int = ..., channelName: bool | int | str = ..., channelType: bool | int | str = ..., endIndex: str = ..., ignoreDefault: bool | int = ..., index: bool | int | str | list[str] = ..., indexType: bool | int | str = ..., memberName: str = ..., scene: bool | int = ..., startIndex: str = ..., streamName: bool | int | str = ...) -> Any: ...

@overload
def headsUpDisplay(*args, edit: Literal[True], allDescendants: bool | int = ..., allowOverlap: bool | int = ..., attachToRefresh: bool | int = ..., attributeChange: str = ..., block: int = ..., blockAlignment: str = ..., blockSize: str = ..., command: str | Callable = ..., conditionChange: str = ..., conditionFalse: str = ..., conditionTrue: str = ..., connectionChange: str = ..., dataAlignment: str = ..., dataFontSize: str = ..., dataWidth: int = ..., decimalPrecision: int = ..., disregardIndex: bool | int = ..., event: str = ..., gridColor: int = ..., label: str = ..., labelFontSize: str = ..., labelWidth: int = ..., layoutVisibility: bool | int = ..., name: str = ..., nodeChanges: str | list[str] = ..., padding: int = ..., preset: str = ..., remove: bool | int = ..., removeID: int = ..., removePosition: tuple[int, int] = ..., resetNodeChanges: str | list[str] = ..., section: int = ..., setOption: tuple[str, str] = ..., showGrid: bool | int = ..., visible: bool | int = ...) -> None: ...

@overload
def headsUpDisplay(*args, allDescendants: bool | int = ..., allowOverlap: bool | int = ..., attachToRefresh: bool | int = ..., attributeChange: str = ..., block: int = ..., blockAlignment: bool | int | str = ..., blockSize: bool | int | str = ..., command: bool | int | str | Callable = ..., conditionChange: str = ..., conditionFalse: str = ..., conditionTrue: str = ..., connectionChange: str = ..., dataAlignment: bool | int | str = ..., dataFontSize: bool | int | str = ..., dataWidth: int = ..., decimalPrecision: int = ..., disregardIndex: bool | int = ..., event: str = ..., exists: bool | int = ..., getOption: bool | int | str = ..., gridColor: int = ..., label: bool | int | str = ..., labelFontSize: bool | int | str = ..., labelWidth: int = ..., lastOccupiedBlock: int = ..., layoutVisibility: bool | int = ..., listConditions: bool | int = ..., listEvents: bool | int = ..., listHeadsUpDisplays: bool | int = ..., listNodeChanges: bool | int = ..., listPresets: bool | int = ..., name: str = ..., nextFreeBlock: int = ..., nodeChanges: bool | int | str | list[str] = ..., padding: int = ..., preset: bool | int | str = ..., query: bool | int = ..., refresh: bool | int = ..., remove: bool | int = ..., removeID: int = ..., removePosition: tuple[int, int] = ..., resetNodeChanges: str | list[str] = ..., scriptResult: bool | int = ..., section: int = ..., setOption: tuple[str, str] = ..., showGrid: bool | int = ..., visible: bool | int = ...) -> Any: ...
def headsUpMessage(*args, horizontalOffset: int = ..., object: str = ..., selection: bool | int = ..., time: float = ..., uvTextureEditor: bool | int = ..., verticalOffset: int = ..., viewport: bool | int = ...) -> Any: ...
def help(*args, documentation: bool | int = ..., language: str = ..., list: bool | int = ..., popupDisplayTime: int = ..., popupMode: bool | int = ..., popupPauseTime: int = ..., popupSimpleMode: bool | int = ..., query: bool | int = ..., rolloverMode: bool | int = ..., syntaxOnly: bool | int = ...) -> Any: ...

@overload
def helpLine(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def helpLine(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def hide(*args, allObjects: bool | int = ..., clearLastHidden: bool | int = ..., clearSelection: bool | int = ..., invertComponents: bool | int = ..., returnHidden: bool | int = ..., testVisibility: bool | int = ...) -> Any: ...

@overload
def hikGlobals(*args, edit: Literal[True], releaseAllPinning: bool | int = ...) -> None: ...

@overload
def hikGlobals(*args, query: bool | int = ..., releaseAllPinning: bool | int = ...) -> Any: ...
def hilite(*args, replace: bool | int = ..., toggle: bool | int = ..., unHilite: bool | int = ...) -> Any: ...
def hitTest(*args) -> Any: ...
def hotBox(*args, PaneOnlyMenus: bool | int = ..., PaneToggleMenus: bool | int = ..., animationOnlyMenus: bool | int = ..., animationToggleMenus: bool | int = ..., clothOnlyMenus: bool | int = ..., clothToggleMenus: bool | int = ..., commonOnlyMenus: bool | int = ..., commonToggleMenus: bool | int = ..., customMenuSetsToggleMenus: bool | int = ..., displayCenterOnly: bool | int = ..., displayHotbox: bool | int = ..., displayStyle: bool | int = ..., displayZonesOnly: bool | int = ..., dynamicsOnlyMenus: bool | int = ..., dynamicsToggleMenus: bool | int = ..., liveOnlyMenus: bool | int = ..., liveToggleMenus: bool | int = ..., menuSetOnly: str = ..., menuSetToggle: tuple[str, bool | int] = ..., modelingOnlyMenus: bool | int = ..., modelingToggleMenus: bool | int = ..., noClickCommand: str | Callable = ..., noClickDelay: float = ..., noClickPosition: bool | int = ..., noKeyPress: bool | int = ..., polygonsOnlyMenus: bool | int = ..., polygonsToggleMenus: bool | int = ..., position: tuple[int, int] = ..., query: bool | int = ..., release: bool | int = ..., renderingOnlyMenus: bool | int = ..., renderingToggleMenus: bool | int = ..., riggingOnlyMenus: bool | int = ..., riggingToggleMenus: bool | int = ..., rmbPopups: bool | int = ..., showAllToggleMenus: bool | int = ..., surfacesOnlyMenus: bool | int = ..., surfacesToggleMenus: bool | int = ..., transparenyLevel: int = ..., updateMenus: bool | int = ...) -> Any: ...
def hotkey(*args, altModifier: bool | int = ..., autoSave: bool | int = ..., commandModifier: bool | int = ..., ctrlModifier: bool | int = ..., ctxClient: bool | int | str = ..., dragPress: bool | int = ..., factorySettings: bool | int = ..., isModifier: bool | int = ..., keyShortcut: str = ..., name: bool | int | str = ..., pressCommandRepeat: bool | int = ..., query: bool | int = ..., releaseCommandRepeat: bool | int = ..., releaseName: bool | int | str = ..., shiftModifier: bool | int = ..., sourceUserHotkeys: bool | int = ...) -> Any: ...
def hotkeyCheck(*args, altModifier: bool | int = ..., commandModifier: bool | int = ..., ctrlModifier: bool | int = ..., isRepeatable: bool | int = ..., keyString: str = ..., keyUp: bool | int = ..., optionModifier: bool | int = ..., toBeRemovedInFutureMayaRelease: str = ...) -> Any: ...
def hotkeyCtx(*args, addClient: str | list[str] = ..., clientArray: bool | int = ..., currentClient: bool | int | str = ..., insertTypeAt: tuple[str, str] = ..., query: bool | int = ..., removeAllClients: bool | int = ..., removeClient: str | list[str] = ..., removeType: str = ..., type: bool | int | str = ..., typeArray: bool | int = ..., typeExists: bool | int | str = ...) -> Any: ...
def hotkeyEditor(*args) -> Any: ...

@overload
def hotkeyEditorPanel(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def hotkeyEditorPanel(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def hotkeyMapSet(*args) -> Any: ...

@overload
def hotkeySet(*args, edit: Literal[True], current: bool | int = ..., delete: bool | int = ..., export: str = ..., ip: str = ..., rename: str = ...) -> None: ...

@overload
def hotkeySet(*args, current: bool | int = ..., delete: bool | int = ..., exists: bool | int = ..., export: str = ..., hotkeySetArray: bool | int = ..., ip: str = ..., query: bool | int = ..., rename: str = ..., source: str = ...) -> Any: ...

@overload
def hudButton(*args, edit: Literal[True], allowOverlap: bool | int = ..., block: int = ..., blockAlignment: str = ..., blockSize: str = ..., buttonShape: str = ..., buttonWidth: int = ..., label: str = ..., labelFontSize: str = ..., padding: int = ..., pressCommand: str | Callable = ..., releaseCommand: str | Callable = ..., section: int = ..., visible: bool | int = ...) -> None: ...

@overload
def hudButton(*args, allowOverlap: bool | int = ..., block: int = ..., blockAlignment: bool | int | str = ..., blockSize: bool | int | str = ..., buttonShape: bool | int | str = ..., buttonWidth: int = ..., label: bool | int | str = ..., labelFontSize: bool | int | str = ..., padding: int = ..., pressCommand: bool | int | str | Callable = ..., query: bool | int = ..., releaseCommand: bool | int | str | Callable = ..., section: int = ..., visible: bool | int = ...) -> Any: ...

@overload
def hudSlider(*args, edit: Literal[True], allowOverlap: bool | int = ..., block: int = ..., blockAlignment: str = ..., blockSize: str = ..., decimalPrecision: int = ..., dragCommand: str | Callable = ..., internalPadding: int = ..., label: str = ..., labelFontSize: str = ..., labelWidth: int = ..., maxValue: float = ..., minValue: float = ..., padding: int = ..., pressCommand: str | Callable = ..., releaseCommand: str | Callable = ..., section: int = ..., sliderIncrement: float = ..., sliderLength: int = ..., type: str = ..., value: float = ..., valueAlignment: str = ..., valueFontSize: str = ..., valueWidth: int = ..., visible: bool | int = ...) -> None: ...

@overload
def hudSlider(*args, allowOverlap: bool | int = ..., block: int = ..., blockAlignment: bool | int | str = ..., blockSize: bool | int | str = ..., decimalPrecision: int = ..., dragCommand: bool | int | str | Callable = ..., internalPadding: int = ..., label: bool | int | str = ..., labelFontSize: bool | int | str = ..., labelWidth: int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., padding: int = ..., pressCommand: bool | int | str | Callable = ..., query: bool | int = ..., releaseCommand: bool | int | str | Callable = ..., section: int = ..., sliderIncrement: bool | int | float = ..., sliderLength: int = ..., type: bool | int | str = ..., value: bool | int | float = ..., valueAlignment: bool | int | str = ..., valueFontSize: bool | int | str = ..., valueWidth: int = ..., visible: bool | int = ...) -> Any: ...

@overload
def hudSliderButton(*args, edit: Literal[True], allowOverlap: bool | int = ..., block: int = ..., blockAlignment: str = ..., blockSize: str = ..., buttonLabel: str = ..., buttonLabelFontSize: str = ..., buttonPressCommand: str | Callable = ..., buttonReleaseCommand: str | Callable = ..., buttonShape: str = ..., buttonWidth: int = ..., decimalPrecision: int = ..., internalPadding: int = ..., maxValue: float = ..., minValue: float = ..., padding: int = ..., section: int = ..., sliderDragCommand: str | Callable = ..., sliderIncrement: float = ..., sliderLabel: str = ..., sliderLabelFontSize: str = ..., sliderLabelWidth: int = ..., sliderLength: int = ..., sliderPressCommand: str | Callable = ..., sliderReleaseCommand: str | Callable = ..., type: str = ..., value: float = ..., valueAlignment: str = ..., valueFontSize: str = ..., valueWidth: int = ..., visible: bool | int = ...) -> None: ...

@overload
def hudSliderButton(*args, allowOverlap: bool | int = ..., block: int = ..., blockAlignment: bool | int | str = ..., blockSize: bool | int | str = ..., buttonLabel: bool | int | str = ..., buttonLabelFontSize: bool | int | str = ..., buttonPressCommand: bool | int | str | Callable = ..., buttonReleaseCommand: bool | int | str | Callable = ..., buttonShape: bool | int | str = ..., buttonWidth: int = ..., decimalPrecision: int = ..., internalPadding: int = ..., maxValue: bool | int | float = ..., minValue: bool | int | float = ..., padding: int = ..., query: bool | int = ..., section: int = ..., sliderDragCommand: bool | int | str | Callable = ..., sliderIncrement: bool | int | float = ..., sliderLabel: bool | int | str = ..., sliderLabelFontSize: bool | int | str = ..., sliderLabelWidth: int = ..., sliderLength: int = ..., sliderPressCommand: bool | int | str | Callable = ..., sliderReleaseCommand: bool | int | str | Callable = ..., type: bool | int | str = ..., value: bool | int | float = ..., valueAlignment: bool | int | str = ..., valueFontSize: bool | int | str = ..., valueWidth: int = ..., visible: bool | int = ...) -> Any: ...
def hwReflectionMap(*args, backTextureName: bool | int | str = ..., bottomTextureName: bool | int | str = ..., cubeMap: bool | int = ..., decalMode: bool | int = ..., edit: bool | int = ..., enable: bool | int = ..., frontTextureName: bool | int | str = ..., leftTextureName: bool | int | str = ..., query: bool | int = ..., rightTextureName: bool | int | str = ..., sphereMapTextureName: bool | int | str = ..., topTextureName: bool | int | str = ...) -> Any: ...
def hwRender(*args, acceleratedMultiSampleSupport: bool | int = ..., activeTextureCount: bool | int = ..., camera: bool | int | str = ..., currentFrame: bool | int = ..., currentView: bool | int = ..., edgeAntiAliasing: bool | int | tuple[int, int] = ..., fixFileNameNumberPattern: bool | int = ..., frame: float = ..., fullRenderSupport: bool | int = ..., height: int = ..., imageFileName: bool | int = ..., layer: bool | int | str = ..., limitedRenderSupport: bool | int = ..., lowQualityLighting: bool | int = ..., noRenderView: bool | int = ..., notWriteToFile: bool | int = ..., printGeometry: bool | int = ..., query: bool | int = ..., renderHardwareName: bool | int = ..., renderRegion: bool | int | tuple[int, int, int, int] = ..., renderSelected: bool | int = ..., textureResolution: int = ..., width: int = ..., writeAlpha: bool | int = ..., writeDepth: bool | int = ...) -> Any: ...
def hwRenderLoad(*args) -> Any: ...

@overload
def hyperGraph(*args, edit: Literal[True], addBookmark: bool | int = ..., addDependGraph: str = ..., addDependNode: str = ..., animateTransition: bool | int = ..., attributeEditor: str = ..., backward: bool | int = ..., breakConnectionCommand: str = ..., clear: bool | int = ..., collapseContainer: bool | int = ..., connectionDrawStyle: str = ..., currentEdge: str = ..., currentNode: str = ..., debug: str = ..., deleteBookmark: str = ..., dependGraph: bool | int = ..., dependNode: str = ..., directoryPressCommand: str = ..., docTag: str = ..., down: bool | int = ..., downstream: bool | int = ..., dragAndDropBehaviorCommand: str = ..., edgeDblClickCommand: str = ..., edgeDimmedDblClickCommand: str = ..., edgeDropCommand: str = ..., edgePressCommand: str = ..., edgeReleaseCommand: str = ..., enableAutomaticLayout: bool | int = ..., expandContainer: bool | int = ..., filter: str = ..., filterDetail: tuple[str, bool | int] = ..., focusCommand: str = ..., fold: bool | int = ..., forceMainConnection: str = ..., forceRefresh: bool | int = ..., forward: bool | int = ..., frame: bool | int = ..., frameBranch: bool | int = ..., frameGraph: bool | int = ..., frameGraphNoRebuild: bool | int = ..., frameHierarchy: bool | int = ..., freeform: bool | int = ..., graphDescription: bool | int = ..., graphLayoutStyle: str = ..., heatMapDisplay: bool | int = ..., highlightConnection: str = ..., iconSize: str = ..., image: str = ..., imageEnabled: bool | int = ..., imageForContainer: bool | int = ..., imagePosition: tuple[float, float] = ..., imageScale: float = ..., initializeScript: str = ..., layout: bool | int = ..., layoutSelected: str = ..., limitGraphTraversal: int = ..., lockMainConnection: bool | int = ..., look: tuple[float, float] = ..., mainListConnection: str = ..., mergeConnections: bool | int = ..., navigateHome: bool | int = ..., navup: bool | int = ..., newInputConnection: str = ..., newOutputConnection: str = ..., nextView: bool | int = ..., nodeConnectCommand: str = ..., nodeDblClickCommand: str = ..., nodeDropCommand: str = ..., nodeMenuCommand: str = ..., nodePressCommand: str = ..., nodeReleaseCommand: str = ..., opaqueContainers: bool | int = ..., orientation: str = ..., panView: tuple[float, float] = ..., parent: str = ..., popupMenuScript: str = ..., previousView: bool | int = ..., range: tuple[float, float] = ..., rebuild: bool | int = ..., removeNode: str = ..., rename: bool | int = ..., resetFreeform: bool | int = ..., restoreBookmark: str = ..., scrollUpDownNoZoom: bool | int = ..., selectionConnection: str = ..., setNodePosition: tuple[str, float, float] = ..., showCachedConnections: bool | int = ..., showConnectionFromSelected: bool | int = ..., showConnectionToSelected: bool | int = ..., showConstraintLabels: bool | int = ..., showConstraints: bool | int = ..., showDeformers: bool | int = ..., showExpressions: bool | int = ..., showInvisible: bool | int = ..., showRelationships: bool | int = ..., showShapes: bool | int = ..., showUnderworld: bool | int = ..., transitionFrames: int = ..., unParent: bool | int = ..., unfold: bool | int = ..., unfoldAll: bool | int = ..., unfoldAllShapes: bool | int = ..., unfoldHidden: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., updateNodeAdded: bool | int = ..., updateSelection: bool | int = ..., upstream: bool | int = ..., useDrawOverrideColor: bool | int = ..., useFeedbackList: bool | int = ..., viewOption: str = ..., visibility: bool | int = ..., zoom: float = ...) -> None: ...

@overload
def hyperGraph(*args, addBookmark: bool | int = ..., addDependGraph: str = ..., addDependNode: str = ..., animateTransition: bool | int = ..., attributeEditor: str = ..., backward: bool | int = ..., bookmarkName: bool | int = ..., breakConnectionCommand: bool | int | str = ..., clear: bool | int = ..., collapseContainer: bool | int = ..., connectionDrawStyle: str = ..., control: bool | int = ..., currentEdge: bool | int | str = ..., currentNode: bool | int | str = ..., debug: str = ..., defineTemplate: str = ..., deleteBookmark: str = ..., dependGraph: bool | int = ..., dependNode: str = ..., directoryPressCommand: str = ..., docTag: bool | int | str = ..., down: bool | int = ..., downstream: bool | int = ..., dragAndDropBehaviorCommand: str = ..., dropNode: bool | int | str = ..., dropTargetNode: bool | int | str = ..., edgeDblClickCommand: str = ..., edgeDimmedDblClickCommand: str = ..., edgeDropCommand: str = ..., edgePressCommand: str = ..., edgeReleaseCommand: str = ..., enableAutomaticLayout: bool | int = ..., exists: bool | int = ..., expandContainer: bool | int = ..., feedbackGadget: bool | int | str = ..., feedbackNode: bool | int | str = ..., filter: bool | int | str = ..., filterDetail: tuple[str, bool | int] = ..., fitImageToHeight: bool | int = ..., fitImageToWidth: bool | int = ..., focusCommand: str = ..., fold: bool | int = ..., forceMainConnection: bool | int | str = ..., forceRefresh: bool | int = ..., forward: bool | int = ..., frame: bool | int = ..., frameBranch: bool | int = ..., frameGraph: bool | int = ..., frameGraphNoRebuild: bool | int = ..., frameHierarchy: bool | int = ..., freeform: bool | int = ..., fromAttr: bool | int | str = ..., fromNode: bool | int | str = ..., getNodeList: bool | int = ..., getNodePosition: bool | int | str = ..., graphDescription: bool | int = ..., graphLayoutStyle: bool | int | str = ..., graphType: bool | int | str = ..., heatMapDisplay: bool | int = ..., highlightConnection: bool | int | str = ..., iconSize: bool | int | str = ..., image: bool | int | str = ..., imageEnabled: bool | int = ..., imageForContainer: bool | int = ..., imagePosition: bool | int | tuple[float, float] = ..., imageScale: bool | int | float = ..., initializeScript: str = ..., isHotkeyTarget: bool | int = ..., layout: bool | int = ..., layoutSelected: str = ..., layoutSubtree: bool | int = ..., limitGraphTraversal: int = ..., lockMainConnection: bool | int = ..., look: tuple[float, float] = ..., mainListConnection: bool | int | str = ..., mergeConnections: bool | int = ..., navigateHome: bool | int = ..., navup: bool | int = ..., newInputConnection: str = ..., newOutputConnection: str = ..., nextView: bool | int = ..., nodeConnectCommand: str = ..., nodeDblClickCommand: str = ..., nodeDropCommand: str = ..., nodeMenuCommand: str = ..., nodePressCommand: str = ..., nodeReleaseCommand: str = ..., opaqueContainers: bool | int = ..., orientation: bool | int | str = ..., panView: tuple[float, float] = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., popupMenuScript: str = ..., previousView: bool | int = ..., query: bool | int = ..., range: bool | int | tuple[float, float] = ..., rebuild: bool | int = ..., removeNode: str = ..., rename: bool | int = ..., resetFreeform: bool | int = ..., restoreBookmark: str = ..., scrollUpDownNoZoom: bool | int = ..., selectionConnection: bool | int | str = ..., setNodePosition: tuple[str, float, float] = ..., showCachedConnections: bool | int = ..., showConnectionFromSelected: bool | int = ..., showConnectionToSelected: bool | int = ..., showConstraintLabels: bool | int = ..., showConstraints: bool | int = ..., showDeformers: bool | int = ..., showExpressions: bool | int = ..., showInvisible: bool | int = ..., showRelationships: bool | int = ..., showShapes: bool | int = ..., showUnderworld: bool | int = ..., stateString: bool | int = ..., toAttr: bool | int | str = ..., toNode: bool | int | str = ..., transitionFrames: int = ..., unParent: bool | int = ..., unfold: bool | int = ..., unfoldAll: bool | int = ..., unfoldAllShapes: bool | int = ..., unfoldHidden: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., updateNodeAdded: bool | int = ..., updateSelection: bool | int = ..., upstream: bool | int = ..., useDrawOverrideColor: bool | int = ..., useFeedbackList: bool | int = ..., useTemplate: str = ..., viewOption: bool | int | str = ..., visibility: bool | int = ..., zoom: float = ...) -> Any: ...

@overload
def hyperPanel(*args, edit: Literal[True], copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def hyperPanel(*args, control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., hyperEditor: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., query: bool | int = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...
def hyperShade(*args, assign: str = ..., clearWorkArea: bool | int = ..., collapse: str = ..., createNode: str = ..., dependGraphArea: bool | int = ..., downStream: bool | int = ..., duplicate: bool | int = ..., fixRenderSize: bool | int = ..., geometries: str | list[str] = ..., incremental: bool | int = ..., listDownstreamNodes: str = ..., listDownstreamShaderNodes: str = ..., listGeometries: str = ..., listMaterialNodes: bool | int = ..., listUpstreamNodes: str = ..., name: str = ..., networks: bool | int = ..., noSGShapes: bool | int = ..., noShapes: bool | int = ..., noTransforms: bool | int = ..., objects: str = ..., renderCreateAndDrop: str = ..., reset: bool | int = ..., resetGraph: bool | int = ..., resetSwatch: bool | int = ..., setAllowsRegraphing: bool | int = ..., setWorkArea: str = ..., shaderNetwork: str = ..., shaderNetworks: bool | int = ..., shaderNetworksSelectMaterialNodes: bool | int = ..., snapShot: bool | int = ..., uncollapse: str = ..., upStream: bool | int = ..., useMaterialTemplate: bool | int = ..., userDefinedLayout: bool | int = ..., workAreaAddCmd: str = ..., workAreaDeleteCmd: str = ..., workAreaSelectCmd: str = ...) -> Any: ...

@overload
def iconTextButton(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., command: str | Callable = ..., commandRepeatable: bool | int = ..., disabledImage: str = ..., docTag: str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., flat: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: str = ..., handleNodeDropCallback: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., highlightImage: str = ..., image: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., imageOverlayLabel: str = ..., label: str = ..., labelEditingCallback: str | Callable = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., overlayLabelBackColor: tuple[float, float, float, float] = ..., overlayLabelColor: tuple[float, float, float] = ..., preventOverride: bool | int = ..., rotation: float = ..., scaleIcon: bool | int = ..., selectionImage: str = ..., sourceType: str = ..., statusBarMessage: str = ..., style: str = ..., useAlpha: bool | int = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def iconTextButton(*args, actionIsSubstitute: bool | int = ..., align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., command: bool | int | str | Callable = ..., commandRepeatable: bool | int = ..., defineTemplate: str = ..., disabledImage: bool | int | str = ..., docTag: bool | int | str = ..., doubleClickCommand: bool | int | str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., flat: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., handleNodeDropCallback: str | Callable = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., highlightImage: bool | int | str = ..., image: bool | int | str = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., imageOverlayLabel: bool | int | str = ..., isObscured: bool | int = ..., label: bool | int | str = ..., labelEditingCallback: str | Callable = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., overlayLabelBackColor: bool | int | tuple[float, float, float, float] = ..., overlayLabelColor: bool | int | tuple[float, float, float] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rotation: bool | int | float = ..., scaleIcon: bool | int = ..., selectionImage: bool | int | str = ..., sourceType: bool | int | str = ..., statusBarMessage: str = ..., style: bool | int | str = ..., useAlpha: bool | int = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def iconTextCheckBox(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., disabledImage: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., flat: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., highlightImage: str = ..., image: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., imageOverlayLabel: str = ..., label: str = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., offCommand: str | Callable = ..., onCommand: str | Callable = ..., overlayLabelBackColor: tuple[float, float, float, float] = ..., overlayLabelColor: tuple[float, float, float] = ..., preventOverride: bool | int = ..., rotation: float = ..., selectionHighlightImage: str = ..., selectionImage: str = ..., statusBarMessage: str = ..., style: str = ..., useAlpha: bool | int = ..., value: bool | int = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def iconTextCheckBox(*args, align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: bool | int | str | Callable = ..., defineTemplate: str = ..., disabledImage: bool | int | str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., flat: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., highlightImage: bool | int | str = ..., image: bool | int | str = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., imageOverlayLabel: bool | int | str = ..., isObscured: bool | int = ..., label: bool | int | str = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., offCommand: bool | int | str | Callable = ..., onCommand: bool | int | str | Callable = ..., overlayLabelBackColor: bool | int | tuple[float, float, float, float] = ..., overlayLabelColor: bool | int | tuple[float, float, float] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rotation: bool | int | float = ..., selectionHighlightImage: bool | int | str = ..., selectionImage: bool | int | str = ..., statusBarMessage: str = ..., style: bool | int | str = ..., useAlpha: bool | int = ..., useTemplate: str = ..., value: bool | int = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def iconTextRadioButton(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., disabledImage: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., flat: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., highlightImage: str = ..., image: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., imageOverlayLabel: str = ..., label: str = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., offCommand: str | Callable = ..., onCommand: str | Callable = ..., overlayLabelBackColor: tuple[float, float, float, float] = ..., overlayLabelColor: tuple[float, float, float] = ..., preventOverride: bool | int = ..., rotation: float = ..., select: bool | int = ..., selectionHighlightImage: str = ..., selectionImage: str = ..., statusBarMessage: str = ..., style: str = ..., useAlpha: bool | int = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def iconTextRadioButton(*args, align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: bool | int | str | Callable = ..., collection: str = ..., defineTemplate: str = ..., disabledImage: bool | int | str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., flat: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., highlightImage: bool | int | str = ..., image: bool | int | str = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., imageOverlayLabel: bool | int | str = ..., isObscured: bool | int = ..., label: bool | int | str = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., offCommand: bool | int | str | Callable = ..., onCommand: bool | int | str | Callable = ..., overlayLabelBackColor: bool | int | tuple[float, float, float, float] = ..., overlayLabelColor: bool | int | tuple[float, float, float] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rotation: bool | int | float = ..., select: bool | int = ..., selectionHighlightImage: bool | int | str = ..., selectionImage: bool | int | str = ..., statusBarMessage: str = ..., style: bool | int | str = ..., useAlpha: bool | int = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def iconTextRadioCollection(*args, edit: Literal[True], disableCommands: bool | int = ..., select: str = ...) -> None: ...

@overload
def iconTextRadioCollection(*args, collectionItemArray: bool | int = ..., defineTemplate: str = ..., disableCommands: bool | int = ..., exists: bool | int = ..., gl: bool | int = ..., numberOfCollectionItems: bool | int = ..., parent: str = ..., query: bool | int = ..., select: bool | int | str = ..., useTemplate: str = ...) -> Any: ...

@overload
def iconTextScrollList(*args, edit: Literal[True], allowMultiSelection: bool | int = ..., annotation: str = ..., append: str | list[str] = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., deselectAll: bool | int = ..., docTag: str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dragFeedbackVisible: bool | int = ..., dropCallback: str | Callable = ..., dropRectCallback: str | Callable = ..., editIndexed: int = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., itemTextColor: tuple[int, float, float, float] | list[tuple[int, float, float, float]] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., removeAll: bool | int = ..., selectCommand: str | Callable = ..., selectIndexedItem: int | list[int] = ..., selectItem: str | list[str] = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def iconTextScrollList(*args, allowMultiSelection: bool | int = ..., annotation: bool | int | str = ..., append: str | list[str] = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., deselectAll: bool | int = ..., docTag: bool | int | str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dragFeedbackVisible: bool | int = ..., dropCallback: str | Callable = ..., dropRectCallback: str | Callable = ..., editIndexed: int = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., itemAt: bool | int | tuple[int, int] = ..., itemTextColor: tuple[int, float, float, float] | list[tuple[int, float, float, float]] = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfIcons: int = ..., numberOfPopupMenus: bool | int = ..., numberOfRows: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., removeAll: bool | int = ..., selectCommand: str | Callable = ..., selectIndexedItem: bool | int | int | list[int] = ..., selectItem: bool | int | str | list[str] = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., visualRectAt: bool | int | tuple[int, int] = ..., width: int = ...) -> Any: ...

@overload
def iconTextStaticLabel(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., disabledImage: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., imageOverlayLabel: str = ..., label: str = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., overlayLabelBackColor: tuple[float, float, float, float] = ..., overlayLabelColor: tuple[float, float, float] = ..., preventOverride: bool | int = ..., rotation: float = ..., statusBarMessage: str = ..., style: str = ..., useAlpha: bool | int = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def iconTextStaticLabel(*args, align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., disabledImage: bool | int | str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., imageOverlayLabel: bool | int | str = ..., isObscured: bool | int = ..., label: bool | int | str = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., overlayLabelBackColor: bool | int | tuple[float, float, float, float] = ..., overlayLabelColor: bool | int | tuple[float, float, float] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rotation: bool | int | float = ..., statusBarMessage: str = ..., style: bool | int | str = ..., useAlpha: bool | int = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def ikHandle(*args, edit: Literal[True], autoPriority: bool | int = ..., connectEffector: bool | int = ..., curve: str = ..., disableHandles: bool | int = ..., enableHandles: bool | int = ..., endEffector: str = ..., exists: str = ..., forceSolver: bool | int = ..., freezeJoints: bool | int = ..., jointList: bool | int = ..., name: str = ..., positionWeight: float = ..., priority: int = ..., rootOnCurve: bool | int = ..., rootTwistMode: bool | int = ..., setupForRPsolver: bool | int = ..., snapHandleFlagToggle: bool | int = ..., snapHandleToEffector: bool | int = ..., solver: str = ..., startJoint: str = ..., sticky: str = ..., twistType: str = ..., weight: float = ...) -> None: ...

@overload
def ikHandle(*args, autoPriority: bool | int = ..., connectEffector: bool | int = ..., createCurve: bool | int = ..., createRootAxis: bool | int = ..., curve: bool | int | str = ..., disableHandles: bool | int = ..., enableHandles: bool | int = ..., endEffector: bool | int | str = ..., exists: str = ..., forceSolver: bool | int = ..., freezeJoints: bool | int = ..., jointList: bool | int = ..., name: bool | int | str = ..., numSpans: int = ..., parentCurve: bool | int = ..., positionWeight: bool | int | float = ..., priority: int = ..., query: bool | int = ..., rootOnCurve: bool | int = ..., rootTwistMode: bool | int = ..., setupForRPsolver: bool | int = ..., simplifyCurve: bool | int = ..., snapCurve: bool | int = ..., snapHandleFlagToggle: bool | int = ..., snapHandleToEffector: bool | int = ..., solver: bool | int | str = ..., startJoint: bool | int | str = ..., sticky: bool | int | str = ..., twistType: bool | int | str = ..., weight: bool | int | float = ...) -> Any: ...

@overload
def ikHandleCtx(*args, edit: Literal[True], autoPriorityH: bool | int = ..., createCurve: bool | int = ..., createRootAxis: bool | int = ..., forceSolverH: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., numSpans: int = ..., parentCurve: bool | int = ..., poWeightH: float = ..., priorityH: int = ..., rootOnCurve: bool | int = ..., rootTwistMode: bool | int = ..., simplifyCurve: bool | int = ..., snapCurve: bool | int = ..., snapHandleH: bool | int = ..., solverTypeH: str = ..., stickyH: str = ..., twistType: str = ..., weightH: float = ...) -> None: ...

@overload
def ikHandleCtx(*args, autoPriorityH: bool | int = ..., createCurve: bool | int = ..., createRootAxis: bool | int = ..., exists: bool | int = ..., forceSolverH: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., numSpans: int = ..., parentCurve: bool | int = ..., poWeightH: bool | int | float = ..., priorityH: int = ..., query: bool | int = ..., rootOnCurve: bool | int = ..., rootTwistMode: bool | int = ..., simplifyCurve: bool | int = ..., snapCurve: bool | int = ..., snapHandleH: bool | int = ..., solverTypeH: bool | int | str = ..., stickyH: bool | int | str = ..., twistType: str = ..., weightH: bool | int | float = ...) -> Any: ...
def ikHandleDisplayScale(*args, query: bool | int = ...) -> Any: ...

@overload
def ikSolver(*args, edit: Literal[True], epsilon: float = ..., maxIterations: int = ..., name: str = ..., solverType: str = ...) -> None: ...

@overload
def ikSolver(*args, epsilon: bool | int | float = ..., maxIterations: int = ..., name: bool | int | str = ..., query: bool | int = ..., solverType: bool | int | str = ...) -> Any: ...

@overload
def ikSplineHandleCtx(*args, edit: Literal[True], autoPriorityH: bool | int = ..., createCurve: bool | int = ..., createRootAxis: bool | int = ..., forceSolverH: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., numSpans: int = ..., parentCurve: bool | int = ..., poWeightH: float = ..., priorityH: int = ..., rootOnCurve: bool | int = ..., rootTwistMode: bool | int = ..., simplifyCurve: bool | int = ..., snapCurve: bool | int = ..., snapHandleH: bool | int = ..., solverTypeH: str = ..., stickyH: str = ..., twistType: str = ..., weightH: float = ...) -> None: ...

@overload
def ikSplineHandleCtx(*args, autoPriorityH: bool | int = ..., createCurve: bool | int = ..., createRootAxis: bool | int = ..., exists: bool | int = ..., forceSolverH: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., numSpans: int = ..., parentCurve: bool | int = ..., poWeightH: bool | int | float = ..., priorityH: int = ..., query: bool | int = ..., rootOnCurve: bool | int = ..., rootTwistMode: bool | int = ..., simplifyCurve: bool | int = ..., snapCurve: bool | int = ..., snapHandleH: bool | int = ..., solverTypeH: bool | int | str = ..., stickyH: bool | int | str = ..., twistType: str = ..., weightH: bool | int | float = ...) -> Any: ...

@overload
def ikSystem(*args, edit: Literal[True], allowRotation: bool | int = ..., autoPriority: bool | int = ..., autoPriorityMC: bool | int = ..., autoPrioritySC: bool | int = ..., list: tuple[int, int] = ..., snap: bool | int = ..., solve: bool | int = ...) -> None: ...

@overload
def ikSystem(*args, allowRotation: bool | int = ..., autoPriority: bool | int = ..., autoPriorityMC: bool | int = ..., autoPrioritySC: bool | int = ..., list: bool | int | tuple[int, int] = ..., query: bool | int = ..., snap: bool | int = ..., solve: bool | int = ..., solverTypes: bool | int = ...) -> Any: ...
def ikSystemInfo(*args, globalSnapHandle: bool | int = ..., query: bool | int = ...) -> Any: ...
def ikfkDisplayMethod(*args, display: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def illustratorCurves(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., tolerance: float = ...) -> None: ...

@overload
def illustratorCurves(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., illustratorFilename: str = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., scaleFactor: float = ..., tolerance: bool | int | float = ...) -> Any: ...

@overload
def image(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def image(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def imagePlane(*args, edit: Literal[True], camera: str = ..., detach: bool | int = ..., fileName: str = ..., height: float = ..., lookThrough: str = ..., maintainRatio: bool | int = ..., showInAllViews: bool | int = ..., width: float = ...) -> None: ...

@overload
def imagePlane(*args, camera: bool | int | str = ..., counter: bool | int = ..., detach: bool | int = ..., dropFrame: bool | int = ..., fileName: str = ..., frameDuration: int = ..., height: bool | int | float = ..., imageSize: bool | int | tuple[int, int] = ..., lookThrough: bool | int | str = ..., maintainRatio: bool | int = ..., name: bool | int | str = ..., negTimesOK: bool | int = ..., numFrames: int = ..., query: bool | int = ..., quickTime: bool | int = ..., showInAllViews: bool | int = ..., timeCode: int = ..., timeCodeTrack: bool | int = ..., timeScale: int = ..., twentyFourHourMax: bool | int = ..., width: bool | int | float = ...) -> Any: ...
def imageWindowEditor(*args, autoResize: bool | int = ..., changeCommand: tuple[str, str, str, str] = ..., clear: tuple[int, int, float, float, float] = ..., control: bool | int = ..., defineTemplate: str = ..., displayImage: int = ..., displayStyle: str = ..., docTag: str = ..., doubleBuffer: bool | int = ..., drawAxis: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., filter: str = ..., forceMainConnection: str = ..., frameImage: bool | int = ..., frameRegion: bool | int = ..., highlightConnection: str = ..., loadImage: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., marquee: tuple[float, float, float, float] = ..., nbImages: bool | int = ..., panel: str = ..., parent: str = ..., query: bool | int = ..., realSize: bool | int = ..., refresh: bool | int = ..., removeAllImages: bool | int = ..., removeImage: bool | int = ..., saveImage: bool | int = ..., scaleBlue: float = ..., scaleGreen: float = ..., scaleRed: float = ..., selectionConnection: str = ..., showRegion: tuple[int, int] = ..., singleBuffer: bool | int = ..., stateString: bool | int = ..., toggle: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., writeImage: str = ...) -> Any: ...
def imfPlugins(*args, extension: bool | int | str = ..., keyword: bool | int | str = ..., multiFrameSupport: bool | int | str = ..., pluginName: bool | int | str = ..., query: bool | int = ..., readSupport: bool | int | str = ..., writeSupport: bool | int | str = ...) -> Any: ...
def inViewMessage(*args, alpha: float = ..., assistMessage: str = ..., backColor: int = ..., clear: str = ..., clickKill: bool | int = ..., dragKill: bool | int = ..., fade: bool | int = ..., fadeInTime: int = ..., fadeOutTime: int = ..., fadeStayTime: int = ..., font: str = ..., fontSize: int = ..., frameOffset: int = ..., hide: bool | int = ..., message: str = ..., minimize: bool | int = ..., position: str = ..., restore: bool | int = ..., show: bool | int = ..., statusMessage: str = ..., textAlpha: float = ..., textOffset: int = ..., uvEditor: bool | int = ...) -> Any: ...
def inheritTransform(*args, off: bool | int = ..., on: bool | int = ..., preserve: bool | int = ..., query: bool | int = ..., toggle: bool | int = ...) -> Any: ...
def insertJoint(*args) -> Any: ...

@overload
def insertJointCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def insertJointCtx(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def insertKeyCtx(*args, edit: Literal[True], breakdown: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., preserveTangent: bool | int = ...) -> None: ...

@overload
def insertKeyCtx(*args, breakdown: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., preserveTangent: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def insertKnotCurve(*args, edit: Literal[True], addKnots: bool | int = ..., caching: bool | int = ..., insertBetween: bool | int = ..., nodeState: int = ..., numberOfKnots: int | list[int] = ..., parameter: float | list[float] = ...) -> None: ...

@overload
def insertKnotCurve(*args, addKnots: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., curveOnSurface: bool | int = ..., frozen: bool | int = ..., insertBetween: bool | int = ..., name: str = ..., nodeState: int = ..., numberOfKnots: bool | int | int | list[int] = ..., object: bool | int = ..., parameter: bool | int | float | list[float] = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...

@overload
def insertKnotSurface(*args, edit: Literal[True], addKnots: bool | int = ..., caching: bool | int = ..., direction: int = ..., insertBetween: bool | int = ..., nodeState: int = ..., numberOfKnots: int | list[int] = ..., parameter: float | list[float] = ...) -> None: ...

@overload
def insertKnotSurface(*args, addKnots: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., direction: int = ..., frozen: bool | int = ..., insertBetween: bool | int = ..., name: str = ..., nodeState: int = ..., numberOfKnots: bool | int | int | list[int] = ..., object: bool | int = ..., parameter: bool | int | float | list[float] = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...
def insertListItem(*args, **keywords): ...
def insertListItemBefore(*args, **keywords): ...
def instance(*args, leaf: bool | int = ..., name: str = ..., smartTransform: bool | int = ...) -> Any: ...
def instanceable(*args, allow: bool | int = ..., query: bool | int = ..., recursive: bool | int = ..., shape: bool | int = ...) -> Any: ...

@overload
def instancer(*args, edit: Literal[True], addObject: bool | int = ..., cycle: str = ..., cycleStep: float = ..., cycleStepUnits: str = ..., levelOfDetail: str = ..., object: str | list[str] = ..., removeObject: bool | int = ..., rotationOrder: str = ..., rotationUnits: str = ...) -> None: ...

@overload
def instancer(*args, addObject: bool | int = ..., cycle: bool | int | str = ..., cycleStep: bool | int | float = ..., cycleStepUnits: bool | int | str = ..., index: int = ..., levelOfDetail: bool | int | str = ..., name: bool | int | str = ..., object: bool | int | str | list[str] = ..., objectPosition: bool | int | str = ..., objectRotation: bool | int | str = ..., objectScale: bool | int | str = ..., pointDataSource: bool | int = ..., query: bool | int = ..., removeObject: bool | int = ..., rotationOrder: bool | int | str = ..., rotationUnits: bool | int | str = ..., valueName: bool | int | str = ...) -> Any: ...

@overload
def intField(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., receiveFocusCommand: str | Callable = ..., statusBarMessage: str = ..., step: int = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def intField(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., receiveFocusCommand: str | Callable = ..., statusBarMessage: str = ..., step: int = ..., useTemplate: str = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def intFieldGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraLabel: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., value: tuple[int, int, int, int] = ..., value1: int = ..., value2: int = ..., value3: int = ..., value4: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def intFieldGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraLabel: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfFields: int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., value: bool | int | tuple[int, int, int, int] = ..., value1: int = ..., value2: int = ..., value3: int = ..., value4: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def intScrollBar(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., largeStep: int = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., step: int = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def intScrollBar(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontal: bool | int = ..., isObscured: bool | int = ..., largeStep: int = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., step: int = ..., useTemplate: str = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def intSlider(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., step: int = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def intSlider(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontal: bool | int = ..., isObscured: bool | int = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., step: int = ..., useTemplate: str = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def intSliderGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraLabel: str = ..., fieldMaxValue: int = ..., fieldMinValue: int = ..., fieldStep: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., sliderStep: int = ..., statusBarMessage: str = ..., step: int = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def intSliderGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraLabel: bool | int | str = ..., field: bool | int = ..., fieldMaxValue: int = ..., fieldMinValue: int = ..., fieldStep: int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., sliderStep: int = ..., statusBarMessage: str = ..., step: int = ..., useTemplate: str = ..., value: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def interactionStyle(*args, query: bool | int = ..., style: str = ...) -> Any: ...
def internalVar(*args, mayaInstallDir: bool | int = ..., userAppDir: bool | int = ..., userBitmapsDir: bool | int = ..., userHotkeyDir: bool | int = ..., userMarkingMenuDir: bool | int = ..., userPrefDir: bool | int = ..., userPresetsDir: bool | int = ..., userScriptDir: bool | int = ..., userShelfDir: bool | int = ..., userTmpDir: bool | int = ..., userWorkspaceDir: bool | int = ...) -> Any: ...

@overload
def intersect(*args, edit: Literal[True], caching: bool | int = ..., firstSurface: bool | int = ..., nodeState: int = ..., tolerance: float = ...) -> None: ...

@overload
def intersect(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., curveOnSurface: bool | int = ..., firstSurface: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., tolerance: bool | int | float = ...) -> Any: ...

@overload
def iprEngine(*args, edit: Literal[True], copy: str = ..., diagnostics: bool | int = ..., iprImage: str = ..., object: str = ..., region: tuple[int, int, int, int] = ..., releaseIprImage: bool | int = ..., scanlineIncrement: str = ..., showProgressBar: bool | int = ..., startTuning: bool | int = ..., stopTuning: bool | int = ..., underPixel: tuple[int, int] = ..., update: bool | int = ..., updateDepthOfField: bool | int = ..., updateLightGlow: bool | int = ..., updateMotionBlur: bool | int = ..., updatePort: str = ..., updateShaderGlow: bool | int = ..., updateShading: bool | int = ..., updateShadowMaps: bool | int = ...) -> None: ...

@overload
def iprEngine(*args, copy: str = ..., defineTemplate: str = ..., diagnostics: bool | int = ..., estimatedMemory: bool | int = ..., exists: bool | int = ..., iprImage: bool | int | str = ..., motionVectorFile: bool | int = ..., object: bool | int | str = ..., query: bool | int = ..., region: bool | int | tuple[int, int, int, int] = ..., relatedFiles: bool | int = ..., releaseIprImage: bool | int = ..., resolution: bool | int = ..., scanlineIncrement: bool | int | str = ..., showProgressBar: bool | int = ..., startTuning: bool | int = ..., stopTuning: bool | int = ..., underPixel: tuple[int, int] = ..., update: bool | int = ..., updateDepthOfField: bool | int = ..., updateLightGlow: bool | int = ..., updateMotionBlur: bool | int = ..., updatePort: bool | int | str = ..., updateShaderGlow: bool | int = ..., updateShading: bool | int = ..., updateShadowMaps: bool | int = ..., useTemplate: str = ...) -> Any: ...
def isConnected(*args, ignoreUnitConversion: bool | int = ...) -> Any: ...
def isDirty(*args, connection: bool | int = ..., datablock: bool | int = ...) -> Any: ...
def isTrue(*args) -> Any: ...
def isolateSelect(*args, addDagObject: str = ..., addSelected: bool | int = ..., addSelectedObjects: bool | int = ..., loadSelected: bool | int = ..., query: bool | int = ..., removeDagObject: str = ..., removeSelected: bool | int = ..., state: bool | int = ..., update: bool | int = ..., viewObjects: bool | int = ...) -> Any: ...

@overload
def itemFilter(*args, edit: Literal[True], byBin: str | list[str] = ..., byName: str = ..., byScript: str = ..., byType: str | list[str] = ..., category: str | list[str] = ..., classification: str = ..., clearByBin: bool | int = ..., clearByType: bool | int = ..., difference: tuple[str, str] = ..., intersect: tuple[str, str] = ..., negate: bool | int = ..., parent: str = ..., pythonModule: str = ..., secondScript: str = ..., text: str = ..., union: tuple[str, str] = ..., uniqueNodeNames: bool | int = ...) -> None: ...

@overload
def itemFilter(*args, byBin: bool | int | str | list[str] = ..., byName: bool | int | str = ..., byScript: bool | int | str = ..., byType: bool | int | str | list[str] = ..., category: bool | int | str | list[str] = ..., classification: bool | int | str = ..., clearByBin: bool | int = ..., clearByType: bool | int = ..., difference: bool | int | tuple[str, str] = ..., exists: bool | int = ..., intersect: bool | int | tuple[str, str] = ..., listBuiltInFilters: bool | int = ..., listOtherFilters: bool | int = ..., listUserFilters: bool | int = ..., negate: bool | int = ..., parent: bool | int | str = ..., pythonModule: bool | int | str = ..., query: bool | int = ..., secondScript: bool | int | str = ..., text: bool | int | str = ..., union: bool | int | tuple[str, str] = ..., uniqueNodeNames: bool | int = ...) -> Any: ...

@overload
def itemFilterAttr(*args, edit: Literal[True], byName: str = ..., byNameString: str | list[str] = ..., byScript: str = ..., classification: str = ..., dynamic: bool | int = ..., exists: bool | int = ..., hasCurve: bool | int = ..., hasDrivenKey: bool | int = ..., hasExpression: bool | int = ..., hidden: bool | int = ..., intersect: tuple[str, str] = ..., keyable: bool | int = ..., negate: bool | int = ..., published: bool | int = ..., readable: bool | int = ..., scaleRotateTranslate: bool | int = ..., secondScript: str = ..., text: str = ..., union: tuple[str, str] = ..., writable: bool | int = ...) -> None: ...

@overload
def itemFilterAttr(*args, byName: bool | int | str = ..., byNameString: bool | int | str | list[str] = ..., byScript: bool | int | str = ..., classification: bool | int | str = ..., dynamic: bool | int = ..., exists: bool | int = ..., hasCurve: bool | int = ..., hasDrivenKey: bool | int = ..., hasExpression: bool | int = ..., hidden: bool | int = ..., intersect: bool | int | tuple[str, str] = ..., keyable: bool | int = ..., listBuiltInFilters: bool | int = ..., listOtherFilters: bool | int = ..., listUserFilters: bool | int = ..., negate: bool | int = ..., parent: str = ..., published: bool | int = ..., query: bool | int = ..., readable: bool | int = ..., scaleRotateTranslate: bool | int = ..., secondScript: bool | int | str = ..., text: bool | int | str = ..., union: bool | int | tuple[str, str] = ..., writable: bool | int = ...) -> Any: ...
def itemFilterRender(*args, anyTextures: bool | int = ..., category: str | list[str] = ..., classification: str = ..., edit: bool | int = ..., exclusiveLights: bool | int = ..., exists: bool | int = ..., lightSets: bool | int = ..., lights: bool | int = ..., linkedLights: bool | int = ..., listBuiltInFilters: bool | int = ..., listOtherFilters: bool | int = ..., listUserFilters: bool | int = ..., negate: bool | int = ..., nodeClassification: str | list[str] = ..., nonExclusiveLights: bool | int = ..., nonIlluminatingLights: bool | int = ..., parent: str = ..., postProcess: bool | int = ..., query: bool | int = ..., renderUtilityNode: bool | int = ..., renderableObjectSets: bool | int = ..., renderingNode: bool | int = ..., shaders: bool | int = ..., text: str = ..., textures2d: bool | int = ..., textures3d: bool | int = ..., texturesProcedural: bool | int = ...) -> Any: ...

@overload
def itemFilterType(*args, edit: Literal[True], text: str = ...) -> None: ...

@overload
def itemFilterType(*args, query: bool | int = ..., text: bool | int | str = ..., type: bool | int = ...) -> Any: ...
def iterOnNurbs(*args) -> Any: ...

@overload
def joint(*args, edit: Literal[True], absolute: bool | int = ..., angleX: float = ..., angleY: float = ..., angleZ: float = ..., assumePreferredAngles: bool | int = ..., autoOrientSecondaryAxis: bool | int = ..., children: bool | int = ..., component: bool | int = ..., degreeOfFreedom: str = ..., limitSwitchX: bool | int = ..., limitSwitchY: bool | int = ..., limitSwitchZ: bool | int = ..., limitX: tuple[float, float] = ..., limitY: tuple[float, float] = ..., limitZ: tuple[float, float] = ..., name: str = ..., orientJoint: str = ..., orientation: tuple[float, float, float] = ..., position: tuple[float, float, float] = ..., radius: float = ..., relative: bool | int = ..., rotationOrder: str = ..., scale: tuple[float, float, float] = ..., scaleCompensate: bool | int = ..., scaleOrientation: tuple[float, float, float] = ..., secondaryAxisOrient: str = ..., setPreferredAngles: bool | int = ..., stiffnessX: float = ..., stiffnessY: float = ..., stiffnessZ: float = ..., symmetry: bool | int = ..., symmetryAxis: str = ..., zeroScaleOrient: bool | int = ...) -> None: ...

@overload
def joint(*args, absolute: bool | int = ..., angleX: bool | int | float = ..., angleY: bool | int | float = ..., angleZ: bool | int | float = ..., assumePreferredAngles: bool | int = ..., autoOrientSecondaryAxis: bool | int = ..., automaticLimits: bool | int = ..., children: bool | int = ..., component: bool | int = ..., degreeOfFreedom: bool | int | str = ..., exists: bool | int | str = ..., limitSwitchX: bool | int = ..., limitSwitchY: bool | int = ..., limitSwitchZ: bool | int = ..., limitX: bool | int | tuple[float, float] = ..., limitY: bool | int | tuple[float, float] = ..., limitZ: bool | int | tuple[float, float] = ..., name: bool | int | str = ..., orientJoint: str = ..., orientation: bool | int | tuple[float, float, float] = ..., position: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., radius: bool | int | float = ..., relative: bool | int = ..., rotationOrder: bool | int | str = ..., scale: bool | int | tuple[float, float, float] = ..., scaleCompensate: bool | int = ..., scaleOrientation: bool | int | tuple[float, float, float] = ..., secondaryAxisOrient: str = ..., setPreferredAngles: bool | int = ..., stiffnessX: bool | int | float = ..., stiffnessY: bool | int | float = ..., stiffnessZ: bool | int | float = ..., symmetry: bool | int = ..., symmetryAxis: str = ..., zeroScaleOrient: bool | int = ...) -> Any: ...

@overload
def jointCluster(*args, edit: Literal[True], aboveBound: float = ..., aboveDropoffType: str = ..., aboveValue: float = ..., belowBound: float = ..., belowDropoffType: str = ..., belowValue: float = ...) -> None: ...

@overload
def jointCluster(*args, aboveBound: bool | int | float = ..., aboveCluster: bool | int = ..., aboveDropoffType: bool | int | str = ..., aboveValue: bool | int | float = ..., belowBound: bool | int | float = ..., belowCluster: bool | int = ..., belowDropoffType: bool | int | str = ..., belowValue: bool | int | float = ..., deformerTools: bool | int = ..., joint: str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def jointCtx(*args, edit: Literal[True], autoJointOrient: str = ..., autoOrientSecondaryAxis: bool | int = ..., autoPriorityH: bool | int = ..., createIKHandle: bool | int = ..., degreeOfFreedomJ: str = ..., forceSolverH: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., jointAutoLimits: bool | int = ..., jointOrientationJ: tuple[float, float, float] = ..., largeBoneLength: float = ..., largeBoneRadius: float = ..., poWeightH: float = ..., priorityH: int = ..., scaleCompensateJ: bool | int = ..., scaleJ: tuple[float, float, float] = ..., scaleOrientationJ: tuple[float, float, float] = ..., secondaryAxisOrient: str = ..., smallBoneLength: float = ..., smallBoneRadius: float = ..., snapHandleH: bool | int = ..., solverTypeH: str = ..., stickyH: str = ..., symmetry: bool | int = ..., symmetryAxis: str = ..., variableBoneSize: bool | int = ..., weightH: float = ...) -> None: ...

@overload
def jointCtx(*args, autoJointOrient: bool | int | str = ..., autoOrientSecondaryAxis: bool | int = ..., autoPriorityH: bool | int = ..., createIKHandle: bool | int = ..., degreeOfFreedomJ: bool | int | str = ..., exists: bool | int = ..., forceSolverH: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., jointAutoLimits: bool | int = ..., jointOrientationJ: bool | int | tuple[float, float, float] = ..., largeBoneLength: bool | int | float = ..., largeBoneRadius: bool | int | float = ..., poWeightH: bool | int | float = ..., priorityH: int = ..., query: bool | int = ..., scaleCompensateJ: bool | int = ..., scaleJ: bool | int | tuple[float, float, float] = ..., scaleOrientationJ: bool | int | tuple[float, float, float] = ..., secondaryAxisOrient: bool | int | str = ..., smallBoneLength: bool | int | float = ..., smallBoneRadius: bool | int | float = ..., snapHandleH: bool | int = ..., solverTypeH: bool | int | str = ..., stickyH: bool | int | str = ..., symmetry: bool | int = ..., symmetryAxis: bool | int | str = ..., variableBoneSize: bool | int = ..., weightH: bool | int | float = ...) -> Any: ...

@overload
def jointDisplayScale(*args, edit: Literal[True], absolute: bool | int = ..., ikfk: float = ...) -> None: ...

@overload
def jointDisplayScale(*args, absolute: bool | int = ..., ikfk: bool | int | float = ..., query: bool | int = ...) -> Any: ...

@overload
def jointLattice(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., creasing: float = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., lengthIn: float = ..., lengthOut: float = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., rounding: float = ..., split: bool | int = ..., widthLeft: float = ..., widthRight: float = ...) -> None: ...

@overload
def jointLattice(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., components: bool | int = ..., creasing: bool | int | float = ..., deformerTools: bool | int = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., joint: str = ..., lengthIn: bool | int | float = ..., lengthOut: bool | int | float = ..., lowerBindSkin: str = ..., lowerTransform: str = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., rounding: bool | int | float = ..., selectedComponents: bool | int = ..., split: bool | int = ..., upperBindSkin: str = ..., upperTransform: str = ..., useComponentTags: bool | int = ..., widthLeft: bool | int | float = ..., widthRight: bool | int | float = ...) -> Any: ...
def journal(*args, comment: str = ..., flush: bool | int = ..., highPrecision: bool | int = ..., query: bool | int = ..., state: bool | int = ...) -> Any: ...

@overload
def keyTangent(*args, edit: Literal[True], absolute: bool | int = ..., inAngle: float = ..., inTangentType: str = ..., inWeight: float = ..., ix: float = ..., iy: float = ..., lock: bool | int = ..., outAngle: float = ..., outTangentType: str = ..., outWeight: float = ..., ox: float = ..., oy: float = ..., relative: bool | int = ..., stepAttributes: bool | int = ..., unify: bool | int = ..., weightLock: bool | int = ..., weightedTangents: bool | int = ...) -> None: ...

@overload
def keyTangent(*args, absolute: bool | int = ..., animation: str = ..., attribute: str | list[str] = ..., controlPoints: bool | int = ..., float: str | int | float | list[str | int | float] = ..., g: bool | int = ..., hierarchy: str = ..., inAngle: bool | int | float = ..., inTangentType: bool | int | str = ..., inWeight: bool | int | float = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., ix: bool | int | float = ..., iy: bool | int | float = ..., lock: bool | int = ..., outAngle: bool | int | float = ..., outTangentType: bool | int | str = ..., outWeight: bool | int | float = ..., ox: bool | int | float = ..., oy: bool | int | float = ..., pluginTangentTypes: bool | int | str = ..., query: bool | int = ..., relative: bool | int = ..., shape: bool | int = ..., stepAttributes: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ..., unify: bool | int = ..., weightLock: bool | int = ..., weightedTangents: bool | int = ...) -> Any: ...

@overload
def keyframe(*args, edit: Literal[True], breakdown: bool | int = ..., floatChange: float = ..., option: str = ..., tickDrawSpecial: bool | int = ..., timeChange: int | float = ..., valueChange: float = ...) -> None: ...

@overload
def keyframe(*args, absolute: bool | int = ..., adjustBreakdown: bool | int = ..., animation: str = ..., attribute: str | list[str] = ..., breakdown: bool | int = ..., clipTime: tuple[int | float, int | float, float] = ..., controlPoints: bool | int = ..., eval: bool | int = ..., float: str | int | float | list[str | int | float] = ..., floatChange: bool | int | float = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., indexValue: bool | int = ..., keyframeCount: bool | int = ..., lastSelected: bool | int = ..., name: bool | int = ..., option: str = ..., query: bool | int = ..., relative: bool | int = ..., selected: bool | int = ..., shape: bool | int = ..., tickDrawSpecial: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ..., timeChange: bool | int | int | float = ..., valueChange: bool | int | float = ...) -> Any: ...

@overload
def keyframeOutliner(*args, edit: Literal[True], animCurve: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., display: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def keyframeOutliner(*args, animCurve: str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., display: bool | int | str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def keyframeRegionCurrentTimeCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def keyframeRegionCurrentTimeCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def keyframeRegionDirectKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def keyframeRegionDirectKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., option: str = ..., query: bool | int = ...) -> Any: ...

@overload
def keyframeRegionDollyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def keyframeRegionDollyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def keyframeRegionInsertKeyCtx(*args, edit: Literal[True], breakdown: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def keyframeRegionInsertKeyCtx(*args, breakdown: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def keyframeRegionMoveKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., option: str = ...) -> None: ...

@overload
def keyframeRegionMoveKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., option: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def keyframeRegionScaleKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., scaleSpecifiedKeys: bool | int = ..., type: str = ...) -> None: ...

@overload
def keyframeRegionScaleKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., scaleSpecifiedKeys: bool | int = ..., type: str = ...) -> Any: ...

@overload
def keyframeRegionSelectKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def keyframeRegionSelectKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def keyframeRegionSetKeyCtx(*args, edit: Literal[True], breakdown: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def keyframeRegionSetKeyCtx(*args, breakdown: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def keyframeRegionTrackCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def keyframeRegionTrackCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def keyframeStats(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., animEditor: str = ..., annotation: str = ..., autoUnitWidth: int = ..., backgroundColor: tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., timeAnnotation: str = ..., valueAnnotation: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def keyframeStats(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., animEditor: bool | int | str = ..., annotation: bool | int | str = ..., autoUnitWidth: int = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., classicMode: bool | int = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., timeAnnotation: bool | int | str = ..., useTemplate: str = ..., valueAnnotation: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def keyframeTangentControl(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def keyframeTangentControl(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def keyingGroup(*args, edit: Literal[True], activator: str = ..., addElement: str = ..., afterFilters: bool | int = ..., category: str = ..., channelSetColor: tuple[float, float, float] = ..., channelSetColorIndex: int = ..., clear: str = ..., color: int = ..., flatten: str = ..., forceElement: str = ..., include: str = ..., minimizeRotation: bool | int = ..., remove: str = ..., removeActivator: str = ..., setActiveFilter: str = ..., text: str = ...) -> None: ...

@overload
def keyingGroup(*args, activator: bool | int | str = ..., addElement: str = ..., afterFilters: bool | int = ..., anyMember: str = ..., category: bool | int | str = ..., channelSetColor: bool | int | tuple[float, float, float] = ..., channelSetColorIndex: int = ..., clear: str = ..., color: int = ..., copy: str = ..., edges: bool | int = ..., editPoints: bool | int = ..., empty: bool | int = ..., excludeDynamic: bool | int = ..., excludeRotate: bool | int = ..., excludeScale: bool | int = ..., excludeTranslate: bool | int = ..., excludeVisibility: bool | int = ..., facets: bool | int = ..., flatten: str = ..., forceElement: str = ..., include: str = ..., intersection: str = ..., isIntersecting: str = ..., isMember: str = ..., layer: bool | int = ..., minimizeRotation: bool | int = ..., name: str = ..., noIntermediate: bool | int = ..., noSurfaceShader: bool | int = ..., noWarnings: bool | int = ..., nodesOnly: bool | int = ..., query: bool | int = ..., remove: str = ..., removeActivator: str = ..., renderable: bool | int = ..., setActiveFilter: bool | int | str = ..., size: bool | int = ..., split: str = ..., subtract: str = ..., text: bool | int | str = ..., union: str = ..., vertices: bool | int = ...) -> Any: ...

@overload
def lassoContext(*args, edit: Literal[True], drawClosed: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def lassoContext(*args, drawClosed: bool | int = ..., exists: bool | int = ..., fastComponents: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def lattice(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., divisions: tuple[int, int, int] = ..., freezeMapping: bool | int = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., latticeReset: bool | int = ..., ldivisions: tuple[int, int, int] = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., removeTweaks: bool | int = ..., split: bool | int = ...) -> None: ...

@overload
def lattice(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., commonParent: bool | int = ..., components: bool | int = ..., deformerTools: bool | int = ..., divisions: bool | int | tuple[int, int, int] = ..., dualBase: bool | int = ..., exclusive: bool | int | str = ..., freezeMapping: bool | int = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., latticeReset: bool | int = ..., ldivisions: bool | int | tuple[int, int, int] = ..., minimumSize: float = ..., name: str = ..., objectCentered: bool | int = ..., outsideFalloffDistance: float = ..., outsideLattice: int = ..., parallel: bool | int = ..., position: tuple[float, float, float] = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., removeTweaks: bool | int = ..., rotation: tuple[float, float, float] = ..., scale: tuple[float, float, float] = ..., selectedComponents: bool | int = ..., split: bool | int = ..., useComponentTags: bool | int = ...) -> Any: ...

@overload
def latticeDeformKeyCtx(*args, edit: Literal[True], envelope: float = ..., image1: str = ..., image2: str = ..., image3: str = ..., latticeColumns: int = ..., latticeRows: int = ..., scaleLatticePts: bool | int = ...) -> None: ...

@overload
def latticeDeformKeyCtx(*args, envelope: bool | int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., latticeColumns: int = ..., latticeRows: int = ..., name: str = ..., query: bool | int = ..., scaleLatticePts: bool | int = ...) -> Any: ...
def launch(*args, directory: str = ..., movie: str = ..., pdfFile: str = ..., webPage: str = ...) -> Any: ...
def launchImageEditor(*args, editImageFile: str = ..., viewImageFile: str = ...) -> Any: ...

@overload
def layerButton(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., color: tuple[float, float, float] = ..., command: str | Callable = ..., current: bool | int = ..., docTag: str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., hideOnPlaybackCommand: str | Callable = ..., highlightColor: tuple[float, float, float] = ..., identification: int = ..., label: str = ..., layerHideOnPlayback: bool | int = ..., layerState: str = ..., layerVisible: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., renameCommand: str = ..., select: bool | int = ..., statusBarMessage: str = ..., transparent: bool | int = ..., typeCommand: str | Callable = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., visibleCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def layerButton(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., color: tuple[float, float, float] = ..., command: str | Callable = ..., current: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., hideOnPlaybackCommand: str | Callable = ..., highlightColor: bool | int | tuple[float, float, float] = ..., identification: int = ..., isObscured: bool | int = ..., label: bool | int | str = ..., labelWidth: bool | int = ..., layerHideOnPlayback: bool | int = ..., layerState: bool | int | str = ..., layerVisible: bool | int = ..., manage: bool | int = ..., name: bool | int | str = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., renameCommand: str = ..., select: bool | int = ..., statusBarMessage: str = ..., transparent: bool | int = ..., typeCommand: str | Callable = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., visibleCommand: str | Callable = ..., width: int = ...) -> Any: ...

@overload
def layeredShaderPort(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def layeredShaderPort(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., node: str = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., selectedColorControl: str = ..., selectedTransparencyControl: str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def layeredTexturePort(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def layeredTexturePort(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., node: str = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., selectedAlphaControl: str = ..., selectedBlendModeControl: str = ..., selectedColorControl: str = ..., selectedIsVisibleControl: str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def layout(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def layout(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., childArray: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def layoutDialog(*args, backgroundColor: tuple[float, float, float] = ..., dismiss: str = ..., parent: str = ..., resizable: bool | int = ..., title: str = ..., uiScript: str | Callable = ...) -> Any: ...
def license(*args, borrow: bool | int = ..., info: bool | int = ..., isBorrowed: bool | int = ..., isExported: bool | int = ..., isTrial: bool | int = ..., licenseMethod: bool | int = ..., productChoice: bool | int = ..., r: bool | int = ..., showBorrowInfo: bool | int = ..., showProductInfoDialog: bool | int = ..., status: bool | int = ..., usage: bool | int = ...) -> Any: ...
def licenseCheck(*args, mode: str = ..., type: str = ...) -> Any: ...
def lightList(*args, add: str = ..., edit: bool | int = ..., query: bool | int = ..., remove: str = ...) -> Any: ...
def lightlink(*args, b: bool | int = ..., hierarchy: bool | int = ..., light: str | list[str] = ..., make: bool | int = ..., object: str | list[str] = ..., query: bool | int = ..., sets: bool | int = ..., shadow: bool | int = ..., shapes: bool | int = ..., transforms: bool | int = ..., useActiveLights: bool | int = ..., useActiveObjects: bool | int = ...) -> Any: ...
def linearPrecision(*args, query: bool | int = ...) -> Any: ...
def listAnimatable(*args, active: bool | int = ..., manip: bool | int = ..., manipHandle: bool | int = ..., shape: bool | int = ..., type: bool | int = ...) -> list[str]: ...
def listAttr(*args, array: bool | int = ..., attributeType: str | list[str] = ..., caching: bool | int = ..., category: str | list[str] = ..., changedSinceFileOpen: bool | int = ..., channelBox: bool | int = ..., connectable: bool | int = ..., extension: bool | int = ..., fromPlugin: bool | int = ..., fullNodeName: bool | int = ..., hasData: bool | int = ..., hasNullData: bool | int = ..., inUse: bool | int = ..., keyable: bool | int = ..., leaf: bool | int = ..., locked: bool | int = ..., multi: bool | int = ..., nodeName: bool | int = ..., output: bool | int = ..., ramp: bool | int = ..., read: bool | int = ..., readOnly: bool | int = ..., scalar: bool | int = ..., scalarAndArray: bool | int = ..., settable: bool | int = ..., shortNames: bool | int = ..., string: str | list[str] = ..., unlocked: bool | int = ..., usedAsFilename: bool | int = ..., userDefined: bool | int = ..., visible: bool | int = ..., write: bool | int = ...) -> list[str] | None: ...
def listAttrPatterns(*args, patternType: bool | int = ..., verbose: bool | int = ...) -> list[str] | None: ...
def listCameras(*args, orthographic: bool | int = ..., perspective: bool | int = ..., ufeCameras: bool | int = ...) -> list[str] | None: ...
def listConnections(*args, connections: bool | int = ..., destination: bool | int = ..., exactType: bool | int = ..., fullNodeName: bool | int = ..., plugs: bool | int = ..., shapes: bool | int = ..., skipConversionNodes: bool | int = ..., source: bool | int = ..., type: str = ...) -> list[str] | None: ...
def listDeviceAttachments(*args, attribute: str = ..., axis: str = ..., clutch: str = ..., device: str = ..., file: str = ..., selection: bool | int = ..., write: bool | int = ...) -> list[str] | None: ...
def listHistory(*args, allConnections: bool | int = ..., allFuture: bool | int = ..., allGraphs: bool | int = ..., breadthFirst: bool | int = ..., fastIteration: bool | int = ..., fullNodeName: bool | int = ..., future: bool | int = ..., futureLocalAttr: bool | int = ..., futureWorldAttr: bool | int = ..., groupLevels: bool | int = ..., historyAttr: bool | int = ..., interestLevel: int = ..., leaf: bool | int = ..., levels: int = ..., pruneDagObjects: bool | int = ..., query: bool | int = ...) -> list[str]: ...
def listInputDeviceAxes(*args) -> list[str] | None: ...
def listInputDeviceButtons(*args) -> list[str] | None: ...
def listInputDevices(*args, free: bool | int = ..., primary: bool | int = ..., secondary: bool | int = ...) -> list[str] | None: ...
def listNodeTypes(*args, exclude: str = ...) -> list[str] | None: ...
def listNodesWithIncorrectNames(*args) -> list[str] | None: ...
def listRelatives(*args, allDescendents: bool | int = ..., allParents: bool | int = ..., children: bool | int = ..., fullPath: bool | int = ..., noIntermediate: bool | int = ..., parent: bool | int = ..., path: bool | int = ..., shapes: bool | int = ..., type: str | list[str] = ...) -> list[str] | None: ...
def listSets(*args, allSets: bool | int = ..., extendToShape: bool | int = ..., object: str = ..., type: int = ...) -> list[str] | None: ...

@overload
def loadFluid(*args, edit: Literal[True], currentTime: bool | int = ..., frame: float = ..., initialConditions: bool | int = ...) -> None: ...

@overload
def loadFluid(*args, currentTime: bool | int = ..., frame: bool | int | float = ..., initialConditions: bool | int = ..., query: bool | int = ...) -> Any: ...
def loadModule(*args, allModules: bool | int = ..., load: str = ..., scan: bool | int = ...) -> Any: ...
def loadPlugin(*args, addCallback: str | Callable = ..., allPlugins: bool | int = ..., name: str = ..., qObsolete: bool | int = ..., quiet: bool | int = ..., removeCallback: str | Callable = ...) -> None: ...
def loadPrefObjects(*args) -> Any: ...
def loadUI(*args, listTypes: bool | int = ..., uiFile: str = ..., uiString: str = ..., verbose: bool | int = ..., workingDirectory: str = ...) -> Any: ...
def lockNode(*args, ignoreComponents: bool | int = ..., lock: bool | int = ..., lockName: bool | int = ..., lockUnpublished: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def loft(*args, edit: Literal[True], autoReverse: bool | int = ..., caching: bool | int = ..., close: bool | int = ..., createCusp: bool | int | list[bool | int] = ..., degree: int = ..., nodeState: int = ..., reverse: bool | int | list[bool | int] = ..., reverseSurfaceNormals: bool | int = ..., sectionSpans: int = ..., uniform: bool | int = ...) -> None: ...

@overload
def loft(*args, autoReverse: bool | int = ..., caching: bool | int = ..., close: bool | int = ..., constructionHistory: bool | int = ..., createCusp: bool | int | bool | int | list[bool | int] = ..., degree: int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., range: bool | int = ..., rebuild: bool | int = ..., reverse: bool | int | bool | int | list[bool | int] = ..., reverseSurfaceNormals: bool | int = ..., sectionSpans: int = ..., uniform: bool | int = ...) -> Any: ...
def lookThru(*args, farClip: float = ..., nearClip: float = ..., query: bool | int = ...) -> Any: ...
def ls(*args, absoluteName: bool | int = ..., allPaths: bool | int = ..., assemblies: bool | int = ..., cameras: bool | int = ..., containerType: str | list[str] = ..., containers: bool | int = ..., dagObjects: bool | int = ..., defaultNodes: bool | int = ..., dependencyNodes: bool | int = ..., exactType: str | list[str] = ..., excludeType: str | list[str] = ..., flatten: bool | int = ..., geometry: bool | int = ..., ghost: bool | int = ..., head: int = ..., hilite: bool | int = ..., intermediateObjects: bool | int = ..., invisible: bool | int = ..., leaf: bool | int = ..., lights: bool | int = ..., live: bool | int = ..., lockedNodes: bool | int = ..., long: bool | int = ..., materials: bool | int = ..., modified: bool | int = ..., noIntermediate: bool | int = ..., nodeTypes: bool | int = ..., objectsOnly: bool | int = ..., orderedComponentSelection: bool | int = ..., orderedSelection: bool | int = ..., partitions: bool | int = ..., persistentNodes: bool | int = ..., planes: bool | int = ..., preSelectHilite: bool | int = ..., readOnly: bool | int = ..., recursive: bool | int = ..., referencedNodes: bool | int = ..., references: bool | int = ..., renderGlobals: bool | int = ..., renderQualities: bool | int = ..., renderResolutions: bool | int = ..., renderSetups: bool | int = ..., selection: bool | int = ..., sets: bool | int = ..., shapes: bool | int = ..., shortNames: bool | int = ..., showNamespace: bool | int = ..., showType: bool | int = ..., tail: int = ..., templated: bool | int = ..., textures: bool | int = ..., transforms: bool | int = ..., type: str | list[str] = ..., ufeObjects: bool | int = ..., undeletable: bool | int = ..., untemplated: bool | int = ..., uuid: bool | int = ..., visible: bool | int = ...) -> list[str]: ...
def lsThroughFilter(*args, item: str | list[str] = ..., nodeArray: bool | int = ..., reverse: bool | int = ..., selection: bool | int = ..., sort: str = ...) -> Any: ...
def lsUI(*args, cmdTemplates: bool | int = ..., collection: bool | int = ..., contexts: bool | int = ..., controlLayouts: bool | int = ..., controls: bool | int = ..., dumpWidgets: bool | int = ..., editors: bool | int = ..., head: int = ..., long: bool | int = ..., menuItems: bool | int = ..., menus: bool | int = ..., numWidgets: bool | int = ..., panels: bool | int = ..., radioMenuItemCollections: bool | int = ..., tail: int = ..., type: str | list[str] = ..., windows: bool | int = ..., workspaceControls: bool | int = ...) -> Any: ...
def makeIdentity(*args, apply: bool | int = ..., jointOrient: bool | int = ..., normal: int = ..., preserveNormals: bool | int = ..., rotate: bool | int = ..., scale: bool | int = ..., translate: bool | int = ...) -> Any: ...

@overload
def makeLive(*args, edit: Literal[True], addObjects: bool | int = ..., removeObjects: bool | int = ...) -> None: ...

@overload
def makeLive(*args, addObjects: bool | int = ..., none: bool | int = ..., query: bool | int = ..., registry: int = ..., registryCount: bool | int = ..., registryReset: bool | int = ..., registrySize: int = ..., removeObjects: bool | int = ...) -> Any: ...
def makePaintable(*args, activate: bool | int = ..., activateAll: bool | int = ..., altAttribute: bool | int | str | list[str] = ..., attrType: bool | int | str = ..., clearAll: bool | int = ..., query: bool | int = ..., remove: bool | int = ..., shapeMode: bool | int | str = ..., uiName: bool | int | str = ...) -> Any: ...

@overload
def makeSingleSurface(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., stitchTolerance: float = ...) -> None: ...

@overload
def makeSingleSurface(*args, caching: bool | int = ..., chordHeight: float = ..., chordHeightRatio: float = ..., constructionHistory: bool | int = ..., delta: float = ..., edgeSwap: bool | int = ..., format: int = ..., fractionalTolerance: float = ..., frozen: bool | int = ..., matchNormalDir: bool | int = ..., minEdgeLength: float = ..., name: str = ..., nodeState: int = ..., normalizeTrimmedUVRange: bool | int = ..., object: bool | int = ..., polygonCount: int = ..., polygonType: int = ..., query: bool | int = ..., stitchTolerance: float = ..., uNumber: int = ..., uType: int = ..., useChordHeight: bool | int = ..., useChordHeightRatio: bool | int = ..., vNumber: int = ..., vType: int = ...) -> Any: ...
def makebot(*args, checkdepends: bool | int = ..., checkres: int = ..., input: str = ..., nooverwrite: bool | int = ..., output: str = ..., verbose: bool | int = ...) -> Any: ...
def manipComponentPivot(*args) -> Any: ...
def manipComponentUpdate(*args) -> Any: ...

@overload
def manipMoveContext(*args, edit: Literal[True], activeHandle: int = ..., activeHandleNormal: int = ..., alignAlong: tuple[float, float, float] = ..., autoOrientSecondaryAxis: bool | int = ..., bakePivotOri: bool | int = ..., constrainAlongNormal: bool | int = ..., currentActiveHandle: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., interactiveUpdate: bool | int = ..., mode: int = ..., orientAxes: tuple[float, float, float] = ..., orientJoint: str = ..., orientJointEnabled: bool | int = ..., orientObject: str = ..., orientTowards: tuple[float, float, float] = ..., pinPivot: bool | int = ..., pivotOriHandle: bool | int = ..., postCommand: str | Callable = ..., postDragCommand: tuple[str | Callable, str] = ..., preCommand: str | Callable = ..., preDragCommand: tuple[str | Callable, str] = ..., preserveChildPosition: bool | int = ..., preserveUV: bool | int = ..., resetPivotMode: int = ..., secondaryAxisOrient: str = ..., snap: bool | int = ..., snapComponentsRelative: bool | int = ..., snapLiveFaceCenter: bool | int = ..., snapLivePoint: bool | int = ..., snapPivotOri: bool | int = ..., snapPivotPos: bool | int = ..., snapRelative: bool | int = ..., snapValue: float = ..., translate: tuple[float, float, float] = ..., tweakMode: bool | int = ..., xformConstraint: str = ...) -> None: ...

@overload
def manipMoveContext(*args, activeHandle: int = ..., activeHandleNormal: int = ..., alignAlong: tuple[float, float, float] = ..., autoOrientSecondaryAxis: bool | int = ..., bakePivotOri: bool | int = ..., constrainAlongNormal: bool | int = ..., currentActiveHandle: int = ..., editPivotMode: bool | int = ..., editPivotPosition: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., interactiveUpdate: bool | int = ..., lastMode: int = ..., manipVisible: bool | int = ..., mode: int = ..., orientAxes: bool | int | tuple[float, float, float] = ..., orientJoint: bool | int | str = ..., orientJointEnabled: bool | int = ..., orientObject: str = ..., orientTowards: tuple[float, float, float] = ..., pinPivot: bool | int = ..., pivotOriHandle: bool | int = ..., position: bool | int = ..., postCommand: str | Callable = ..., postDragCommand: tuple[str | Callable, str] = ..., preCommand: str | Callable = ..., preDragCommand: tuple[str | Callable, str] = ..., preserveChildPosition: bool | int = ..., preserveUV: bool | int = ..., query: bool | int = ..., reflection: bool | int = ..., reflectionAbout: int = ..., reflectionAxis: int = ..., reflectionTolerance: float = ..., resetPivotMode: int = ..., secondaryAxisOrient: bool | int | str = ..., snap: bool | int = ..., snapComponentsRelative: bool | int = ..., snapLiveFaceCenter: bool | int = ..., snapLivePoint: bool | int = ..., snapPivotOri: bool | int = ..., snapPivotPos: bool | int = ..., snapRelative: bool | int = ..., snapValue: bool | int | float = ..., translate: bool | int | tuple[float, float, float] = ..., tweakMode: bool | int = ..., xformConstraint: bool | int | str = ...) -> Any: ...

@overload
def manipMoveLimitsCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def manipMoveLimitsCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def manipOptions(*args, enableSmartDuplicate: bool | int = ..., enableSmartExtrude: bool | int = ..., forceRefresh: bool | int = ..., handleSize: bool | int | float = ..., hideManipOnCtrl: bool | int = ..., hideManipOnShift: bool | int = ..., hideManipOnShiftCtrl: bool | int = ..., linePick: bool | int | float = ..., lineSize: bool | int | float = ..., middleMouseRepositioning: bool | int = ..., pivotRotateHandleOffset: int = ..., planeHandleOffset: int = ..., pointSize: bool | int | float = ..., preselectHighlight: bool | int = ..., query: bool | int = ..., refreshMode: int = ..., relative: bool | int = ..., rememberActiveHandle: bool | int = ..., rememberActiveHandleAfterToolSwitch: bool | int = ..., scale: bool | int | float = ..., showExtrudeSliders: bool | int = ..., showPivotRotateHandle: bool | int = ..., showPlaneHandles: bool | int = ..., smartDuplicateType: int = ...) -> Any: ...
def manipPivot(*args, bakeOri: bool | int = ..., moveToolOri: int = ..., ori: bool | int | tuple[float, float, float] = ..., oriValid: bool | int = ..., orientation: tuple[float, float, float] = ..., pinPivot: bool | int = ..., pos: bool | int | tuple[float, float, float] = ..., posValid: bool | int = ..., position: tuple[float, float, float] = ..., query: bool | int = ..., reset: bool | int = ..., resetMode: int = ..., resetOri: bool | int = ..., resetPos: bool | int = ..., rotateToolOri: int = ..., scaleToolOri: int = ..., snapOri: bool | int = ..., snapPos: bool | int = ..., valid: bool | int = ...) -> Any: ...

@overload
def manipRotateContext(*args, edit: Literal[True], activeHandle: int = ..., alignAlong: tuple[float, float, float] = ..., bakePivotOri: bool | int = ..., centerTrackball: bool | int = ..., constrainAlongNormal: bool | int = ..., currentActiveHandle: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., mode: int = ..., modifyTranslation: bool | int = ..., orientAxes: tuple[float, float, float] = ..., orientObject: str = ..., orientTowards: tuple[float, float, float] = ..., pinPivot: bool | int = ..., pivotOriHandle: bool | int = ..., postCommand: str | Callable = ..., postDragCommand: tuple[str | Callable, str] = ..., preCommand: str | Callable = ..., preDragCommand: tuple[str | Callable, str] = ..., preserveChildPosition: bool | int = ..., preserveUV: bool | int = ..., resetPivotMode: int = ..., rotate: tuple[float, float, float] = ..., snap: bool | int = ..., snapPivotOri: bool | int = ..., snapPivotPos: bool | int = ..., snapRelative: bool | int = ..., snapValue: float = ..., tweakMode: bool | int = ..., useCenterPivot: bool | int = ..., useManipPivot: bool | int = ..., useObjectPivot: bool | int = ..., xformConstraint: str = ...) -> None: ...

@overload
def manipRotateContext(*args, activeHandle: int = ..., alignAlong: tuple[float, float, float] = ..., bakePivotOri: bool | int = ..., centerTrackball: bool | int = ..., constrainAlongNormal: bool | int = ..., currentActiveHandle: int = ..., editPivotMode: bool | int = ..., editPivotPosition: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., lastMode: int = ..., manipVisible: bool | int = ..., mode: int = ..., modifyTranslation: bool | int = ..., orientAxes: bool | int | tuple[float, float, float] = ..., orientObject: str = ..., orientTowards: tuple[float, float, float] = ..., pinPivot: bool | int = ..., pivotOriHandle: bool | int = ..., position: bool | int = ..., postCommand: str | Callable = ..., postDragCommand: tuple[str | Callable, str] = ..., preCommand: str | Callable = ..., preDragCommand: tuple[str | Callable, str] = ..., preserveChildPosition: bool | int = ..., preserveUV: bool | int = ..., query: bool | int = ..., reflection: bool | int = ..., reflectionAbout: int = ..., reflectionAxis: int = ..., reflectionTolerance: float = ..., resetPivotMode: int = ..., rotate: bool | int | tuple[float, float, float] = ..., snap: bool | int = ..., snapPivotOri: bool | int = ..., snapPivotPos: bool | int = ..., snapRelative: bool | int = ..., snapValue: bool | int | float = ..., tweakMode: bool | int = ..., useCenterPivot: bool | int = ..., useManipPivot: bool | int = ..., useObjectPivot: bool | int = ..., xformConstraint: bool | int | str = ...) -> Any: ...

@overload
def manipRotateLimitsCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def manipRotateLimitsCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def manipScaleContext(*args, edit: Literal[True], activeHandle: int = ..., alignAlong: tuple[float, float, float] = ..., bakePivotOri: bool | int = ..., constrainAlongNormal: bool | int = ..., currentActiveHandle: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., mode: int = ..., orientAxes: tuple[float, float, float] = ..., orientObject: str = ..., orientTowards: tuple[float, float, float] = ..., pinPivot: bool | int = ..., pivotOriHandle: bool | int = ..., postCommand: str | Callable = ..., postDragCommand: tuple[str | Callable, str] = ..., preCommand: str | Callable = ..., preDragCommand: tuple[str | Callable, str] = ..., preserveChildPosition: bool | int = ..., preserveUV: bool | int = ..., resetPivotMode: int = ..., scale: tuple[float, float, float] = ..., snap: bool | int = ..., snapPivotOri: bool | int = ..., snapPivotPos: bool | int = ..., snapRelative: bool | int = ..., snapValue: float = ..., tweakMode: bool | int = ..., useManipPivot: bool | int = ..., useObjectPivot: bool | int = ..., xformConstraint: str = ...) -> None: ...

@overload
def manipScaleContext(*args, activeHandle: int = ..., alignAlong: tuple[float, float, float] = ..., bakePivotOri: bool | int = ..., constrainAlongNormal: bool | int = ..., currentActiveHandle: int = ..., editPivotMode: bool | int = ..., editPivotPosition: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., lastMode: int = ..., manipVisible: bool | int = ..., mode: int = ..., orientAxes: bool | int | tuple[float, float, float] = ..., orientObject: str = ..., orientTowards: tuple[float, float, float] = ..., pinPivot: bool | int = ..., pivotOriHandle: bool | int = ..., position: bool | int = ..., postCommand: str | Callable = ..., postDragCommand: tuple[str | Callable, str] = ..., preCommand: str | Callable = ..., preDragCommand: tuple[str | Callable, str] = ..., preserveChildPosition: bool | int = ..., preserveUV: bool | int = ..., preventNegativeScale: bool | int = ..., query: bool | int = ..., reflection: bool | int = ..., reflectionAbout: int = ..., reflectionAxis: int = ..., reflectionTolerance: float = ..., resetPivotMode: int = ..., scale: bool | int | tuple[float, float, float] = ..., snap: bool | int = ..., snapPivotOri: bool | int = ..., snapPivotPos: bool | int = ..., snapRelative: bool | int = ..., snapValue: bool | int | float = ..., tweakMode: bool | int = ..., useManipPivot: bool | int = ..., useObjectPivot: bool | int = ..., xformConstraint: bool | int | str = ...) -> Any: ...

@overload
def manipScaleLimitsCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def manipScaleLimitsCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def marker(*args, attach: bool | int = ..., detach: bool | int = ..., edit: bool | int = ..., frontTwist: bool | int | float = ..., orientationMarker: bool | int = ..., positionMarker: bool | int = ..., query: bool | int = ..., sideTwist: bool | int | float = ..., time: bool | int | int | float = ..., upTwist: bool | int | float = ..., valueU: bool | int | float = ...) -> Any: ...
def matchTransform(*args, pivots: bool | int = ..., position: bool | int = ..., positionX: bool | int = ..., positionY: bool | int = ..., positionZ: bool | int = ..., rotatePivot: bool | int = ..., rotation: bool | int = ..., rotationX: bool | int = ..., rotationY: bool | int = ..., rotationZ: bool | int = ..., scale: bool | int = ..., scaleBox: bool | int = ..., scalePivot: bool | int = ..., scaleX: bool | int = ..., scaleY: bool | int = ..., scaleZ: bool | int = ...) -> Any: ...
def mateCtx(*args) -> Any: ...

@overload
def matrixUtil(*args, edit: Literal[True], inverse: bool | int = ..., quaternion: tuple[float, float, float, float] = ..., relative: bool | int = ..., rotation: tuple[float, float, float] = ..., scale: tuple[float, float, float] = ..., shear: tuple[float, float, float] = ..., translation: tuple[float, float, float] = ..., transpose: bool | int = ...) -> None: ...

@overload
def matrixUtil(*args, inverse: bool | int = ..., quaternion: bool | int | tuple[float, float, float, float] = ..., query: bool | int = ..., relative: bool | int = ..., rotation: bool | int | tuple[float, float, float] = ..., scale: bool | int | tuple[float, float, float] = ..., shear: bool | int | tuple[float, float, float] = ..., translation: bool | int | tuple[float, float, float] = ..., transpose: bool | int = ...) -> Any: ...
def mayaDpiSetting(*args, mode: int = ..., query: bool | int = ..., realScaleValue: bool | int = ..., scaleValue: float = ..., systemDpi: bool | int = ...) -> Any: ...
def mayaDpiSettingAction(*args) -> Any: ...

@overload
def mayaHasRenderSetup(*args, edit: Literal[True], enableCurrentSession: bool | int = ..., enableDuringTests: bool | int = ...) -> None: ...

@overload
def mayaHasRenderSetup(*args, enableCurrentSession: bool | int = ..., enableDuringTests: bool | int = ..., query: bool | int = ...) -> Any: ...
def mayaPreviewRenderIntoNewWindow(*args, **keywords): ...
def melInfo(*args) -> Any: ...
def melOptions(*args, duplicateVariableWarnings: bool | int = ..., query: bool | int = ...) -> Any: ...
def memory(*args, adjustedVirtualMemory: bool | int = ..., asFloat: bool | int = ..., debug: bool | int = ..., freeMemory: bool | int = ..., gigaByte: bool | int = ..., heapMemory: bool | int = ..., kiloByte: bool | int = ..., megaByte: bool | int = ..., pageFaults: bool | int = ..., pageReclaims: bool | int = ..., physicalMemory: bool | int = ..., processResidentMemory: bool | int = ..., processVirtualMemory: bool | int = ..., summary: bool | int = ..., swapFree: bool | int = ..., swapLogical: bool | int = ..., swapMax: bool | int = ..., swapPhysical: bool | int = ..., swapReserved: bool | int = ..., swapVirtual: bool | int = ..., swaps: bool | int = ...) -> Any: ...

@overload
def menu(*args, exists: Literal[True]) -> bool: ...

@overload
def menu(*args, edit: Literal[True], deleteAllItems: bool | int = ..., docTag: str = ..., enable: bool | int = ..., familyImage: str = ..., helpMenu: bool | int = ..., label: str = ..., mnemonic: str = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., scrollable: bool | int = ..., version: str = ..., visible: bool | int = ...) -> None: ...

@overload
def menu(*args, allowOptionBoxes: bool | int = ..., defineTemplate: str = ..., deleteAllItems: bool | int = ..., docTag: bool | int | str = ..., enable: bool | int = ..., familyImage: bool | int | str = ..., helpMenu: bool | int = ..., itemArray: bool | int = ..., label: bool | int | str = ..., mnemonic: bool | int | str = ..., numberOfItems: bool | int = ..., parent: str = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., query: bool | int = ..., scrollable: bool | int = ..., tearOff: bool | int = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ...) -> Any: ...

@overload
def menuBarLayout(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., menuBarVisible: bool | int = ..., menuIndex: tuple[str, int] = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def menuBarLayout(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., childArray: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., menuArray: bool | int = ..., menuBarVisible: bool | int = ..., menuIndex: tuple[str, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfMenus: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def menuEditor(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., cellHeight: int = ..., cellWidth: int = ..., cellWidthHeight: tuple[int, int] = ..., checkBoxPresent: tuple[bool | int, str, int] = ..., checkBoxState: tuple[bool | int, str, int] = ..., command: tuple[str, str, int, bool | int] = ..., delete: tuple[str, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: tuple[str, str, int] = ..., label: tuple[str, str, int] = ..., manage: bool | int = ..., noBackground: bool | int = ..., optionBoxCommand: tuple[str, str, int] = ..., optionBoxPresent: tuple[bool | int, str, int] = ..., preventOverride: bool | int = ..., radioButtonPresent: tuple[bool | int, str, int] = ..., radioButtonState: tuple[bool | int, str, int] = ..., separator: tuple[str, int] = ..., statusBarMessage: str = ..., style: str = ..., subMenuAt: tuple[str, int] = ..., topLevelMenu: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def menuEditor(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., cellHeight: int = ..., cellWidth: int = ..., cellWidthHeight: tuple[int, int] = ..., checkBoxPresent: bool | int | tuple[bool | int, str, int] = ..., checkBoxState: bool | int | tuple[bool | int, str, int] = ..., command: bool | int | tuple[str, str, int, bool | int] = ..., defineTemplate: str = ..., delete: tuple[str, int] = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., iconMenuCallback: str = ..., image: bool | int | tuple[str, str, int] = ..., isLanguageMel: bool | int | tuple[bool | int, str, int] = ..., isObscured: bool | int = ..., label: bool | int | tuple[str, str, int] = ..., manage: bool | int = ..., menuItemTypes: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., optionBoxCommand: bool | int | tuple[str, str, int] = ..., optionBoxPresent: bool | int | tuple[bool | int, str, int] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., radioButtonPresent: bool | int | tuple[bool | int, str, int] = ..., radioButtonState: bool | int | tuple[bool | int, str, int] = ..., separator: bool | int | tuple[str, int] = ..., statusBarMessage: str = ..., style: bool | int | str = ..., subMenuAt: tuple[str, int] = ..., subMenuEditorWindow: str = ..., subMenuEditorsOpen: bool | int = ..., subMenuOf: tuple[str, str, int] = ..., topLevelMenu: bool | int | str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def menuItem(*args, edit: Literal[True], annotation: str = ..., checkBox: bool | int = ..., command: str | Callable = ..., data: int = ..., dividerLabel: str = ..., docTag: str = ..., dragDoubleClickCommand: str | Callable = ..., dragMenuCommand: str | Callable = ..., echoCommand: bool | int = ..., enable: bool | int = ..., enableCommandRepeat: bool | int = ..., image: str = ..., imageOverlayLabel: str = ..., label: str = ..., longDivider: bool | int = ..., optionBoxIcon: str = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., radialPosition: str = ..., radioButton: bool | int = ..., runTimeCommand: str = ..., sourceType: str = ..., version: str = ..., visible: bool | int = ...) -> None: ...

@overload
def menuItem(*args, allowOptionBoxes: bool | int = ..., altModifier: bool | int = ..., annotation: bool | int | str = ..., boldFont: bool | int = ..., checkBox: bool | int = ..., checkBoxCategory: str = ..., checkBoxParent: str = ..., collection: bool | int | str = ..., command: bool | int | str | Callable = ..., commandModifier: bool | int = ..., ctrlModifier: bool | int = ..., data: int = ..., defineTemplate: str = ..., divider: bool | int = ..., dividerLabel: bool | int | str = ..., docTag: bool | int | str = ..., dragDoubleClickCommand: bool | int | str | Callable = ..., dragMenuCommand: bool | int | str | Callable = ..., echoCommand: bool | int = ..., enable: bool | int = ..., enableCommandRepeat: bool | int = ..., exists: bool | int = ..., familyImage: bool | int | str = ..., header: bool | int = ..., image: bool | int | str = ..., imageOverlayLabel: bool | int | str = ..., insertAfter: str = ..., isCheckBox: bool | int = ..., isOptionBox: bool | int = ..., isRadioButton: bool | int = ..., italicized: bool | int = ..., keyEquivalent: str = ..., label: bool | int | str = ..., longDivider: bool | int = ..., mnemonic: str = ..., optionBox: bool | int = ..., optionBoxIcon: bool | int | str = ..., optionModifier: bool | int = ..., parent: str = ..., postMenuCommand: bool | int | str | Callable = ..., postMenuCommandOnce: bool | int = ..., query: bool | int = ..., radialPosition: bool | int | str = ..., radioButton: bool | int = ..., runTimeCommand: str = ..., shiftModifier: bool | int = ..., sourceType: bool | int | str = ..., subMenu: bool | int = ..., tearOff: bool | int = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ...) -> Any: ...

@overload
def menuSet(*args, edit: Literal[True], hotBoxVisible: bool | int = ..., permanent: bool | int = ...) -> None: ...

@overload
def menuSet(*args, addMenu: str = ..., allMenuSets: bool | int = ..., currentMenuSet: bool | int | str = ..., exists: bool | int | str = ..., hotBoxVisible: bool | int = ..., insertMenu: tuple[str, int] = ..., label: bool | int | str = ..., menuArray: bool | int | str = ..., moveMenu: tuple[str, int] = ..., moveMenuSet: tuple[str, int] = ..., numberOfMenuSets: bool | int = ..., numberOfMenus: bool | int = ..., permanent: bool | int = ..., query: bool | int = ..., removeMenu: str = ..., removeMenuSet: str = ...) -> Any: ...

@overload
def menuSetPref(*args, edit: Literal[True], force: bool | int = ...) -> None: ...

@overload
def menuSetPref(*args, exists: bool | int = ..., force: bool | int = ..., loadAll: bool | int = ..., query: bool | int = ..., removeAll: bool | int = ..., saveAll: bool | int = ..., saveBackup: bool | int = ..., version: bool | int = ...) -> Any: ...
def meshIntersectTest(*args) -> Any: ...

@overload
def messageLine(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def messageLine(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def mimicManipulation(*args, manipulations: str = ..., prevalidation: bool | int = ..., refresh: bool | int = ...) -> Any: ...
def mimicMnipulation(*args) -> Any: ...
def minimizeApp(*args) -> Any: ...
def mirrorJoint(*args, mirrorBehavior: bool | int = ..., mirrorXY: bool | int = ..., mirrorXZ: bool | int = ..., mirrorYZ: bool | int = ..., searchReplace: tuple[str, str] = ...) -> Any: ...

@overload
def modelCurrentTimeCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., percent: float = ...) -> None: ...

@overload
def modelCurrentTimeCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., percent: bool | int | float = ..., query: bool | int = ...) -> Any: ...

@overload
def modelEditor(*args, edit: Literal[True], activeComponentsXray: bool | int = ..., activeCustomEnvironment: str = ..., activeCustomGeometry: str = ..., activeCustomLightSet: str = ..., activeCustomOverrideGeometry: str = ..., activeCustomRenderer: str = ..., activeOnly: bool | int = ..., activeShadingGraph: str = ..., activeView: bool | int = ..., addObjects: str = ..., addSelected: bool | int = ..., allObjects: bool | int = ..., backfaceCulling: bool | int = ..., bluePencil: bool | int = ..., bufferMode: str = ..., bumpResolution: tuple[int, int] = ..., camera: str = ..., cameraName: str = ..., cameraSet: str = ..., cameras: bool | int = ..., capture: str = ..., captureSequenceNumber: int = ..., clipGhosts: bool | int = ..., cmEnabled: bool | int = ..., colorResolution: tuple[int, int] = ..., controlVertices: bool | int = ..., cullingOverride: str = ..., default: bool | int = ..., deformers: bool | int = ..., dimensions: bool | int = ..., displayAppearance: str = ..., displayLights: str = ..., displayTextures: bool | int = ..., docTag: str = ..., dynamicConstraints: bool | int = ..., dynamics: bool | int = ..., editorChanged: str | Callable = ..., excludeObjectMask: int = ..., excludeObjectPreset: str = ..., excludePluginList: str | list[str] = ..., exposure: float = ..., filter: str = ..., fluids: bool | int = ..., fogColor: tuple[float, float, float, float] = ..., fogDensity: float = ..., fogEnd: float = ..., fogMode: str = ..., fogSource: str = ..., fogStart: float = ..., fogging: bool | int = ..., follicles: bool | int = ..., forceMainConnection: str = ..., gamma: float = ..., greasePencils: bool | int = ..., grid: bool | int = ..., hairSystems: bool | int = ..., handles: bool | int = ..., headsUpDisplay: bool | int = ..., highlightConnection: str = ..., hulls: bool | int = ..., ignorePanZoom: bool | int = ..., ikHandles: bool | int = ..., imagePlane: bool | int = ..., interactive: bool | int = ..., interactiveBackFaceCull: bool | int = ..., interactiveDisableShadows: bool | int = ..., jointXray: bool | int = ..., joints: bool | int = ..., lights: bool | int = ..., lineWidth: float = ..., locators: bool | int = ..., lockMainConnection: bool | int = ..., lowQualityLighting: bool | int = ..., mainListConnection: str = ..., manipulators: bool | int = ..., maxConstantTransparency: float = ..., maximumNumHardwareLights: bool | int = ..., motionTrails: bool | int = ..., nCloths: bool | int = ..., nParticles: bool | int = ..., nRigids: bool | int = ..., noUndo: bool | int = ..., nurbsCurves: bool | int = ..., nurbsSurfaces: bool | int = ..., objectFilter: str | Callable = ..., objectFilterShowInHUD: bool | int = ..., occlusionCulling: bool | int = ..., parent: str = ..., particleInstancers: bool | int = ..., pivots: bool | int = ..., planes: bool | int = ..., pluginObjects: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., pluginShapes: bool | int = ..., polymeshes: bool | int = ..., removeSelected: bool | int = ..., rendererName: str = ..., rendererOverrideName: str = ..., resetCustomCamera: bool | int = ..., sceneRenderFilter: str = ..., selectionConnection: str = ..., selectionHiliteDisplay: bool | int = ..., setSelected: bool | int = ..., shadingModel: int = ..., shadows: bool | int = ..., smallObjectCulling: bool | int = ..., smallObjectThreshold: float = ..., smoothWireframe: bool | int = ..., sortTransparent: bool | int = ..., stereoDrawMode: bool | int = ..., strokes: bool | int = ..., subdivSurfaces: bool | int = ..., textureAnisotropic: bool | int = ..., textureCompression: bool | int = ..., textureDisplay: str = ..., textureEnvironmentMap: bool | int = ..., textureHilight: bool | int = ..., textureMaxSize: int = ..., textureSampling: int = ..., textures: bool | int = ..., toggleExposure: bool | int = ..., toggleGamma: bool | int = ..., transpInShadows: bool | int = ..., transparencyAlgorithm: str = ..., twoSidedLighting: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateColorMode: bool | int = ..., updateMainConnection: bool | int = ..., useBaseRenderer: bool | int = ..., useColorIndex: bool | int = ..., useDefaultMaterial: bool | int = ..., useInteractiveMode: bool | int = ..., useRGBImagePlane: bool | int = ..., useReducedRenderer: bool | int = ..., userNode: str = ..., viewSelected: bool | int = ..., viewTransformName: str = ..., wireframeBackingStore: bool | int = ..., wireframeOnShaded: bool | int = ..., xray: bool | int = ...) -> None: ...

@overload
def modelEditor(*args, activeComponentsXray: bool | int = ..., activeCustomEnvironment: str = ..., activeCustomGeometry: bool | int | str = ..., activeCustomLighSet: str = ..., activeCustomLightSet: bool | int | str = ..., activeCustomOverrideGeometry: bool | int | str = ..., activeCustomRenderer: bool | int | str = ..., activeOnly: bool | int = ..., activeShadingGraph: bool | int | str = ..., activeView: bool | int = ..., addObjects: str = ..., addSelected: bool | int = ..., addSelectedObjects: bool | int = ..., allObjects: bool | int = ..., backfaceCulling: bool | int = ..., bluePencil: bool | int = ..., bufferMode: bool | int | str = ..., bumpResolution: bool | int | tuple[int, int] = ..., camera: bool | int | str = ..., cameraName: str = ..., cameraSet: bool | int | str = ..., cameraSetup: bool | int = ..., cameras: bool | int = ..., capture: bool | int | str = ..., captureSequenceNumber: int = ..., clipGhosts: bool | int = ..., cmEnabled: bool | int = ..., colorMap: bool | int = ..., colorResolution: bool | int | tuple[int, int] = ..., control: bool | int = ..., controlVertices: bool | int = ..., controllers: bool | int = ..., cullingOverride: bool | int | str = ..., default: bool | int = ..., defineTemplate: str = ..., deformers: bool | int = ..., depthOfFieldPreview: bool | int = ..., dimensions: bool | int = ..., displayAppearance: bool | int | str = ..., displayLights: bool | int | str = ..., displayTextures: bool | int = ..., docTag: bool | int | str = ..., dynamicConstraints: bool | int = ..., dynamics: bool | int = ..., editorChanged: bool | int | str | Callable = ..., excludeObjectMask: int = ..., excludeObjectPreset: bool | int | str = ..., excludePluginList: bool | int | str | list[str] = ..., exists: bool | int = ..., exposure: bool | int | float = ..., filter: bool | int | str = ..., filteredObjectList: bool | int = ..., fluids: bool | int = ..., fogColor: bool | int | tuple[float, float, float, float] = ..., fogDensity: bool | int | float = ..., fogEnd: bool | int | float = ..., fogMode: bool | int | str = ..., fogSource: bool | int | str = ..., fogStart: bool | int | float = ..., fogging: bool | int = ..., follicles: bool | int = ..., forceMainConnection: bool | int | str = ..., gamma: bool | int | float = ..., greasePencils: bool | int = ..., grid: bool | int = ..., hairSystems: bool | int = ..., handles: bool | int = ..., headsUpDisplay: bool | int = ..., height: bool | int = ..., highlightConnection: bool | int | str = ..., holdOuts: bool | int = ..., hulls: bool | int = ..., ignorePanZoom: bool | int = ..., ikHandles: bool | int = ..., imagePlane: bool | int = ..., interactive: bool | int = ..., interactiveBackFaceCull: bool | int = ..., interactiveDisableShadows: bool | int = ..., isFiltered: bool | int = ..., jointXray: bool | int = ..., joints: bool | int = ..., lights: bool | int = ..., lineWidth: bool | int | float = ..., locators: bool | int = ..., lockMainConnection: bool | int = ..., lowQualityLighting: bool | int = ..., mainListConnection: bool | int | str = ..., manipulators: bool | int = ..., maxConstantTransparency: bool | int | float = ..., maximumNumHardwareLights: bool | int = ..., modelPanel: str = ..., motionTrails: bool | int = ..., nCloths: bool | int = ..., nParticles: bool | int = ..., nRigids: bool | int = ..., noUndo: bool | int = ..., nurbsCurves: bool | int = ..., nurbsSurfaces: bool | int = ..., objectFilter: bool | int | str | Callable = ..., objectFilterList: bool | int | str | Callable = ..., objectFilterListUI: bool | int | str | Callable = ..., objectFilterShowInHUD: bool | int = ..., objectFilterUI: bool | int | str | Callable = ..., occlusionCulling: bool | int = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., particleInstancers: bool | int = ..., pivots: bool | int = ..., planes: bool | int = ..., pluginObjects: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., pluginShapes: bool | int = ..., polymeshes: bool | int = ..., query: bool | int = ..., queryPluginObjects: bool | int | str = ..., queryPresetDirty: bool | int = ..., removeSelected: bool | int = ..., rendererDeviceName: bool | int = ..., rendererList: bool | int = ..., rendererListUI: bool | int = ..., rendererName: bool | int | str = ..., rendererOverrideList: bool | int = ..., rendererOverrideListUI: bool | int = ..., rendererOverrideName: bool | int | str = ..., resetCustomCamera: bool | int = ..., sceneRenderFilter: bool | int | str = ..., selectionConnection: bool | int | str = ..., selectionHiliteDisplay: bool | int = ..., setSelected: bool | int = ..., shadingModel: int = ..., shadows: bool | int = ..., smallObjectCulling: bool | int = ..., smallObjectThreshold: bool | int | float = ..., smoothWireframe: bool | int = ..., sortTransparent: bool | int = ..., stateString: bool | int = ..., stereoDrawMode: bool | int = ..., strokes: bool | int = ..., subdivSurfaces: bool | int = ..., textureAnisotropic: bool | int = ..., textureCompression: bool | int = ..., textureDisplay: bool | int | str = ..., textureEnvironmentMap: bool | int = ..., textureHilight: bool | int = ..., textureMaxSize: int = ..., textureMemoryUsed: bool | int = ..., textureSampling: int = ..., textures: bool | int = ..., toggleExposure: bool | int = ..., toggleGamma: bool | int = ..., transpInShadows: bool | int = ..., transparencyAlgorithm: bool | int | str = ..., twoSidedLighting: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateColorMode: bool | int = ..., updateMainConnection: bool | int = ..., useBaseRenderer: bool | int = ..., useColorIndex: bool | int = ..., useDefaultMaterial: bool | int = ..., useInteractiveMode: bool | int = ..., useRGBImagePlane: bool | int = ..., useReducedRenderer: bool | int = ..., useTemplate: str = ..., userNode: bool | int | str = ..., viewObjects: bool | int = ..., viewSelected: bool | int = ..., viewTransformName: bool | int | str = ..., viewType: bool | int = ..., width: bool | int = ..., wireframeBackingStore: bool | int = ..., wireframeOnShaded: bool | int = ..., xray: bool | int = ...) -> Any: ...

@overload
def modelPanel(*args, edit: Literal[True], camera: str = ..., copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def modelPanel(*args, barLayout: bool | int = ..., camera: bool | int | str = ..., control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., modelEditor: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., query: bool | int = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...
def modelingToolkitSuperCtx(*args, attach: str | list[str] = ..., edit: bool | int = ..., exists: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., query: bool | int = ...) -> Any: ...
def moduleInfo(*args, definition: bool | int = ..., listModules: bool | int = ..., moduleName: str = ..., path: bool | int = ..., version: bool | int = ...) -> Any: ...
def mouldMesh(*args) -> Any: ...
def mouldSrf(*args) -> Any: ...
def mouldSubdiv(*args) -> Any: ...
def mouse(*args, enableScrollWheel: bool | int = ..., mouseButtonTracking: int = ..., mouseButtonTrackingStatus: bool | int = ..., scrollWheelStatus: bool | int = ...) -> Any: ...
def movIn(*args, file: str = ..., startTime: int | float = ...) -> Any: ...
def movOut(*args, comment: bool | int = ..., file: str = ..., precision: int = ..., time: str | tuple[float, float] | tuple[float] = ...) -> Any: ...
def move(*args, absolute: bool | int = ..., autoOrientSecondaryAxis: bool | int = ..., componentOffset: bool | int = ..., componentSpace: bool | int = ..., constrainAlongNormal: bool | int = ..., deletePriorHistory: bool | int = ..., localSpace: bool | int = ..., moveX: bool | int = ..., moveXY: bool | int = ..., moveXYZ: bool | int = ..., moveXZ: bool | int = ..., moveY: bool | int = ..., moveYZ: bool | int = ..., moveZ: bool | int = ..., objectSpace: bool | int = ..., orientJoint: str = ..., parameter: bool | int = ..., preserveChildPosition: bool | int = ..., preserveGeometryPosition: bool | int = ..., preserveUV: bool | int = ..., reflection: bool | int = ..., reflectionAboutBBox: bool | int = ..., reflectionAboutOrigin: bool | int = ..., reflectionAboutX: bool | int = ..., reflectionAboutY: bool | int = ..., reflectionAboutZ: bool | int = ..., reflectionTolerance: float = ..., relative: bool | int = ..., rotatePivotRelative: bool | int = ..., scalePivotRelative: bool | int = ..., secondaryAxisOrient: str = ..., symNegative: bool | int = ..., ufeRotatePivot: bool | int = ..., ufeScalePivot: bool | int = ..., worldSpace: bool | int = ..., worldSpaceDistance: bool | int = ..., xformConstraint: str = ...) -> Any: ...

@overload
def moveKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., moveFunction: str = ..., option: str = ...) -> None: ...

@overload
def moveKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., moveFunction: bool | int | str = ..., name: str = ..., option: bool | int | str = ..., query: bool | int = ...) -> Any: ...
def moveVertexAlongDirection(*args, direction: tuple[float, float, float] | list[tuple[float, float, float]] = ..., magnitude: float | list[float] = ..., normalDirection: float | list[float] = ..., uDirection: float | list[float] = ..., uvNormalDirection: tuple[float, float, float] | list[tuple[float, float, float]] = ..., vDirection: float | list[float] = ...) -> Any: ...
def movieCompressor(*args, hardwareOptions: bool | int = ..., softwareOptions: bool | int = ...) -> Any: ...
def movieInfo(*args, counter: bool | int = ..., dropFrame: bool | int = ..., frameCount: bool | int = ..., frameDuration: bool | int = ..., height: bool | int = ..., movieTexture: bool | int = ..., negTimesOK: bool | int = ..., numFrames: bool | int = ..., quickTime: bool | int = ..., timeCode: bool | int = ..., timeCodeTrack: bool | int = ..., timeScale: bool | int = ..., twentyFourHourMax: bool | int = ..., width: bool | int = ...) -> Any: ...
def mpBirailCtx(*args, activeNodes: bool | int = ..., autoCreate: bool | int = ..., bldProfileFirst: bool | int = ..., bldProfileLast: bool | int = ..., bldProfiles: bool | int = ..., bldRailOne: bool | int = ..., bldRailTwo: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., frozen: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., reset: bool | int = ..., tangentContinuityProfile1: bool | int = ..., tangentContinuityProfile2: bool | int = ..., toolNode: bool | int = ..., transformMode: int = ...) -> Any: ...
def mrMapVisualizer(*args, **keywords): ...
def mrShaderManager(*args, **keywords): ...

@overload
def multiProfileBirailSurface(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., tangentContinuityProfile1: bool | int = ..., tangentContinuityProfile2: bool | int = ..., transformMode: int = ...) -> None: ...

@overload
def multiProfileBirailSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., tangentContinuityProfile1: bool | int = ..., tangentContinuityProfile2: bool | int = ..., transformMode: int = ...) -> Any: ...
def multiTouch(*args, gestures: bool | int = ..., query: bool | int = ..., trackpad: int = ...) -> Any: ...
def mute(*args, disable: bool | int = ..., force: bool | int = ..., query: bool | int = ...) -> Any: ...
def myTestCmd(*args) -> Any: ...

@overload
def nBase(*args, edit: Literal[True], clearCachedTextureMap: str = ..., clearStart: bool | int = ..., stuffStart: bool | int = ..., textureToVertex: str = ...) -> None: ...

@overload
def nBase(*args, clearCachedTextureMap: str = ..., clearStart: bool | int = ..., query: bool | int = ..., stuffStart: bool | int = ..., textureToVertex: str = ...) -> Any: ...
def nClothAppend(*args, **keywords): ...
def nClothAppendOpt(*args, **keywords): ...
def nClothCache(*args, **keywords): ...
def nClothCacheOpt(*args, **keywords): ...
def nClothCreate(*args, **keywords): ...
def nClothCreateOptions(*args, **keywords): ...
def nClothDeleteCacheFrames(*args, **keywords): ...
def nClothDeleteCacheFramesOpt(*args, **keywords): ...
def nClothDeleteCacheOpt(*args, **keywords): ...
def nClothDeleteHistory(*args, **keywords): ...
def nClothDeleteHistoryOpt(*args, **keywords): ...
def nClothDisplayCurrentMesh(*args, **keywords): ...
def nClothDisplayInputMesh(*args, **keywords): ...
def nClothLocalToWorld(*args, **keywords): ...
def nClothMakeCollide(*args, **keywords): ...
def nClothMakeCollideOptions(*args, **keywords): ...
def nClothMergeCache(*args, **keywords): ...
def nClothMergeCacheOpt(*args, **keywords): ...
def nClothRemove(*args, **keywords): ...
def nClothReplaceCache(*args, **keywords): ...
def nClothReplaceCacheOpt(*args, **keywords): ...
def nClothReplaceFrames(*args, **keywords): ...
def nClothReplaceFramesOpt(*args, **keywords): ...
def nClothRestToInput(*args, **keywords): ...
def nClothRestToInputStart(*args, **keywords): ...
def nClothRestToMesh(*args, **keywords): ...
def nClothWorldToLocal(*args, **keywords): ...
def nConstraintAddMembers(*args, **keywords): ...
def nConstraintAttractToMatch(*args, **keywords): ...
def nConstraintAttractToMatchOptions(*args, **keywords): ...
def nConstraintCollisionExclusion(*args, **keywords): ...
def nConstraintCollisionExclusionOptions(*args, **keywords): ...
def nConstraintComponent(*args, **keywords): ...
def nConstraintComponentOptions(*args, **keywords): ...
def nConstraintComponentToComponent(*args, **keywords): ...
def nConstraintComponentToComponentOptions(*args, **keywords): ...
def nConstraintConstraintMembershipTool(*args, **keywords): ...
def nConstraintDisableCollision(*args, **keywords): ...
def nConstraintDisableCollisionOptions(*args, **keywords): ...
def nConstraintForceField(*args, **keywords): ...
def nConstraintForceFieldOptions(*args, **keywords): ...
def nConstraintPointToSurface(*args, **keywords): ...
def nConstraintPointToSurfaceOptions(*args, **keywords): ...
def nConstraintRemoveMembers(*args, **keywords): ...
def nConstraintReplaceMembers(*args, **keywords): ...
def nConstraintSelectMembers(*args, **keywords): ...
def nConstraintSlideOnSurface(*args, **keywords): ...
def nConstraintSlideOnSurfaceOptions(*args, **keywords): ...
def nConstraintTearableSurface(*args, **keywords): ...
def nConstraintTearableSurfaceOptions(*args, **keywords): ...
def nConstraintTransform(*args, **keywords): ...
def nConstraintTransformOptions(*args, **keywords): ...
def nConstraintWeldBorders(*args, **keywords): ...
def nConstraintWeldBordersOptions(*args, **keywords): ...

@overload
def nParticle(*args, edit: Literal[True], attribute: str = ..., cache: bool | int = ..., conserve: float = ..., floatValue: float = ..., inherit: float = ..., name: str = ..., order: int = ..., particleId: int = ..., shapeName: str = ..., vectorValue: tuple[float, float, float] = ...) -> None: ...

@overload
def nParticle(*args, attribute: bool | int | str = ..., cache: bool | int = ..., conserve: bool | int | float = ..., count: bool | int = ..., deleteCache: bool | int = ..., dynamicAttrList: bool | int = ..., floatValue: float = ..., gridSpacing: bool | int | float | list[float] = ..., inherit: bool | int | float = ..., jitterBasePoint: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., jitterRadius: bool | int | float | list[float] = ..., lowerLeft: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., name: bool | int | str = ..., numJitters: bool | int | int | list[int] = ..., order: int = ..., particleId: int = ..., perParticleDouble: bool | int = ..., perParticleVector: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., shapeName: bool | int | str = ..., upperRight: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., vectorValue: tuple[float, float, float] = ...) -> Any: ...
def nSoft(*args, convert: bool | int = ..., duplicate: bool | int = ..., duplicateHistory: bool | int = ..., goal: float = ..., hideOriginal: bool | int = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def nameCommand(*args, annotation: str = ..., command: str | Callable = ..., data1: str = ..., data2: str = ..., data3: str = ..., default: bool | int = ..., sourceType: str = ...) -> Any: ...

@overload
def nameField(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., drawInactiveFrame: bool | int = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., nameChangeCommand: str | Callable = ..., noBackground: bool | int = ..., object: str = ..., preventOverride: bool | int = ..., receiveFocusCommand: str | Callable = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def nameField(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: bool | int | str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., drawInactiveFrame: bool | int = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., nameChangeCommand: bool | int | str | Callable = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., object: bool | int | str = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., receiveFocusCommand: bool | int | str | Callable = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def namespace(*args, absoluteName: bool | int = ..., addNamespace: str = ..., collapseAncestors: str = ..., deleteNamespaceContent: bool | int = ..., exists: str = ..., force: bool | int = ..., isRootNamespace: bool | int | str = ..., mergeNamespaceWithOther: str = ..., mergeNamespaceWithParent: bool | int = ..., mergeNamespaceWithRoot: bool | int = ..., moveNamespace: tuple[str, str] = ..., parent: str = ..., query: bool | int = ..., recurse: bool | int = ..., relativeNames: bool | int = ..., removeNamespace: str = ..., rename: tuple[str, str] = ..., setNamespace: str = ..., validateName: str = ...) -> Any: ...
def namespaceInfo(*args, absoluteName: bool | int = ..., baseName: bool | int = ..., currentNamespace: bool | int = ..., dagPath: bool | int = ..., fullName: bool | int = ..., internal: bool | int = ..., isRootNamespace: bool | int = ..., listNamespace: bool | int = ..., listOnlyDependencyNodes: bool | int = ..., listOnlyNamespaces: bool | int = ..., parent: bool | int = ..., recurse: bool | int = ..., shortName: bool | int = ...) -> Any: ...

@overload
def newton(*args, edit: Literal[True], attenuation: float = ..., magnitude: float = ..., maxDistance: float = ..., minDistance: float = ..., name: str = ..., perVertex: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., torusSectionRadius: float = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def newton(*args, attenuation: bool | int | float = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., minDistance: bool | int | float = ..., name: bool | int | str = ..., perVertex: bool | int = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., torusSectionRadius: bool | int | float = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...
def nodeCast(*args, copyDynamicAttrs: bool | int = ..., disableAPICallbacks: bool | int = ..., disableScriptJobCallbacks: bool | int = ..., disconnectUnmatchedAttrs: bool | int = ..., force: bool | int = ..., swapNames: bool | int = ..., swapValues: bool | int = ...) -> Any: ...
def nodeGrapher(*args) -> Any: ...

@overload
def nodeIconButton(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., command: str | Callable = ..., disabledImage: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., imageOverlayLabel: str = ..., label: str = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., overlayLabelBackColor: tuple[float, float, float, float] = ..., overlayLabelColor: tuple[float, float, float] = ..., preventOverride: bool | int = ..., rotation: float = ..., statusBarMessage: str = ..., style: str = ..., useAlpha: bool | int = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def nodeIconButton(*args, align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., command: bool | int | str | Callable = ..., defineTemplate: str = ..., disabledImage: bool | int | str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., imageOverlayLabel: bool | int | str = ..., isObscured: bool | int = ..., label: bool | int | str = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., overlayLabelBackColor: bool | int | tuple[float, float, float, float] = ..., overlayLabelColor: bool | int | tuple[float, float, float] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rotation: bool | int | float = ..., statusBarMessage: str = ..., style: bool | int | str = ..., useAlpha: bool | int = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def nodeOutliner(*args, edit: Literal[True], addCommand: str | Callable = ..., addObject: str = ..., annotation: str = ..., attrAlphaOrder: str = ..., backgroundColor: tuple[float, float, float] = ..., connectivity: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., filter: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., longNames: bool | int = ..., manage: bool | int = ..., menuCommand: str | Callable = ..., menuMultiOption: bool | int = ..., multiSelect: bool | int = ..., niceNames: bool | int = ..., noBackground: bool | int = ..., noConnectivity: bool | int = ..., pressHighlightsUnconnected: bool | int = ..., preventOverride: bool | int = ..., redraw: bool | int = ..., redrawRow: bool | int = ..., remove: str | list[str] = ..., removeAll: bool | int = ..., replace: str = ..., selectCommand: str | Callable = ..., showConnectedOnly: bool | int = ..., showHidden: bool | int = ..., showInputs: bool | int = ..., showNonConnectable: bool | int = ..., showNonKeyable: bool | int = ..., showOutputs: bool | int = ..., showPublished: bool | int = ..., showReadOnly: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def nodeOutliner(*args, addCommand: bool | int | str | Callable = ..., addObject: str = ..., annotation: bool | int | str = ..., attrAlphaOrder: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., connectivity: bool | int | str = ..., currentSelection: bool | int = ..., dc: callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., filter: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., lastClickedNode: bool | int = ..., lastMenuChoice: bool | int | str = ..., longNames: bool | int = ..., manage: bool | int = ..., menuCommand: str | Callable = ..., menuMultiOption: bool | int = ..., multiSelect: bool | int = ..., niceNames: bool | int = ..., noBackground: bool | int = ..., noConnectivity: bool | int = ..., nodesDisplayed: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., pressHighlightsUnconnected: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., redraw: bool | int = ..., redrawRow: bool | int = ..., remove: str | list[str] = ..., removeAll: bool | int = ..., replace: bool | int | str = ..., selectCommand: bool | int | str | Callable = ..., showConnectedOnly: bool | int = ..., showHidden: bool | int = ..., showInputs: bool | int = ..., showNonConnectable: bool | int = ..., showNonKeyable: bool | int = ..., showOutputs: bool | int = ..., showPublished: bool | int = ..., showReadOnly: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...  # type: ignore[valid-type]
def nodePreset(*args, attributes: str = ..., custom: str = ..., delete: tuple[str, str] = ..., exists: tuple[str, str] = ..., isValidName: str = ..., list: str = ..., load: tuple[str, str] = ..., save: tuple[str, str] = ...) -> Any: ...

@overload
def nodeTreeLister(*args, edit: Literal[True], addFavorite: str | list[str] = ..., addItem: tuple[str, str, str | Callable] | list[tuple[str, str, str | Callable]] = ..., addVnnItem: tuple[str, str, str, str] | list[tuple[str, str, str, str]] = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., clearContents: bool | int = ..., collapsePath: str | list[str] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., executeItem: str = ..., expandPath: str | list[str] = ..., expandToDepth: int = ..., favoritesCallback: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., nodeLibrary: str = ..., preventOverride: bool | int = ..., refreshCommand: str | Callable = ..., removeFavorite: str | list[str] = ..., removeItem: str | list[str] = ..., selectPath: str | list[str] = ..., setDisplayName: tuple[str, str] | list[tuple[str, str]] = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def nodeTreeLister(*args, addFavorite: str | list[str] = ..., addItem: tuple[str, str, str | Callable] | list[tuple[str, str, str | Callable]] = ..., addVnnItem: tuple[str, str, str, str] | list[tuple[str, str, str, str]] = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., clearContents: bool | int = ..., collapsePath: str | list[str] = ..., defineTemplate: str = ..., displayName: bool | int | str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., executeItem: str = ..., exists: bool | int = ..., expandPath: str | list[str] = ..., expandToDepth: int = ..., favoritesCallback: str | Callable = ..., favoritesList: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., itemScript: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., nodeLibrary: bool | int | str = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., refreshCommand: bool | int | str | Callable = ..., removeFavorite: str | list[str] = ..., removeItem: str | list[str] = ..., resultsPathUnderCursor: bool | int = ..., selectPath: str | list[str] = ..., setDisplayName: tuple[str, str] | list[tuple[str, str]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., vnnString: bool | int = ..., width: int = ...) -> Any: ...
def nodeType(*args, apiType: bool | int = ..., derived: bool | int = ..., inherited: bool | int = ..., isTypeName: bool | int = ..., ufeRuntimeName: bool | int = ...) -> str: ...

@overload
def nonLinear(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., split: bool | int = ...) -> None: ...

@overload
def nonLinear(*args, after: bool | int = ..., afterReference: bool | int = ..., autoParent: bool | int = ..., before: bool | int = ..., commonParent: bool | int = ..., components: bool | int = ..., defaultScale: bool | int = ..., deformerTools: bool | int = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., selectedComponents: bool | int = ..., split: bool | int = ..., type: str = ..., useComponentTags: bool | int = ...) -> Any: ...
def nop(*args) -> Any: ...

@overload
def normalConstraint(*args, edit: Literal[True], aimVector: tuple[float, float, float] = ..., layer: str = ..., name: str = ..., remove: bool | int = ..., upVector: tuple[float, float, float] = ..., weight: float = ..., worldUpObject: str = ..., worldUpType: str = ..., worldUpVector: tuple[float, float, float] = ...) -> None: ...

@overload
def normalConstraint(*args, aimVector: bool | int | tuple[float, float, float] = ..., layer: str = ..., name: bool | int | str = ..., query: bool | int = ..., remove: bool | int = ..., targetList: bool | int = ..., upVector: bool | int | tuple[float, float, float] = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ..., worldUpObject: bool | int | str = ..., worldUpType: bool | int | str = ..., worldUpVector: bool | int | tuple[float, float, float] = ...) -> Any: ...
def notifyDecorator(*args, **keywords): ...
def notifyPostRedo(*args, **keywords): ...
def notifyPostUndo(*args, **keywords): ...
def nucleusDisplayDynamicConstraintNodes(*args, **keywords): ...
def nucleusDisplayMaterialNodes(*args, **keywords): ...
def nucleusDisplayNComponentNodes(*args, **keywords): ...
def nucleusDisplayOtherNodes(*args, **keywords): ...
def nucleusDisplayTextureNodes(*args, **keywords): ...
def nucleusDisplayTransformNodes(*args, **keywords): ...
def nucleusGetEffectsAsset(*args, **keywords): ...
def nucleusGetnClothExample(*args, **keywords): ...
def nucleusGetnParticleExample(*args, **keywords): ...

@overload
def nurbsBoolean(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., operation: int = ..., tolerance: float = ...) -> None: ...

@overload
def nurbsBoolean(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., nsrfsInFirstShell: int = ..., object: bool | int = ..., operation: int = ..., query: bool | int = ..., smartConnection: bool | int = ..., tolerance: bool | int | float = ...) -> Any: ...
def nurbsCopyUVSet(*args, edit: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def nurbsCube(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., degree: int = ..., frozen: bool | int = ..., heightRatio: float = ..., lengthRatio: float = ..., nodeState: int = ..., patchesU: int = ..., patchesV: int = ..., pivot: tuple[float, float, float] = ..., width: float = ...) -> None: ...

@overload
def nurbsCube(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., frozen: bool | int = ..., heightRatio: bool | int | float = ..., lengthRatio: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., patchesU: int = ..., patchesV: int = ..., pivot: bool | int | tuple[float, float, float] = ..., polygon: int = ..., query: bool | int = ..., width: bool | int | float = ...) -> Any: ...
def nurbsCurveRebuildPref(*args, degree: int = ..., endKnots: int = ..., fitRebuild: int = ..., keepControlPoints: bool | int = ..., keepEndPoints: bool | int = ..., keepRange: int = ..., keepTangents: bool | int = ..., query: bool | int = ..., rebuildType: int = ..., smartSurfaceCurve: bool | int = ..., spans: int = ..., tolerance: float = ...) -> Any: ...
def nurbsCurveToBezier(*args) -> Any: ...
def nurbsEditUV(*args, angle: bool | int | float = ..., pivotU: bool | int | float = ..., pivotV: bool | int | float = ..., query: bool | int = ..., relative: bool | int = ..., rotateRatio: bool | int | float = ..., rotation: bool | int = ..., scale: bool | int = ..., scaleU: bool | int | float = ..., scaleV: bool | int | float = ..., uValue: bool | int | float = ..., vValue: bool | int | float = ...) -> Any: ...

@overload
def nurbsPlane(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., degree: int = ..., frozen: bool | int = ..., lengthRatio: float = ..., nodeState: int = ..., patchesU: int = ..., patchesV: int = ..., pivot: tuple[float, float, float] = ..., width: float = ...) -> None: ...

@overload
def nurbsPlane(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., frozen: bool | int = ..., lengthRatio: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., patchesU: int = ..., patchesV: int = ..., pivot: bool | int | tuple[float, float, float] = ..., polygon: int = ..., query: bool | int = ..., width: bool | int | float = ...) -> Any: ...
def nurbsSelect(*args, borderSelection: bool | int = ..., bottomBorder: bool | int = ..., growSelection: int = ..., leftBorder: bool | int = ..., rightBorder: bool | int = ..., shrinkSelection: int = ..., topBorder: bool | int = ...) -> Any: ...

@overload
def nurbsSquare(*args, edit: Literal[True], caching: bool | int = ..., center: tuple[float, float, float] = ..., centerX: float = ..., centerY: float = ..., centerZ: float = ..., degree: int = ..., frozen: bool | int = ..., nodeState: int = ..., normal: tuple[float, float, float] = ..., normalX: float = ..., normalY: float = ..., normalZ: float = ..., sideLength1: float = ..., sideLength2: float = ..., spansPerSide: int = ...) -> None: ...

@overload
def nurbsSquare(*args, caching: bool | int = ..., center: bool | int | tuple[float, float, float] = ..., centerX: bool | int | float = ..., centerY: bool | int | float = ..., centerZ: bool | int | float = ..., constructionHistory: bool | int = ..., degree: int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., normal: bool | int | tuple[float, float, float] = ..., normalX: bool | int | float = ..., normalY: bool | int | float = ..., normalZ: bool | int | float = ..., object: bool | int = ..., query: bool | int = ..., sideLength1: bool | int | float = ..., sideLength2: bool | int | float = ..., spansPerSide: int = ...) -> Any: ...

@overload
def nurbsToPoly(*args, edit: Literal[True], caching: bool | int = ..., curvatureTolerance: int = ..., explicitTessellationAttributes: bool | int = ..., nodeState: int = ..., smoothEdge: bool | int = ..., smoothEdgeRatio: float = ..., uDivisionsFactor: float = ..., vDivisionsFactor: float = ...) -> None: ...

@overload
def nurbsToPoly(*args, caching: bool | int = ..., chordHeight: float = ..., chordHeightRatio: float = ..., constructionHistory: bool | int = ..., curvatureTolerance: int = ..., delta: float = ..., edgeSwap: bool | int = ..., explicitTessellationAttributes: bool | int = ..., format: int = ..., fractionalTolerance: float = ..., frozen: bool | int = ..., matchNormalDir: bool | int = ..., matchRenderTessellation: bool | int = ..., minEdgeLength: float = ..., name: str = ..., nodeState: int = ..., normalizeTrimmedUVRange: bool | int = ..., object: bool | int = ..., polygonCount: int = ..., polygonType: int = ..., query: bool | int = ..., smoothEdge: bool | int = ..., smoothEdgeRatio: bool | int | float = ..., uDivisionsFactor: bool | int | float = ..., uNumber: int = ..., uType: int = ..., useChordHeight: bool | int = ..., useChordHeightRatio: bool | int = ..., useSurfaceShader: bool | int = ..., vDivisionsFactor: bool | int | float = ..., vNumber: int = ..., vType: int = ...) -> Any: ...
def nurbsToPolygonsPref(*args, chordHeight: bool | int | float = ..., chordHeightRatio: bool | int | float = ..., delta3D: bool | int | float = ..., edgeSwap: bool | int = ..., format: int = ..., fraction: bool | int | float = ..., matchRenderTessellation: int = ..., merge: int = ..., mergeTolerance: bool | int | float = ..., minEdgeLen: bool | int | float = ..., polyCount: int = ..., polyType: int = ..., query: bool | int = ..., uNumber: int = ..., uType: int = ..., useChordHeight: bool | int = ..., useChordHeightRatio: bool | int = ..., vNumber: int = ..., vType: int = ...) -> Any: ...

@overload
def nurbsToSubdiv(*args, edit: Literal[True], addUnderTransform: bool | int = ..., caching: bool | int = ..., collapsePoles: bool | int = ..., matchPeriodic: bool | int = ..., maxPolyCount: int = ..., nodeState: int = ..., reverseNormal: bool | int = ...) -> None: ...

@overload
def nurbsToSubdiv(*args, addUnderTransform: bool | int = ..., caching: bool | int = ..., collapsePoles: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., matchPeriodic: bool | int = ..., maxPolyCount: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., reverseNormal: bool | int = ...) -> Any: ...
def nurbsToSubdivPref(*args, bridge: int = ..., capType: int = ..., collapsePoles: bool | int = ..., matchPeriodic: bool | int = ..., maxPolyCount: int = ..., offset: bool | int | float = ..., query: bool | int = ..., reverseNormal: bool | int = ..., solidType: int = ..., trans00: bool | int | float = ..., trans01: bool | int | float = ..., trans02: bool | int | float = ..., trans10: bool | int | float = ..., trans11: bool | int | float = ..., trans12: bool | int | float = ..., trans20: bool | int | float = ..., trans21: bool | int | float = ..., trans22: bool | int | float = ..., trans30: bool | int | float = ..., trans31: bool | int | float = ..., trans32: bool | int | float = ...) -> Any: ...

@overload
def nurbsUVSet(*args, edit: Literal[True], create: bool | int = ..., useExplicit: bool | int = ...) -> None: ...

@overload
def nurbsUVSet(*args, create: bool | int = ..., query: bool | int = ..., useExplicit: bool | int = ...) -> Any: ...
def objExists(*args) -> bool: ...
def objectCenter(*args, gl: bool | int = ..., local: bool | int = ..., x: bool | int = ..., y: bool | int = ..., z: bool | int = ...) -> Any: ...
def objectType(*args, convertTag: str = ..., isAType: str = ..., isType: str = ..., tagFromType: str = ..., typeFromTag: int = ..., typeTag: bool | int = ...) -> Any: ...
def objectTypeUI(*args, isType: str = ..., listAll: bool | int = ..., superClasses: bool | int = ...) -> Any: ...

@overload
def offsetCurve(*args, edit: Literal[True], caching: bool | int = ..., connectBreaks: int = ..., cutLoop: bool | int = ..., cutRadius: float = ..., distance: float = ..., nodeState: int = ..., normal: tuple[float, float, float] = ..., reparameterize: bool | int = ..., stitch: bool | int = ..., subdivisionDensity: int = ..., tolerance: float = ..., useGivenNormal: bool | int = ...) -> None: ...

@overload
def offsetCurve(*args, caching: bool | int = ..., connectBreaks: int = ..., constructionHistory: bool | int = ..., cutLoop: bool | int = ..., cutRadius: bool | int | float = ..., distance: bool | int | float = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., normal: bool | int | tuple[float, float, float] = ..., object: bool | int = ..., query: bool | int = ..., range: bool | int = ..., reparameterize: bool | int = ..., stitch: bool | int = ..., subdivisionDensity: int = ..., tolerance: bool | int | float = ..., useGivenNormal: bool | int = ...) -> Any: ...

@overload
def offsetCurveOnSurface(*args, edit: Literal[True], caching: bool | int = ..., checkPoints: int = ..., connectBreaks: int = ..., cutLoop: bool | int = ..., distance: float = ..., nodeState: int = ..., stitch: bool | int = ..., subdivisionDensity: int = ..., tolerance: float = ...) -> None: ...

@overload
def offsetCurveOnSurface(*args, caching: bool | int = ..., checkPoints: int = ..., connectBreaks: int = ..., constructionHistory: bool | int = ..., cutLoop: bool | int = ..., distance: bool | int | float = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., range: bool | int = ..., stitch: bool | int = ..., subdivisionDensity: int = ..., tolerance: bool | int | float = ...) -> Any: ...

@overload
def offsetSurface(*args, edit: Literal[True], caching: bool | int = ..., distance: float = ..., method: int = ..., nodeState: int = ...) -> None: ...

@overload
def offsetSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., distance: bool | int | float = ..., frozen: bool | int = ..., method: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ...) -> Any: ...
def ogs(*args, deviceInformation: bool | int = ..., disposeReleasableTextures: bool | int = ..., dumpTexture: str = ..., enableHardwareInstancing: bool | int = ..., fragmentEditor: str = ..., fragmentXML: str = ..., gpuMemoryTotal: int = ..., gpuMemoryUsed: bool | int = ..., isLegacyViewportEnabled: bool | int = ..., isRemoteGLSessionEnabled: bool | int = ..., isWinRemoteSession: bool | int = ..., pause: bool | int = ..., query: bool | int = ..., rebakeTextures: bool | int = ..., regenerateUVTilePreview: str = ..., reloadTextures: bool | int = ..., reset: bool | int = ..., shaderSource: bool | int | str = ..., toggleTexturePaging: bool | int = ..., traceRenderPipeline: bool | int = ...) -> Any: ...

@overload
def ogsRender(*args, edit: Literal[True], activeMultisampleType: str = ..., activeRenderOverride: str = ..., activeRenderTargetFormat: str = ..., camera: str = ..., currentFrame: bool | int = ..., currentView: bool | int = ..., enableFloatingPointRenderTarget: bool | int = ..., enableMultisample: bool | int = ..., frame: float = ..., height: int = ..., layer: str = ..., noRenderView: bool | int = ..., width: int = ...) -> None: ...

@overload
def ogsRender(*args, activeMultisampleType: bool | int | str = ..., activeRenderOverride: bool | int | str = ..., activeRenderTargetFormat: bool | int | str = ..., availableFloatingPointTargetFormat: bool | int = ..., availableMultisampleType: bool | int = ..., availableRenderOverrides: bool | int = ..., camera: bool | int | str = ..., currentFrame: bool | int = ..., currentView: bool | int = ..., enableFloatingPointRenderTarget: bool | int = ..., enableMultisample: bool | int = ..., frame: float = ..., height: int = ..., layer: bool | int | str = ..., noRenderView: bool | int = ..., query: bool | int = ..., width: int = ...) -> Any: ...
def ogsdebug(*args, count: int = ..., debug: str = ..., timing: str = ..., verbose: bool | int = ...) -> Any: ...
def openCLInfo(*args, limitMinimumVerts: bool | int = ..., minVertexBuffer: int = ..., query: bool | int = ..., supportsDoublePrecision: bool | int = ..., valid: bool | int = ...) -> Any: ...
def openGLExtension(*args, extension: str = ..., renderer: bool | int = ..., vendor: bool | int = ..., version: bool | int = ...) -> Any: ...

@overload
def openMayaPref(*args, edit: Literal[True], errlog: bool | int = ..., lazyLoad: bool | int = ..., oldPluginWarning: bool | int = ...) -> None: ...

@overload
def openMayaPref(*args, errlog: bool | int = ..., lazyLoad: bool | int = ..., oldPluginWarning: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def optionMenu(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., beforeShowPopup: str | Callable = ..., changeCommand: str | Callable = ..., deleteAllItems: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., maxVisibleItems: int = ..., noBackground: bool | int = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., preventOverride: bool | int = ..., select: int = ..., statusBarMessage: str = ..., value: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def optionMenu(*args, alwaysCallChangeCommand: bool | int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., beforeShowPopup: str | Callable = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., deleteAllItems: bool | int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., itemListLong: bool | int = ..., itemListShort: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., maxVisibleItems: int = ..., noBackground: bool | int = ..., numberOfItems: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., select: int = ..., statusBarMessage: str = ..., useTemplate: str = ..., value: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def optionMenuGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., deleteAllItems: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraLabel: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., select: int = ..., statusBarMessage: str = ..., value: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def optionMenuGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., deleteAllItems: bool | int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraLabel: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., itemListLong: bool | int = ..., itemListShort: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfItems: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., select: int = ..., statusBarMessage: str = ..., useTemplate: str = ..., value: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def optionVar(*args, arraySize: str = ..., category: str = ..., clearArray: str | list[str] = ..., clearStash: str | list[str] = ..., default: bool | int = ..., exists: str = ..., floatArray: str | list[str] = ..., floatValue: tuple[str, float] | list[tuple[str, float]] = ..., floatValue2: tuple[str, float, float] | list[tuple[str, float, float]] = ..., floatValue3: tuple[str, float, float, float] | list[tuple[str, float, float, float]] = ..., floatValue4: tuple[str, float, float, float, float] | list[tuple[str, float, float, float, float]] = ..., floatValueAppend: tuple[str, float] | list[tuple[str, float]] = ..., init: bool | int = ..., intArray: str | list[str] = ..., intValue: tuple[str, int] | list[tuple[str, int]] = ..., intValue2: tuple[str, int, int] | list[tuple[str, int, int]] = ..., intValue3: tuple[str, int, int, int] | list[tuple[str, int, int, int]] = ..., intValue4: tuple[str, int, int, int, int] | list[tuple[str, int, int, int, int]] = ..., intValueAppend: tuple[str, int] | list[tuple[str, int]] = ..., list: bool | int = ..., listCategories: bool | int = ..., listModified: bool | int = ..., prefFile: bool | int | str = ..., query: str = ..., remove: str | list[str] = ..., removeFromArray: tuple[str, int] | list[tuple[str, int]] = ..., stash: str | list[str] = ..., stringArray: str | list[str] = ..., stringValue: tuple[str, str] | list[tuple[str, str]] = ..., stringValueAppend: tuple[str, str] | list[tuple[str, str]] = ..., transient: bool | int = ..., unstash: str | list[str] = ..., version: int = ...) -> Any: ...
def orbit(*args, horizontalAngle: float = ..., pivotPoint: tuple[float, float, float] = ..., rotationAngles: tuple[float, float] = ..., verticalAngle: float = ...) -> Any: ...

@overload
def orbitCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., localOrbit: bool | int = ..., orbitScale: float = ...) -> None: ...

@overload
def orbitCtx(*args, alternateContext: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., localOrbit: bool | int = ..., name: str = ..., orbitScale: bool | int | float = ..., query: bool | int = ..., toolName: bool | int | str = ...) -> Any: ...

@overload
def orientConstraint(*args, edit: Literal[True], createCache: tuple[float, float] = ..., deleteCache: bool | int = ..., layer: str = ..., name: str = ..., offset: tuple[float, float, float] = ..., remove: bool | int = ..., skip: str | list[str] = ..., weight: float = ...) -> None: ...

@overload
def orientConstraint(*args, createCache: tuple[float, float] = ..., deleteCache: bool | int = ..., layer: str = ..., maintainOffset: bool | int = ..., name: bool | int | str = ..., offset: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., remove: bool | int = ..., skip: str | list[str] = ..., targetList: bool | int = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ...) -> Any: ...

@overload
def outlinerEditor(*args, edit: Literal[True], allowMultiSelection: bool | int = ..., alwaysToggleSelect: bool | int = ..., animLayerFilterOptions: str = ..., attrAlphaOrder: str = ..., attrFilter: str = ..., autoExpand: bool | int = ..., autoExpandAllAnimatedShapes: bool | int = ..., autoExpandAnimatedShapes: bool | int = ..., autoExpandLayers: bool | int = ..., autoSelectNewObjects: bool | int = ..., containersIgnoreFilters: bool | int = ..., directSelect: bool | int = ..., displayMode: str = ..., doNotSelectNewObjects: bool | int = ..., docTag: str = ..., dropIsParent: bool | int = ..., editAttrName: bool | int = ..., expandAllAttributes: bool | int = ..., expandAllItems: bool | int = ..., expandAllSelectedItems: bool | int = ..., expandAttribute: bool | int = ..., expandConnections: bool | int = ..., expandObjects: bool | int = ..., filter: str = ..., forceMainConnection: str = ..., highlightActive: bool | int = ..., highlightConnection: str = ..., highlightSecondary: bool | int = ..., ignoreDagHierarchy: bool | int = ..., ignoreHiddenAttribute: bool | int = ..., ignoreOutlinerColor: bool | int = ..., lockMainConnection: bool | int = ..., longNames: bool | int = ..., mainListConnection: str = ..., mapMotionTrails: bool | int = ..., masterOutliner: str = ..., niceNames: bool | int = ..., organizeByClip: bool | int = ..., organizeByLayer: bool | int = ..., parent: str = ..., pinPlug: str = ..., refresh: bool | int = ..., removeFromCurrentSet: int = ..., renameItem: int = ..., renameSelectedItem: bool | int = ..., renderFilterIndex: int = ..., renderFilterVisible: bool | int = ..., selectCommand: str | Callable = ..., selectionConnection: str = ..., selectionOrder: str = ..., setFilter: str = ..., setsIgnoreFilters: bool | int = ..., showAnimCurvesOnly: bool | int = ..., showAnimLayerWeight: bool | int = ..., showAssets: bool | int = ..., showAssignedMaterials: bool | int = ..., showAttrValues: bool | int = ..., showAttributes: bool | int = ..., showCompounds: bool | int = ..., showConnected: bool | int = ..., showContainedOnly: bool | int = ..., showContainerContents: bool | int = ..., showDagOnly: bool | int = ..., showLeafs: bool | int = ..., showMuteInfo: bool | int = ..., showNamespace: bool | int = ..., showNumericAttrsOnly: bool | int = ..., showParentContainers: bool | int = ..., showPinIcons: bool | int = ..., showPublishedAsConnected: bool | int = ..., showReferenceMembers: bool | int = ..., showReferenceNodes: bool | int = ..., showSelected: bool | int = ..., showSetMembers: bool | int = ..., showShapes: bool | int = ..., showTextureNodesOnly: bool | int = ..., showTimeEditor: bool | int = ..., showUVAttrsOnly: bool | int = ..., showUfeItems: bool | int = ..., showUnitlessCurves: bool | int = ..., showUpstreamCurves: bool | int = ..., sortOrder: str = ..., transmitFilters: bool | int = ..., ufeFilter: tuple[str, str] = ..., ufeFilterValue: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., unpinPlug: str = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def outlinerEditor(*args, allowMultiSelection: bool | int = ..., alwaysToggleSelect: bool | int = ..., animLayerFilterOptions: bool | int | str = ..., attrAlphaOrder: bool | int | str = ..., attrFilter: bool | int | str = ..., autoExpand: bool | int = ..., autoExpandAllAnimatedShapes: bool | int = ..., autoExpandAnimatedShapes: bool | int = ..., autoExpandLayers: bool | int = ..., autoSelectNewObjects: bool | int = ..., containersIgnoreFilters: bool | int = ..., control: bool | int = ..., defineTemplate: str = ..., directSelect: bool | int = ..., displayMode: bool | int | str = ..., doNotSelectNewObjects: bool | int = ..., docTag: bool | int | str = ..., dropIsParent: bool | int = ..., editAttrName: bool | int = ..., exists: bool | int = ..., expandAllAttributes: bool | int = ..., expandAllItems: bool | int = ..., expandAllSelectedItems: bool | int = ..., expandAttribute: bool | int = ..., expandConnections: bool | int = ..., expandObjects: bool | int = ..., feedbackItemName: bool | int = ..., feedbackRowNumber: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., getCurrentSetOfItem: int = ..., highlightActive: bool | int = ..., highlightConnection: bool | int | str = ..., highlightSecondary: bool | int = ..., ignoreDagHierarchy: bool | int = ..., ignoreHiddenAttribute: bool | int = ..., ignoreOutlinerColor: bool | int = ..., isChildSelected: bool | int | str = ..., isSet: int = ..., isSetMember: int = ..., isUfeItem: int = ..., lockMainConnection: bool | int = ..., longNames: bool | int = ..., mainListConnection: bool | int | str = ..., mapMotionTrails: bool | int = ..., masterOutliner: bool | int | str = ..., niceNames: bool | int = ..., object: bool | int | str = ..., organizeByClip: bool | int = ..., organizeByLayer: bool | int = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., parentObject: bool | int = ..., pinPlug: bool | int | str = ..., query: bool | int = ..., refresh: bool | int = ..., removeFromCurrentSet: int = ..., renameItem: int = ..., renameSelectedItem: bool | int = ..., renderFilterActive: bool | int = ..., renderFilterIndex: int = ..., renderFilterVisible: bool | int = ..., selectCommand: bool | int | str | Callable = ..., selectionConnection: bool | int | str = ..., selectionOrder: str = ..., setFilter: bool | int | str = ..., setsIgnoreFilters: bool | int = ..., showAnimCurvesOnly: bool | int = ..., showAnimLayerWeight: bool | int = ..., showAssets: bool | int = ..., showAssignedMaterials: bool | int = ..., showAttrValues: bool | int = ..., showAttributes: bool | int = ..., showCompounds: bool | int = ..., showConnected: bool | int = ..., showContainedOnly: bool | int = ..., showContainerContents: bool | int = ..., showDagOnly: bool | int = ..., showLeafs: bool | int = ..., showMuteInfo: bool | int = ..., showNamespace: bool | int = ..., showNumericAttrsOnly: bool | int = ..., showParentContainers: bool | int = ..., showPinIcons: bool | int = ..., showPublishedAsConnected: bool | int = ..., showReferenceMembers: bool | int = ..., showReferenceNodes: bool | int = ..., showSelected: bool | int = ..., showSetMembers: bool | int = ..., showShapes: bool | int = ..., showTextureNodesOnly: bool | int = ..., showTimeEditor: bool | int = ..., showUVAttrsOnly: bool | int = ..., showUfeItems: bool | int = ..., showUnitlessCurves: bool | int = ..., showUpstreamCurves: bool | int = ..., sortCommand: callable = ..., sortOrder: bool | int | str = ..., stateString: bool | int = ..., transmitFilters: bool | int = ..., ufeFilter: bool | int | tuple[str, str] = ..., ufeFilterValue: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., unpinPlug: str = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...  # type: ignore[valid-type]

@overload
def outlinerPanel(*args, edit: Literal[True], copy: str = ..., createString: bool | int = ..., divider: int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def outlinerPanel(*args, control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., divider: int = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., outlinerEditor: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., query: bool | int = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...
def outputWindow(*args, query: bool | int = ..., show: bool | int = ...) -> Any: ...
def overrideModifier(*args, clear: bool | int = ..., press: str | list[str] = ..., release: str | list[str] = ...) -> Any: ...
def paint3d(*args) -> Any: ...
def paintEffectsDisplay(*args, meshDrawEnable: bool | int = ..., query: bool | int = ...) -> Any: ...
def pairBlend(*args, attribute: str | list[str] = ..., edit: bool | int = ..., input1: bool | int = ..., input2: bool | int = ..., node: str = ..., query: bool | int = ...) -> Any: ...

@overload
def palettePort(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., colorEditable: bool | int = ..., colorEdited: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., hsvValue: tuple[int, int, float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., redraw: bool | int = ..., rgbValue: tuple[int, float, float, float] = ..., setCurCell: int = ..., statusBarMessage: str = ..., transparent: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def palettePort(*args, actualTotal: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., colorEditable: bool | int = ..., colorEdited: str | Callable = ..., defineTemplate: str = ..., dimensions: bool | int | tuple[int, int] = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., hsvValue: bool | int | tuple[int, int, float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., redraw: bool | int = ..., rgbValue: bool | int | tuple[int, float, float, float] = ..., setCurCell: int = ..., statusBarMessage: str = ..., topDown: bool | int = ..., transparent: int = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def panZoom(*args, absolute: bool | int = ..., downDistance: float = ..., leftDistance: float = ..., relative: bool | int = ..., rightDistance: float = ..., upDistance: float = ..., zoomRatio: float = ...) -> Any: ...

@overload
def panZoomCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., zoomScale: float = ...) -> None: ...

@overload
def panZoomCtx(*args, alternateContext: bool | int = ..., buttonDown: bool | int = ..., buttonUp: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., panMode: bool | int = ..., query: bool | int = ..., toolName: bool | int | str = ..., zoomMode: bool | int = ..., zoomScale: bool | int | float = ...) -> Any: ...

@overload
def paneLayout(*args, edit: Literal[True], activeFrameThickness: int = ..., activePane: str = ..., activePaneIndex: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., configuration: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., paneSize: tuple[int, int, int] | list[tuple[int, int, int]] = ..., preventOverride: bool | int = ..., separatorMovedCommand: str | Callable = ..., separatorThickness: int = ..., setPane: tuple[str, int] | list[tuple[str, int]] = ..., staticHeightPane: int = ..., staticWidthPane: int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def paneLayout(*args, activeFrameThickness: int = ..., activePane: bool | int | str = ..., activePaneIndex: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., childArray: bool | int = ..., configuration: bool | int | str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., numberOfVisiblePanes: bool | int = ..., pane1: bool | int = ..., pane2: bool | int = ..., pane3: bool | int = ..., pane4: bool | int = ..., paneSize: bool | int | tuple[int, int, int] | list[tuple[int, int, int]] = ..., paneUnderPointer: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., separatorMovedCommand: str | Callable = ..., separatorThickness: int = ..., setPane: tuple[str, int] | list[tuple[str, int]] = ..., staticHeightPane: int = ..., staticWidthPane: int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def panel(*args, edit: Literal[True], copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def panel(*args, control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., query: bool | int = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def panelConfiguration(*args, edit: Literal[True], addPanel: tuple[bool | int, str, str, str, str] | list[tuple[bool | int, str, str, str, str]] = ..., configString: str = ..., image: str = ..., label: str = ..., removeAllPanels: bool | int = ..., removeLastPanel: bool | int = ..., replaceCreateString: tuple[int, str] = ..., replaceEditString: tuple[int, str] = ..., replaceFixedState: tuple[int, bool | int] = ..., replaceLabel: tuple[int, str] = ..., replacePanel: tuple[int, bool | int, str, str, str, str] = ..., replaceTypeString: tuple[int, str] = ..., sceneConfig: bool | int = ..., userCreated: bool | int = ...) -> None: ...

@overload
def panelConfiguration(*args, addPanel: tuple[bool | int, str, str, str, str] | list[tuple[bool | int, str, str, str, str]] = ..., configString: bool | int | str = ..., createStrings: bool | int = ..., defaultImage: bool | int | str = ..., defineTemplate: str = ..., editStrings: bool | int = ..., exists: bool | int = ..., image: bool | int | str = ..., isFixedState: bool | int = ..., label: bool | int | str = ..., labelStrings: bool | int = ..., numberOfPanels: bool | int = ..., query: bool | int = ..., removeAllPanels: bool | int = ..., removeLastPanel: bool | int = ..., replaceCreateString: tuple[int, str] = ..., replaceEditString: tuple[int, str] = ..., replaceFixedState: tuple[int, bool | int] = ..., replaceLabel: tuple[int, str] = ..., replacePanel: tuple[int, bool | int, str, str, str, str] = ..., replaceTypeString: tuple[int, str] = ..., sceneConfig: bool | int = ..., typeStrings: bool | int = ..., useTemplate: str = ..., userCreated: bool | int = ...) -> Any: ...

@overload
def panelHistory(*args, edit: Literal[True], back: bool | int = ..., clear: bool | int = ..., forward: bool | int = ..., historyDepth: int = ..., suspend: bool | int = ..., wrap: bool | int = ...) -> None: ...

@overload
def panelHistory(*args, back: bool | int = ..., clear: bool | int = ..., defineTemplate: str = ..., exists: bool | int = ..., forward: bool | int = ..., historyDepth: int = ..., isEmpty: bool | int = ..., query: bool | int = ..., suspend: bool | int = ..., targetPane: bool | int | str = ..., useTemplate: str = ..., wrap: bool | int = ...) -> Any: ...

@overload
def paramDimContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def paramDimContext(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def paramDimension(*args) -> Any: ...
def paramLocator(*args, edit: bool | int = ..., position: bool | int = ..., query: bool | int = ...) -> Any: ...
def parent(*args, absolute: bool | int = ..., addObject: bool | int = ..., noConnections: bool | int = ..., noInvScale: bool | int = ..., relative: bool | int = ..., removeObject: bool | int = ..., shape: bool | int = ..., world: bool | int = ...) -> Any: ...

@overload
def parentConstraint(*args, edit: Literal[True], createCache: tuple[float, float] = ..., deleteCache: bool | int = ..., layer: str = ..., name: str = ..., remove: bool | int = ..., weight: float = ...) -> None: ...

@overload
def parentConstraint(*args, createCache: tuple[float, float] = ..., decompRotationToChild: bool | int = ..., deleteCache: bool | int = ..., layer: str = ..., maintainOffset: bool | int = ..., name: bool | int | str = ..., query: bool | int = ..., remove: bool | int = ..., skipRotate: str | list[str] = ..., skipTranslate: str | list[str] = ..., targetList: bool | int = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ...) -> Any: ...

@overload
def particle(*args, edit: Literal[True], attribute: str = ..., cache: bool | int = ..., conserve: float = ..., floatValue: float = ..., inherit: float = ..., name: str = ..., order: int = ..., particleId: int = ..., shapeName: str = ..., vectorValue: tuple[float, float, float] = ...) -> None: ...

@overload
def particle(*args, attribute: bool | int | str = ..., cache: bool | int = ..., conserve: bool | int | float = ..., count: bool | int = ..., deleteCache: bool | int = ..., dynamicAttrList: bool | int = ..., floatValue: float = ..., gridSpacing: bool | int | float | list[float] = ..., inherit: bool | int | float = ..., jitterBasePoint: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., jitterRadius: bool | int | float | list[float] = ..., lowerLeft: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., name: bool | int | str = ..., numJitters: bool | int | int | list[int] = ..., order: int = ..., particleId: int = ..., perParticleDouble: bool | int = ..., perParticleVector: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., shapeName: bool | int | str = ..., upperRight: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., vectorValue: tuple[float, float, float] = ...) -> Any: ...
def particleExists(*args) -> Any: ...
def particleFill(*args, closePacking: bool | int = ..., doubleWalled: bool | int = ..., maxX: float = ..., maxY: float = ..., maxZ: float = ..., minX: float = ..., minY: float = ..., minZ: float = ..., particleDensity: float = ..., resolution: int = ...) -> Any: ...

@overload
def particleInstancer(*args, edit: Literal[True], addObject: bool | int = ..., aimAxis: str = ..., aimDirection: str = ..., aimPosition: str = ..., aimUpAxis: str = ..., aimWorldUp: str = ..., cycle: str = ..., cycleStartObject: str = ..., cycleStep: float = ..., cycleStepUnits: str = ..., levelOfDetail: str = ..., object: str | list[str] = ..., objectIndex: str = ..., particleAge: str = ..., position: str = ..., removeObject: bool | int = ..., rotation: str = ..., rotationOrder: str = ..., rotationType: str = ..., rotationUnits: str = ..., scale: str = ..., shear: str = ..., visibility: str = ...) -> None: ...

@overload
def particleInstancer(*args, addObject: bool | int = ..., aimAxis: bool | int | str = ..., aimDirection: bool | int | str = ..., aimPosition: bool | int | str = ..., aimUpAxis: bool | int | str = ..., aimWorldUp: bool | int | str = ..., attributeMapping: bool | int = ..., cycle: bool | int | str = ..., cycleStartObject: bool | int | str = ..., cycleStep: bool | int | float = ..., cycleStepUnits: bool | int | str = ..., index: int = ..., instanceId: bool | int | str = ..., levelOfDetail: bool | int | str = ..., name: bool | int | str = ..., object: bool | int | str | list[str] = ..., objectIndex: bool | int | str = ..., particleAge: bool | int | str = ..., position: bool | int | str = ..., query: bool | int = ..., removeObject: bool | int = ..., rotation: bool | int | str = ..., rotationOrder: bool | int | str = ..., rotationType: bool | int | str = ..., rotationUnits: bool | int | str = ..., scale: bool | int | str = ..., shear: bool | int | str = ..., visibility: bool | int | str = ...) -> Any: ...
def particleRenderInfo(*args, attrList: int = ..., attrListAll: bool | int = ..., name: int = ..., query: bool | int = ..., renderTypeCount: bool | int = ...) -> Any: ...
def partition(*args, addSet: str = ..., edit: bool | int = ..., name: str = ..., query: bool | int = ..., removeSet: str = ..., render: bool | int = ...) -> Any: ...
def pasteKey(*args, animLayer: str = ..., animation: str = ..., attribute: str | list[str] = ..., clipboard: str = ..., connect: bool | int = ..., copies: int = ..., edit: bool | int = ..., float: str | int | float = ..., floatOffset: float = ..., includeUpperBound: bool | int = ..., index: int = ..., matchByName: bool | int = ..., option: str = ..., query: bool | int = ..., time: str | tuple[float, float] | tuple[float] = ..., timeOffset: int | float = ..., valueOffset: float = ...) -> Any: ...

@overload
def pathAnimation(*args, edit: Literal[True], useNormal: bool | int = ..., worldUpObject: str = ..., worldUpType: str = ..., worldUpVector: tuple[float, float, float] = ...) -> None: ...

@overload
def pathAnimation(*args, bank: bool | int = ..., bankScale: bool | int | float = ..., bankThreshold: bool | int | float = ..., curve: bool | int | str = ..., endTimeU: bool | int | int | float | list[int | float] = ..., endU: bool | int | float = ..., follow: bool | int = ..., followAxis: bool | int | str = ..., fractionMode: bool | int = ..., inverseFront: bool | int = ..., inverseUp: bool | int = ..., name: bool | int | str = ..., query: bool | int = ..., startTimeU: bool | int | int | float | list[int | float] = ..., startU: bool | int | float = ..., upAxis: bool | int | str = ..., useNormal: bool | int = ..., worldUpObject: bool | int | str = ..., worldUpType: bool | int | str = ..., worldUpVector: bool | int | tuple[float, float, float] = ...) -> Any: ...
def pause(*args, seconds: int = ...) -> Any: ...
def perCameraVisibility(*args, camera: bool | int | str = ..., exclusive: bool | int = ..., hide: bool | int = ..., query: bool | int = ..., remove: bool | int = ..., removeAll: bool | int = ..., removeCamera: bool | int = ...) -> Any: ...
def percent(*args, addPercent: bool | int = ..., dropoffAxis: tuple[float, float, float] = ..., dropoffCurve: str = ..., dropoffDistance: float = ..., dropoffPosition: tuple[float, float, float] = ..., dropoffType: str = ..., multiplyPercent: bool | int = ..., query: bool | int = ..., value: bool | int | float = ...) -> Any: ...
def performanceOptions(*args, clusterResolution: bool | int | float = ..., disableStitch: bool | int | str = ..., disableTrimBoundaryDisplay: bool | int | str = ..., disableTrimDisplay: bool | int | str = ..., latticeResolution: bool | int | float = ..., passThroughBindSkinAndFlexors: bool | int | str = ..., passThroughBlendShape: bool | int | str = ..., passThroughCluster: bool | int | str = ..., passThroughDeltaMush: bool | int | str = ..., passThroughFlexors: bool | int | str = ..., passThroughLattice: bool | int | str = ..., passThroughMeshBoolean: bool | int | str = ..., passThroughPaintEffects: bool | int | str = ..., passThroughSculpt: bool | int | str = ..., passThroughWire: bool | int | str = ..., query: bool | int = ..., regionOfEffect: bool | int | str = ..., skipHierarchyTraversal: bool | int = ..., useClusterResolution: bool | int | str = ..., useLatticeResolution: bool | int | str = ...) -> Any: ...
def pfxstrokes(*args, filename: str = ..., postCallback: bool | int = ..., selected: bool | int = ...) -> Any: ...
def pickWalk(*args, direction: str = ..., recurse: bool | int = ..., type: str = ...) -> Any: ...

@overload
def picture(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., tile: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def picture(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., tile: bool | int = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def pixelMove(*args) -> Any: ...

@overload
def planarSrf(*args, edit: Literal[True], caching: bool | int = ..., degree: int = ..., keepOutside: bool | int = ..., nodeState: int = ..., tolerance: float = ...) -> None: ...

@overload
def planarSrf(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., frozen: bool | int = ..., keepOutside: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., range: bool | int = ..., tolerance: bool | int | float = ...) -> Any: ...
def plane(*args, length: float = ..., name: str = ..., position: tuple[float, float, float] = ..., rotation: tuple[float, float, float] = ..., size: float = ..., width: float = ...) -> Any: ...
def play(*args, forward: bool | int = ..., playSound: bool | int = ..., query: bool | int = ..., record: bool | int = ..., sound: bool | int | str = ..., state: bool | int = ..., wait: bool | int = ...) -> Any: ...

@overload
def playbackOptions(*args, edit: Literal[True], animationEndTime: int | float = ..., animationStartTime: int | float = ..., by: float = ..., loop: str = ..., maxPlaybackSpeed: float = ..., maxTime: int | float = ..., minTime: int | float = ..., playbackSpeed: float = ..., selectionEndTime: int | float = ..., selectionStartTime: int | float = ..., selectionVisible: bool | int = ..., view: str = ...) -> None: ...

@overload
def playbackOptions(*args, query: Literal[True], animationEndTime: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], animationStartTime: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], blockingAnim: Literal[True]) -> bool: ...

@overload
def playbackOptions(*args, query: Literal[True], by: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], framesPerSecond: Literal[True]) -> bool: ...

@overload
def playbackOptions(*args, query: Literal[True], loop: Literal[True]) -> str: ...

@overload
def playbackOptions(*args, query: Literal[True], maxPlaybackSpeed: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], maxTime: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], minTime: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], playbackSpeed: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], selectionEndTime: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], selectionStartTime: Literal[True]) -> float: ...

@overload
def playbackOptions(*args, query: Literal[True], selectionVisible: Literal[True]) -> bool: ...

@overload
def playbackOptions(*args, query: Literal[True], stepLoop: Literal[True]) -> bool: ...

@overload
def playbackOptions(*args, query: Literal[True], view: Literal[True]) -> str: ...

@overload
def playbackOptions(*args, animationEndTime: bool | int | int | float = ..., animationStartTime: bool | int | int | float = ..., blockingAnim: bool | int = ..., by: bool | int | float = ..., framesPerSecond: bool | int = ..., loop: bool | int | str = ..., maxPlaybackSpeed: bool | int | float = ..., maxTime: bool | int | int | float = ..., minTime: bool | int | int | float = ..., playbackSpeed: bool | int | float = ..., query: bool | int = ..., selectionEndTime: bool | int | int | float = ..., selectionStartTime: bool | int | int | float = ..., selectionVisible: bool | int = ..., stepLoop: bool | int = ..., view: bool | int | str = ...) -> Any: ...
def playblast(*args, activeEditor: bool | int = ..., cameraSetup: tuple[str, str] | list[tuple[str, str]] = ..., clearCache: bool | int = ..., codecOptions: bool | int = ..., combineSound: bool | int = ..., completeFilename: str = ..., compression: str = ..., editorPanelName: str = ..., endTime: int | float = ..., filename: str = ..., forceOverwrite: bool | int = ..., format: str = ..., frame: int | float | list[int | float] = ..., framePadding: int = ..., height: int = ..., indexFromZero: bool | int = ..., offScreen: bool | int = ..., offScreenViewportUpdate: bool | int = ..., options: bool | int = ..., percent: int = ..., quality: int = ..., query: bool | int = ..., rawFrameNumbers: bool | int = ..., replaceAudioOnly: bool | int = ..., replaceEndTime: int | float = ..., replaceFilename: str = ..., replaceStartTime: int | float = ..., saveDepth: bool | int = ..., sequenceTime: bool | int = ..., showOrnaments: bool | int = ..., sound: str = ..., startTime: int | float = ..., throwOnError: bool | int = ..., useTraxSounds: bool | int = ..., viewer: bool | int = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> Any: ...
def pluginDisplayFilter(*args, classification: bool | int | str = ..., deregister: bool | int = ..., exists: bool | int = ..., label: bool | int | str = ..., listFilters: bool | int = ..., query: bool | int = ..., register: bool | int = ...) -> Any: ...

@overload
def pluginInfo(*args, edit: Literal[True], autoload: bool | int = ..., remove: bool | int = ..., writeRequires: bool | int = ...) -> None: ...

@overload
def pluginInfo(*args, activeFile: bool | int = ..., allEvaluators: bool | int = ..., animCurveInterp: bool | int | str = ..., apiVersion: bool | int = ..., autoload: bool | int = ..., cacheFormat: bool | int = ..., changedCommand: str | Callable = ..., command: bool | int | str | list[str] = ..., constraintCommand: bool | int = ..., controlCommand: bool | int = ..., data: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., dependNode: bool | int | bool | int | list[bool | int] = ..., dependNodeByType: bool | int | str = ..., dependNodeId: bool | int | str = ..., device: bool | int = ..., dragAndDropBehavior: bool | int = ..., evaluator: bool | int = ..., iksolver: bool | int = ..., listPlugins: bool | int = ..., listPluginsPath: bool | int = ..., loadPluginPrefs: bool | int = ..., loaded: bool | int = ..., modelEditorCommand: bool | int = ..., name: bool | int | str = ..., path: bool | int | str = ..., pluginsInUse: bool | int = ..., query: bool | int = ..., referenceTranslators: bool | int = ..., registered: bool | int = ..., remove: bool | int = ..., renderer: bool | int = ..., savePluginPrefs: bool | int = ..., serviceDescriptions: bool | int = ..., settings: bool | int = ..., tool: bool | int | str | list[str] = ..., translator: bool | int = ..., unloadOk: bool | int = ..., userNamed: bool | int = ..., vendor: bool | int | str = ..., version: bool | int = ..., writeRequires: bool | int = ...) -> Any: ...

@overload
def pointConstraint(*args, edit: Literal[True], layer: str = ..., name: str = ..., offset: tuple[float, float, float] = ..., remove: bool | int = ..., skip: str | list[str] = ..., weight: float = ...) -> None: ...

@overload
def pointConstraint(*args, layer: str = ..., maintainOffset: bool | int = ..., name: bool | int | str = ..., offset: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., remove: bool | int = ..., skip: str | list[str] = ..., targetList: bool | int = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ...) -> Any: ...

@overload
def pointCurveConstraint(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., pointConstraintUVW: tuple[float, float, float] = ..., pointWeight: float = ...) -> None: ...

@overload
def pointCurveConstraint(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., pointConstraintUVW: bool | int | tuple[float, float, float] = ..., pointWeight: bool | int | float = ..., position: tuple[float, float, float] = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., weight: float = ...) -> Any: ...

@overload
def pointLight(*args, edit: Literal[True], decayRate: int = ..., discRadius: float = ..., exclusive: bool | int = ..., intensity: float = ..., name: str = ..., position: tuple[float, float, float] = ..., rgb: tuple[float, float, float] = ..., rotation: tuple[float, float, float] = ..., shadowColor: tuple[float, float, float] = ..., shadowDither: float = ..., shadowSamples: int = ..., softShadow: bool | int = ..., useRayTraceShadows: bool | int = ...) -> None: ...

@overload
def pointLight(*args, decayRate: int = ..., discRadius: bool | int | float = ..., exclusive: bool | int = ..., intensity: bool | int | float = ..., name: bool | int | str = ..., position: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., rgb: bool | int | tuple[float, float, float] = ..., rotation: bool | int | tuple[float, float, float] = ..., shadowColor: bool | int | tuple[float, float, float] = ..., shadowDither: bool | int | float = ..., shadowSamples: int = ..., softShadow: bool | int = ..., useRayTraceShadows: bool | int = ...) -> Any: ...

@overload
def pointOnCurve(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., parameter: float = ..., turnOnPercentage: bool | int = ...) -> None: ...

@overload
def pointOnCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., curvatureCenter: bool | int = ..., curvatureRadius: bool | int = ..., frozen: bool | int = ..., nodeState: int = ..., normal: bool | int = ..., normalizedNormal: bool | int = ..., normalizedTangent: bool | int = ..., parameter: bool | int | float = ..., position: bool | int = ..., query: bool | int = ..., tangent: bool | int = ..., turnOnPercentage: bool | int = ...) -> Any: ...

@overload
def pointOnPolyConstraint(*args, edit: Literal[True], layer: str = ..., name: str = ..., offset: tuple[float, float, float] = ..., remove: bool | int = ..., skip: str | list[str] = ..., weight: float = ...) -> None: ...

@overload
def pointOnPolyConstraint(*args, layer: str = ..., maintainOffset: bool | int = ..., name: bool | int | str = ..., offset: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., remove: bool | int = ..., skip: str | list[str] = ..., targetList: bool | int = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ...) -> Any: ...

@overload
def pointOnSurface(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., normal: bool | int = ..., normalizedNormal: bool | int = ..., normalizedTangentU: bool | int = ..., normalizedTangentV: bool | int = ..., parameterU: float = ..., parameterV: float = ..., position: bool | int = ..., tangentU: bool | int = ..., tangentV: bool | int = ..., turnOnPercentage: bool | int = ...) -> None: ...

@overload
def pointOnSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., nodeState: int = ..., normal: bool | int = ..., normalizedNormal: bool | int = ..., normalizedTangentU: bool | int = ..., normalizedTangentV: bool | int = ..., parameterU: bool | int | float = ..., parameterV: bool | int | float = ..., position: bool | int = ..., query: bool | int = ..., tangentU: bool | int = ..., tangentV: bool | int = ..., turnOnPercentage: bool | int = ...) -> Any: ...
def pointPosition(*args, local: bool | int = ..., world: bool | int = ...) -> Any: ...

@overload
def poleVectorConstraint(*args, edit: Literal[True], layer: str = ..., name: str = ..., remove: bool | int = ..., weight: float = ...) -> None: ...

@overload
def poleVectorConstraint(*args, layer: str = ..., name: bool | int | str = ..., query: bool | int = ..., remove: bool | int = ..., targetList: bool | int = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ...) -> Any: ...

@overload
def polyAppend(*args, edit: Literal[True], subdivision: int = ..., texture: int = ...) -> None: ...

@overload
def polyAppend(*args, append: tuple[float, float, float] | list[tuple[float, float, float]] = ..., constructionHistory: bool | int = ..., edge: int | list[int] = ..., hole: bool | int | list[bool | int] = ..., name: str = ..., point: tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., subdivision: int = ..., texture: int = ...) -> Any: ...

@overload
def polyAppendFacetCtx(*args, edit: Literal[True], append: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., maximumNumberOfPoints: int = ..., planarConstraint: bool | int = ..., rotate: float = ..., subdivision: int = ..., texture: int = ...) -> None: ...

@overload
def polyAppendFacetCtx(*args, append: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., isRotateAvailable: bool | int = ..., maximumNumberOfPoints: int = ..., planarConstraint: bool | int = ..., query: bool | int = ..., rotate: bool | int | float = ..., subdivision: int = ..., texture: int = ...) -> Any: ...

@overload
def polyAppendVertex(*args, edit: Literal[True], texture: int = ...) -> None: ...

@overload
def polyAppendVertex(*args, append: tuple[float, float, float] | list[tuple[float, float, float]] = ..., constructionHistory: bool | int = ..., hole: bool | int | list[bool | int] = ..., name: str = ..., point: tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., texture: int = ..., vertex: int | list[int] = ...) -> Any: ...

@overload
def polyAutoProjection(*args, edit: Literal[True], caching: bool | int = ..., layout: int = ..., layoutMethod: int = ..., nodeState: int = ..., optimize: int = ..., percentageSpace: float = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., planes: int = ..., projectBothDirections: bool | int = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., scale: tuple[float, float, float] = ..., scaleMode: int = ..., scaleX: float = ..., scaleY: float = ..., scaleZ: float = ..., skipIntersect: bool | int = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyAutoProjection(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., frozen: bool | int = ..., insertBeforeDeformers: bool | int = ..., layout: int = ..., layoutMethod: int = ..., name: str = ..., nodeState: int = ..., optimize: int = ..., percentageSpace: bool | int | float = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., planes: int = ..., projectBothDirections: bool | int = ..., query: bool | int = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., scale: bool | int | tuple[float, float, float] = ..., scaleMode: int = ..., scaleX: bool | int | float = ..., scaleY: bool | int | float = ..., scaleZ: bool | int | float = ..., skipIntersect: bool | int = ..., translate: bool | int | tuple[float, float, float] = ..., translateX: bool | int | float = ..., translateY: bool | int | float = ..., translateZ: bool | int | float = ..., useInputComp: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...
def polyAverageNormal(*args, allowZeroNormal: bool | int = ..., distance: float = ..., postnormalize: bool | int = ..., prenormalize: bool | int = ..., replaceNormalXYZ: tuple[float, float, float] = ...) -> Any: ...

@overload
def polyAverageVertex(*args, edit: Literal[True], caching: bool | int = ..., iterations: int = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyAverageVertex(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., iterations: int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyAxis(*args, edit: Literal[True], arrowType: int = ..., axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., frameType: int = ..., frozen: bool | int = ..., heightBaseline: float = ..., lengthX: float = ..., lengthY: float = ..., lengthZ: float = ..., nodeState: int = ..., radius: float = ..., rightHanded: bool | int = ..., scale: float = ..., subdivisionsAxis: int = ...) -> None: ...

@overload
def polyAxis(*args, arrowType: int = ..., axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., frameType: int = ..., frozen: bool | int = ..., heightBaseline: bool | int | float = ..., lengthX: bool | int | float = ..., lengthY: bool | int | float = ..., lengthZ: bool | int | float = ..., materialTemplate: str = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., rightHanded: bool | int = ..., scale: bool | int | float = ..., subdivisionsAxis: int = ...) -> Any: ...

@overload
def polyBevel(*args, edit: Literal[True], angleTolerance: float = ..., autoFit: bool | int = ..., caching: bool | int = ..., mergeVertexTolerance: float = ..., mergeVertices: bool | int = ..., miteringAngle: float = ..., nodeState: int = ..., offset: float = ..., offsetAsFraction: bool | int = ..., roundness: float = ..., segments: int = ..., smoothingAngle: float = ..., subdivideNgons: bool | int = ..., useLegacyBevelAlgorithm: bool | int = ..., uvAssignment: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyBevel(*args, angleTolerance: bool | int | float = ..., autoFit: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., fillNgons: bool | int = ..., fraction: float = ..., frozen: bool | int = ..., maya2015: bool | int = ..., mergeVertexTolerance: bool | int | float = ..., mergeVertices: bool | int = ..., miteringAngle: bool | int | float = ..., name: str = ..., nodeState: int = ..., offset: bool | int | float = ..., offsetAsFraction: bool | int = ..., query: bool | int = ..., roundness: bool | int | float = ..., segments: int = ..., smoothingAngle: bool | int | float = ..., subdivideNgons: bool | int = ..., useInputComp: bool | int = ..., useLegacyBevelAlgorithm: bool | int = ..., uvAssignment: int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyBevel3(*args, edit: Literal[True], angleTolerance: float = ..., autoFit: bool | int = ..., caching: bool | int = ..., chamfer: bool | int = ..., depth: float = ..., fillNgons: bool | int = ..., mergeVertexTolerance: float = ..., mergeVertices: bool | int = ..., miterAlong: int = ..., mitering: int = ..., miteringAngle: float = ..., nodeState: int = ..., offset: float = ..., offsetAsFraction: bool | int = ..., roundness: float = ..., segments: int = ..., smoothingAngle: float = ..., uvAssignment: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyBevel3(*args, angleTolerance: bool | int | float = ..., autoFit: bool | int = ..., caching: bool | int = ..., chamfer: bool | int = ..., constructionHistory: bool | int = ..., depth: bool | int | float = ..., fillNgons: bool | int = ..., filterAngle: float = ..., filterEdgesByAngle: bool | int = ..., filterHardEdges: bool | int = ..., forceParallel: bool | int = ..., fraction: float = ..., frozen: bool | int = ..., maya2015: bool | int = ..., maya2016SP3: bool | int = ..., maya2017Update1: bool | int = ..., mergeVertexTolerance: bool | int | float = ..., mergeVertices: bool | int = ..., miterAlong: int = ..., mitering: int = ..., miteringAngle: bool | int | float = ..., name: str = ..., nodeState: int = ..., offset: bool | int | float = ..., offsetAsFraction: bool | int = ..., query: bool | int = ..., roundness: bool | int | float = ..., segments: int = ..., smoothingAngle: bool | int | float = ..., subdivideNgons: bool | int = ..., useInputComp: bool | int = ..., uvAssignment: int = ..., worldSpace: bool | int = ...) -> Any: ...
def polyBevelCutback(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., edit: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., offset: float = ..., query: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyBlendColor(*args, edit: Literal[True], baseColorName: str = ..., blendFunc: int = ..., blendWeightA: float = ..., blendWeightB: float = ..., blendWeightC: float = ..., blendWeightD: float = ..., caching: bool | int = ..., dstColorName: str = ..., nodeState: int = ..., srcColorName: str = ...) -> None: ...

@overload
def polyBlendColor(*args, baseColorName: bool | int | str = ..., blendFunc: int = ..., blendWeightA: bool | int | float = ..., blendWeightB: bool | int | float = ..., blendWeightC: bool | int | float = ..., blendWeightD: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., dstColorName: bool | int | str = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., srcColorName: bool | int | str = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyBlindData(*args, edit: Literal[True], associationType: str = ..., binaryData: str | list[str] = ..., booleanData: bool | int | list[bool | int] = ..., delete: bool | int = ..., doubleData: float | list[float] = ..., int64Data: int | list[int] = ..., intData: int | list[int] = ..., longDataName: str | list[str] = ..., rescan: bool | int = ..., reset: bool | int = ..., shape: bool | int = ..., shortDataName: str | list[str] = ..., stringData: str | list[str] = ..., typeId: int = ...) -> None: ...

@overload
def polyBlindData(*args, associationType: str = ..., binaryData: str | list[str] = ..., booleanData: bool | int | list[bool | int] = ..., delete: bool | int = ..., doubleData: float | list[float] = ..., int64Data: int | list[int] = ..., intData: int | list[int] = ..., longDataName: str | list[str] = ..., rescan: bool | int = ..., reset: bool | int = ..., shape: bool | int = ..., shortDataName: str | list[str] = ..., stringData: str | list[str] = ..., typeId: int = ...) -> Any: ...

@overload
def polyBoolOp(*args, edit: Literal[True], caching: bool | int = ..., faceAreaThreshold: float = ..., mergeUVSets: int = ..., nodeState: int = ..., operation: int = ..., preserveColor: bool | int = ..., useThresholds: bool | int = ..., vertexDistanceThreshold: float = ...) -> None: ...

@overload
def polyBoolOp(*args, caching: bool | int = ..., classification: int = ..., constructionHistory: bool | int = ..., faceAreaThreshold: bool | int | float = ..., frozen: bool | int = ..., mergeUVSets: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., operation: int = ..., preserveColor: bool | int = ..., query: bool | int = ..., useThresholds: bool | int = ..., vertexDistanceThreshold: bool | int | float = ...) -> Any: ...

@overload
def polyBridgeEdge(*args, edit: Literal[True], bridgeOffset: int = ..., caching: bool | int = ..., curveType: int = ..., divisions: int = ..., nodeState: int = ..., smoothingAngle: float = ..., startVert1: int = ..., startVert2: int = ..., taper: float = ..., taperCurve_FloatValue: float = ..., taperCurve_Interp: int = ..., taperCurve_Position: float = ..., twist: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyBridgeEdge(*args, bridgeOffset: int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., curveType: int = ..., direction: int = ..., divisions: int = ..., frozen: bool | int = ..., inputCurve: str = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., reverse: bool | int = ..., smoothingAngle: bool | int | float = ..., sourceDirection: int = ..., startVert1: int = ..., startVert2: int = ..., taper: bool | int | float = ..., taperCurve_FloatValue: bool | int | float = ..., taperCurve_Interp: int = ..., taperCurve_Position: bool | int | float = ..., targetDirection: int = ..., twist: bool | int | float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyCBoolOp(*args, edit: Literal[True], caching: bool | int = ..., classification: int = ..., faceAreaThreshold: float = ..., mergeUVSets: int = ..., nodeState: int = ..., operation: int = ..., preserveColor: bool | int = ..., tagIntersection: bool | int = ..., useCarveBooleans: bool | int = ..., useThresholds: bool | int = ..., vertexDistanceThreshold: float = ...) -> None: ...

@overload
def polyCBoolOp(*args, caching: bool | int = ..., classification: int = ..., constructionHistory: bool | int = ..., edgeInterpolation: bool | int = ..., faceAreaThreshold: bool | int | float = ..., frozen: bool | int = ..., mergeUVSets: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., operation: int = ..., planarTolerance: float = ..., preserveColor: bool | int = ..., query: bool | int = ..., sortOutput: bool | int = ..., tagIntersection: bool | int = ..., useCarveBooleans: bool | int = ..., useThresholds: bool | int = ..., vertexDistanceThreshold: bool | int | float = ...) -> Any: ...
def polyCacheMonitor(*args, cacheValue: bool | int = ..., nodeName: str = ...) -> Any: ...
def polyCanBridgeEdge(*args) -> Any: ...
def polyCheck(*args, edge: bool | int = ..., face: bool | int = ..., faceOffset: bool | int = ..., openFile: str = ...) -> Any: ...

@overload
def polyChipOff(*args, edit: Literal[True], attraction: float = ..., caching: bool | int = ..., duplicate: bool | int = ..., gain: float | list[float] = ..., gravity: tuple[float, float, float] = ..., gravityX: float = ..., gravityY: float = ..., gravityZ: float = ..., keepFacesTogether: bool | int = ..., keepFacetTogether: bool | int = ..., localCenter: int = ..., localDirection: tuple[float, float, float] = ..., localDirectionX: float = ..., localDirectionY: float = ..., localDirectionZ: float = ..., localRotate: tuple[float, float, float] = ..., localRotateX: float = ..., localRotateY: float = ..., localRotateZ: float = ..., localScale: tuple[float, float, float] = ..., localScaleX: float = ..., localScaleY: float = ..., localScaleZ: float = ..., localTranslate: tuple[float, float, float] = ..., localTranslateX: float = ..., localTranslateY: float = ..., localTranslateZ: float = ..., magnX: float = ..., magnY: float = ..., magnZ: float = ..., magnet: tuple[float, float, float] = ..., nodeState: int = ..., offset: float = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., random: float = ..., scale: tuple[float, float, float] = ..., scaleX: float = ..., scaleY: float = ..., scaleZ: float = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., weight: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyChipOff(*args, attraction: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., duplicate: bool | int = ..., frozen: bool | int = ..., gain: bool | int | float | list[float] = ..., gravity: bool | int | tuple[float, float, float] = ..., gravityX: bool | int | float = ..., gravityY: bool | int | float = ..., gravityZ: bool | int | float = ..., keepFacesTogether: bool | int = ..., keepFacetTogether: bool | int = ..., localCenter: int = ..., localDirection: bool | int | tuple[float, float, float] = ..., localDirectionX: bool | int | float = ..., localDirectionY: bool | int | float = ..., localDirectionZ: bool | int | float = ..., localRotate: bool | int | tuple[float, float, float] = ..., localRotateX: bool | int | float = ..., localRotateY: bool | int | float = ..., localRotateZ: bool | int | float = ..., localScale: bool | int | tuple[float, float, float] = ..., localScaleX: bool | int | float = ..., localScaleY: bool | int | float = ..., localScaleZ: bool | int | float = ..., localTranslate: bool | int | tuple[float, float, float] = ..., localTranslateX: bool | int | float = ..., localTranslateY: bool | int | float = ..., localTranslateZ: bool | int | float = ..., magnX: bool | int | float = ..., magnY: bool | int | float = ..., magnZ: bool | int | float = ..., magnet: bool | int | tuple[float, float, float] = ..., name: str = ..., nodeState: int = ..., offset: bool | int | float = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., query: bool | int = ..., random: bool | int | float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., scale: bool | int | tuple[float, float, float] = ..., scaleX: bool | int | float = ..., scaleY: bool | int | float = ..., scaleZ: bool | int | float = ..., translate: bool | int | tuple[float, float, float] = ..., translateX: bool | int | float = ..., translateY: bool | int | float = ..., translateZ: bool | int | float = ..., useInputComp: bool | int = ..., weight: bool | int | float = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyCircularize(*args, edit: Literal[True], alignment: int = ..., caching: bool | int = ..., evenlyDistribute: bool | int = ..., nodeState: int = ..., normalOrientation: int = ..., radialOffset: float = ..., smoothingAngle: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyCircularize(*args, alignment: int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., createCurve: bool | int = ..., divisions: int = ..., evenlyDistribute: bool | int = ..., frozen: bool | int = ..., inputCurve: str = ..., name: str = ..., nodeState: int = ..., normalOffset: float = ..., normalOrientation: int = ..., query: bool | int = ..., radialOffset: bool | int | float = ..., relaxInterior: float = ..., smoothingAngle: bool | int | float = ..., supportingEdges: int = ..., twist: float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyCircularizeEdge(*args, edit: Literal[True], alignment: int = ..., caching: bool | int = ..., evenlyDistribute: bool | int = ..., nodeState: int = ..., normalOrientation: int = ..., radialOffset: float = ..., smoothingAngle: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyCircularizeEdge(*args, alignment: int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., createCurve: bool | int = ..., divisions: int = ..., evenlyDistribute: bool | int = ..., frozen: bool | int = ..., inputCurve: str = ..., name: str = ..., nodeState: int = ..., normalOffset: float = ..., normalOrientation: int = ..., query: bool | int = ..., radialOffset: bool | int | float = ..., relaxInterior: float = ..., smoothingAngle: bool | int | float = ..., supportingEdges: int = ..., twist: float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyCircularizeFace(*args, edit: Literal[True], alignment: int = ..., caching: bool | int = ..., evenlyDistribute: bool | int = ..., nodeState: int = ..., normalOrientation: int = ..., radialOffset: float = ..., smoothingAngle: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyCircularizeFace(*args, alignment: int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., createCurve: bool | int = ..., divisions: int = ..., evenlyDistribute: bool | int = ..., frozen: bool | int = ..., inputCurve: str = ..., name: str = ..., nodeState: int = ..., normalOffset: float = ..., normalOrientation: int = ..., query: bool | int = ..., radialOffset: bool | int | float = ..., relaxInterior: float = ..., smoothingAngle: bool | int | float = ..., supportingEdges: int = ..., twist: float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyClean(*args, edit: Literal[True], caching: bool | int = ..., cleanEdges: bool | int = ..., cleanPartialUVMapping: bool | int = ..., cleanUVs: bool | int = ..., cleanVertices: bool | int = ..., frozen: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyClean(*args, caching: bool | int = ..., cleanEdges: bool | int = ..., cleanPartialUVMapping: bool | int = ..., cleanUVs: bool | int = ..., cleanVertices: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...
def polyClipboard(*args, clear: bool | int = ..., color: bool | int = ..., copy: bool | int = ..., paste: bool | int = ..., shader: bool | int = ..., uvCoordinates: bool | int = ...) -> Any: ...

@overload
def polyCloseBorder(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyCloseBorder(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyCollapseEdge(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyCollapseEdge(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyCollapseFacet(*args, edit: Literal[True], areaThreshold: float = ..., caching: bool | int = ..., nodeState: int = ..., useAreaThreshold: bool | int = ...) -> None: ...

@overload
def polyCollapseFacet(*args, areaThreshold: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useAreaThreshold: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...
def polyCollapseTweaks(*args, hasVertexTweaks: bool | int = ..., query: bool | int = ...) -> Any: ...
def polyColorBlindData(*args, aboveMaxColorBlue: float | list[float] = ..., aboveMaxColorGreen: float | list[float] = ..., aboveMaxColorRed: float | list[float] = ..., attrName: str | list[str] = ..., belowMinColorBlue: float | list[float] = ..., belowMinColorGreen: float | list[float] = ..., belowMinColorRed: float | list[float] = ..., clashColorBlue: float = ..., clashColorGreen: float = ..., clashColorRed: float = ..., colorBlue: float | list[float] = ..., colorGreen: float | list[float] = ..., colorRed: float | list[float] = ..., dataType: str | list[str] = ..., enableFalseColor: bool | int = ..., maxColorBlue: float | list[float] = ..., maxColorGreen: float | list[float] = ..., maxColorRed: float | list[float] = ..., maxValue: float | list[float] = ..., minColorBlue: float | list[float] = ..., minColorGreen: float | list[float] = ..., minColorRed: float | list[float] = ..., minValue: float | list[float] = ..., mode: int | list[int] = ..., noColorBlue: float = ..., noColorGreen: float = ..., noColorRed: float = ..., numIdTypes: int | list[int] = ..., queryMode: bool | int = ..., typeId: int | list[int] = ..., useMax: bool | int | list[bool | int] = ..., useMin: bool | int | list[bool | int] = ..., value: str | list[str] = ...) -> Any: ...

@overload
def polyColorDel(*args, edit: Literal[True], caching: bool | int = ..., colorSetName: str = ..., nodeState: int = ...) -> None: ...

@overload
def polyColorDel(*args, caching: bool | int = ..., colorSetName: bool | int | str = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyColorMod(*args, edit: Literal[True], alphaScale_FloatValue: float = ..., alphaScale_Interp: int = ..., alphaScale_Position: float = ..., blueScale_FloatValue: float = ..., blueScale_Interp: int = ..., blueScale_Position: float = ..., caching: bool | int = ..., greenScale_FloatValue: float = ..., greenScale_Interp: int = ..., greenScale_Position: float = ..., huev: float = ..., intensityScale_FloatValue: float = ..., intensityScale_Interp: int = ..., intensityScale_Position: float = ..., nodeState: int = ..., redScale_FloatValue: float = ..., redScale_Interp: int = ..., redScale_Position: float = ..., satv: float = ..., value: float = ...) -> None: ...

@overload
def polyColorMod(*args, alphaScale_FloatValue: bool | int | float = ..., alphaScale_Interp: int = ..., alphaScale_Position: bool | int | float = ..., baseColorName: str = ..., blueScale_FloatValue: bool | int | float = ..., blueScale_Interp: int = ..., blueScale_Position: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., greenScale_FloatValue: bool | int | float = ..., greenScale_Interp: int = ..., greenScale_Position: bool | int | float = ..., huev: bool | int | float = ..., intensityScale_FloatValue: bool | int | float = ..., intensityScale_Interp: int = ..., intensityScale_Position: bool | int | float = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., redScale_FloatValue: bool | int | float = ..., redScale_Interp: int = ..., redScale_Position: bool | int | float = ..., satv: bool | int | float = ..., useInputComp: bool | int = ..., value: bool | int | float = ...) -> Any: ...

@overload
def polyColorPerVertex(*args, edit: Literal[True], alpha: float = ..., clamped: bool | int = ..., colorB: float = ..., colorDisplayOption: bool | int = ..., colorG: float = ..., colorR: float = ..., colorRGB: tuple[float, float, float] = ..., notUndoable: bool | int = ..., relative: bool | int = ..., remove: bool | int = ..., representation: int = ...) -> None: ...

@overload
def polyColorPerVertex(*args, alpha: bool | int | float = ..., clamped: bool | int = ..., colorB: bool | int | float = ..., colorDisplayOption: bool | int = ..., colorG: bool | int | float = ..., colorR: bool | int | float = ..., colorRGB: bool | int | tuple[float, float, float] = ..., notUndoable: bool | int = ..., query: bool | int = ..., relative: bool | int = ..., remove: bool | int = ..., representation: int = ...) -> Any: ...

@overload
def polyColorSet(*args, edit: Literal[True], allColorSets: bool | int = ..., clamped: bool | int = ..., colorSet: str = ..., copy: bool | int = ..., create: bool | int = ..., currentColorSet: bool | int = ..., currentPerInstanceSet: bool | int = ..., delete: bool | int = ..., newColorSet: str = ..., perInstance: bool | int = ..., rename: bool | int = ..., representation: str = ..., shareInstances: bool | int = ..., unshared: bool | int = ...) -> None: ...

@overload
def polyColorSet(*args, allColorSets: bool | int = ..., clamped: bool | int = ..., colorSet: bool | int | str = ..., copy: bool | int = ..., create: bool | int = ..., currentColorSet: bool | int = ..., currentPerInstanceSet: bool | int = ..., delete: bool | int = ..., newColorSet: bool | int | str = ..., perInstance: bool | int = ..., query: bool | int = ..., rename: bool | int = ..., representation: bool | int | str = ..., shareInstances: bool | int = ..., unshared: bool | int = ...) -> Any: ...
def polyColorSetCmdWrapper(*args) -> Any: ...
def polyCompare(*args, colorSetIndices: bool | int = ..., colorSets: bool | int = ..., edges: bool | int = ..., faceDesc: bool | int = ..., userNormals: bool | int = ..., uvSetIndices: bool | int = ..., uvSets: bool | int = ..., vertices: bool | int = ...) -> Any: ...

@overload
def polyCone(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., height: float = ..., heightBaseline: float = ..., nodeState: int = ..., radius: float = ..., roundCap: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCap: int = ..., subdivisionsHeight: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., subdivisionsZ: int = ..., texture: bool | int = ...) -> None: ...

@overload
def polyCone(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., height: bool | int | float = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., roundCap: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCap: int = ..., subdivisionsHeight: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., subdivisionsZ: int = ..., texture: bool | int = ...) -> Any: ...

@overload
def polyConnectComponents(*args, edit: Literal[True], adjustEdgeFlow: float = ..., caching: bool | int = ..., insertWithEdgeFlow: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyConnectComponents(*args, adjustEdgeFlow: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., insertWithEdgeFlow: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyContourProjection(*args, edit: Literal[True], caching: bool | int = ..., flipRails: bool | int = ..., method: int = ..., nodeState: int = ..., offset0: float = ..., offset1: float = ..., offset2: float = ..., offset3: float = ..., reduceShear: float = ..., smoothness0: float = ..., smoothness1: float = ..., smoothness2: float = ..., smoothness3: float = ..., userDefinedCorners: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyContourProjection(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., flipRails: bool | int = ..., frozen: bool | int = ..., insertBeforeDeformers: bool | int = ..., method: int = ..., name: str = ..., nodeState: int = ..., offset0: bool | int | float = ..., offset1: bool | int | float = ..., offset2: bool | int | float = ..., offset3: bool | int | float = ..., query: bool | int = ..., reduceShear: bool | int | float = ..., smoothness0: bool | int | float = ..., smoothness1: bool | int | float = ..., smoothness2: bool | int | float = ..., smoothness3: bool | int | float = ..., useInputComp: bool | int = ..., userDefinedCorners: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyCopyUV(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., uvSetNameInput: str = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyCopyUV(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., uvSetName: str = ..., uvSetNameInput: bool | int | str = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyCrease(*args, edit: Literal[True], createHistory: bool | int = ..., operation: int = ..., relativeValue: float = ..., value: float | list[float] = ..., vertexValue: float | list[float] = ...) -> None: ...

@overload
def polyCrease(*args, createHistory: bool | int = ..., operation: int = ..., query: bool | int = ..., relativeValue: bool | int | float = ..., value: bool | int | float | list[float] = ..., vertexValue: bool | int | float | list[float] = ...) -> Any: ...

@overload
def polyCreaseCtx(*args, edit: Literal[True], createSet: str = ..., extendSelection: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., relative: bool | int = ...) -> None: ...

@overload
def polyCreaseCtx(*args, createSet: str = ..., exists: bool | int = ..., extendSelection: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ..., relative: bool | int = ...) -> Any: ...

@overload
def polyCreateFacet(*args, edit: Literal[True], subdivision: int = ..., texture: int = ...) -> None: ...

@overload
def polyCreateFacet(*args, constructionHistory: bool | int = ..., hole: bool | int | list[bool | int] = ..., name: str = ..., point: tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., subdivision: int = ..., texture: int = ...) -> Any: ...

@overload
def polyCreateFacetCtx(*args, edit: Literal[True], append: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., maximumNumberOfPoints: int = ..., planarConstraint: bool | int = ..., subdivision: int = ..., texture: int = ...) -> None: ...

@overload
def polyCreateFacetCtx(*args, append: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., maximumNumberOfPoints: int = ..., planarConstraint: bool | int = ..., query: bool | int = ..., subdivision: int = ..., texture: int = ...) -> Any: ...

@overload
def polyCube(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., createUVs: int = ..., depth: float = ..., frozen: bool | int = ..., height: float = ..., heightBaseline: float = ..., nodeState: int = ..., subdivisionsDepth: int = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., subdivisionsZ: int = ..., texture: int = ..., width: float = ...) -> None: ...

@overload
def polyCube(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., depth: bool | int | float = ..., frozen: bool | int = ..., height: bool | int | float = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., subdivisionsDepth: int = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., subdivisionsZ: int = ..., texture: int = ..., width: bool | int | float = ...) -> Any: ...

@overload
def polyCut(*args, edit: Literal[True], caching: bool | int = ..., cutPlaneCenter: tuple[float, float, float] = ..., cutPlaneCenterX: float = ..., cutPlaneCenterY: float = ..., cutPlaneCenterZ: float = ..., cutPlaneHeight: float = ..., cutPlaneRotate: tuple[float, float, float] = ..., cutPlaneRotateX: float = ..., cutPlaneRotateY: float = ..., cutPlaneRotateZ: float = ..., cutPlaneSize: tuple[float, float] = ..., cutPlaneWidth: float = ..., deleteFaces: bool | int = ..., extractFaces: bool | int = ..., extractOffset: tuple[float, float, float] = ..., extractOffsetX: float = ..., extractOffsetY: float = ..., extractOffsetZ: float = ..., nodeState: int = ..., onObject: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyCut(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., cutPlaneCenter: bool | int | tuple[float, float, float] = ..., cutPlaneCenterX: bool | int | float = ..., cutPlaneCenterY: bool | int | float = ..., cutPlaneCenterZ: bool | int | float = ..., cutPlaneHeight: bool | int | float = ..., cutPlaneRotate: bool | int | tuple[float, float, float] = ..., cutPlaneRotateX: bool | int | float = ..., cutPlaneRotateY: bool | int | float = ..., cutPlaneRotateZ: bool | int | float = ..., cutPlaneSize: bool | int | tuple[float, float] = ..., cutPlaneWidth: bool | int | float = ..., cuttingDirection: str = ..., deleteFaces: bool | int = ..., extractFaces: bool | int = ..., extractOffset: bool | int | tuple[float, float, float] = ..., extractOffsetX: bool | int | float = ..., extractOffsetY: bool | int | float = ..., extractOffsetZ: bool | int | float = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., onObject: bool | int = ..., query: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyCutCtx(*args, edit: Literal[True], deleteFaces: bool | int = ..., extractFaces: bool | int = ..., extractOffset: tuple[float, float, float] = ..., image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def polyCutCtx(*args, deleteFaces: bool | int = ..., exists: bool | int = ..., extractFaces: bool | int = ..., extractOffset: bool | int | tuple[float, float, float] = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def polyCutUVCtx(*args, edit: Literal[True], loopSpeed: int = ..., mapBordersColor: tuple[float, float, float] = ..., showCheckerMap: bool | int = ..., showTextureBorders: bool | int = ..., showUVShellColoring: bool | int = ..., steadyStroke: bool | int = ..., steadyStrokeDistance: float = ..., symmetry: int = ...) -> None: ...

@overload
def polyCutUVCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., loopSpeed: int = ..., mapBordersColor: bool | int | tuple[float, float, float] = ..., name: str = ..., query: bool | int = ..., showCheckerMap: bool | int = ..., showTextureBorders: bool | int = ..., showUVShellColoring: bool | int = ..., steadyStroke: bool | int = ..., steadyStrokeDistance: bool | int | float = ..., symmetry: int = ...) -> Any: ...

@overload
def polyCylinder(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., height: float = ..., heightBaseline: float = ..., nodeState: int = ..., radius: float = ..., roundCap: bool | int = ..., roundCapHeightCompensation: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCaps: int = ..., subdivisionsHeight: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., subdivisionsZ: int = ..., texture: int = ...) -> None: ...

@overload
def polyCylinder(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., height: bool | int | float = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., roundCap: bool | int = ..., roundCapHeightCompensation: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCaps: int = ..., subdivisionsHeight: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., subdivisionsZ: int = ..., texture: int = ...) -> Any: ...

@overload
def polyCylindricalProjection(*args, edit: Literal[True], caching: bool | int = ..., imageCenter: tuple[float, float] = ..., imageCenterX: float = ..., imageCenterY: float = ..., imageScale: tuple[float, float] = ..., imageScaleU: float = ..., imageScaleV: float = ..., nodeState: int = ..., projectionCenter: tuple[float, float, float] = ..., projectionCenterX: float = ..., projectionCenterY: float = ..., projectionCenterZ: float = ..., projectionHeight: float = ..., projectionHorizontalSweep: float = ..., projectionScale: tuple[float, float] = ..., projectionScaleU: float = ..., projectionScaleV: float = ..., radius: float = ..., rotationAngle: float = ..., seamCorrect: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyCylindricalProjection(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., frozen: bool | int = ..., imageCenter: bool | int | tuple[float, float] = ..., imageCenterX: bool | int | float = ..., imageCenterY: bool | int | float = ..., imageScale: bool | int | tuple[float, float] = ..., imageScaleU: bool | int | float = ..., imageScaleV: bool | int | float = ..., insertBeforeDeformers: bool | int = ..., keepImageRatio: bool | int = ..., mapDirection: str = ..., name: str = ..., nodeState: int = ..., perInstance: bool | int = ..., projectionCenter: bool | int | tuple[float, float, float] = ..., projectionCenterX: bool | int | float = ..., projectionCenterY: bool | int | float = ..., projectionCenterZ: bool | int | float = ..., projectionHeight: bool | int | float = ..., projectionHorizontalSweep: bool | int | float = ..., projectionScale: bool | int | tuple[float, float] = ..., projectionScaleU: bool | int | float = ..., projectionScaleV: bool | int | float = ..., query: bool | int = ..., radius: bool | int | float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., rotationAngle: bool | int | float = ..., seamCorrect: bool | int = ..., smartFit: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyDelEdge(*args, edit: Literal[True], caching: bool | int = ..., cleanVertices: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyDelEdge(*args, caching: bool | int = ..., cleanVertices: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyDelFacet(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyDelFacet(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyDelVertex(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyDelVertex(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...
def polyDuplicateAndConnect(*args, removeOriginalFromShaders: bool | int = ..., renameChildren: bool | int = ...) -> Any: ...

@overload
def polyDuplicateEdge(*args, edit: Literal[True], adjustEdgeFlow: float = ..., caching: bool | int = ..., deleteEdge: bool | int = ..., endVertexOffset: float = ..., insertWithEdgeFlow: bool | int = ..., nodeState: int = ..., smoothingAngle: float = ..., splitType: int = ..., startVertexOffset: float = ...) -> None: ...

@overload
def polyDuplicateEdge(*args, adjustEdgeFlow: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., deleteEdge: bool | int = ..., endVertexOffset: bool | int | float = ..., frozen: bool | int = ..., insertWithEdgeFlow: bool | int = ..., name: str = ..., nodeState: int = ..., offset: float = ..., query: bool | int = ..., smoothingAngle: bool | int | float = ..., splitType: int = ..., startVertexOffset: bool | int | float = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyEditEdgeFlow(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyEditEdgeFlow(*args, adjustEdgeFlow: float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., edgeFlow: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...
def polyEditUV(*args, angle: bool | int | float = ..., pivotU: bool | int | float = ..., pivotV: bool | int | float = ..., query: bool | int = ..., relative: bool | int = ..., rotateRatio: bool | int | float = ..., rotation: bool | int = ..., scale: bool | int = ..., scaleU: bool | int | float = ..., scaleV: bool | int | float = ..., uValue: bool | int | float = ..., uvSetName: bool | int | str = ..., vValue: bool | int | float = ...) -> Any: ...
def polyEditUVShell(*args, angle: bool | int | float = ..., pivotU: bool | int | float = ..., pivotV: bool | int | float = ..., query: bool | int = ..., relative: bool | int = ..., rotateRatio: bool | int | float = ..., rotation: bool | int = ..., scale: bool | int = ..., scaleU: bool | int | float = ..., scaleV: bool | int | float = ..., uValue: bool | int | float = ..., uvSetName: bool | int | str = ..., vValue: bool | int | float = ...) -> Any: ...
def polyEvaluate(*args, accurateEvaluation: bool | int = ..., activeShells: bool | int = ..., activeUVShells: bool | int = ..., area: bool | int = ..., boundingBox: bool | int = ..., boundingBox2d: bool | int = ..., boundingBoxComponent: bool | int = ..., boundingBoxComponent2d: bool | int = ..., displayStats: bool | int = ..., edge: bool | int = ..., edgeComponent: bool | int = ..., face: bool | int = ..., faceArea: bool | int = ..., faceComponent: bool | int = ..., format: bool | int = ..., shell: bool | int = ..., triangle: bool | int = ..., triangleComponent: bool | int = ..., uvArea: bool | int = ..., uvComponent: bool | int = ..., uvEdgePairs: bool | int = ..., uvFaceArea: bool | int = ..., uvSetName: str = ..., uvShell: bool | int = ..., uvShellIds: bool | int = ..., uvcoord: bool | int = ..., uvsInShell: int = ..., vertex: bool | int = ..., vertexComponent: bool | int = ..., worldArea: bool | int = ..., worldFaceArea: bool | int = ...) -> Any: ...

@overload
def polyExtrudeEdge(*args, edit: Literal[True], caching: bool | int = ..., divisions: int = ..., gain: float | list[float] = ..., keepFacesTogether: bool | int = ..., localCenter: int = ..., localDirection: tuple[float, float, float] = ..., localDirectionX: float = ..., localDirectionY: float = ..., localDirectionZ: float = ..., localRotate: tuple[float, float, float] = ..., localRotateX: float = ..., localRotateY: float = ..., localRotateZ: float = ..., localScale: tuple[float, float, float] = ..., localScaleX: float = ..., localScaleY: float = ..., localScaleZ: float = ..., localTranslate: tuple[float, float, float] = ..., localTranslateX: float = ..., localTranslateY: float = ..., localTranslateZ: float = ..., nodeState: int = ..., offset: float = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., random: float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., scale: tuple[float, float, float] = ..., scaleX: float = ..., scaleY: float = ..., scaleZ: float = ..., smoothingAngle: float = ..., taper: float = ..., taperCurve_FloatValue: float = ..., taperCurve_Interp: int = ..., taperCurve_Position: float = ..., thickness: float = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., twist: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyExtrudeEdge(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createCurve: bool | int = ..., divisions: int = ..., frozen: bool | int = ..., gain: bool | int | float | list[float] = ..., inputCurve: str = ..., keepFacesTogether: bool | int = ..., localCenter: int = ..., localDirection: bool | int | tuple[float, float, float] = ..., localDirectionX: bool | int | float = ..., localDirectionY: bool | int | float = ..., localDirectionZ: bool | int | float = ..., localRotate: bool | int | tuple[float, float, float] = ..., localRotateX: bool | int | float = ..., localRotateY: bool | int | float = ..., localRotateZ: bool | int | float = ..., localScale: bool | int | tuple[float, float, float] = ..., localScaleX: bool | int | float = ..., localScaleY: bool | int | float = ..., localScaleZ: bool | int | float = ..., localTranslate: bool | int | tuple[float, float, float] = ..., localTranslateX: bool | int | float = ..., localTranslateY: bool | int | float = ..., localTranslateZ: bool | int | float = ..., name: str = ..., nodeState: int = ..., offset: bool | int | float = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., query: bool | int = ..., random: bool | int | float = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., scale: bool | int | tuple[float, float, float] = ..., scaleX: bool | int | float = ..., scaleY: bool | int | float = ..., scaleZ: bool | int | float = ..., smoothingAngle: bool | int | float = ..., taper: bool | int | float = ..., taperCurve_FloatValue: bool | int | float = ..., taperCurve_Interp: int = ..., taperCurve_Position: bool | int | float = ..., thickness: bool | int | float = ..., translate: bool | int | tuple[float, float, float] = ..., translateX: bool | int | float = ..., translateY: bool | int | float = ..., translateZ: bool | int | float = ..., twist: bool | int | float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyExtrudeFacet(*args, edit: Literal[True], attraction: float = ..., caching: bool | int = ..., divisions: int = ..., gain: float | list[float] = ..., gravity: tuple[float, float, float] = ..., gravityX: float = ..., gravityY: float = ..., gravityZ: float = ..., keepFacesTogether: bool | int = ..., keepFacetTogether: bool | int = ..., localCenter: int = ..., localDirection: tuple[float, float, float] = ..., localDirectionX: float = ..., localDirectionY: float = ..., localDirectionZ: float = ..., localRotate: tuple[float, float, float] = ..., localRotateX: float = ..., localRotateY: float = ..., localRotateZ: float = ..., localScale: tuple[float, float, float] = ..., localScaleX: float = ..., localScaleY: float = ..., localScaleZ: float = ..., localTranslate: tuple[float, float, float] = ..., localTranslateX: float = ..., localTranslateY: float = ..., localTranslateZ: float = ..., magnX: float = ..., magnY: float = ..., magnZ: float = ..., magnet: tuple[float, float, float] = ..., nodeState: int = ..., offset: float = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., random: float = ..., reverseAllFaces: bool | int = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., scale: tuple[float, float, float] = ..., scaleX: float = ..., scaleY: float = ..., scaleZ: float = ..., smoothingAngle: float = ..., taper: float = ..., taperCurve_FloatValue: float = ..., taperCurve_Interp: int = ..., taperCurve_Position: float = ..., thickness: float = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., twist: float = ..., weight: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyExtrudeFacet(*args, attraction: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., createCurve: bool | int = ..., divisions: int = ..., frozen: bool | int = ..., gain: bool | int | float | list[float] = ..., gravity: bool | int | tuple[float, float, float] = ..., gravityX: bool | int | float = ..., gravityY: bool | int | float = ..., gravityZ: bool | int | float = ..., inputCurve: str = ..., keepFacesTogether: bool | int = ..., keepFacetTogether: bool | int = ..., localCenter: int = ..., localDirection: bool | int | tuple[float, float, float] = ..., localDirectionX: bool | int | float = ..., localDirectionY: bool | int | float = ..., localDirectionZ: bool | int | float = ..., localRotate: bool | int | tuple[float, float, float] = ..., localRotateX: bool | int | float = ..., localRotateY: bool | int | float = ..., localRotateZ: bool | int | float = ..., localScale: bool | int | tuple[float, float, float] = ..., localScaleX: bool | int | float = ..., localScaleY: bool | int | float = ..., localScaleZ: bool | int | float = ..., localTranslate: bool | int | tuple[float, float, float] = ..., localTranslateX: bool | int | float = ..., localTranslateY: bool | int | float = ..., localTranslateZ: bool | int | float = ..., magnX: bool | int | float = ..., magnY: bool | int | float = ..., magnZ: bool | int | float = ..., magnet: bool | int | tuple[float, float, float] = ..., maya2012: bool | int = ..., maya2018: bool | int = ..., maya2023: bool | int = ..., name: str = ..., newThickness: bool | int = ..., nodeState: int = ..., offset: bool | int | float = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., query: bool | int = ..., random: bool | int | float = ..., reverseAllFaces: bool | int = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., scale: bool | int | tuple[float, float, float] = ..., scaleX: bool | int | float = ..., scaleY: bool | int | float = ..., scaleZ: bool | int | float = ..., smoothingAngle: bool | int | float = ..., taper: bool | int | float = ..., taperCurve_FloatValue: bool | int | float = ..., taperCurve_Interp: int = ..., taperCurve_Position: bool | int | float = ..., thickness: bool | int | float = ..., translate: bool | int | tuple[float, float, float] = ..., translateX: bool | int | float = ..., translateY: bool | int | float = ..., translateZ: bool | int | float = ..., twist: bool | int | float = ..., useInputComp: bool | int = ..., weight: bool | int | float = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyExtrudeVertex(*args, edit: Literal[True], caching: bool | int = ..., divisions: int = ..., length: float = ..., nodeState: int = ..., width: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyExtrudeVertex(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., divisions: int = ..., frozen: bool | int = ..., length: bool | int | float = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., width: bool | int | float = ..., worldSpace: bool | int = ...) -> Any: ...
def polyFlipEdge(*args, edit: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def polyFlipUV(*args, edit: Literal[True], caching: bool | int = ..., cutUV: bool | int = ..., flipType: int = ..., local: bool | int = ..., nodeState: int = ..., pivotU: float = ..., pivotV: float = ..., usePivot: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyFlipUV(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., cutUV: bool | int = ..., flipType: int = ..., frozen: bool | int = ..., insertBeforeDeformers: bool | int = ..., local: bool | int = ..., name: str = ..., nodeState: int = ..., pivotU: bool | int | float = ..., pivotV: bool | int | float = ..., query: bool | int = ..., useInputComp: bool | int = ..., usePivot: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...
def polyForceUV(*args, cameraProjection: bool | int = ..., createNewMap: bool | int = ..., flipHorizontal: bool | int = ..., flipVertical: bool | int = ..., g: bool | int = ..., local: bool | int = ..., normalize: str = ..., numItems: int = ..., preserveAspectRatio: bool | int = ..., unitize: bool | int = ..., unshare: bool | int = ..., uvSetName: str = ...) -> Any: ...

@overload
def polyGeoSampler(*args, edit: Literal[True], alphaBlend: str = ..., averageColor: bool | int = ..., clampAlphaMax: float = ..., clampAlphaMin: float = ..., clampRGBMax: tuple[float, float, float] = ..., clampRGBMin: tuple[float, float, float] = ..., colorBlend: str = ..., colorDisplayOption: bool | int = ..., computeShadows: bool | int = ..., displaceGeometry: bool | int = ..., flatShading: bool | int = ..., ignoreDoubleSided: bool | int = ..., lightingOnly: bool | int = ..., reuseShadows: bool | int = ..., sampleByFace: bool | int = ..., scaleFactor: float = ..., shareUV: bool | int = ..., useLightShadows: bool | int = ...) -> None: ...

@overload
def polyGeoSampler(*args, alphaBlend: str = ..., averageColor: bool | int = ..., clampAlphaMax: float = ..., clampAlphaMin: float = ..., clampRGBMax: tuple[float, float, float] = ..., clampRGBMin: tuple[float, float, float] = ..., colorBlend: str = ..., colorDisplayOption: bool | int = ..., computeShadows: bool | int = ..., displaceGeometry: bool | int = ..., flatShading: bool | int = ..., ignoreDoubleSided: bool | int = ..., lightingOnly: bool | int = ..., reuseShadows: bool | int = ..., sampleByFace: bool | int = ..., scaleFactor: float = ..., shareUV: bool | int = ..., useLightShadows: bool | int = ...) -> Any: ...

@overload
def polyHelix(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., coils: float = ..., componentTagCreate: bool | int = ..., createUVs: int = ..., direction: int = ..., frozen: bool | int = ..., height: float = ..., heightBaseline: float = ..., nodeState: int = ..., radius: float = ..., roundCap: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCaps: int = ..., subdivisionsCoil: int = ..., texture: int = ..., useOldInitBehaviour: bool | int = ..., width: float = ...) -> None: ...

@overload
def polyHelix(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., coils: bool | int | float = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., direction: int = ..., frozen: bool | int = ..., height: bool | int | float = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., roundCap: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCaps: int = ..., subdivisionsCoil: int = ..., texture: int = ..., useOldInitBehaviour: bool | int = ..., width: bool | int | float = ...) -> Any: ...

@overload
def polyHole(*args, edit: Literal[True], assignHole: bool | int = ..., createHistory: bool | int = ...) -> None: ...

@overload
def polyHole(*args, assignHole: bool | int = ..., createHistory: bool | int = ..., query: bool | int = ...) -> Any: ...
def polyInfo(*args, edgeToFace: bool | int = ..., edgeToVertex: bool | int = ..., faceNormals: bool | int = ..., faceToEdge: bool | int = ..., faceToVertex: bool | int = ..., invalidEdges: bool | int = ..., invalidVertices: bool | int = ..., laminaFaces: bool | int = ..., nonManifoldEdges: bool | int = ..., nonManifoldUVEdges: bool | int = ..., nonManifoldUVs: bool | int = ..., nonManifoldVertices: bool | int = ..., vertexToEdge: bool | int = ..., vertexToFace: bool | int = ...) -> Any: ...
def polyInstallAction(*args, commandName: bool | int = ..., convertSelection: bool | int = ..., installConstraint: bool | int = ..., installDisplay: bool | int = ..., keepInstances: bool | int = ..., query: bool | int = ..., uninstallConstraint: bool | int = ..., uninstallDisplay: bool | int = ...) -> Any: ...
def polyIterOnPoly(*args) -> Any: ...

@overload
def polyLayoutUV(*args, edit: Literal[True], caching: bool | int = ..., flipReversed: bool | int = ..., layout: int = ..., layoutMethod: int = ..., nodeState: int = ..., percentageSpace: float = ..., rotateForBestFit: int = ..., scale: int = ..., separate: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyLayoutUV(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., flipReversed: bool | int = ..., frozen: bool | int = ..., gridU: int = ..., gridV: int = ..., layout: int = ..., layoutMethod: int = ..., name: str = ..., nodeState: int = ..., percentageSpace: bool | int | float = ..., query: bool | int = ..., rotateForBestFit: int = ..., scale: int = ..., separate: int = ..., useInputComp: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...
def polyListComponentConversion(*args, border: bool | int = ..., fromEdge: bool | int = ..., fromFace: bool | int = ..., fromUV: bool | int = ..., fromVertex: bool | int = ..., fromVertexFace: bool | int = ..., internal: bool | int = ..., toEdge: bool | int = ..., toFace: bool | int = ..., toUV: bool | int = ..., toVertex: bool | int = ..., toVertexFace: bool | int = ..., uvShell: bool | int = ..., vertexFaceAllEdges: bool | int = ...) -> Any: ...

@overload
def polyMapCut(*args, edit: Literal[True], caching: bool | int = ..., moveratio: float = ..., nodeState: int = ...) -> None: ...

@overload
def polyMapCut(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., moveRatio: float = ..., moveratio: bool | int | float = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., usePinning: bool | int = ...) -> Any: ...

@overload
def polyMapDel(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyMapDel(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyMapSew(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyMapSew(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., usePinning: bool | int = ...) -> Any: ...

@overload
def polyMapSewMove(*args, edit: Literal[True], caching: bool | int = ..., limitPieceSize: bool | int = ..., nodeState: int = ..., numberFaces: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyMapSewMove(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., limitPieceSize: bool | int = ..., name: str = ..., nodeState: int = ..., numberFaces: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyMergeEdge(*args, edit: Literal[True], caching: bool | int = ..., firstEdge: int = ..., mergeMode: int = ..., mergeTexture: bool | int = ..., nodeState: int = ..., secondEdge: int = ...) -> None: ...

@overload
def polyMergeEdge(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., firstEdge: int = ..., frozen: bool | int = ..., mergeMode: int = ..., mergeTexture: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., secondEdge: int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyMergeEdgeCtx(*args, edit: Literal[True], caching: bool | int = ..., firstEdge: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., mergeMode: int = ..., mergeTexture: bool | int = ..., nodeState: int = ..., previous: bool | int = ..., reset: bool | int = ..., secondEdge: int = ...) -> None: ...

@overload
def polyMergeEdgeCtx(*args, activeNodes: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., exists: bool | int = ..., firstEdge: int = ..., frozen: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., immediate: bool | int = ..., mergeMode: int = ..., mergeTexture: bool | int = ..., name: str = ..., nodeState: int = ..., previous: bool | int = ..., query: bool | int = ..., reset: bool | int = ..., secondEdge: int = ..., toolNode: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyMergeFacet(*args, edit: Literal[True], caching: bool | int = ..., firstFacet: int = ..., mergeMode: int = ..., nodeState: int = ..., secondFacet: int = ...) -> None: ...

@overload
def polyMergeFacet(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., firstFacet: int = ..., frozen: bool | int = ..., mergeMode: int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., secondFacet: int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyMergeFacetCtx(*args, edit: Literal[True], caching: bool | int = ..., firstFacet: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., mergeMode: int = ..., nodeState: int = ..., previous: bool | int = ..., reset: bool | int = ..., secondFacet: int = ...) -> None: ...

@overload
def polyMergeFacetCtx(*args, activeNodes: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., exists: bool | int = ..., firstFacet: int = ..., frozen: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., immediate: bool | int = ..., mergeMode: int = ..., name: str = ..., nodeState: int = ..., previous: bool | int = ..., query: bool | int = ..., reset: bool | int = ..., secondFacet: int = ..., toolNode: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyMergeUV(*args, edit: Literal[True], caching: bool | int = ..., distance: float = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyMergeUV(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., distance: bool | int | float = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyMergeVertex(*args, edit: Literal[True], alwaysMergeTwoVertices: bool | int = ..., caching: bool | int = ..., distance: float = ..., mergeToComponents: str = ..., nodeState: int = ..., texture: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyMergeVertex(*args, alwaysMergeTwoVertices: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., distance: bool | int | float = ..., frozen: bool | int = ..., mergeToComponents: bool | int | str = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., texture: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyMirrorFace(*args, edit: Literal[True], axis: int = ..., axisDirection: int = ..., caching: bool | int = ..., direction: int = ..., mergeMode: int = ..., mergeThreshold: float = ..., mergeThresholdType: int = ..., mirrorAxis: int = ..., mirrorPosition: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyMirrorFace(*args, axis: int = ..., axisDirection: int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., cutMesh: bool | int = ..., direction: int = ..., firstNewFace: int = ..., flipUVs: int = ..., frozen: bool | int = ..., keepVertexIDs: bool | int = ..., lastNewFace: int = ..., mergeMode: int = ..., mergeThreshold: bool | int | float = ..., mergeThresholdType: int = ..., mirrorAxis: int = ..., mirrorPlaneCenter: tuple[float, float, float] = ..., mirrorPlaneCenterX: float = ..., mirrorPlaneCenterY: float = ..., mirrorPlaneCenterZ: float = ..., mirrorPlaneRotate: tuple[float, float, float] = ..., mirrorPlaneRotateX: float = ..., mirrorPlaneRotateY: float = ..., mirrorPlaneRotateZ: float = ..., mirrorPosition: bool | int | float = ..., name: str = ..., nodeState: int = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., query: bool | int = ..., scalePivotX: float = ..., scalePivotY: float = ..., scalePivotZ: float = ..., smoothingAngle: float = ..., useInputComp: bool | int = ..., userSpecifiedPivot: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyMoveEdge(*args, edit: Literal[True], caching: bool | int = ..., gain: float | list[float] = ..., localCenter: int = ..., localDirection: tuple[float, float, float] = ..., localDirectionX: float = ..., localDirectionY: float = ..., localDirectionZ: float = ..., localRotate: tuple[float, float, float] = ..., localRotateX: float = ..., localRotateY: float = ..., localRotateZ: float = ..., localScale: tuple[float, float, float] = ..., localScaleX: float = ..., localScaleY: float = ..., localScaleZ: float = ..., localTranslate: tuple[float, float, float] = ..., localTranslateX: float = ..., localTranslateY: float = ..., localTranslateZ: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., random: float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., scale: tuple[float, float, float] = ..., scaleX: float = ..., scaleY: float = ..., scaleZ: float = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyMoveEdge(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., gain: bool | int | float | list[float] = ..., localCenter: int = ..., localDirection: bool | int | tuple[float, float, float] = ..., localDirectionX: bool | int | float = ..., localDirectionY: bool | int | float = ..., localDirectionZ: bool | int | float = ..., localRotate: bool | int | tuple[float, float, float] = ..., localRotateX: bool | int | float = ..., localRotateY: bool | int | float = ..., localRotateZ: bool | int | float = ..., localScale: bool | int | tuple[float, float, float] = ..., localScaleX: bool | int | float = ..., localScaleY: bool | int | float = ..., localScaleZ: bool | int | float = ..., localTranslate: bool | int | tuple[float, float, float] = ..., localTranslateX: bool | int | float = ..., localTranslateY: bool | int | float = ..., localTranslateZ: bool | int | float = ..., name: str = ..., nodeState: int = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., query: bool | int = ..., random: bool | int | float = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., scale: bool | int | tuple[float, float, float] = ..., scaleX: bool | int | float = ..., scaleY: bool | int | float = ..., scaleZ: bool | int | float = ..., translate: bool | int | tuple[float, float, float] = ..., translateX: bool | int | float = ..., translateY: bool | int | float = ..., translateZ: bool | int | float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyMoveFacet(*args, edit: Literal[True], attraction: float = ..., caching: bool | int = ..., gain: float | list[float] = ..., gravity: tuple[float, float, float] = ..., gravityX: float = ..., gravityY: float = ..., gravityZ: float = ..., localCenter: int = ..., localDirection: tuple[float, float, float] = ..., localDirectionX: float = ..., localDirectionY: float = ..., localDirectionZ: float = ..., localRotate: tuple[float, float, float] = ..., localRotateX: float = ..., localRotateY: float = ..., localRotateZ: float = ..., localScale: tuple[float, float, float] = ..., localScaleX: float = ..., localScaleY: float = ..., localScaleZ: float = ..., localTranslate: tuple[float, float, float] = ..., localTranslateX: float = ..., localTranslateY: float = ..., localTranslateZ: float = ..., magnX: float = ..., magnY: float = ..., magnZ: float = ..., magnet: tuple[float, float, float] = ..., nodeState: int = ..., offset: float = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., random: float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., scale: tuple[float, float, float] = ..., scaleX: float = ..., scaleY: float = ..., scaleZ: float = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., weight: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyMoveFacet(*args, attraction: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., gain: bool | int | float | list[float] = ..., gravity: bool | int | tuple[float, float, float] = ..., gravityX: bool | int | float = ..., gravityY: bool | int | float = ..., gravityZ: bool | int | float = ..., localCenter: int = ..., localDirection: bool | int | tuple[float, float, float] = ..., localDirectionX: bool | int | float = ..., localDirectionY: bool | int | float = ..., localDirectionZ: bool | int | float = ..., localRotate: bool | int | tuple[float, float, float] = ..., localRotateX: bool | int | float = ..., localRotateY: bool | int | float = ..., localRotateZ: bool | int | float = ..., localScale: bool | int | tuple[float, float, float] = ..., localScaleX: bool | int | float = ..., localScaleY: bool | int | float = ..., localScaleZ: bool | int | float = ..., localTranslate: bool | int | tuple[float, float, float] = ..., localTranslateX: bool | int | float = ..., localTranslateY: bool | int | float = ..., localTranslateZ: bool | int | float = ..., magnX: bool | int | float = ..., magnY: bool | int | float = ..., magnZ: bool | int | float = ..., magnet: bool | int | tuple[float, float, float] = ..., name: str = ..., nodeState: int = ..., offset: bool | int | float = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., query: bool | int = ..., random: bool | int | float = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., scale: bool | int | tuple[float, float, float] = ..., scaleX: bool | int | float = ..., scaleY: bool | int | float = ..., scaleZ: bool | int | float = ..., translate: bool | int | tuple[float, float, float] = ..., translateX: bool | int | float = ..., translateY: bool | int | float = ..., translateZ: bool | int | float = ..., useInputComp: bool | int = ..., weight: bool | int | float = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyMoveFacetUV(*args, edit: Literal[True], axisLen: tuple[float, float] = ..., axisLenX: float = ..., axisLenY: float = ..., caching: bool | int = ..., nodeState: int = ..., pivot: tuple[float, float] = ..., pivotU: float = ..., pivotV: float = ..., random: float = ..., rotationAngle: float = ..., scale: tuple[float, float] = ..., scaleU: float = ..., scaleV: float = ..., translate: tuple[float, float] = ..., translateU: float = ..., translateV: float = ...) -> None: ...

@overload
def polyMoveFacetUV(*args, axisLen: bool | int | tuple[float, float] = ..., axisLenX: bool | int | float = ..., axisLenY: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., pivot: bool | int | tuple[float, float] = ..., pivotU: bool | int | float = ..., pivotV: bool | int | float = ..., query: bool | int = ..., random: bool | int | float = ..., rotationAngle: bool | int | float = ..., scale: bool | int | tuple[float, float] = ..., scaleU: bool | int | float = ..., scaleV: bool | int | float = ..., translate: bool | int | tuple[float, float] = ..., translateU: bool | int | float = ..., translateV: bool | int | float = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyMoveUV(*args, edit: Literal[True], axisLen: tuple[float, float] = ..., axisLenX: float = ..., axisLenY: float = ..., caching: bool | int = ..., nodeState: int = ..., pivot: tuple[float, float] = ..., pivotU: float = ..., pivotV: float = ..., random: float = ..., rotationAngle: float = ..., scale: tuple[float, float] = ..., scaleU: float = ..., scaleV: float = ..., translate: tuple[float, float] = ..., translateU: float = ..., translateV: float = ...) -> None: ...

@overload
def polyMoveUV(*args, axisLen: bool | int | tuple[float, float] = ..., axisLenX: bool | int | float = ..., axisLenY: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., pivot: bool | int | tuple[float, float] = ..., pivotU: bool | int | float = ..., pivotV: bool | int | float = ..., query: bool | int = ..., random: bool | int | float = ..., rotationAngle: bool | int | float = ..., scale: bool | int | tuple[float, float] = ..., scaleU: bool | int | float = ..., scaleV: bool | int | float = ..., translate: bool | int | tuple[float, float] = ..., translateU: bool | int | float = ..., translateV: bool | int | float = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyMoveVertex(*args, edit: Literal[True], caching: bool | int = ..., gain: float | list[float] = ..., localDirection: tuple[float, float, float] = ..., localDirectionX: float = ..., localDirectionY: float = ..., localDirectionZ: float = ..., localTranslate: tuple[float, float, float] = ..., localTranslateX: float = ..., localTranslateY: float = ..., localTranslateZ: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., random: float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., scale: tuple[float, float, float] = ..., scaleX: float = ..., scaleY: float = ..., scaleZ: float = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyMoveVertex(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., gain: bool | int | float | list[float] = ..., localDirection: bool | int | tuple[float, float, float] = ..., localDirectionX: bool | int | float = ..., localDirectionY: bool | int | float = ..., localDirectionZ: bool | int | float = ..., localTranslate: bool | int | tuple[float, float, float] = ..., localTranslateX: bool | int | float = ..., localTranslateY: bool | int | float = ..., localTranslateZ: bool | int | float = ..., name: str = ..., nodeState: int = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., query: bool | int = ..., random: bool | int | float = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., scale: bool | int | tuple[float, float, float] = ..., scaleX: bool | int | float = ..., scaleY: bool | int | float = ..., scaleZ: bool | int | float = ..., translate: bool | int | tuple[float, float, float] = ..., translateX: bool | int | float = ..., translateY: bool | int | float = ..., translateZ: bool | int | float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def polyMultiLayoutUV(*args, flipReversed: bool | int = ..., gridU: int = ..., gridV: int = ..., layout: int = ..., layoutMethod: int = ..., offsetU: float = ..., offsetV: float = ..., percentageSpace: float = ..., prescale: int = ..., rotateForBestFit: int = ..., scale: int = ..., sizeU: float = ..., sizeV: float = ..., uvSetName: str = ...) -> Any: ...

@overload
def polyNormal(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., normalMode: int = ..., userNormalMode: bool | int = ...) -> None: ...

@overload
def polyNormal(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., normalMode: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., userNormalMode: bool | int = ...) -> Any: ...

@overload
def polyNormalPerVertex(*args, edit: Literal[True], allLocked: bool | int = ..., deformable: bool | int = ..., freezeNormal: bool | int = ..., normalX: float = ..., normalXYZ: tuple[float, float, float] | list[tuple[float, float, float]] = ..., normalY: float = ..., normalZ: float = ..., relative: bool | int = ..., unFreezeNormal: bool | int = ...) -> None: ...

@overload
def polyNormalPerVertex(*args, allLocked: bool | int = ..., deformable: bool | int = ..., freezeNormal: bool | int = ..., normalX: bool | int | float = ..., normalXYZ: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., normalY: bool | int | float = ..., normalZ: bool | int | float = ..., query: bool | int = ..., relative: bool | int = ..., unFreezeNormal: bool | int = ...) -> Any: ...

@overload
def polyNormalizeUV(*args, edit: Literal[True], caching: bool | int = ..., centerOnTile: bool | int = ..., nodeState: int = ..., normalizeDirection: int = ..., normalizeType: int = ..., preserveAspectRatio: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyNormalizeUV(*args, caching: bool | int = ..., centerOnTile: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., frozen: bool | int = ..., insertBeforeDeformers: bool | int = ..., name: str = ..., nodeState: int = ..., normalizeDirection: int = ..., normalizeType: int = ..., preserveAspectRatio: bool | int = ..., query: bool | int = ..., useInputComp: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyOptUvs(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyOptUvs(*args, applyToShell: bool | int = ..., areaWeight: float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., globalBlend: float = ..., globalMethodBlend: float = ..., iterations: int = ..., name: str = ..., nodeState: int = ..., optimizeAxis: int = ..., pinSelected: bool | int = ..., pinUvBorder: bool | int = ..., query: bool | int = ..., scale: float = ..., stoppingThreshold: float = ..., useInputComp: bool | int = ..., useScale: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...
def polyOptions(*args, activeObjects: bool | int = ..., allEdges: bool | int = ..., backCullVertex: bool | int = ..., backCulling: bool | int = ..., colorMaterialChannel: bool | int | str = ..., colorShadedDisplay: bool | int = ..., displayAlphaAsGreyScale: bool | int = ..., displayBlueChannel: bool | int = ..., displayBorder: bool | int = ..., displayCenter: bool | int = ..., displayColorAsGreyScale: bool | int = ..., displayCreaseEdge: bool | int = ..., displayCreaseVertex: bool | int = ..., displayGeometry: bool | int = ..., displayGreenChannel: bool | int = ..., displayInvisibleFaces: bool | int = ..., displayItemNumbers: bool | int | tuple[bool | int, bool | int, bool | int, bool | int] = ..., displayMapBorder: bool | int = ..., displayMetadata: bool | int | tuple[bool | int, bool | int, bool | int] = ..., displayNormal: bool | int = ..., displayRedChannel: bool | int = ..., displayShellBorder: bool | int = ..., displaySubdComps: bool | int = ..., displayTangent: bool | int = ..., displayTriangle: bool | int = ..., displayUVTopology: bool | int = ..., displayUVs: bool | int = ..., displayVertex: bool | int = ..., displayWarp: bool | int = ..., facet: bool | int = ..., fullBack: bool | int = ..., gl: bool | int = ..., hardBack: bool | int = ..., hardEdge: bool | int = ..., hardEdgeColor: bool | int = ..., materialBlend: bool | int | str = ..., newPolymesh: bool | int = ..., point: bool | int = ..., pointFacet: bool | int = ..., query: bool | int = ..., relative: bool | int = ..., reuseTriangles: bool | int = ..., sizeBorder: bool | int | float = ..., sizeNormal: bool | int | float = ..., sizeUV: bool | int | float = ..., sizeVertex: bool | int | float = ..., smoothDrawType: int = ..., softEdge: bool | int = ..., vertexNormalMethod: int = ..., wireBackCulling: bool | int = ...) -> Any: ...
def polyOutput(*args, allValues: bool | int = ..., color: bool | int = ..., colorDesc: bool | int = ..., edge: bool | int = ..., edgeFace: bool | int = ..., face: bool | int = ..., faceNorm: bool | int = ..., force: bool | int = ..., group: bool | int = ..., noOutput: bool | int = ..., normDesc: bool | int = ..., outputFile: str = ..., triangle: bool | int = ..., uvDesc: bool | int = ..., uvValue: bool | int = ..., vert: bool | int = ..., vertEdge: bool | int = ..., vertNorm: bool | int = ...) -> Any: ...

@overload
def polyPinUV(*args, edit: Literal[True], createHistory: bool | int = ..., operation: int = ..., unpinned: bool | int = ..., uvSetName: str = ..., value: float | list[float] = ...) -> None: ...

@overload
def polyPinUV(*args, createHistory: bool | int = ..., operation: int = ..., query: bool | int = ..., unpinned: bool | int = ..., uvSetName: bool | int | str = ..., value: bool | int | float | list[float] = ...) -> Any: ...

@overload
def polyPipe(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., createUVs: bool | int = ..., frozen: bool | int = ..., height: float = ..., heightBaseline: float = ..., nodeState: int = ..., radius: float = ..., roundCap: bool | int = ..., roundCapHeightCompensation: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCaps: int = ..., subdivisionsHeight: int = ..., texture: bool | int = ..., thickness: float = ...) -> None: ...

@overload
def polyPipe(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: bool | int = ..., frozen: bool | int = ..., height: bool | int | float = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., roundCap: bool | int = ..., roundCapHeightCompensation: bool | int = ..., subdivisionsAxis: int = ..., subdivisionsCaps: int = ..., subdivisionsHeight: int = ..., texture: bool | int = ..., thickness: bool | int | float = ...) -> Any: ...

@overload
def polyPlanarProjection(*args, edit: Literal[True], caching: bool | int = ..., imageCenter: tuple[float, float] = ..., imageCenterX: float = ..., imageCenterY: float = ..., imageScale: tuple[float, float] = ..., imageScaleU: float = ..., imageScaleV: float = ..., nodeState: int = ..., projectionCenter: tuple[float, float, float] = ..., projectionCenterX: float = ..., projectionCenterY: float = ..., projectionCenterZ: float = ..., projectionHeight: float = ..., projectionHorizontalSweep: float = ..., projectionScale: tuple[float, float] = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., rotationAngle: float = ..., seamCorrect: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyPlanarProjection(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., frozen: bool | int = ..., imageCenter: bool | int | tuple[float, float] = ..., imageCenterX: bool | int | float = ..., imageCenterY: bool | int | float = ..., imageScale: bool | int | tuple[float, float] = ..., imageScaleU: bool | int | float = ..., imageScaleV: bool | int | float = ..., insertBeforeDeformers: bool | int = ..., keepImageRatio: bool | int = ..., mapDirection: str = ..., name: str = ..., nodeState: int = ..., perInstance: bool | int = ..., projectionCenter: bool | int | tuple[float, float, float] = ..., projectionCenterX: bool | int | float = ..., projectionCenterY: bool | int | float = ..., projectionCenterZ: bool | int | float = ..., projectionHeight: bool | int | float = ..., projectionHorizontalSweep: bool | int | float = ..., projectionScale: bool | int | tuple[float, float] = ..., projectionScaleU: float = ..., projectionScaleV: float = ..., query: bool | int = ..., radius: float = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., rotationAngle: bool | int | float = ..., seamCorrect: bool | int = ..., smartFit: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyPlane(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., height: float = ..., heightBaseline: float = ..., nodeState: int = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., texture: int = ..., width: float = ...) -> None: ...

@overload
def polyPlane(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., height: bool | int | float = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., subdivisionsHeight: int = ..., subdivisionsWidth: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., texture: int = ..., width: bool | int | float = ...) -> Any: ...

@overload
def polyPlatonicSolid(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., frozen: bool | int = ..., heightBaseline: float = ..., nodeState: int = ..., radius: float = ..., sideLength: float = ...) -> None: ...

@overload
def polyPlatonicSolid(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., sideLength: bool | int | float = ..., solidType: int = ..., texture: int = ...) -> Any: ...

@overload
def polyPoke(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyPoke(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., localTranslate: tuple[float, float, float] = ..., localTranslateX: float = ..., localTranslateY: float = ..., localTranslateZ: float = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyPrimitive(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., heightBaseline: float = ..., nodeState: int = ..., radius: float = ..., sideLength: float = ..., texture: int = ...) -> None: ...

@overload
def polyPrimitive(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polyType: int = ..., query: bool | int = ..., radius: bool | int | float = ..., sideLength: bool | int | float = ..., texture: int = ...) -> Any: ...
def polyPrimitiveMisc(*args) -> Any: ...

@overload
def polyPrism(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., frozen: bool | int = ..., heightBaseline: float = ..., length: float = ..., nodeState: int = ..., numberOfSides: int = ..., numderOfSides: int = ..., sideLength: float = ..., subdivisionsCaps: int = ..., subdivisionsHeight: int = ...) -> None: ...

@overload
def polyPrism(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., heightBaseline: bool | int | float = ..., length: bool | int | float = ..., name: str = ..., nodeState: int = ..., numberOfSides: int = ..., numderOfSides: int = ..., object: bool | int = ..., query: bool | int = ..., sideLength: bool | int | float = ..., subdivisionsCaps: int = ..., subdivisionsHeight: int = ..., texture: int = ...) -> Any: ...

@overload
def polyProjectCurve(*args, edit: Literal[True], caching: bool | int = ..., direction: tuple[float, float, float] = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., nodeState: int = ..., tolerance: float = ...) -> None: ...

@overload
def polyProjectCurve(*args, addUnderTransform: bool | int = ..., automatic: bool | int = ..., baryCoord: tuple[float, float, float] = ..., baryCoord1: float = ..., baryCoord2: float = ..., baryCoord3: float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., curveSamples: int = ..., direction: bool | int | tuple[float, float, float] = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., face: int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., pointsOnEdges: bool | int = ..., query: bool | int = ..., tolerance: bool | int | float = ..., triangle: int = ...) -> Any: ...
def polyProjection(*args, constructionHistory: bool | int = ..., createNewMap: bool | int = ..., imageCenterX: float = ..., imageCenterY: float = ..., imageScaleU: float = ..., imageScaleV: float = ..., insertBeforeDeformers: bool | int = ..., keepImageRatio: bool | int = ..., mapDirection: str = ..., projectionCenterX: float = ..., projectionCenterY: float = ..., projectionCenterZ: float = ..., projectionScaleU: float = ..., projectionScaleV: float = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., rotationAngle: float = ..., seamCorrect: bool | int = ..., smartFit: bool | int = ..., type: str = ..., uvSetName: str = ...) -> Any: ...

@overload
def polyPyramid(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., heightBaseline: float = ..., nodeState: int = ..., numberOfSides: int = ..., numderOfSides: int = ..., sideLength: float = ..., subdivisionsCaps: int = ..., subdivisionsHeight: int = ..., texture: bool | int = ...) -> None: ...

@overload
def polyPyramid(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., numberOfSides: int = ..., numderOfSides: int = ..., object: bool | int = ..., query: bool | int = ..., sideLength: bool | int | float = ..., subdivisionsCaps: int = ..., subdivisionsHeight: int = ..., texture: bool | int = ...) -> Any: ...

@overload
def polyQuad(*args, edit: Literal[True], angle: float = ..., caching: bool | int = ..., keepGroupBorder: bool | int = ..., keepHardEdges: bool | int = ..., keepTextureBorders: bool | int = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyQuad(*args, angle: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., keepGroupBorder: bool | int = ..., keepHardEdges: bool | int = ..., keepTextureBorders: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def polyQueryBlindData(*args, associationType: str = ..., binaryData: str = ..., booleanData: bool | int = ..., doubleData: float = ..., intData: int = ..., longDataName: str | list[str] = ..., maxValue: float = ..., minValue: float = ..., shortDataName: str | list[str] = ..., showComp: bool | int = ..., stringData: str = ..., subString: str = ..., typeId: int = ...) -> Any: ...

@overload
def polyReduce(*args, edit: Literal[True], caching: bool | int = ..., cachingReduce: bool | int = ..., colorWeights: float = ..., compactness: float = ..., geomWeights: float = ..., invertVertexWeights: bool | int = ..., keepBorder: bool | int = ..., keepBorderWeight: float = ..., keepColorBorder: bool | int = ..., keepColorBorderWeight: float = ..., keepCreaseEdge: bool | int = ..., keepCreaseEdgeWeight: float = ..., keepFaceGroupBorder: bool | int = ..., keepFaceGroupBorderWeight: float = ..., keepHardEdge: bool | int = ..., keepHardEdgeWeight: float = ..., keepMapBorder: bool | int = ..., keepMapBorderWeight: float = ..., keepOriginalVertices: bool | int = ..., keepQuadsWeight: float = ..., nodeState: int = ..., percentage: float = ..., preserveTopology: bool | int = ..., sharpness: float = ..., symmetryPlaneW: float = ..., symmetryPlaneX: float = ..., symmetryPlaneY: float = ..., symmetryPlaneZ: float = ..., symmetryTolerance: float = ..., termination: int = ..., triangleCount: int = ..., triangulate: bool | int = ..., useVirtualSymmetry: int = ..., uvWeights: float = ..., version: int = ..., vertexCount: int = ..., vertexWeightCoefficient: float = ..., weightCoefficient: float = ...) -> None: ...

@overload
def polyReduce(*args, border: float = ..., caching: bool | int = ..., cachingReduce: bool | int = ..., colorWeights: bool | int | float = ..., compactness: bool | int | float = ..., constructionHistory: bool | int = ..., detail: float = ..., frozen: bool | int = ..., geomWeights: bool | int | float = ..., invertVertexWeights: bool | int = ..., keepBorder: bool | int = ..., keepBorderWeight: bool | int | float = ..., keepColorBorder: bool | int = ..., keepColorBorderWeight: bool | int | float = ..., keepCreaseEdge: bool | int = ..., keepCreaseEdgeWeight: bool | int | float = ..., keepFaceGroupBorder: bool | int = ..., keepFaceGroupBorderWeight: bool | int | float = ..., keepHardEdge: bool | int = ..., keepHardEdgeWeight: bool | int | float = ..., keepMapBorder: bool | int = ..., keepMapBorderWeight: bool | int | float = ..., keepOriginalVertices: bool | int = ..., keepQuadsWeight: bool | int | float = ..., line: float = ..., name: str = ..., nodeState: int = ..., percentage: bool | int | float = ..., preserveLocation: bool | int = ..., preserveTopology: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., sharpness: bool | int | float = ..., symmetryPlane: tuple[float, float, float, float] = ..., symmetryPlaneW: bool | int | float = ..., symmetryPlaneX: bool | int | float = ..., symmetryPlaneY: bool | int | float = ..., symmetryPlaneZ: bool | int | float = ..., symmetryTolerance: bool | int | float = ..., termination: int = ..., triangleCount: int = ..., triangulate: bool | int = ..., useInputComp: bool | int = ..., useVirtualSymmetry: int = ..., uvWeights: bool | int | float = ..., version: int = ..., vertexCount: int = ..., vertexMapName: bool | int | str = ..., vertexWeightCoefficient: bool | int | float = ..., weightCoefficient: bool | int | float = ...) -> Any: ...

@overload
def polyRemesh(*args, edit: Literal[True], caching: bool | int = ..., collapseThreshold: float = ..., interpolationType: int = ..., maxEdgeLength: float = ..., nodeState: int = ..., smoothStrength: float = ..., tessellateBorders: bool | int = ..., useRelativeValues: bool | int = ...) -> None: ...

@overload
def polyRemesh(*args, caching: bool | int = ..., collapseThreshold: bool | int | float = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., interpolationType: int = ..., maxEdgeLength: bool | int | float = ..., maxTriangleCount: int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., smoothStrength: bool | int | float = ..., tessellateBorders: bool | int = ..., useInputComp: bool | int = ..., useRelativeValues: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def polyRetopo(*args, angle: float = ..., anisotropy: float = ..., axis: int = ..., axisOffset: float = ..., axisPosition: int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., curveInfluenceDirection: float = ..., curveSingularitySeparation: float = ..., edgesByAngle: bool | int = ..., edit: bool | int = ..., faceUniformity: float = ..., featureTags: str = ..., frozen: bool | int = ..., inspectMesh: bool | int = ..., interactiveMode: bool | int = ..., name: str = ..., nodeState: int = ..., preprocessMesh: bool | int = ..., preserveHardEdges: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., shortEdgeTolerance: float = ..., symmetry: bool | int = ..., targetEdgeDeviation: float = ..., targetFaceCount: int = ..., targetFaceCountTolerance: int = ..., thinTriangleAngleTolerance: float = ..., topologyRegularity: float = ..., useFeatureTags: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def polyRetopoCtx(*args, edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def polySelect(*args, add: bool | int = ..., addFirst: bool | int = ..., asSelectString: bool | int = ..., deselect: bool | int = ..., edgeBorder: bool | int | int | list[int] = ..., edgeBorderPath: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., edgeBorderPattern: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., edgeLoop: bool | int | int | list[int] = ..., edgeLoopOrBorder: bool | int | int | list[int] = ..., edgeLoopOrBorderPattern: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., edgeLoopPath: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., edgeLoopPattern: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., edgeRing: bool | int | int | list[int] = ..., edgeRingPath: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., edgeRingPattern: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., edgeUVLoopOrBorder: bool | int | int | list[int] = ..., everyN: int = ..., extendToShell: bool | int | int | list[int] = ..., noSelection: bool | int = ..., query: bool | int = ..., replace: bool | int = ..., shortestEdgePath: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., shortestEdgePathUV: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., shortestFacePath: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., toggle: bool | int = ...) -> Any: ...
def polySelectConstraint(*args, angle: int = ..., anglePropagation: bool | int = ..., angleTolerance: bool | int | float = ..., anglebound: bool | int | tuple[float, float] = ..., border: bool | int = ..., borderPropagation: bool | int = ..., convexity: int = ..., crease: bool | int = ..., disable: bool | int = ..., dist: int = ..., distaxis: bool | int | tuple[float, float, float] = ..., distbound: bool | int | tuple[float, float] = ..., distpoint: bool | int | tuple[float, float, float] = ..., edgeDistance: int = ..., geometricarea: int = ..., geometricareabound: bool | int | tuple[float, float] = ..., holes: int = ..., length: int = ..., lengthbound: bool | int | tuple[float, float] = ..., loopPropagation: bool | int = ..., max2dAngle: float = ..., max3dAngle: float = ..., mode: int = ..., nonmanifold: int = ..., oppositeEdges: bool | int = ..., order: int = ..., orderbound: bool | int | tuple[int, int] = ..., orient: int = ..., orientaxis: bool | int | tuple[float, float, float] = ..., orientbound: bool | int | tuple[float, float] = ..., planarity: int = ..., propagate: int = ..., query: bool | int = ..., random: int = ..., randomratio: bool | int | float = ..., returnSelection: bool | int = ..., ringPropagation: bool | int = ..., shell: bool | int = ..., size: int = ..., smoothness: int = ..., stateString: bool | int = ..., textured: int = ..., texturedarea: int = ..., texturedareabound: bool | int | tuple[float, float] = ..., textureshared: int = ..., topology: int = ..., type: int = ..., uvBorderSelection: bool | int = ..., uvConstraint: bool | int = ..., uvEdgeLoopPropagation: bool | int = ..., uvEdgeRingPropagation: bool | int = ..., uvFaceOrientation: int = ..., uvShell: bool | int = ..., visibility: int = ..., visibilityangle: bool | int | float = ..., visibilitypoint: bool | int | tuple[float, float, float] = ..., where: int = ..., wholeSensitive: bool | int = ...) -> Any: ...
def polySelectConstraintMonitor(*args, changeCommand: tuple[str, str] = ..., create: bool | int = ..., delete: bool | int = ...) -> Any: ...

@overload
def polySelectCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., mode: int = ...) -> None: ...

@overload
def polySelectCtx(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., mode: int = ..., query: bool | int = ...) -> Any: ...

@overload
def polySelectEditCtx(*args, edit: Literal[True], absoluteOffset: bool | int = ..., adjustEdgeFlow: float = ..., deleteEdge: bool | int = ..., divisions: int = ..., endVertexOffset: float = ..., fixQuads: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., insertWithEdgeFlow: bool | int = ..., mode: int = ..., smoothingAngle: float = ..., splitType: int = ..., startVertexOffset: float = ..., useEqualMultiplier: bool | int = ...) -> None: ...

@overload
def polySelectEditCtx(*args, absoluteOffset: bool | int = ..., adjustEdgeFlow: bool | int | float = ..., autoComplete: bool | int = ..., deleteEdge: bool | int = ..., divisions: int = ..., endVertexOffset: bool | int | float = ..., exists: bool | int = ..., fixQuads: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., insertWithEdgeFlow: bool | int = ..., mode: int = ..., query: bool | int = ..., smoothingAngle: bool | int | float = ..., splitType: int = ..., startVertexOffset: bool | int | float = ..., useEqualMultiplier: bool | int = ...) -> Any: ...
def polySelectEditCtxDataCmd(*args) -> Any: ...
def polySelectSp(*args, loop: bool | int = ..., query: bool | int = ..., ring: bool | int = ...) -> Any: ...

@overload
def polySeparate(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polySeparate(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., endFace: int = ..., frozen: bool | int = ..., inPlace: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., removeShells: bool | int = ..., separateSpecificShell: int | list[int] = ..., startFace: int = ..., userSpecifiedShells: bool | int = ...) -> Any: ...
def polySetToFaceNormal(*args, setUserNormal: bool | int = ...) -> Any: ...
def polySetVertices(*args) -> Any: ...

@overload
def polySewEdge(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., texture: bool | int = ..., tolerance: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polySewEdge(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., texture: bool | int = ..., tolerance: bool | int | float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyShortestPathCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def polyShortestPathCtx(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...
def polySlideEdge(*args, absolute: bool | int = ..., direction: int = ..., edgeDirection: float = ..., symmetry: bool | int = ...) -> Any: ...
def polySlideEdgeCtx(*args, absolute: bool | int = ..., direction: int = ..., edgeDirection: float = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ..., snappingPoints: int = ..., snappingTolerance: float = ..., useSnapping: bool | int = ...) -> Any: ...

@overload
def polySmartExtrude(*args, edit: Literal[True], caching: bool | int = ..., localCenter: int = ..., localDirection: tuple[float, float, float] = ..., localDirectionX: float = ..., localDirectionY: float = ..., localDirectionZ: float = ..., localRotate: tuple[float, float, float] = ..., localRotateX: float = ..., localRotateY: float = ..., localRotateZ: float = ..., localScale: tuple[float, float, float] = ..., localScaleX: float = ..., localScaleY: float = ..., localScaleZ: float = ..., localTranslate: tuple[float, float, float] = ..., localTranslateX: float = ..., localTranslateY: float = ..., localTranslateZ: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., scale: tuple[float, float, float] = ..., scaleX: float = ..., scaleY: float = ..., scaleZ: float = ..., translate: tuple[float, float, float] = ..., translateX: float = ..., translateY: float = ..., translateZ: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polySmartExtrude(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., interactiveUpdate: bool | int = ..., localCenter: int = ..., localDirection: bool | int | tuple[float, float, float] = ..., localDirectionX: bool | int | float = ..., localDirectionY: bool | int | float = ..., localDirectionZ: bool | int | float = ..., localRotate: bool | int | tuple[float, float, float] = ..., localRotateX: bool | int | float = ..., localRotateY: bool | int | float = ..., localRotateZ: bool | int | float = ..., localScale: bool | int | tuple[float, float, float] = ..., localScaleX: bool | int | float = ..., localScaleY: bool | int | float = ..., localScaleZ: bool | int | float = ..., localTranslate: bool | int | tuple[float, float, float] = ..., localTranslateX: bool | int | float = ..., localTranslateY: bool | int | float = ..., localTranslateZ: bool | int | float = ..., name: str = ..., nodeState: int = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotOrientation: tuple[float, float, float] = ..., pivotOrientationX: float = ..., pivotOrientationY: float = ..., pivotOrientationZ: float = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., query: bool | int = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., scale: bool | int | tuple[float, float, float] = ..., scaleX: bool | int | float = ..., scaleY: bool | int | float = ..., scaleZ: bool | int | float = ..., translate: bool | int | tuple[float, float, float] = ..., translateX: bool | int | float = ..., translateY: bool | int | float = ..., translateZ: bool | int | float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polySmooth(*args, edit: Literal[True], caching: bool | int = ..., continuity: float = ..., divisions: int = ..., keepBorder: bool | int = ..., keepHardEdge: bool | int = ..., keepSelectionBorder: bool | int = ..., nodeState: int = ..., osdCreaseMethod: int = ..., osdFvarBoundary: int = ..., osdFvarPropagateCorners: bool | int = ..., osdSmoothTriangles: bool | int = ..., osdVertBoundary: int = ..., propagateEdgeHardness: bool | int = ..., subdivisionType: int = ...) -> None: ...

@overload
def polySmooth(*args, boundaryRule: int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., continuity: bool | int | float = ..., degree: int = ..., divisions: int = ..., divisionsPerEdge: int = ..., frozen: bool | int = ..., keepBorder: bool | int = ..., keepHardEdge: bool | int = ..., keepMapBorders: int = ..., keepSelectionBorder: bool | int = ..., keepTesselation: bool | int = ..., keepTessellation: bool | int = ..., method: int = ..., name: str = ..., nodeState: int = ..., osdCreaseMethod: int = ..., osdFvarBoundary: int = ..., osdFvarPropagateCorners: bool | int = ..., osdSmoothTriangles: bool | int = ..., osdVertBoundary: int = ..., propagateEdgeHardness: bool | int = ..., pushStrength: float = ..., query: bool | int = ..., roundness: float = ..., smoothUVs: bool | int = ..., subdivisionLevels: int = ..., subdivisionType: int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polySoftEdge(*args, edit: Literal[True], angle: float = ..., caching: bool | int = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polySoftEdge(*args, angle: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polySphere(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., frozen: bool | int = ..., heightBaseline: float = ..., nodeState: int = ..., radius: float = ..., subdivisionsAxis: int = ..., subdivisionsHeight: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ...) -> None: ...

@overload
def polySphere(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: int = ..., frozen: bool | int = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., subdivisionsAxis: int = ..., subdivisionsHeight: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., texture: int = ...) -> Any: ...

@overload
def polySphericalProjection(*args, edit: Literal[True], caching: bool | int = ..., imageCenter: tuple[float, float] = ..., imageCenterX: float = ..., imageCenterY: float = ..., imageScale: tuple[float, float] = ..., imageScaleU: float = ..., imageScaleV: float = ..., nodeState: int = ..., projectionCenter: tuple[float, float, float] = ..., projectionCenterX: float = ..., projectionCenterY: float = ..., projectionCenterZ: float = ..., projectionHorizontalSweep: float = ..., projectionScale: tuple[float, float] = ..., projectionScaleU: float = ..., projectionScaleV: float = ..., radius: float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., rotationAngle: float = ..., seamCorrect: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polySphericalProjection(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., frozen: bool | int = ..., imageCenter: bool | int | tuple[float, float] = ..., imageCenterX: bool | int | float = ..., imageCenterY: bool | int | float = ..., imageScale: bool | int | tuple[float, float] = ..., imageScaleU: bool | int | float = ..., imageScaleV: bool | int | float = ..., insertBeforeDeformers: bool | int = ..., keepImageRatio: bool | int = ..., mapDirection: str = ..., name: str = ..., nodeState: int = ..., perInstance: bool | int = ..., projectionCenter: bool | int | tuple[float, float, float] = ..., projectionCenterX: bool | int | float = ..., projectionCenterY: bool | int | float = ..., projectionCenterZ: bool | int | float = ..., projectionHeight: float = ..., projectionHorizontalSweep: bool | int | float = ..., projectionScale: bool | int | tuple[float, float] = ..., projectionScaleU: bool | int | float = ..., projectionScaleV: bool | int | float = ..., query: bool | int = ..., radius: bool | int | float = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., rotationAngle: bool | int | float = ..., seamCorrect: bool | int = ..., smartFit: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def polySpinEdge(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., edit: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., offset: int = ..., query: bool | int = ..., reverse: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polySplit(*args, edit: Literal[True], adjustEdgeFlow: float = ..., insertWithEdgeFlow: bool | int = ..., subdivision: int = ...) -> None: ...

@overload
def polySplit(*args, adjustEdgeFlow: bool | int | float = ..., constructionHistory: bool | int = ..., detachEdges: bool | int = ..., edgepoint: tuple[int, float] | list[tuple[int, float]] = ..., facepoint: tuple[int, float, float, float] | list[tuple[int, float, float, float]] = ..., insertWithEdgeFlow: bool | int = ..., insertpoint: tuple[int, float, float, float] | list[tuple[int, float, float, float]] = ..., name: str = ..., projectedCurve: str | list[str] = ..., projectedCurveTolerance: float = ..., query: bool | int = ..., smoothingangle: float = ..., subdivision: int = ...) -> Any: ...

@overload
def polySplitCtx(*args, edit: Literal[True], enablesnap: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., magnetsnap: int = ..., precsnap: float = ..., smoothingangle: float = ..., snaptoedge: bool | int = ..., subdivision: int = ...) -> None: ...

@overload
def polySplitCtx(*args, enablesnap: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., magnetsnap: int = ..., precsnap: bool | int | float = ..., query: bool | int = ..., smoothingangle: bool | int | float = ..., snaptoedge: bool | int = ..., subdivision: int = ...) -> Any: ...

@overload
def polySplitCtx2(*args, edit: Literal[True], adjustEdgeFlow: float = ..., constrainToEdges: bool | int = ..., edgeMagnets: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., insertWithEdgeFlow: bool | int = ..., snapTolerance: float = ..., snappedToEdgeColor: tuple[float, float, float] = ..., snappedToFaceColor: tuple[float, float, float] = ..., snappedToMagnetColor: tuple[float, float, float] = ..., snappedToVertexColor: tuple[float, float, float] = ...) -> None: ...

@overload
def polySplitCtx2(*args, adjustEdgeFlow: bool | int | float = ..., constrainToEdges: bool | int = ..., detachEdges: bool | int = ..., edgeMagnets: int = ..., exists: bool | int = ..., highlightPointColor: tuple[float, float, float] = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., insertWithEdgeFlow: bool | int = ..., query: bool | int = ..., snapTolerance: bool | int | float = ..., snappedToEdgeColor: bool | int | tuple[float, float, float] = ..., snappedToFaceColor: bool | int | tuple[float, float, float] = ..., snappedToMagnetColor: bool | int | tuple[float, float, float] = ..., snappedToVertexColor: bool | int | tuple[float, float, float] = ..., snappingTolerance: float = ..., splitLineColor: tuple[float, float, float] = ...) -> Any: ...

@overload
def polySplitEdge(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., operation: int = ...) -> None: ...

@overload
def polySplitEdge(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., cutUVs: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., operation: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polySplitRing(*args, edit: Literal[True], adjustEdgeFlow: float = ..., caching: bool | int = ..., direction: bool | int = ..., divisions: int = ..., enableProfileCurve: bool | int = ..., fixQuads: bool | int = ..., insertWithEdgeFlow: bool | int = ..., nodeState: int = ..., profileCurveInputOffset: float = ..., profileCurveInputScale: float = ..., profileCurve_FloatValue: float = ..., profileCurve_Interp: int = ..., profileCurve_Position: float = ..., rootEdge: int = ..., smoothingAngle: float = ..., splitType: int = ..., useEqualMultiplier: bool | int = ..., useFaceNormalsAtEnds: bool | int = ..., weight: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polySplitRing(*args, adjustEdgeFlow: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., direction: bool | int = ..., divisions: int = ..., enableProfileCurve: bool | int = ..., fixQuads: bool | int = ..., frozen: bool | int = ..., insertWithEdgeFlow: bool | int = ..., name: str = ..., nodeState: int = ..., profileCurveInputOffset: bool | int | float = ..., profileCurveInputScale: bool | int | float = ..., profileCurve_FloatValue: bool | int | float = ..., profileCurve_Interp: int = ..., profileCurve_Position: bool | int | float = ..., query: bool | int = ..., rootEdge: int = ..., smoothingAngle: bool | int | float = ..., splitType: int = ..., useEqualMultiplier: bool | int = ..., useFaceNormalsAtEnds: bool | int = ..., useInputComp: bool | int = ..., weight: bool | int | float = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polySplitVertex(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polySplitVertex(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polyStraightenUVBorder(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyStraightenUVBorder(*args, blendOriginal: bool | int | float = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., curvature: bool | int | float = ..., frozen: bool | int = ..., gapTolerance: int = ..., name: str = ..., nodeState: int = ..., preserveLength: bool | int | float = ..., query: bool | int = ..., useInputComp: bool | int = ..., uvSetName: str = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polySubdivideEdge(*args, edit: Literal[True], caching: bool | int = ..., divisions: int = ..., nodeState: int = ..., size: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polySubdivideEdge(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., divisions: int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., size: bool | int | float = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def polySubdivideFacet(*args, edit: Literal[True], caching: bool | int = ..., divisions: int = ..., divisionsU: int = ..., divisionsV: int = ..., mode: int = ..., nodeState: int = ..., subdMethod: int = ...) -> None: ...

@overload
def polySubdivideFacet(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., divisions: int = ..., divisionsU: int = ..., divisionsV: int = ..., frozen: bool | int = ..., mode: int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., subdMethod: int = ..., useInputComp: bool | int = ...) -> Any: ...
def polySuperCtx(*args, attach: str | list[str] = ..., edit: bool | int = ..., exists: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., query: bool | int = ...) -> Any: ...
def polyTestPop(*args) -> Any: ...
def polyToCurve(*args, addUnderTransform: bool | int = ..., caching: bool | int = ..., conformToSmoothMeshPreview: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., displaySmoothMesh: int = ..., edit: bool | int = ..., form: int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def polyToSubdiv(*args, edit: Literal[True], absolutePosition: bool | int = ..., applyMatrixToResult: bool | int = ..., caching: bool | int = ..., maxEdgesPerVert: int = ..., maxPolyCount: int = ..., nodeState: int = ..., preserveVertexOrdering: bool | int = ..., quickConvert: bool | int = ..., uvPoints: tuple[float, float] | list[tuple[float, float]] = ..., uvPointsU: float = ..., uvPointsV: float = ..., uvTreatment: int = ...) -> None: ...

@overload
def polyToSubdiv(*args, absolutePosition: bool | int = ..., addUnderTransform: bool | int = ..., applyMatrixToResult: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., maxEdgesPerVert: int = ..., maxPolyCount: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., preserveVertexOrdering: bool | int = ..., query: bool | int = ..., quickConvert: bool | int = ..., uvPoints: bool | int | tuple[float, float] | list[tuple[float, float]] = ..., uvPointsU: bool | int | float = ..., uvPointsV: bool | int | float = ..., uvTreatment: int = ...) -> Any: ...

@overload
def polyTorus(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., createUVs: bool | int = ..., frozen: bool | int = ..., heightBaseline: float = ..., nodeState: int = ..., radius: float = ..., sectionRadius: float = ..., subdivisionsAxis: int = ..., subdivisionsHeight: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., texture: bool | int = ..., twist: float = ...) -> None: ...

@overload
def polyTorus(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., componentTagCreate: bool | int = ..., constructionHistory: bool | int = ..., createUVs: bool | int = ..., frozen: bool | int = ..., heightBaseline: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: bool | int | float = ..., sectionRadius: bool | int | float = ..., subdivisionsAxis: int = ..., subdivisionsHeight: int = ..., subdivisionsX: int = ..., subdivisionsY: int = ..., texture: bool | int = ..., twist: bool | int | float = ...) -> Any: ...

@overload
def polyTransfer(*args, edit: Literal[True], alternateObject: str = ..., caching: bool | int = ..., nodeState: int = ..., uvSets: bool | int = ..., vertexColor: bool | int = ..., vertices: bool | int = ...) -> None: ...

@overload
def polyTransfer(*args, alternateObject: bool | int | str = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., uvSets: bool | int = ..., vertexColor: bool | int = ..., vertices: bool | int = ...) -> Any: ...

@overload
def polyTriangulate(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyTriangulate(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...
def polyUVCoverage(*args, uvRange: tuple[float, float, float, float] = ...) -> Any: ...
def polyUVOverlap(*args, nonOverlappingComponents: bool | int = ..., overlappingComponents: bool | int = ...) -> Any: ...

@overload
def polyUVRectangle(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyUVRectangle(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ...) -> Any: ...

@overload
def polyUVSet(*args, edit: Literal[True], allUVSets: bool | int = ..., allUVSetsIndices: bool | int = ..., allUVSetsWithCount: bool | int = ..., copy: bool | int = ..., create: bool | int = ..., currentLastUVSet: bool | int = ..., currentPerInstanceUVSet: bool | int = ..., currentUVSet: bool | int = ..., delete: bool | int = ..., genNewUVSet: bool | int = ..., newUVSet: str = ..., perInstance: bool | int = ..., projections: bool | int = ..., rename: bool | int = ..., reorder: bool | int = ..., shareInstances: bool | int = ..., unshared: bool | int = ..., uvSet: str = ...) -> None: ...

@overload
def polyUVSet(*args, allUVSets: bool | int = ..., allUVSetsIndices: bool | int = ..., allUVSetsWithCount: bool | int = ..., copy: bool | int = ..., create: bool | int = ..., currentLastUVSet: bool | int = ..., currentPerInstanceUVSet: bool | int = ..., currentUVSet: bool | int = ..., delete: bool | int = ..., genNewUVSet: bool | int = ..., newUVSet: bool | int | str = ..., perInstance: bool | int = ..., projections: bool | int = ..., query: bool | int = ..., rename: bool | int = ..., reorder: bool | int = ..., shareInstances: bool | int = ..., unshared: bool | int = ..., uvSet: bool | int | str = ...) -> Any: ...
def polyUVStackSimilarShells(*args, onlyMatch: bool | int = ..., tolerance: float = ...) -> Any: ...
def polyUVStackSimilarShellsCmd(*args) -> Any: ...

@overload
def polyUnite(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyUnite(*args, caching: bool | int = ..., centerPivot: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., mergeUVSets: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., objectPivot: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def polyUniteSkinned(*args, edit: Literal[True], centerPivot: bool | int = ..., constructionHistory: bool | int = ..., mergeUVSets: int = ..., objectPivot: bool | int = ...) -> None: ...

@overload
def polyUniteSkinned(*args, centerPivot: bool | int = ..., constructionHistory: bool | int = ..., mergeUVSets: int = ..., objectPivot: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def polyUnsmooth(*args, edit: Literal[True], caching: bool | int = ..., divisionLevels: int = ..., frozen: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def polyUnsmooth(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., divisionLevels: int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., useInputComp: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def polyVertexNormalCtx(*args, deformmode: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., lockmode: int = ..., query: bool | int = ..., relativemode: int = ..., rotatemode: int = ...) -> Any: ...
def polyWarpImage(*args, background: tuple[int, int, int] = ..., bilinear: bool | int = ..., fileFormat: str = ..., inputName: str = ..., inputUvSetName: str = ..., noAlpha: bool | int = ..., outputName: str = ..., outputUvSetName: str = ..., overwrite: bool | int = ..., tiled: bool | int = ..., xResolution: int = ..., yResolution: int = ...) -> Any: ...

@overload
def polyWedgeFace(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def polyWedgeFace(*args, axis: tuple[float, float, float] = ..., axisX: float = ..., axisY: float = ..., axisZ: float = ..., caching: bool | int = ..., center: tuple[float, float, float] = ..., centerX: float = ..., centerY: float = ..., centerZ: float = ..., constructionHistory: bool | int = ..., divisions: int = ..., edge: int | list[int] = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ..., useInputComp: bool | int = ..., wedgeAngle: float = ..., worldSpace: bool | int = ...) -> Any: ...
def popListItem(*args, **keywords): ...

@overload
def popupMenu(*args, edit: Literal[True], altModifier: bool | int = ..., button: int = ..., ctrlModifier: bool | int = ..., deleteAllItems: bool | int = ..., markingMenu: bool | int = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., shiftModifier: bool | int = ...) -> None: ...

@overload
def popupMenu(*args, allowOptionBoxes: bool | int = ..., altModifier: bool | int = ..., button: int = ..., ctrlModifier: bool | int = ..., defineTemplate: str = ..., deleteAllItems: bool | int = ..., exists: bool | int = ..., itemArray: bool | int = ..., markingMenu: bool | int = ..., numberOfItems: bool | int = ..., parent: str = ..., postMenuCommand: str | Callable = ..., postMenuCommandOnce: bool | int = ..., query: bool | int = ..., shiftModifier: bool | int = ..., useTemplate: str = ...) -> Any: ...
def pose(*args, allPoses: bool | int = ..., apply: bool | int = ..., edit: bool | int = ..., name: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def poseEditor(*args, edit: Literal[True], docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., parent: str = ..., selectionConnection: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def poseEditor(*args, control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectionConnection: bool | int | str = ..., stateString: bool | int = ..., targetControlList: bool | int = ..., targetList: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def posePanel(*args, edit: Literal[True], copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def posePanel(*args, control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., poseEditor: bool | int = ..., query: bool | int = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...
def preferredRenderer(*args, fallback: bool | int | str = ..., makeCurrent: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def preloadRefEd(*args, edit: Literal[True], docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., parent: str = ..., selectCommand: str | Callable = ..., selectionConnection: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def preloadRefEd(*args, control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectCommand: bool | int | str | Callable = ..., selectFileNode: bool | int = ..., selectionConnection: bool | int | str = ..., stateString: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def prepareRender(*args, edit: Literal[True], defaultTraversalSet: str = ..., deregister: str = ..., label: str = ..., postRender: str | Callable = ..., postRenderFrame: str | Callable = ..., postRenderLayer: str | Callable = ..., preRender: str | Callable = ..., preRenderFrame: str | Callable = ..., preRenderLayer: str | Callable = ..., saveAssemblyConfig: bool | int = ..., settingsUI: str | Callable = ..., traversalSet: str = ..., traversalSetInit: str | Callable = ...) -> None: ...

@overload
def prepareRender(*args, defaultTraversalSet: bool | int | str = ..., deregister: str = ..., invokePostRender: bool | int = ..., invokePostRenderFrame: bool | int = ..., invokePostRenderLayer: bool | int = ..., invokePreRender: bool | int = ..., invokePreRenderFrame: bool | int = ..., invokePreRenderLayer: bool | int = ..., invokeSettingsUI: bool | int = ..., label: bool | int | str = ..., listTraversalSets: bool | int = ..., postRender: bool | int | str | Callable = ..., postRenderFrame: bool | int | str | Callable = ..., postRenderLayer: bool | int | str | Callable = ..., preRender: bool | int | str | Callable = ..., preRenderFrame: bool | int | str | Callable = ..., preRenderLayer: bool | int | str | Callable = ..., query: bool | int = ..., restore: bool | int = ..., saveAssemblyConfig: bool | int = ..., settingsUI: bool | int | str | Callable = ..., setup: bool | int = ..., traversalSet: bool | int | str = ..., traversalSetInit: bool | int | str | Callable = ...) -> Any: ...
def prependListItem(*args, **keywords): ...
def profiler(*args, addCategory: str = ..., allCategories: bool | int = ..., bufferSize: int = ..., categoryIndex: int = ..., categoryIndexToName: int = ..., categoryInfo: bool | int | str = ..., categoryName: bool | int | str = ..., categoryNameToIndex: bool | int | str = ..., categoryRecording: bool | int = ..., clearAllMelInstrumentation: bool | int = ..., colorIndex: int = ..., eventCPUId: bool | int = ..., eventCategory: bool | int = ..., eventColor: bool | int = ..., eventCount: bool | int = ..., eventDescription: bool | int = ..., eventDuration: bool | int = ..., eventIndex: int = ..., eventName: bool | int = ..., eventStartTime: bool | int = ..., eventThreadId: bool | int = ..., instrumentMel: bool | int = ..., load: bool | int | str = ..., output: bool | int | str = ..., procedureDescription: str = ..., procedureName: str = ..., query: bool | int = ..., removeCategory: str = ..., reset: bool | int = ..., sampling: bool | int = ..., signalEvent: bool | int = ..., signalMelEvent: bool | int = ...) -> Any: ...

@overload
def profilerTool(*args, edit: Literal[True], categoryView: bool | int = ..., collapseSelectedEvents: bool | int = ..., collapseSelectedEventsRepetition: bool | int = ..., cpuView: bool | int = ..., expandSelectedEvents: bool | int = ..., expandSelectedEventsRepetition: bool | int = ..., frameAll: bool | int = ..., frameSelected: bool | int = ..., isolateSegment: int = ..., matchWholeWord: bool | int = ..., showAllEvent: bool | int = ..., showCriticalPath: bool | int = ..., showHotspot: bool | int = ..., showSelectedEvents: bool | int = ..., showSelectedEventsRepetition: bool | int = ..., threadView: bool | int = ..., unisolateSegment: bool | int = ...) -> None: ...

@overload
def profilerTool(*args, categoryView: bool | int = ..., collapseSelectedEvents: bool | int = ..., collapseSelectedEventsRepetition: bool | int = ..., cpuView: bool | int = ..., destroy: bool | int = ..., eventTypes: bool | int = ..., exists: bool | int = ..., expandSelectedEvents: bool | int = ..., expandSelectedEventsRepetition: bool | int = ..., findNext: bool | int = ..., findPrevious: bool | int = ..., frameAll: bool | int = ..., frameSelected: bool | int = ..., isolateSegment: int = ..., make: bool | int = ..., matchWholeWord: bool | int = ..., query: bool | int = ..., searchEvent: bool | int | str = ..., segmentCount: bool | int = ..., showAllEvent: bool | int = ..., showCriticalPath: bool | int = ..., showHotspot: bool | int = ..., showSelectedEvents: bool | int = ..., showSelectedEventsRepetition: bool | int = ..., threadView: bool | int = ..., unisolateSegment: bool | int = ...) -> Any: ...

@overload
def progressBar(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., beginProgress: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., endProgress: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., isInterruptable: bool | int = ..., isMainProgressBar: bool | int = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., progress: int = ..., status: str = ..., statusBarMessage: str = ..., step: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def progressBar(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., beginProgress: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., endProgress: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isCancelled: bool | int = ..., isInterruptable: bool | int = ..., isMainProgressBar: bool | int = ..., isObscured: bool | int = ..., manage: bool | int = ..., maxValue: int = ..., minValue: int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., progress: int = ..., query: bool | int = ..., status: bool | int | str = ..., statusBarMessage: str = ..., step: int = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def progressWindow(*args, edit: Literal[True], isInterruptable: bool | int = ..., maxValue: int = ..., minValue: int = ..., progress: int = ..., status: str = ..., step: int = ..., title: str = ...) -> None: ...

@overload
def progressWindow(*args, endProgress: bool | int = ..., isCancelled: bool | int = ..., isInterruptable: bool | int = ..., maxValue: int = ..., minValue: int = ..., progress: int = ..., query: bool | int = ..., status: bool | int | str = ..., step: int = ..., title: bool | int | str = ...) -> Any: ...

@overload
def projectCurve(*args, edit: Literal[True], caching: bool | int = ..., direction: tuple[float, float, float] = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., nodeState: int = ..., tolerance: float = ..., useNormal: bool | int = ...) -> None: ...

@overload
def projectCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., direction: bool | int | tuple[float, float, float] = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., range: bool | int = ..., tolerance: bool | int | float = ..., useNormal: bool | int = ...) -> Any: ...

@overload
def projectTangent(*args, edit: Literal[True], caching: bool | int = ..., curvature: bool | int = ..., curvatureScale: float = ..., ignoreEdges: bool | int = ..., nodeState: int = ..., reverseTangent: bool | int = ..., rotate: float = ..., tangentDirection: int = ..., tangentScale: float = ...) -> None: ...

@overload
def projectTangent(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., curvature: bool | int = ..., curvatureScale: bool | int | float = ..., frozen: bool | int = ..., ignoreEdges: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., reverseTangent: bool | int = ..., rotate: bool | int | float = ..., tangentDirection: int = ..., tangentScale: bool | int | float = ...) -> Any: ...

@overload
def projectionContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def projectionContext(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def projectionManip(*args, fitBBox: bool | int = ..., projType: int = ..., query: bool | int = ..., switchType: bool | int = ...) -> Any: ...
def promptDialog(*args, backgroundColor: tuple[float, float, float] = ..., button: str | list[str] = ..., cancelButton: str = ..., defaultButton: str = ..., dismissString: str = ..., message: str = ..., messageAlign: str = ..., parent: str = ..., query: bool | int = ..., scrollableField: bool | int = ..., style: str = ..., text: bool | int | str = ..., title: str = ...) -> Any: ...

@overload
def propModCtx(*args, edit: Literal[True], animCurve: str = ..., animCurveFalloff: tuple[float, float] = ..., animCurveParam: str = ..., direction: tuple[float, float, float] = ..., image1: str = ..., image2: str = ..., image3: str = ..., linear: float = ..., linearParam: tuple[float, float] = ..., nurbsCurve: str = ..., powerCutoff: float = ..., powerCutoffParam: tuple[float, float] = ..., powerDegree: float = ..., powerDegreeParam: float = ..., script: str = ..., scriptParam: str = ..., type: int = ..., worldspace: bool | int = ...) -> None: ...

@overload
def propModCtx(*args, animCurve: bool | int | str = ..., animCurveFalloff: bool | int | tuple[float, float] = ..., animCurveParam: bool | int | str = ..., direction: bool | int | tuple[float, float, float] = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., linear: bool | int | float = ..., linearParam: bool | int | tuple[float, float] = ..., nurbsCurve: bool | int | str = ..., powerCutoff: bool | int | float = ..., powerCutoffParam: bool | int | tuple[float, float] = ..., powerDegree: bool | int | float = ..., powerDegreeParam: bool | int | float = ..., query: bool | int = ..., script: bool | int | str = ..., scriptParam: bool | int | str = ..., type: int = ..., worldspace: bool | int = ...) -> Any: ...
def propMove(*args, percent: float | list[float] = ..., percentX: float | list[float] = ..., percentY: float | list[float] = ..., percentZ: float | list[float] = ..., pivot: tuple[float, float, float] = ..., rotate: tuple[float, float, float] = ..., scale: tuple[float, float, float] = ..., translate: tuple[float, float, float] = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def proximityWrap(*args, edit: Literal[True], addDrivers: str | list[str] = ..., applyUserDefaults: bool | int = ..., removeDrivers: str | list[str] = ...) -> None: ...

@overload
def proximityWrap(*args, addDrivers: str | list[str] = ..., applyUserDefaults: bool | int = ..., canBeAdded: bool | int | str | list[str] = ..., driverIndices: bool | int = ..., dumpInfo: bool | int = ..., freeDriverIndex: bool | int = ..., name: bool | int | str = ..., query: bool | int = ..., removeDrivers: str | list[str] = ...) -> Any: ...

@overload
def psdChannelOutliner(*args, edit: Literal[True], addChild: tuple[str, str] | list[tuple[str, str]] = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., doubleClickCommand: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., psdParent: str = ..., removeAll: bool | int = ..., removeChild: str | list[str] = ..., select: str = ..., selectCommand: str = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def psdChannelOutliner(*args, addChild: tuple[str, str] | list[tuple[str, str]] = ..., allItems: bool | int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., doubleClickCommand: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfItems: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., psdParent: str = ..., removeAll: bool | int = ..., removeChild: str | list[str] = ..., select: str = ..., selectCommand: str = ..., selectItem: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def psdConvSolidTxOptions(*args) -> Any: ...
def psdEditTextureFile(*args, addChannel: str | list[str] = ..., addChannelColor: tuple[str, float, float, float] | list[tuple[str, float, float, float]] = ..., addChannelImage: tuple[str, str] | list[tuple[str, str]] = ..., deleteChannel: str | list[str] = ..., psdFileName: str = ..., snapShotImage: str = ..., uvSnapPostionTop: bool | int = ...) -> Any: ...
def psdExport(*args, alphaChannelIdx: int = ..., bytesPerChannel: int = ..., emptyLayerSet: bool | int = ..., format: bool | int | str = ..., layerName: bool | int | str = ..., layerSetName: bool | int | str = ..., outFileName: bool | int | str = ..., preMultiplyAlpha: bool | int = ..., psdFileName: bool | int | str = ...) -> Any: ...
def psdTextureFile(*args, channelRGB: tuple[str, int, int, int, int] | list[tuple[str, int, int, int, int]] = ..., channels: tuple[str, int, bool | int] | list[tuple[str, int, bool | int]] = ..., imageFileName: tuple[str, str, int] | list[tuple[str, str, int]] = ..., psdFileName: str = ..., snapShotImageName: str = ..., uvSnapPostionTop: bool | int = ..., xResolution: int = ..., yResolution: int = ...) -> Any: ...
def python(*args) -> Any: ...
def querySubdiv(*args, action: int = ..., level: int = ..., relative: bool | int = ...) -> Any: ...
def quit(*args, abort: bool | int = ..., exitCode: int = ..., force: bool | int = ...) -> Any: ...

@overload
def radial(*args, edit: Literal[True], attenuation: float = ..., magnitude: float = ..., maxDistance: float = ..., name: str = ..., perVertex: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., torusSectionRadius: float = ..., type: float = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def radial(*args, attenuation: bool | int | float = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., name: bool | int | str = ..., perVertex: bool | int = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., torusSectionRadius: bool | int | float = ..., type: bool | int | float = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...

@overload
def radioButton(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., data: int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., offCommand: str | Callable = ..., onCommand: str | Callable = ..., preventOverride: bool | int = ..., recomputeSize: bool | int = ..., select: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def radioButton(*args, align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., collection: str = ..., data: int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., offCommand: str | Callable = ..., onCommand: str | Callable = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., recomputeSize: bool | int = ..., select: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def radioButtonGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., annotation1: str = ..., annotation2: str = ..., annotation3: str = ..., annotation4: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., changeCommand1: str | Callable = ..., changeCommand2: str | Callable = ..., changeCommand3: str | Callable = ..., changeCommand4: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., data1: int = ..., data2: int = ..., data3: int = ..., data4: int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., label1: str = ..., label2: str = ..., label3: str = ..., label4: str = ..., labelAnnotation: str = ..., labelArray2: tuple[str, str] = ..., labelArray3: tuple[str, str, str] = ..., labelArray4: tuple[str, str, str, str] = ..., manage: bool | int = ..., noBackground: bool | int = ..., offCommand: str | Callable = ..., offCommand1: str | Callable = ..., offCommand2: str | Callable = ..., offCommand3: str | Callable = ..., offCommand4: str | Callable = ..., onCommand: str | Callable = ..., onCommand1: str | Callable = ..., onCommand2: str | Callable = ..., onCommand3: str | Callable = ..., onCommand4: str | Callable = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., select: int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def radioButtonGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., annotation1: bool | int | str = ..., annotation2: bool | int | str = ..., annotation3: bool | int | str = ..., annotation4: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., changeCommand1: str | Callable = ..., changeCommand2: str | Callable = ..., changeCommand3: str | Callable = ..., changeCommand4: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., data1: int = ..., data2: int = ..., data3: int = ..., data4: int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., label1: bool | int | str = ..., label2: bool | int | str = ..., label3: bool | int | str = ..., label4: bool | int | str = ..., labelAnnotation: bool | int | str = ..., labelArray2: bool | int | tuple[str, str] = ..., labelArray3: bool | int | tuple[str, str, str] = ..., labelArray4: bool | int | tuple[str, str, str, str] = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., numberOfRadioButtons: int = ..., offCommand: str | Callable = ..., offCommand1: str | Callable = ..., offCommand2: str | Callable = ..., offCommand3: str | Callable = ..., offCommand4: str | Callable = ..., onCommand: str | Callable = ..., onCommand1: str | Callable = ..., onCommand2: str | Callable = ..., onCommand3: str | Callable = ..., onCommand4: str | Callable = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., select: int = ..., shareCollection: str = ..., statusBarMessage: str = ..., useTemplate: str = ..., vertical: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def radioCollection(*args, edit: Literal[True], select: str = ...) -> None: ...

@overload
def radioCollection(*args, collectionItemArray: bool | int = ..., defineTemplate: str = ..., exists: bool | int = ..., gl: bool | int = ..., numberOfCollectionItems: bool | int = ..., parent: str = ..., query: bool | int = ..., select: bool | int | str = ..., useTemplate: str = ...) -> Any: ...
def radioMenuItemCollection(*args, defineTemplate: str = ..., edit: bool | int = ..., exists: bool | int = ..., gl: bool | int = ..., parent: str = ..., query: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def rampColorPort(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., selectedColorControl: str = ..., selectedInterpControl: str = ..., selectedPositionControl: str = ..., statusBarMessage: str = ..., verticalLayout: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def rampColorPort(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., node: str = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., selectedColorControl: str = ..., selectedInterpControl: str = ..., selectedPositionControl: str = ..., statusBarMessage: str = ..., useTemplate: str = ..., verticalLayout: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def rampWidget(*args) -> Any: ...
def rampWidgetAttrless(*args) -> Any: ...

@overload
def rangeControl(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changedCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., maxRange: int | float = ..., minRange: int | float = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> None: ...

@overload
def rangeControl(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changedCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., maxRange: bool | int | int | float = ..., minRange: bool | int | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> Any: ...
def readPDC(*args, file: str = ..., test: bool | int = ...) -> Any: ...
def readTake(*args, angle: str = ..., device: str = ..., frequency: float = ..., linear: str = ..., noTime: bool | int = ..., take: str = ...) -> Any: ...

@overload
def rebuildCurve(*args, edit: Literal[True], caching: bool | int = ..., degree: int = ..., endKnots: int = ..., fitRebuild: bool | int = ..., keepControlPoints: bool | int = ..., keepEndPoints: bool | int = ..., keepRange: int = ..., keepTangents: bool | int = ..., nodeState: int = ..., rebuildType: int = ..., smartSurfaceCurveRebuild: bool | int = ..., spans: int = ..., tolerance: float = ...) -> None: ...

@overload
def rebuildCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., endKnots: int = ..., fitRebuild: bool | int = ..., frozen: bool | int = ..., keepControlPoints: bool | int = ..., keepEndPoints: bool | int = ..., keepRange: int = ..., keepTangents: bool | int = ..., name: str = ..., noChanges: bool | int = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., range: bool | int = ..., rebuildType: int = ..., replaceOriginal: bool | int = ..., smartSurfaceCurveRebuild: bool | int = ..., smooth: float = ..., spans: int = ..., tolerance: bool | int | float = ...) -> Any: ...

@overload
def rebuildSurface(*args, edit: Literal[True], caching: bool | int = ..., degreeU: int = ..., degreeV: int = ..., direction: int = ..., endKnots: int = ..., fitRebuild: int = ..., keepControlPoints: bool | int = ..., keepCorners: bool | int = ..., keepRange: int = ..., nodeState: int = ..., rebuildType: int = ..., spansU: int = ..., spansV: int = ..., tolerance: float = ...) -> None: ...

@overload
def rebuildSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., degreeU: int = ..., degreeV: int = ..., direction: int = ..., endKnots: int = ..., fitRebuild: int = ..., frozen: bool | int = ..., keepControlPoints: bool | int = ..., keepCorners: bool | int = ..., keepRange: int = ..., name: str = ..., noChanges: bool | int = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., rebuildType: int = ..., replaceOriginal: bool | int = ..., spansU: int = ..., spansV: int = ..., tolerance: bool | int | float = ...) -> Any: ...
def recordAttr(*args, attribute: str | list[str] = ..., delete: bool | int = ..., edit: bool | int = ..., query: bool | int = ...) -> Any: ...
def recordDevice(*args, cleanup: bool | int = ..., data: bool | int = ..., device: str | list[str] = ..., duration: int = ..., playback: bool | int = ..., state: bool | int = ..., wait: bool | int = ...) -> Any: ...
def redo(*args) -> Any: ...
def reference(*args, connectionsBroken: bool | int = ..., connectionsMade: bool | int = ..., dagPath: bool | int = ..., editCommand: str = ..., filename: str = ..., isNodeReferenced: bool | int = ..., longName: bool | int = ..., node: str = ..., query: bool | int = ..., referenceNode: str = ..., shortName: bool | int = ...) -> Any: ...
def referenceEdit(*args, applyFailedEdits: bool | int = ..., changeEditTarget: tuple[str, str] = ..., editCommand: bool | int | str | list[str] = ..., failedEdits: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., removeEdits: bool | int = ..., successfulEdits: bool | int = ...) -> Any: ...

@overload
def referenceQuery(*args, filename: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> str: ...

@overload
def referenceQuery(*args, referenceNode: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> str: ...

@overload
def referenceQuery(*args, parentNamespace: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> str: ...

@overload
def referenceQuery(*args, namespace: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> str: ...

@overload
def referenceQuery(*args, nodes: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> list[str]: ...

@overload
def referenceQuery(*args, editAttrs: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> list[str]: ...

@overload
def referenceQuery(*args, editNodes: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> list[str]: ...

@overload
def referenceQuery(*args, editStrings: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> list[str]: ...

@overload
def referenceQuery(*args, isNodeReferenced: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> bool: ...

@overload
def referenceQuery(*args, isExportEdits: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> bool: ...

@overload
def referenceQuery(*args, isLoaded: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isNodeReferenced: bool | int = ..., isPreviewOnly: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> bool: ...

@overload
def referenceQuery(*args, isPreviewOnly: Literal[True], child: bool | int = ..., dagPath: bool | int = ..., editAttrs: bool | int = ..., editCommand: bool | int | str | list[str] = ..., editNodes: bool | int = ..., editStrings: bool | int = ..., failedEdits: bool | int = ..., filename: bool | int = ..., isExportEdits: bool | int = ..., isLoaded: bool | int = ..., isNodeReferenced: bool | int = ..., liveEdits: bool | int = ..., namespace: bool | int = ..., nodes: bool | int = ..., onReferenceNode: bool | int | str | list[str] = ..., parent: bool | int = ..., parentNamespace: bool | int = ..., referenceNode: bool | int = ..., shortName: bool | int = ..., showDagPath: bool | int = ..., showFullPath: bool | int = ..., showNamespace: bool | int = ..., successfulEdits: bool | int = ..., topReference: bool | int = ..., unresolvedName: bool | int = ..., withoutCopyNumber: bool | int = ..., **kwargs) -> bool: ...
def refineSubdivSelectionList(*args) -> Any: ...
def refresh(*args, currentView: bool | int = ..., fileExtension: str = ..., filename: str = ..., force: bool | int = ..., suspend: bool | int = ...) -> Any: ...
def refreshEditorTemplates(*args) -> Any: ...

@overload
def regionSelectKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def regionSelectKeyCtx(*args, bottomManip: bool | int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., leftManip: bool | int | float = ..., name: str = ..., query: bool | int = ..., rightManip: bool | int | float = ..., topManip: bool | int | float = ...) -> Any: ...
def rehash(*args) -> Any: ...

@overload
def relationship(*args, edit: Literal[True], b: bool | int = ..., relationshipData: str | list[str] = ...) -> None: ...

@overload
def relationship(*args, b: bool | int = ..., query: bool | int = ..., relationshipData: bool | int | str | list[str] = ...) -> Any: ...
def reloadImage(*args) -> Any: ...
def rememberCtxSettings(*args) -> Any: ...
def removeJoint(*args) -> Any: ...
def removeListItem(*args, **keywords): ...
def removeMultiInstance(*args, allChildren: bool | int = ..., b: bool | int = ...) -> Any: ...
def rename(*args, ignoreShape: bool | int = ..., uuid: bool | int = ...) -> None: ...
def renameAttr(*args) -> Any: ...
def renameUI(*args) -> Any: ...
def render(*args, abortMissingTexture: bool | int = ..., batch: bool | int = ..., keepPreImage: bool | int = ..., layer: str = ..., nglowpass: bool | int = ..., nshadows: bool | int = ..., replace: bool | int = ..., xresolution: int = ..., yresolution: int = ...) -> Any: ...
def renderGlobalsNode(*args, name: str = ..., parent: str = ..., renderQuality: str = ..., renderResolution: str = ..., shared: bool | int = ..., skipSelect: bool | int = ...) -> Any: ...
def renderInfo(*args, castShadows: bool | int = ..., chordHeight: float = ..., chordHeightRatio: float = ..., doubleSided: bool | int = ..., edgeSwap: bool | int = ..., edit: bool | int = ..., minScreen: float = ..., name: str = ..., opposite: bool | int = ..., query: bool | int = ..., smoothShading: bool | int = ..., unum: int = ..., useChordHeight: bool | int = ..., useChordHeightRatio: bool | int = ..., useDefaultLights: bool | int = ..., useMinScreen: bool | int = ..., utype: int = ..., vnum: int = ..., vtype: int = ...) -> Any: ...
def renderLayerMembers(*args, **keywords): ...
def renderLayerPostProcess(*args, keepImages: bool | int = ..., query: bool | int = ..., sceneName: bool | int | str = ...) -> Any: ...

@overload
def renderManip(*args, edit: Literal[True], camera: tuple[bool | int, bool | int, bool | int, bool | int, bool | int] = ..., light: tuple[bool | int, bool | int, bool | int] = ..., spotLight: tuple[bool | int, bool | int, bool | int, bool | int, bool | int, bool | int, bool | int] = ..., state: bool | int = ...) -> None: ...

@overload
def renderManip(*args, camera: bool | int | tuple[bool | int, bool | int, bool | int, bool | int, bool | int] = ..., light: bool | int | tuple[bool | int, bool | int, bool | int] = ..., query: bool | int = ..., spotLight: bool | int | tuple[bool | int, bool | int, bool | int, bool | int, bool | int, bool | int, bool | int] = ..., state: bool | int = ...) -> Any: ...
def renderPartition(*args, query: bool | int = ...) -> Any: ...
def renderPassRegistry(*args, channels: int = ..., isPassSupported: bool | int = ..., passID: str = ..., passName: bool | int = ..., renderer: str = ..., supportedChannelCounts: bool | int = ..., supportedDataTypes: bool | int = ..., supportedPassSemantics: bool | int = ..., supportedRenderPassNames: bool | int = ..., supportedRenderPasses: bool | int = ...) -> Any: ...
def renderQualityNode(*args, name: str = ..., parent: str = ..., shared: bool | int = ..., skipSelect: bool | int = ...) -> Any: ...
def renderSettings(*args, camera: str = ..., customTokenString: str = ..., firstImageName: bool | int = ..., fullPath: bool | int = ..., fullPathTemp: bool | int = ..., genericFrameImageName: str = ..., imageGenericName: bool | int = ..., lastImageName: bool | int = ..., layer: str = ..., leaveUnmatchedTokens: bool | int = ...) -> Any: ...
def renderSetup(*args, **keywords): ...
def renderSetupFind(*args, **keywords): ...
def renderSetupLegacyLayer(*args, **keywords): ...
def renderSetupLocalOverride(*args, **keywords): ...
def renderSetupPostApply(*args, **keywords): ...
def renderSetupSwitchVisibleRenderLayer(*args, **keywords): ...
def renderThumbnailUpdate(*args, forceUpdate: str = ..., query: bool | int = ...) -> Any: ...

@overload
def renderWindowEditor(*args, edit: Literal[True], autoResize: bool | int = ..., blendMode: int = ..., caption: str = ..., changeCommand: tuple[str, str, str, str] = ..., clear: tuple[int, int, float, float, float] = ..., cmEnabled: bool | int = ..., colorManage: bool | int = ..., compDisplay: int = ..., compImageFile: str = ..., currentCamera: str = ..., currentCameraRig: str = ..., displayImage: int = ..., displayStyle: str = ..., docTag: str = ..., doubleBuffer: bool | int = ..., drawAxis: bool | int = ..., exposure: float = ..., filter: str = ..., forceMainConnection: str = ..., frameImage: bool | int = ..., frameRegion: bool | int = ..., gamma: float = ..., highlightConnection: str = ..., loadImage: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., marquee: tuple[float, float, float, float] = ..., nextViewImage: bool | int = ..., outputColorManage: bool | int = ..., parent: str = ..., pcaption: str = ..., realSize: bool | int = ..., refresh: bool | int = ..., removeAllImages: bool | int = ..., removeImage: bool | int = ..., resetRegion: bool | int = ..., resetViewImage: bool | int = ..., saveImage: bool | int = ..., scaleBlue: float = ..., scaleGreen: float = ..., scaleRed: float = ..., selectionConnection: str = ..., showRegion: tuple[int, int] = ..., singleBuffer: bool | int = ..., snapshot: tuple[str, int, int] = ..., snapshotMode: bool | int = ..., stereo: int = ..., stereoImageOrientation: tuple[str, str] = ..., stereoMode: str = ..., toggle: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., viewImageCount: int = ..., viewTransformName: str = ..., writeImage: str = ...) -> None: ...

@overload
def renderWindowEditor(*args, autoResize: bool | int = ..., blendMode: int = ..., caption: bool | int | str = ..., changeCommand: bool | int | tuple[str, str, str, str] = ..., clear: bool | int | tuple[int, int, float, float, float] = ..., cmEnabled: bool | int = ..., colorManage: bool | int = ..., compDisplay: int = ..., compImageFile: bool | int | str = ..., control: bool | int = ..., currentCamera: bool | int | str = ..., currentCameraRig: bool | int | str = ..., defineTemplate: str = ..., displayImage: int = ..., displayImageViewCount: int = ..., displayStyle: bool | int | str = ..., docTag: bool | int | str = ..., doubleBuffer: bool | int = ..., drawAxis: bool | int = ..., editorName: bool | int = ..., exists: bool | int = ..., exposure: bool | int | float = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., frameImage: bool | int = ..., frameRegion: bool | int = ..., gamma: bool | int | float = ..., highlightConnection: bool | int | str = ..., loadImage: str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., marquee: bool | int | tuple[float, float, float, float] = ..., nbImages: bool | int = ..., nextViewImage: bool | int = ..., outputColorManage: bool | int = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., pcaption: bool | int | str = ..., query: bool | int = ..., realSize: bool | int = ..., refresh: bool | int = ..., removeAllImages: bool | int = ..., removeImage: bool | int = ..., resetRegion: bool | int = ..., resetViewImage: bool | int = ..., saveImage: bool | int = ..., scaleBlue: bool | int | float = ..., scaleGreen: bool | int | float = ..., scaleRed: bool | int | float = ..., selectionConnection: bool | int | str = ..., showRegion: bool | int | tuple[int, int] = ..., singleBuffer: bool | int = ..., snapshot: bool | int | tuple[str, int, int] = ..., snapshotMode: bool | int = ..., stateString: bool | int = ..., stereo: int = ..., stereoImageOrientation: bool | int | tuple[str, str] = ..., stereoMode: bool | int | str = ..., toggle: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., viewImageCount: int = ..., viewTransformName: bool | int | str = ..., writeImage: str = ...) -> Any: ...

@overload
def renderWindowSelectContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def renderWindowSelectContext(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def renderer(*args, edit: Literal[True], addGlobalsNode: str = ..., addGlobalsTab: tuple[str, str, str] = ..., batchRenderOptionsProcedure: str = ..., batchRenderOptionsStringProcedure: str = ..., batchRenderProcedure: str = ..., cancelBatchRenderProcedure: str = ..., changeIprRegionProcedure: str = ..., commandRenderProcedure: str = ..., exists: bool | int = ..., globalsNodes: bool | int = ..., globalsTabCreateProcNames: bool | int = ..., globalsTabLabels: bool | int = ..., globalsTabUpdateProcNames: bool | int = ..., iprOptionsMenuLabel: str = ..., iprOptionsProcedure: str = ..., iprOptionsSubMenuProcedure: str = ..., iprRenderProcedure: str = ..., iprRenderSubMenuProcedure: str = ..., isRunningIprProcedure: str = ..., logoCallbackProcedure: str = ..., logoImageName: str = ..., materialViewRendererList: bool | int = ..., materialViewRendererPause: bool | int = ..., materialViewRendererSuspend: bool | int = ..., namesOfAvailableRenderers: bool | int = ..., pauseIprRenderProcedure: str = ..., polyPrelightProcedure: str = ..., refreshIprRenderProcedure: str = ..., renderDiagnosticsProcedure: str = ..., renderGlobalsProcedure: str = ..., renderMenuProcedure: str = ..., renderOptionsProcedure: str = ..., renderProcedure: str = ..., renderRegionProcedure: str = ..., renderSequenceProcedure: str = ..., rendererUIName: str = ..., renderingEditorsSubMenuProcedure: str = ..., showBatchRenderLogProcedure: str = ..., showBatchRenderProcedure: str = ..., showRenderLogProcedure: str = ..., startIprRenderProcedure: str = ..., stopIprRenderProcedure: str = ..., supportColorManagement: bool | int = ..., textureBakingProcedure: str = ..., unregisterRenderer: bool | int = ...) -> None: ...

@overload
def renderer(*args, addGlobalsNode: bool | int | str = ..., addGlobalsTab: tuple[str, str, str] = ..., batchRenderOptionsProcedure: bool | int | str = ..., batchRenderOptionsStringProcedure: bool | int | str = ..., batchRenderProcedure: bool | int | str = ..., cancelBatchRenderProcedure: bool | int | str = ..., changeIprRegionProcedure: bool | int | str = ..., commandRenderProcedure: bool | int | str = ..., exists: bool | int = ..., globalsNodes: bool | int = ..., globalsTabCreateProcNames: bool | int = ..., globalsTabLabels: bool | int = ..., globalsTabUpdateProcNames: bool | int = ..., iprOptionsMenuLabel: bool | int | str = ..., iprOptionsProcedure: bool | int | str = ..., iprOptionsSubMenuProcedure: bool | int | str = ..., iprRenderProcedure: bool | int | str = ..., iprRenderSubMenuProcedure: bool | int | str = ..., isRunningIprProcedure: bool | int | str = ..., logoCallbackProcedure: bool | int | str = ..., logoImageName: bool | int | str = ..., materialViewRendererList: bool | int = ..., materialViewRendererPause: bool | int = ..., materialViewRendererSuspend: bool | int = ..., namesOfAvailableRenderers: bool | int = ..., pauseIprRenderProcedure: bool | int | str = ..., polyPrelightProcedure: bool | int | str = ..., query: bool | int = ..., refreshIprRenderProcedure: bool | int | str = ..., renderDiagnosticsProcedure: bool | int | str = ..., renderGlobalsProcedure: bool | int | str = ..., renderMenuProcedure: bool | int | str = ..., renderOptionsProcedure: bool | int | str = ..., renderProcedure: bool | int | str = ..., renderRegionProcedure: bool | int | str = ..., renderSequenceProcedure: bool | int | str = ..., rendererUIName: bool | int | str = ..., renderingEditorsSubMenuProcedure: bool | int | str = ..., showBatchRenderLogProcedure: bool | int | str = ..., showBatchRenderProcedure: bool | int | str = ..., showRenderLogProcedure: bool | int | str = ..., startIprRenderProcedure: bool | int | str = ..., stopIprRenderProcedure: bool | int | str = ..., supportColorManagement: bool | int = ..., textureBakingProcedure: bool | int | str = ..., unregisterRenderer: bool | int = ...) -> Any: ...
def reorder(*args, back: bool | int = ..., front: bool | int = ..., relative: int = ...) -> Any: ...

@overload
def reorderContainer(*args, edit: Literal[True], back: bool | int = ..., front: bool | int = ..., relative: int = ...) -> None: ...

@overload
def reorderContainer(*args, back: bool | int = ..., front: bool | int = ..., query: bool | int = ..., relative: int = ...) -> Any: ...
def reorderDeformers(*args, name: str = ...) -> Any: ...
def repeatLast(*args, addCommand: str = ..., addCommandLabel: str = ..., commandList: int = ..., commandNameList: int = ..., edit: bool | int = ..., historyLimit: int = ..., item: int = ..., numberOfHistoryItems: bool | int = ..., pythonCommand: bool | int = ..., query: bool | int = ...) -> Any: ...
def replaceCacheFrames(*args, **keywords): ...
def replaceCacheFramesOpt(*args, **keywords): ...
def requires(*args, dataType: str | list[str] = ..., nodeType: str | list[str] = ...) -> Any: ...
def reroot(*args) -> Any: ...

@overload
def resampleFluid(*args, edit: Literal[True], resampleDepth: int = ..., resampleHeight: int = ..., resampleWidth: int = ...) -> None: ...

@overload
def resampleFluid(*args, query: bool | int = ..., resampleDepth: int = ..., resampleHeight: int = ..., resampleWidth: int = ...) -> Any: ...
def resetTool(*args) -> Any: ...
def resolutionNode(*args, name: str = ..., parent: str = ..., shared: bool | int = ..., skipSelect: bool | int = ...) -> Any: ...
def resourceManager(*args, nameFilter: str = ..., saveAs: tuple[str, str] = ...) -> Any: ...
def retimeHelper(*args, deleteFrame: int = ..., edit: bool | int = ..., frame: float = ..., lockBar: tuple[int, int] = ..., locks: int = ..., mouseOver: bool | int = ..., moveFrame: tuple[int, float] = ..., query: bool | int = ...) -> Any: ...

@overload
def retimeKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., moveByFrame: int = ..., snapOnFrame: bool | int = ...) -> None: ...

@overload
def retimeKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., moveByFrame: int = ..., name: str = ..., query: bool | int = ..., snapOnFrame: bool | int = ...) -> Any: ...

@overload
def reverseCurve(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def reverseCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., curveOnSurface: bool | int = ..., frozen: bool | int = ..., name: str = ..., noChanges: bool | int = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., range: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...

@overload
def reverseSurface(*args, edit: Literal[True], caching: bool | int = ..., direction: int = ..., nodeState: int = ...) -> None: ...

@overload
def reverseSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., direction: int = ..., frozen: bool | int = ..., name: str = ..., noChanges: bool | int = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ...) -> Any: ...

@overload
def revolve(*args, edit: Literal[True], autoCorrectNormal: bool | int = ..., axis: tuple[float, float, float] = ..., axisChoice: int = ..., axisX: float = ..., axisY: float = ..., axisZ: float = ..., bridge: bool | int = ..., caching: bool | int = ..., computePivotAndAxis: int = ..., degree: int = ..., endSweep: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., pivotX: float = ..., pivotY: float = ..., pivotZ: float = ..., radius: float = ..., radiusAnchor: float = ..., sections: int = ..., startSweep: float = ..., tolerance: float = ..., useLocalPivot: bool | int = ..., useTolerance: bool | int = ...) -> None: ...

@overload
def revolve(*args, autoCorrectNormal: bool | int = ..., axis: bool | int | tuple[float, float, float] = ..., axisChoice: int = ..., axisX: bool | int | float = ..., axisY: bool | int | float = ..., axisZ: bool | int | float = ..., bridge: bool | int = ..., caching: bool | int = ..., computePivotAndAxis: int = ..., constructionHistory: bool | int = ..., degree: int = ..., endSweep: bool | int | float = ..., frozen: bool | int = ..., mergeItems: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., pivot: bool | int | tuple[float, float, float] = ..., pivotX: bool | int | float = ..., pivotY: bool | int | float = ..., pivotZ: bool | int | float = ..., polygon: int = ..., query: bool | int = ..., radius: bool | int | float = ..., radiusAnchor: bool | int | float = ..., range: bool | int = ..., rebuild: bool | int = ..., sections: int = ..., startSweep: bool | int | float = ..., tolerance: bool | int | float = ..., useLocalPivot: bool | int = ..., useTolerance: bool | int = ...) -> Any: ...

@overload
def rigidBody(*args, edit: Literal[True], active: bool | int = ..., applyForceAt: str = ..., bounciness: float = ..., cache: bool | int = ..., centerOfMass: tuple[float, float, float] = ..., collisions: bool | int = ..., damping: float = ..., deleteCache: bool | int = ..., dynamicFriction: float = ..., ignore: bool | int = ..., impulse: tuple[float, float, float] = ..., impulsePosition: tuple[float, float, float] = ..., initialAngularVelocity: tuple[float, float, float] = ..., initialVelocity: tuple[float, float, float] = ..., layer: int = ..., lockCenterOfMass: bool | int = ..., mass: float = ..., name: str = ..., orientation: tuple[float, float, float] = ..., particleCollision: bool | int = ..., passive: bool | int = ..., position: tuple[float, float, float] = ..., removeShape: str = ..., solver: str = ..., spinImpulse: tuple[float, float, float] = ..., standInObject: str = ..., staticFriction: float = ...) -> None: ...

@overload
def rigidBody(*args, active: bool | int = ..., angularVelocity: bool | int = ..., applyForceAt: bool | int | str = ..., bounciness: bool | int | float = ..., cache: bool | int = ..., centerOfMass: bool | int | tuple[float, float, float] = ..., collisions: bool | int = ..., contactCount: bool | int = ..., contactName: bool | int = ..., contactPosition: bool | int = ..., damping: bool | int | float = ..., deleteCache: bool | int = ..., dynamicFriction: bool | int | float = ..., force: bool | int = ..., ignore: bool | int = ..., impulse: tuple[float, float, float] = ..., impulsePosition: tuple[float, float, float] = ..., initialAngularVelocity: bool | int | tuple[float, float, float] = ..., initialVelocity: bool | int | tuple[float, float, float] = ..., layer: int = ..., lockCenterOfMass: bool | int = ..., mass: bool | int | float = ..., name: bool | int | str = ..., orientation: bool | int | tuple[float, float, float] = ..., particleCollision: bool | int = ..., passive: bool | int = ..., position: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., removeShape: bool | int | str = ..., solver: bool | int | str = ..., spinImpulse: tuple[float, float, float] = ..., standInObject: bool | int | str = ..., staticFriction: bool | int | float = ..., tesselationFactor: int = ..., velocity: bool | int = ...) -> Any: ...

@overload
def rigidSolver(*args, edit: Literal[True], autoTolerances: bool | int = ..., bounciness: bool | int = ..., cacheData: bool | int = ..., collide: bool | int = ..., collisionTolerance: float = ..., contactData: bool | int = ..., deleteCache: bool | int = ..., displayCenterOfMass: bool | int = ..., displayConstraint: bool | int = ..., displayVelocity: bool | int = ..., dynamics: bool | int = ..., friction: bool | int = ..., interpenetrate: bool | int = ..., interpenetrationCheck: bool | int = ..., name: str = ..., showCollision: bool | int = ..., showInterpenetration: bool | int = ..., solverMethod: int = ..., startTime: float = ..., state: bool | int = ..., statistics: bool | int = ..., stepSize: float = ..., velocityVectorScale: float = ...) -> None: ...

@overload
def rigidSolver(*args, autoTolerances: bool | int = ..., bounciness: bool | int = ..., cacheData: bool | int = ..., collide: bool | int = ..., collisionTolerance: bool | int | float = ..., contactData: bool | int = ..., create: bool | int = ..., current: bool | int = ..., deleteCache: bool | int = ..., displayCenterOfMass: bool | int = ..., displayConstraint: bool | int = ..., displayVelocity: bool | int = ..., dynamics: bool | int = ..., friction: bool | int = ..., interpenetrate: bool | int = ..., interpenetrationCheck: bool | int = ..., name: bool | int | str = ..., query: bool | int = ..., rigidBodies: bool | int = ..., rigidBodyCount: bool | int = ..., showCollision: bool | int = ..., showInterpenetration: bool | int = ..., solverMethod: int = ..., startTime: bool | int | float = ..., state: bool | int = ..., statistics: bool | int = ..., stepSize: bool | int | float = ..., velocityVectorScale: bool | int | float = ...) -> Any: ...
def roll(*args, absolute: bool | int = ..., degree: float = ..., relative: bool | int = ...) -> Any: ...

@overload
def rollCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., rollScale: float = ...) -> None: ...

@overload
def rollCtx(*args, alternateContext: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., rollScale: bool | int | float = ..., toolName: bool | int | str = ...) -> Any: ...
def rotate(*args, absolute: bool | int = ..., centerPivot: bool | int = ..., componentSpace: bool | int = ..., constrainAlongNormal: bool | int = ..., deletePriorHistory: bool | int = ..., euler: bool | int = ..., forceOrderXYZ: bool | int = ..., objectCenterPivot: bool | int = ..., objectSpace: bool | int = ..., orientAxes: tuple[float, float, float] = ..., pivot: tuple[float, float, float] = ..., preserveChildPosition: bool | int = ..., preserveGeometryPosition: bool | int = ..., preserveUV: bool | int = ..., reflection: bool | int = ..., reflectionAboutBBox: bool | int = ..., reflectionAboutOrigin: bool | int = ..., reflectionAboutX: bool | int = ..., reflectionAboutY: bool | int = ..., reflectionAboutZ: bool | int = ..., reflectionTolerance: float = ..., relative: bool | int = ..., rotateX: bool | int = ..., rotateXY: bool | int = ..., rotateXYZ: bool | int = ..., rotateXZ: bool | int = ..., rotateY: bool | int = ..., rotateYZ: bool | int = ..., rotateZ: bool | int = ..., symNegative: bool | int = ..., translate: bool | int = ..., worldSpace: bool | int = ..., xformConstraint: str = ...) -> Any: ...
def rotationInterpolation(*args, convert: bool | int | str = ..., query: bool | int = ...) -> Any: ...
def roundCRCtx(*args, activeNodes: bool | int = ..., append: bool | int = ..., autoCreate: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., currentEdge: bool | int = ..., currentEdgeRadius: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., frozen: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: float | list[float] = ..., radiusToUse: float = ..., reset: bool | int = ..., tolerance: float = ..., toolNode: bool | int = ..., useGlobalTolerance: bool | int = ...) -> Any: ...
def roundConstantRadius(*args, append: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., edit: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., radius: float | list[float] = ..., radiuss: float | list[float] = ..., side: tuple[str, int] | list[tuple[str, int]] = ..., sidea: int | list[int] = ..., sideb: int | list[int] = ..., tolerance: float = ...) -> Any: ...

@overload
def rowColumnLayout(*args, edit: Literal[True], adjustableColumn: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnOffset: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnSpacing: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rowAlign: tuple[int, str] | list[tuple[int, str]] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., rowHeight: tuple[int, int] | list[tuple[int, int]] = ..., rowOffset: tuple[int, str, int] | list[tuple[int, str, int]] = ..., rowSpacing: tuple[int, int] | list[tuple[int, int]] = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def rowColumnLayout(*args, adjustableColumn: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., childArray: bool | int = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnOffset: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnSpacing: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfColumns: int = ..., numberOfPopupMenus: bool | int = ..., numberOfRows: int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAlign: tuple[int, str] | list[tuple[int, str]] = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., rowHeight: tuple[int, int] | list[tuple[int, int]] = ..., rowOffset: tuple[int, str, int] | list[tuple[int, str, int]] = ..., rowSpacing: tuple[int, int] | list[tuple[int, int]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def rowLayout(*args, edit: Literal[True], adjustableColumn: int | list[int] = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def rowLayout(*args, adjustableColumn: int | list[int] = ..., adjustableColumn1: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., childArray: bool | int = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign1: str = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach1: str = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset1: int = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfColumns: int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def runTimeCommand(*args, edit: Literal[True], addKeyword: str | list[str] = ..., addTag: str | list[str] = ..., annotation: str = ..., category: str = ..., command: str | Callable = ..., commandLanguage: str = ..., delete: bool | int = ..., helpUrl: str = ..., hotkeyCtx: str = ..., image: str = ..., keywords: str = ..., label: str = ..., longAnnotation: str = ..., plugin: str = ..., save: bool | int = ..., showInHotkeyEditor: bool | int = ..., tags: str = ...) -> None: ...

@overload
def runTimeCommand(*args, addKeyword: str | list[str] = ..., addTag: str | list[str] = ..., annotation: bool | int | str = ..., category: bool | int | str = ..., categoryArray: bool | int = ..., command: bool | int | str | Callable = ..., commandArray: bool | int = ..., commandLanguage: bool | int | str = ..., default: bool | int = ..., defaultCommandArray: bool | int = ..., delete: bool | int = ..., exists: bool | int = ..., helpUrl: bool | int | str = ..., hotkeyCtx: bool | int | str = ..., image: bool | int | str = ..., keywords: bool | int | str = ..., label: bool | int | str = ..., longAnnotation: bool | int | str = ..., numberOfCommands: bool | int = ..., numberOfDefaultCommands: bool | int = ..., numberOfUserCommands: bool | int = ..., plugin: bool | int | str = ..., query: bool | int = ..., save: bool | int = ..., showInHotkeyEditor: bool | int = ..., tags: bool | int | str = ..., userCommandArray: bool | int = ...) -> Any: ...
def runup(*args, cache: bool | int = ..., fromPreviousFrame: bool | int = ..., fromStartFrame: bool | int = ..., maxFrame: int | float = ..., state: bool | int = ...) -> Any: ...
def safemodecheckhash(*args, co: bool | int = ..., pts: str = ..., wd: bool | int = ...) -> Any: ...
def sampleImage(*args, fastSample: bool | int = ..., resolution: tuple[int, str] = ...) -> Any: ...
def saveAllShelves(*args) -> Any: ...

@overload
def saveFluid(*args, edit: Literal[True], currentTime: int = ..., endTime: int = ..., startTime: int = ...) -> None: ...

@overload
def saveFluid(*args, currentTime: int = ..., endTime: int = ..., query: bool | int = ..., startTime: int = ...) -> Any: ...

@overload
def saveImage(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., currentView: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., objectThumbnail: str = ..., preventOverride: bool | int = ..., sceneFile: str = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def saveImage(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., currentView: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., objectThumbnail: str = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., sceneFile: str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def saveInitialState(*args, attribute: str | list[str] = ..., saveall: bool | int = ...) -> Any: ...
def saveMenu(*args) -> Any: ...
def savePrefObjects(*args) -> Any: ...
def saveShelf(*args) -> Any: ...
def saveToolSettings(*args) -> Any: ...
def saveViewportSettings(*args) -> Any: ...
def scale(*args, absolute: bool | int = ..., centerPivot: bool | int = ..., componentSpace: bool | int = ..., constrainAlongNormal: bool | int = ..., deletePriorHistory: bool | int = ..., distanceOnly: bool | int = ..., localSpace: bool | int = ..., objectCenterPivot: bool | int = ..., objectSpace: bool | int = ..., orientAxes: tuple[float, float, float] = ..., pivot: tuple[float, float, float] = ..., preserveChildPosition: bool | int = ..., preserveGeometryPosition: bool | int = ..., preserveUV: bool | int = ..., reflection: bool | int = ..., reflectionAboutBBox: bool | int = ..., reflectionAboutOrigin: bool | int = ..., reflectionAboutX: bool | int = ..., reflectionAboutY: bool | int = ..., reflectionAboutZ: bool | int = ..., reflectionTolerance: float = ..., relative: bool | int = ..., scaleX: bool | int = ..., scaleXY: bool | int = ..., scaleXYZ: bool | int = ..., scaleXZ: bool | int = ..., scaleY: bool | int = ..., scaleYZ: bool | int = ..., scaleZ: bool | int = ..., symNegative: bool | int = ..., worldSpace: bool | int = ..., xformConstraint: str = ...) -> Any: ...
def scaleComponents(*args, pivot: tuple[float, float, float] = ..., rotation: tuple[float, float, float] = ...) -> Any: ...

@overload
def scaleConstraint(*args, edit: Literal[True], layer: str = ..., name: str = ..., offset: tuple[float, float, float] = ..., remove: bool | int = ..., scaleCompensate: bool | int = ..., skip: str | list[str] = ..., weight: float = ...) -> None: ...

@overload
def scaleConstraint(*args, layer: str = ..., maintainOffset: bool | int = ..., name: bool | int | str = ..., offset: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., remove: bool | int = ..., scaleCompensate: bool | int = ..., skip: str | list[str] = ..., targetList: bool | int = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ...) -> Any: ...
def scaleKey(*args, animation: str = ..., attribute: str | list[str] = ..., autoSnap: bool | int = ..., controlPoints: bool | int = ..., float: str | int | float | list[str | int | float] = ..., floatPivot: float = ..., floatScale: float = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., newEndFloat: float = ..., newEndTime: int | float = ..., newStartFloat: float = ..., newStartTime: int | float = ..., scaleSpecifiedKeys: bool | int = ..., shape: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ..., timePivot: int | float = ..., timeScale: float = ..., valuePivot: float = ..., valueScale: float = ...) -> Any: ...

@overload
def scaleKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., scaleSpecifiedKeys: bool | int = ..., type: str = ...) -> None: ...

@overload
def scaleKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., scaleSpecifiedKeys: bool | int = ..., type: bool | int | str = ...) -> Any: ...

@overload
def sceneEditor(*args, edit: Literal[True], docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., parent: str = ..., refreshReferences: bool | int = ..., selectCommand: str | Callable = ..., selectItem: int = ..., selectionConnection: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def sceneEditor(*args, control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., onlyParents: bool | int = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., refreshReferences: bool | int = ..., selectCommand: bool | int | str | Callable = ..., selectItem: int = ..., selectReference: bool | int | str = ..., selectionConnection: bool | int | str = ..., shortName: bool | int = ..., stateString: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., unresolvedName: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., withoutCopyNumber: bool | int = ...) -> Any: ...
def sceneLint(*args, issueType: bool | int | str | list[str] = ..., verbose: bool | int = ...) -> Any: ...
def sceneUIReplacement(*args, clear: bool | int = ..., deleteRemaining: bool | int = ..., getNextFilter: tuple[str, str] = ..., getNextPanel: tuple[str, str] = ..., getNextScriptedPanel: tuple[str, str] = ..., update: str = ...) -> Any: ...
def scmh(*args, absolute: bool | int = ..., ignore: int | list[int] = ..., quiet: bool | int = ..., relative: bool | int = ...) -> Any: ...

@overload
def scriptCtx(*args, edit: Literal[True], baseClassName: str = ..., cumulativeLists: bool | int = ..., enableRootSelection: bool | int = ..., escToQuit: bool | int = ..., exitUponCompletion: bool | int = ..., expandSelectionList: bool | int = ..., finalCommandScript: str | Callable = ..., forceAddSelect: bool | int = ..., ignoreInvalidItems: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., lastAutoComplete: bool | int = ..., setAllowExcessCount: bool | int | list[bool | int] = ..., setAutoComplete: bool | int | list[bool | int] = ..., setAutoToggleSelection: bool | int | list[bool | int] = ..., setDoneSelectionPrompt: str | list[str] = ..., setNoSelectionHeadsUp: str | list[str] = ..., setNoSelectionPrompt: str | list[str] = ..., setSelectionCount: int | list[int] = ..., setSelectionHeadsUp: str | list[str] = ..., setSelectionPrompt: str | list[str] = ..., showManipulators: bool | int = ..., title: str = ..., toolCursorType: str = ..., toolFinish: str | Callable = ..., toolStart: str | Callable = ..., totalSelectionSets: int = ...) -> None: ...

@overload
def scriptCtx(*args, allComponents: bool | int | bool | int | list[bool | int] = ..., allObjects: bool | int | bool | int | list[bool | int] = ..., animBreakdown: bool | int | bool | int | list[bool | int] = ..., animCurve: bool | int | bool | int | list[bool | int] = ..., animInTangent: bool | int | bool | int | list[bool | int] = ..., animKeyframe: bool | int | bool | int | list[bool | int] = ..., animOutTangent: bool | int | bool | int | list[bool | int] = ..., baseClassName: bool | int | str = ..., byName: tuple[str, int] | list[tuple[str, int]] = ..., camera: bool | int | bool | int | list[bool | int] = ..., cluster: bool | int | bool | int | list[bool | int] = ..., collisionModel: bool | int | bool | int | list[bool | int] = ..., controlVertex: bool | int | bool | int | list[bool | int] = ..., cumulativeLists: bool | int = ..., curve: bool | int | bool | int | list[bool | int] = ..., curveKnot: bool | int | bool | int | list[bool | int] = ..., curveOnSurface: bool | int | bool | int | list[bool | int] = ..., curveParameterPoint: bool | int | bool | int | list[bool | int] = ..., dimension: bool | int | bool | int | list[bool | int] = ..., dynamicConstraint: bool | int | bool | int | list[bool | int] = ..., edge: bool | int | bool | int | list[bool | int] = ..., editPoint: bool | int | bool | int | list[bool | int] = ..., emitter: bool | int | bool | int | list[bool | int] = ..., enableRootSelection: bool | int = ..., escToQuit: bool | int = ..., exists: bool | int = ..., exitUponCompletion: bool | int = ..., expandSelectionList: bool | int = ..., facet: bool | int | bool | int | list[bool | int] = ..., field: bool | int | bool | int | list[bool | int] = ..., finalCommandScript: bool | int | str | Callable = ..., fluid: bool | int | bool | int | list[bool | int] = ..., follicle: bool | int | bool | int | list[bool | int] = ..., forceAddSelect: bool | int = ..., hairSystem: bool | int | bool | int | list[bool | int] = ..., handle: bool | int | bool | int | list[bool | int] = ..., history: bool | int = ..., hull: bool | int | bool | int | list[bool | int] = ..., ignoreInvalidItems: bool | int = ..., ikEndEffector: bool | int | bool | int | list[bool | int] = ..., ikHandle: bool | int | bool | int | list[bool | int] = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., imagePlane: bool | int | bool | int | list[bool | int] = ..., implicitGeometry: bool | int | bool | int | list[bool | int] = ..., isoparm: bool | int | bool | int | list[bool | int] = ..., joint: bool | int | bool | int | list[bool | int] = ..., jointPivot: bool | int | bool | int | list[bool | int] = ..., lastAutoComplete: bool | int = ..., lattice: bool | int | bool | int | list[bool | int] = ..., latticePoint: bool | int | bool | int | list[bool | int] = ..., light: bool | int | bool | int | list[bool | int] = ..., localRotationAxis: bool | int | bool | int | list[bool | int] = ..., locator: bool | int | bool | int | list[bool | int] = ..., locatorUV: bool | int | bool | int | list[bool | int] = ..., locatorXYZ: bool | int | bool | int | list[bool | int] = ..., meshComponents: bool | int | list[bool | int] = ..., meshUVShell: bool | int | list[bool | int] = ..., motionTrailPoint: bool | int | list[bool | int] = ..., motionTrailTangent: bool | int | list[bool | int] = ..., nCloth: bool | int | bool | int | list[bool | int] = ..., nParticle: bool | int | bool | int | list[bool | int] = ..., nParticleShape: bool | int | bool | int | list[bool | int] = ..., nRigid: bool | int | bool | int | list[bool | int] = ..., name: str = ..., nonlinear: bool | int | bool | int | list[bool | int] = ..., nurbsCurve: bool | int | bool | int | list[bool | int] = ..., nurbsSurface: bool | int | bool | int | list[bool | int] = ..., objectComponent: bool | int = ..., orientationLocator: bool | int | bool | int | list[bool | int] = ..., particle: bool | int | bool | int | list[bool | int] = ..., particleShape: bool | int | bool | int | list[bool | int] = ..., plane: bool | int | bool | int | list[bool | int] = ..., polymesh: bool | int | bool | int | list[bool | int] = ..., polymeshEdge: bool | int | bool | int | list[bool | int] = ..., polymeshFace: bool | int | bool | int | list[bool | int] = ..., polymeshFreeEdge: bool | int | bool | int | list[bool | int] = ..., polymeshUV: bool | int | bool | int | list[bool | int] = ..., polymeshVertex: bool | int | bool | int | list[bool | int] = ..., polymeshVtxFace: bool | int | bool | int | list[bool | int] = ..., query: bool | int = ..., queryByName: str = ..., rigidBody: bool | int | bool | int | list[bool | int] = ..., rigidConstraint: bool | int | bool | int | list[bool | int] = ..., rotatePivot: bool | int | bool | int | list[bool | int] = ..., scalePivot: bool | int | bool | int | list[bool | int] = ..., sculpt: bool | int | bool | int | list[bool | int] = ..., selectHandle: bool | int | bool | int | list[bool | int] = ..., setAllowExcessCount: bool | int | list[bool | int] = ..., setAutoComplete: bool | int | list[bool | int] = ..., setAutoToggleSelection: bool | int | list[bool | int] = ..., setDoneSelectionPrompt: str | list[str] = ..., setNoSelectionHeadsUp: str | list[str] = ..., setNoSelectionPrompt: str | list[str] = ..., setSelectionCount: int | list[int] = ..., setSelectionHeadsUp: str | list[str] = ..., setSelectionPrompt: str | list[str] = ..., showManipulators: bool | int = ..., spring: bool | int | bool | int | list[bool | int] = ..., springComponent: bool | int | bool | int | list[bool | int] = ..., stroke: bool | int | bool | int | list[bool | int] = ..., subdiv: bool | int | bool | int | list[bool | int] = ..., subdivMeshEdge: bool | int | bool | int | list[bool | int] = ..., subdivMeshFace: bool | int | bool | int | list[bool | int] = ..., subdivMeshPoint: bool | int | bool | int | list[bool | int] = ..., subdivMeshUV: bool | int | bool | int | list[bool | int] = ..., surfaceEdge: bool | int | bool | int | list[bool | int] = ..., surfaceFace: bool | int | bool | int | list[bool | int] = ..., surfaceKnot: bool | int | bool | int | list[bool | int] = ..., surfaceParameterPoint: bool | int | bool | int | list[bool | int] = ..., surfaceRange: bool | int | bool | int | list[bool | int] = ..., surfaceUV: bool | int | bool | int | list[bool | int] = ..., texture: bool | int | bool | int | list[bool | int] = ..., title: bool | int | str = ..., toolCursorType: bool | int | str = ..., toolFinish: bool | int | str | Callable = ..., toolStart: bool | int | str | Callable = ..., totalSelectionSets: int = ..., vertex: bool | int | bool | int | list[bool | int] = ...) -> Any: ...

@overload
def scriptEditorInfo(*args, edit: Literal[True], clearHistory: bool | int = ..., clearHistoryFile: bool | int = ..., historyFilename: str = ..., input: str = ..., suppressErrors: bool | int = ..., suppressInfo: bool | int = ..., suppressResults: bool | int = ..., suppressStackWindow: bool | int = ..., suppressWarnings: bool | int = ..., writeHistory: bool | int = ...) -> None: ...

@overload
def scriptEditorInfo(*args, clearHistory: bool | int = ..., clearHistoryFile: bool | int = ..., historyFilename: bool | int | str = ..., input: str = ..., query: bool | int = ..., suppressErrors: bool | int = ..., suppressInfo: bool | int = ..., suppressResults: bool | int = ..., suppressStackWindow: bool | int = ..., suppressWarnings: bool | int = ..., writeHistory: bool | int = ...) -> Any: ...
def scriptJob(*args, allChildren: bool | int = ..., attributeAdded: tuple[str, str | Callable] = ..., attributeChange: tuple[str, str | Callable] = ..., attributeDeleted: tuple[str, str | Callable] = ..., compressUndo: bool | int = ..., conditionChange: tuple[str, str | Callable] = ..., conditionFalse: tuple[str, str | Callable] = ..., conditionTrue: tuple[str, str | Callable] = ..., connectionChange: tuple[str, str | Callable] = ..., disregardIndex: bool | int = ..., event: tuple[str, str | Callable] = ..., exists: int = ..., force: bool | int = ..., idleEvent: str | Callable = ..., kill: int | list[int] = ..., killAll: bool | int = ..., killWithScene: bool | int = ..., listConditions: bool | int = ..., listEvents: bool | int = ..., listJobs: bool | int = ..., nodeDeleted: tuple[str, str | Callable] = ..., nodeNameChanged: tuple[str, str | Callable] = ..., optionVarChanged: tuple[str, str | Callable] = ..., parent: str = ..., permanent: bool | int = ..., protected: bool | int = ..., replacePrevious: bool | int = ..., runOnce: bool | int = ..., timeChange: str | Callable = ..., uiDeleted: tuple[str, str | Callable] = ...) -> Any: ...

@overload
def scriptNode(*args, edit: Literal[True], afterScript: str = ..., beforeScript: str = ..., scriptType: int = ..., sourceType: str = ...) -> None: ...

@overload
def scriptNode(*args, afterScript: bool | int | str = ..., beforeScript: bool | int | str = ..., executeAfter: bool | int = ..., executeBefore: bool | int = ..., ignoreReferenceEdits: bool | int = ..., name: str = ..., query: bool | int = ..., scriptType: int = ..., sourceType: bool | int | str = ...) -> Any: ...

@overload
def scriptTable(*args, edit: Literal[True], afterCellChangedCmd: str | Callable = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., cellBackgroundColorCommand: str | Callable = ..., cellChangedCmd: str | Callable = ..., cellForegroundColorCommand: str | Callable = ..., cellIndex: tuple[int, int] = ..., cellValue: str = ..., clearRow: int = ..., clearTable: bool | int = ..., columnFilter: tuple[int, str] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columns: int = ..., deleteRow: int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., getCellCmd: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., insertRow: int = ..., label: tuple[int, str] | list[tuple[int, str]] = ..., manage: bool | int = ..., multiEditEnabled: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., rowHeight: int = ..., rows: int = ..., rowsRemovedCmd: str | Callable = ..., rowsToBeRemovedCmd: str | Callable = ..., selectedCells: int = ..., selectedColumns: int = ..., selectedRows: int = ..., selectionBehavior: int = ..., selectionChangedCmd: str | Callable = ..., selectionMode: int = ..., sortEnabled: bool | int = ..., statusBarMessage: str = ..., useDoubleClickEdit: bool | int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def scriptTable(*args, afterCellChangedCmd: str | Callable = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., cellBackgroundColorCommand: str | Callable = ..., cellChangedCmd: str | Callable = ..., cellForegroundColorCommand: str | Callable = ..., cellIndex: bool | int | tuple[int, int] = ..., cellValue: bool | int | str = ..., clearRow: int = ..., clearTable: bool | int = ..., columnFilter: tuple[int, str] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columns: int = ..., defineTemplate: str = ..., deleteRow: int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., excludingHeaders: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., getCellCmd: str | Callable = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., insertRow: int = ..., isObscured: bool | int = ..., label: tuple[int, str] | list[tuple[int, str]] = ..., manage: bool | int = ..., multiEditEnabled: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowHeight: int = ..., rows: int = ..., rowsRemovedCmd: str | Callable = ..., rowsToBeRemovedCmd: str | Callable = ..., selectedCells: int = ..., selectedColumns: int = ..., selectedRow: bool | int = ..., selectedRows: int = ..., selectionBehavior: int = ..., selectionChangedCmd: str | Callable = ..., selectionMode: int = ..., sortEnabled: bool | int = ..., statusBarMessage: str = ..., underPointerColumn: bool | int = ..., underPointerRow: bool | int = ..., useDoubleClickEdit: bool | int = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def scriptedPanel(*args, edit: Literal[True], copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def scriptedPanel(*args, control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., query: bool | int = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., type: bool | int | str = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def scriptedPanelType(*args, edit: Literal[True], addCallback: str = ..., copyStateCallback: str = ..., createCallback: str = ..., customView: bool | int = ..., deleteCallback: str = ..., hotkeyCtxClient: str = ..., initCallback: str = ..., label: str = ..., obsolete: bool | int = ..., removeCallback: str = ..., retainOnFileOpen: bool | int = ..., saveStateCallback: str = ..., unique: bool | int = ...) -> None: ...

@overload
def scriptedPanelType(*args, addCallback: bool | int | str = ..., copyStateCallback: bool | int | str = ..., createCallback: bool | int | str = ..., customView: bool | int = ..., defineTemplate: str = ..., deleteCallback: bool | int | str = ..., exists: bool | int = ..., hotkeyCtxClient: bool | int | str = ..., initCallback: bool | int | str = ..., label: bool | int | str = ..., obsolete: bool | int = ..., query: bool | int = ..., removeCallback: bool | int | str = ..., retainOnFileOpen: bool | int = ..., saveStateCallback: bool | int | str = ..., unique: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def scrollField(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., clear: bool | int = ..., command: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., font: str = ..., fontPointSize: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., insertText: str = ..., insertionPosition: int = ..., keyPressCommand: str | Callable = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., text: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def scrollField(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., clear: bool | int = ..., command: str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., exists: bool | int = ..., font: bool | int | str = ..., fontPointSize: int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., insertText: str = ..., insertionPosition: int = ..., isObscured: bool | int = ..., keyPressCommand: str | Callable = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfLines: int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., selection: bool | int = ..., statusBarMessage: str = ..., text: bool | int | str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ..., wordWrap: bool | int = ...) -> Any: ...

@overload
def scrollLayout(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., borderVisible: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., horizontalScrollBarThickness: int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., panEnabled: bool | int = ..., preventOverride: bool | int = ..., resizeCommand: str | Callable = ..., scrollByPixel: tuple[str, int] = ..., scrollPage: str = ..., statusBarMessage: str = ..., verticalScrollBarThickness: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def scrollLayout(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., borderVisible: bool | int = ..., childArray: bool | int = ..., childResizable: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontalScrollBarThickness: int = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., minChildWidth: int = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., panEnabled: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., resizeCommand: str | Callable = ..., scrollAreaHeight: bool | int = ..., scrollAreaValue: bool | int = ..., scrollAreaWidth: bool | int = ..., scrollByPixel: tuple[str, int] = ..., scrollPage: str = ..., statusBarMessage: str = ..., useTemplate: str = ..., verticalScrollBarAlwaysVisible: bool | int = ..., verticalScrollBarThickness: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def sculpt(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., dropoffDistance: float = ..., dropoffType: str = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., insideMode: str = ..., maxDisplacement: float = ..., mode: str = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., split: bool | int = ...) -> None: ...

@overload
def sculpt(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., components: bool | int = ..., deformerTools: bool | int = ..., dropoffDistance: bool | int | float = ..., dropoffType: bool | int | str = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., groupWithLocator: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., insideMode: bool | int | str = ..., maxDisplacement: bool | int | float = ..., mode: bool | int | str = ..., name: str = ..., objectCentered: bool | int = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., sculptTool: str = ..., selectedComponents: bool | int = ..., split: bool | int = ..., useComponentTags: bool | int = ...) -> Any: ...

@overload
def sculptKeyCtx(*args, edit: Literal[True], affectsTime: bool | int = ..., affectsTimeAll: str = ..., brushScaling: int = ..., editingRadius: bool | int = ..., editingStrength: bool | int = ..., falloffCurve: str = ..., falloffCurveAll: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., minRadius: float = ..., minStrength: float = ..., minStrengthAll: str = ..., mode: int = ..., modeMinStrength: tuple[int, float] | list[tuple[int, float]] = ..., modeStrength: tuple[int, float] | list[tuple[int, float]] = ..., radius: float = ..., reset: bool | int = ..., strength: float = ..., strengthAll: str = ...) -> None: ...

@overload
def sculptKeyCtx(*args, activeMode: int = ..., affectsTime: bool | int = ..., affectsTimeAll: bool | int | str = ..., brushScaling: int = ..., editingRadius: bool | int = ..., editingStrength: bool | int = ..., exists: bool | int = ..., falloffCurve: bool | int | str = ..., falloffCurveAll: bool | int | str = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., minRadius: bool | int | float = ..., minStrength: bool | int | float = ..., minStrengthAll: bool | int | str = ..., mode: int = ..., modeMinStrength: tuple[int, float] | list[tuple[int, float]] = ..., modeStrength: tuple[int, float] | list[tuple[int, float]] = ..., name: str = ..., query: bool | int = ..., radius: bool | int | float = ..., reset: bool | int = ..., strength: bool | int | float = ..., strengthAll: bool | int | str = ...) -> Any: ...

@overload
def sculptMeshCacheChangeCloneSource(*args, edit: Literal[True], blendShape: str = ..., target: str = ...) -> None: ...

@overload
def sculptMeshCacheChangeCloneSource(*args, blendShape: bool | int | str = ..., query: bool | int = ..., target: bool | int | str = ...) -> Any: ...

@overload
def sculptMeshCacheCtx(*args, edit: Literal[True], adjustSize: bool | int = ..., adjustStrength: bool | int = ..., affectAllLayers: bool | int = ..., brushDirection: int = ..., brushSize: float = ..., brushStrength: float = ..., buildUpRate: float = ..., cloneHideSource: bool | int = ..., cloneMethod: int = ..., cloneShapeSource: str = ..., cloneTargetSource: str = ..., constrainToSurface: bool | int = ..., direction: int = ..., displayFrozen: bool | int = ..., displayMask: bool | int = ..., displayWireframe: bool | int = ..., falloffType: int = ..., flood: float = ..., floodFreeze: float = ..., frame: bool | int = ..., freezeSelection: bool | int = ..., grabFollowPath: bool | int = ..., grabSilhouette: bool | int = ..., grabTwist: bool | int = ..., inverted: bool | int = ..., lastMode: str = ..., lockShellBorder: bool | int = ..., makeStroke: tuple[int, int, int, float, float] | list[tuple[int, int, int, float, float]] = ..., minSize: float = ..., minStrength: float = ..., mirror: int = ..., mode: str = ..., orientToSurface: bool | int = ..., recordStroke: bool | int = ..., sculptFalloffCurve: str = ..., size: float = ..., stampDistance: float = ..., stampFile: str = ..., stampFlipX: bool | int = ..., stampFlipY: bool | int = ..., stampOrientToStroke: bool | int = ..., stampPlacement: int = ..., stampRandomization: bool | int = ..., stampRandomizationSeed: int = ..., stampRandomizeFlipX: bool | int = ..., stampRandomizeFlipY: bool | int = ..., stampRandomizePosX: float = ..., stampRandomizePosY: float = ..., stampRandomizeRotation: float = ..., stampRandomizeScale: float = ..., stampRandomizeStrength: float = ..., stampRotation: float = ..., steadyStrokeDistance: float = ..., strength: float = ..., updatePlane: bool | int = ..., useGlobalSize: bool | int = ..., useScreenSpace: bool | int = ..., useStampDistance: bool | int = ..., useStampImage: bool | int = ..., useSteadyStroke: bool | int = ..., wholeStroke: bool | int = ..., wireframeAlpha: float = ..., wireframeColor: tuple[float, float, float] = ...) -> None: ...

@overload
def sculptMeshCacheCtx(*args, adjustSize: bool | int = ..., adjustStrength: bool | int = ..., affectAllLayers: bool | int = ..., brushDirection: int = ..., brushSize: bool | int | float = ..., brushStrength: bool | int | float = ..., buildUpRate: bool | int | float = ..., cloneHideSource: bool | int = ..., cloneMethod: int = ..., cloneShapeSource: bool | int | str = ..., cloneTargetSource: bool | int | str = ..., constrainToSurface: bool | int = ..., direction: int = ..., displayFrozen: bool | int = ..., displayMask: bool | int = ..., displayWireframe: bool | int = ..., exists: bool | int = ..., falloffType: int = ..., flood: float = ..., floodFreeze: float = ..., frame: bool | int = ..., freezeSelection: bool | int = ..., freezesmooth: bool | int = ..., freezesmoothandpaint: bool | int = ..., grabFollowPath: bool | int = ..., grabSilhouette: bool | int = ..., grabTwist: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., inverted: bool | int = ..., lastMode: bool | int | str = ..., lockShellBorder: bool | int = ..., makeStroke: tuple[int, int, int, float, float] | list[tuple[int, int, int, float, float]] = ..., minSize: bool | int | float = ..., minStrength: bool | int | float = ..., mirror: int = ..., mode: bool | int | str = ..., name: str = ..., orientToSurface: bool | int = ..., query: bool | int = ..., recordStroke: bool | int = ..., sculptFalloffCurve: bool | int | str = ..., size: bool | int | float = ..., stampDistance: bool | int | float = ..., stampFile: bool | int | str = ..., stampFlipX: bool | int = ..., stampFlipY: bool | int = ..., stampOrientToStroke: bool | int = ..., stampPlacement: int = ..., stampRandomization: bool | int = ..., stampRandomizationSeed: int = ..., stampRandomizeFlipX: bool | int = ..., stampRandomizeFlipY: bool | int = ..., stampRandomizePosX: bool | int | float = ..., stampRandomizePosY: bool | int | float = ..., stampRandomizeRotation: bool | int | float = ..., stampRandomizeScale: bool | int | float = ..., stampRandomizeStrength: bool | int | float = ..., stampRotation: bool | int | float = ..., steadyStrokeDistance: bool | int | float = ..., strength: bool | int | float = ..., updatePlane: bool | int = ..., useGlobalSize: bool | int = ..., useScreenSpace: bool | int = ..., useStampDistance: bool | int = ..., useStampImage: bool | int = ..., useSteadyStroke: bool | int = ..., wholeStroke: bool | int = ..., wireframeAlpha: bool | int | float = ..., wireframeColor: bool | int | tuple[float, float, float] = ...) -> Any: ...

@overload
def sculptTarget(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., inbetweenWeight: float = ..., parallel: bool | int = ..., prune: bool | int = ..., regenerate: bool | int = ..., remove: bool | int | list[bool | int] = ..., snapshot: int = ..., split: bool | int = ..., target: int = ...) -> None: ...

@overload
def sculptTarget(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., components: bool | int = ..., deformerTools: bool | int = ..., exclusive: str = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., inbetweenWeight: float = ..., includeHiddenSelections: bool | int = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., regenerate: bool | int = ..., remove: bool | int | list[bool | int] = ..., selectedComponents: bool | int = ..., snapshot: int = ..., split: bool | int = ..., target: int = ..., useComponentTags: bool | int = ...) -> Any: ...

@overload
def selLoadSettings(*args, edit: Literal[True], activeProxy: str = ..., deferReference: bool | int = ...) -> None: ...

@overload
def selLoadSettings(*args, activeProxy: bool | int | str = ..., deferReference: bool | int = ..., fileName: bool | int | str = ..., numSettings: int = ..., proxyManager: bool | int | str = ..., proxySetFiles: bool | int | str = ..., proxySetTags: bool | int | str = ..., proxyTag: bool | int | str = ..., query: bool | int = ..., referenceNode: bool | int | str = ..., shortName: bool | int = ..., unresolvedName: bool | int = ...) -> Any: ...
def select(*args, add: bool | int = ..., addFirst: bool | int = ..., all: bool | int = ..., allDagObjects: bool | int = ..., allDependencyNodes: bool | int = ..., clear: bool | int = ..., containerCentric: bool | int = ..., deselect: bool | int = ..., hierarchy: bool | int = ..., noExpand: bool | int = ..., replace: bool | int = ..., symmetry: bool | int = ..., symmetrySide: int = ..., toggle: bool | int = ..., visible: bool | int = ...) -> Any: ...

@overload
def selectContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def selectContext(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def selectKey(*args, addTo: bool | int = ..., animation: str = ..., attribute: str | list[str] = ..., clear: bool | int = ..., controlPoints: bool | int = ..., float: str | int | float | list[str | int | float] = ..., hierarchy: str = ..., inTangent: bool | int = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., keyframe: bool | int = ..., outTangent: bool | int = ..., remove: bool | int = ..., replace: bool | int = ..., shape: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ..., toggle: bool | int = ..., unsnappedKeys: float = ...) -> Any: ...

@overload
def selectKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def selectKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def selectKeyframe(*args, animation: str = ..., attribute: str | list[str] = ..., controlPoints: bool | int = ..., float: None | list[None] = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: None | list[None] = ..., selectionWindow: tuple[float, float, float, float] = ..., shape: bool | int = ..., time: None | list[None] = ...) -> Any: ...

@overload
def selectKeyframeRegionCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def selectKeyframeRegionCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def selectMode(*args, component: bool | int = ..., hierarchical: bool | int = ..., leaf: bool | int = ..., object: bool | int = ..., preset: bool | int = ..., query: bool | int = ..., root: bool | int = ..., template: bool | int = ...) -> Any: ...
def selectPref(*args, affectsActive: bool | int = ..., allowHiliteSelection: bool | int = ..., autoSelectContainer: bool | int = ..., autoSelectOutlinerSetMembers: bool | int = ..., autoUseDepth: bool | int = ..., clickBoxSize: int = ..., clickDrag: bool | int = ..., containerCentricSelection: bool | int = ..., disableComponentPopups: bool | int = ..., expandPopupList: bool | int = ..., ignoreSelectionPriority: bool | int = ..., manipClickBoxSize: int = ..., paintSelect: bool | int = ..., paintSelectRefine: bool | int = ..., paintSelectWithDepth: bool | int = ..., popupMenuSelection: bool | int = ..., preSelectBackfacing: bool | int = ..., preSelectClosest: bool | int = ..., preSelectDeadSpace: int = ..., preSelectHilite: bool | int = ..., preSelectHiliteSize: bool | int | float = ..., preSelectSize: int = ..., preSelectTweakDeadSpace: int = ..., query: bool | int = ..., selectTypeChangeAffectsActive: bool | int = ..., selectionChildHighlightMode: int = ..., singleBoxSelection: bool | int = ..., straightLineDistance: bool | int = ..., trackSelectionOrder: bool | int = ..., useDepth: bool | int = ..., xformNoSelect: bool | int = ...) -> Any: ...
def selectPriority(*args, allComponents: int = ..., allObjects: int = ..., animBreakdown: int = ..., animCurve: int = ..., animInTangent: int = ..., animKeyframe: int = ..., animOutTangent: int = ..., byName: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., camera: int = ..., cluster: int = ..., collisionModel: int = ..., controlVertex: int = ..., curve: int = ..., curveKnot: int = ..., curveOnSurface: int = ..., curveParameterPoint: int = ..., dimension: int = ..., dynamicConstraint: int = ..., edge: int = ..., editPoint: int = ..., emitter: int = ..., facet: int = ..., field: int = ..., fluid: int = ..., follicle: int = ..., hairSystem: int = ..., handle: int = ..., hull: int = ..., ikEndEffector: int = ..., ikHandle: int = ..., imagePlane: int = ..., implicitGeometry: int = ..., isoparm: int = ..., joint: int = ..., jointPivot: int = ..., lattice: int = ..., latticePoint: int = ..., light: int = ..., localRotationAxis: int = ..., locator: int = ..., locatorUV: int = ..., locatorXYZ: int = ..., meshUVShell: int = ..., motionTrailPoint: int = ..., motionTrailTangent: int = ..., nCloth: int = ..., nParticle: int = ..., nParticleShape: int = ..., nRigid: int = ..., nonlinear: int = ..., nurbsCurve: int = ..., nurbsSurface: int = ..., orientationLocator: int = ..., particle: int = ..., particleShape: int = ..., plane: int = ..., polymesh: int = ..., polymeshEdge: int = ..., polymeshFace: int = ..., polymeshFreeEdge: int = ..., polymeshUV: int = ..., polymeshVertex: int = ..., polymeshVtxFace: int = ..., query: bool | int = ..., queryByName: bool | int | str = ..., rigidBody: int = ..., rigidConstraint: int = ..., rotatePivot: int = ..., scalePivot: int = ..., sculpt: int = ..., selectHandle: int = ..., spring: int = ..., springComponent: int = ..., stroke: int = ..., subdiv: int = ..., subdivMeshEdge: int = ..., subdivMeshFace: int = ..., subdivMeshPoint: int = ..., subdivMeshUV: int = ..., surfaceEdge: int = ..., surfaceFace: int = ..., surfaceKnot: int = ..., surfaceParameterPoint: int = ..., surfaceRange: int = ..., texture: int = ..., vertex: int = ...) -> Any: ...
def selectType(*args, allComponents: bool | int = ..., allObjects: bool | int = ..., animBreakdown: bool | int = ..., animCurve: bool | int = ..., animInTangent: bool | int = ..., animKeyframe: bool | int = ..., animOutTangent: bool | int = ..., byName: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., camera: bool | int = ..., cluster: bool | int = ..., collisionModel: bool | int = ..., controlVertex: bool | int = ..., curve: bool | int = ..., curveKnot: bool | int = ..., curveOnSurface: bool | int = ..., curveParameterPoint: bool | int = ..., dimension: bool | int = ..., dynamicConstraint: bool | int = ..., edge: bool | int = ..., editPoint: bool | int = ..., emitter: bool | int = ..., facet: bool | int = ..., field: bool | int = ..., fluid: bool | int = ..., follicle: bool | int = ..., hairSystem: bool | int = ..., handle: bool | int = ..., hull: bool | int = ..., ikEndEffector: bool | int = ..., ikHandle: bool | int = ..., imagePlane: bool | int = ..., implicitGeometry: bool | int = ..., isoparm: bool | int = ..., joint: bool | int = ..., jointPivot: bool | int = ..., lattice: bool | int = ..., latticePoint: bool | int = ..., light: bool | int = ..., localRotationAxis: bool | int = ..., locator: bool | int = ..., locatorUV: bool | int = ..., locatorXYZ: bool | int = ..., meshComponents: bool | int = ..., meshUVShell: bool | int = ..., motionTrailPoint: bool | int = ..., motionTrailTangent: bool | int = ..., nCloth: bool | int = ..., nParticle: bool | int = ..., nParticleShape: bool | int = ..., nRigid: bool | int = ..., nonlinear: bool | int = ..., nurbsCurve: bool | int = ..., nurbsSurface: bool | int = ..., objectComponent: bool | int = ..., orientationLocator: bool | int = ..., particle: bool | int = ..., particleShape: bool | int = ..., plane: bool | int = ..., polymesh: bool | int = ..., polymeshEdge: bool | int = ..., polymeshFace: bool | int = ..., polymeshFreeEdge: bool | int = ..., polymeshUV: bool | int = ..., polymeshVertex: bool | int = ..., polymeshVtxFace: bool | int = ..., query: bool | int = ..., queryByName: bool | int | str = ..., rigidBody: bool | int = ..., rigidConstraint: bool | int = ..., rotatePivot: bool | int = ..., scalePivot: bool | int = ..., sculpt: bool | int = ..., selectHandle: bool | int = ..., spring: bool | int = ..., springComponent: bool | int = ..., stroke: bool | int = ..., subdiv: bool | int = ..., subdivMeshEdge: bool | int = ..., subdivMeshFace: bool | int = ..., subdivMeshPoint: bool | int = ..., subdivMeshUV: bool | int = ..., surfaceEdge: bool | int = ..., surfaceFace: bool | int = ..., surfaceKnot: bool | int = ..., surfaceParameterPoint: bool | int = ..., surfaceRange: bool | int = ..., surfaceUV: bool | int = ..., texture: bool | int = ..., vertex: bool | int = ...) -> Any: ...
def selectedNodes(*args, dagObjects: bool | int = ...) -> Any: ...

@overload
def selectionConnection(*args, edit: Literal[True], addScript: str | Callable = ..., addTo: str = ..., clear: bool | int = ..., deselect: str = ..., editor: str = ..., filter: str = ..., g: bool | int = ..., lock: bool | int = ..., object: str = ..., parent: str = ..., remove: str = ..., removeScript: str | Callable = ..., select: str = ...) -> None: ...

@overload
def selectionConnection(*args, activeCacheList: bool | int = ..., activeCharacterList: bool | int = ..., activeList: bool | int = ..., addScript: bool | int | str | Callable = ..., addTo: str = ..., characterList: bool | int = ..., clear: bool | int = ..., connectionList: bool | int = ..., defineTemplate: str = ..., deselect: str = ..., editor: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., findObject: bool | int | str = ..., g: bool | int = ..., highlightList: bool | int = ..., identify: bool | int = ..., keyframeList: bool | int = ..., lock: bool | int = ..., modelList: bool | int = ..., object: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., remove: str = ..., removeScript: bool | int | str | Callable = ..., select: str = ..., setList: bool | int = ..., switch: bool | int = ..., useTemplate: str = ..., worldList: bool | int = ...) -> Any: ...

@overload
def separator(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., horizontal: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., style: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def separator(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontal: bool | int = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., style: bool | int | str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def sequenceManager(*args, addSequencerAudio: str = ..., attachSequencerAudio: str = ..., currentShot: bool | int | str = ..., currentTime: bool | int | int | float = ..., edit: bool | int = ..., listSequencerAudio: str = ..., listShots: bool | int = ..., modelPanel: bool | int | str = ..., node: bool | int | str = ..., query: bool | int = ..., writableSequencer: bool | int | str = ...) -> Any: ...
def setAttr(*args, alteredValue: bool | int = ..., caching: bool | int = ..., capacityHint: int = ..., channelBox: bool | int = ..., clamp: bool | int = ..., edit: bool | int = ..., keyable: bool | int = ..., lock: bool | int = ..., query: bool | int = ..., size: int = ..., type: str = ...) -> None: ...
def setAttrMapping(*args, absolute: bool | int = ..., attribute: str | list[str] = ..., axis: str = ..., clutch: str = ..., device: str = ..., offset: float = ..., relative: bool | int = ..., scale: float = ..., selection: bool | int = ...) -> Any: ...
def setDefaultShadingGroup(*args, query: bool | int = ...) -> Any: ...
def setDrivenKeyframe(*args, attribute: str | list[str] = ..., controlPoints: bool | int = ..., count: bool | int = ..., currentDriver: bool | int | str = ..., driven: bool | int = ..., driver: bool | int = ..., driverValue: float | list[float] = ..., edit: bool | int = ..., hierarchy: str = ..., inTangentType: str = ..., insert: bool | int = ..., insertBlend: bool | int = ..., outTangentType: str = ..., query: bool | int = ..., shape: bool | int = ..., value: float = ...) -> Any: ...
def setDynStartState(*args, **keywords): ...
def setDynamic(*args, allOnWhenRun: bool | int = ..., disableAllOnWhenRun: bool | int = ..., setAll: bool | int = ..., setOff: bool | int = ..., setOn: bool | int = ...) -> Any: ...

@overload
def setEditCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def setEditCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def setFluidAttr(*args, addValue: bool | int = ..., attribute: str = ..., clear: bool | int = ..., floatRandom: float = ..., floatValue: float = ..., lowerFace: bool | int = ..., reset: bool | int = ..., vectorRandom: tuple[float, float, float] = ..., vectorValue: tuple[float, float, float] = ..., xIndex: int = ..., xvalue: bool | int = ..., yIndex: int = ..., yvalue: bool | int = ..., zIndex: int = ..., zvalue: bool | int = ...) -> Any: ...
def setFocus(*args) -> Any: ...
def setInfinity(*args, attribute: str | list[str] = ..., controlPoints: bool | int = ..., edit: bool | int = ..., hierarchy: str = ..., postInfinite: bool | int | str = ..., preInfinite: bool | int | str = ..., query: bool | int = ..., shape: bool | int = ...) -> Any: ...
def setInputDeviceMapping(*args, absolute: bool | int = ..., axis: str | list[str] = ..., device: str = ..., offset: float = ..., relative: bool | int = ..., scale: float = ..., view: bool | int = ..., world: bool | int = ...) -> Any: ...

@overload
def setKeyCtx(*args, edit: Literal[True], breakdown: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., preserveTangent: bool | int = ...) -> None: ...

@overload
def setKeyCtx(*args, breakdown: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., preserveTangent: bool | int = ..., query: bool | int = ...) -> Any: ...
def setKeyPath(*args) -> Any: ...

@overload
def setKeyframe(*args, edit: Literal[True], breakdown: bool | int = ...) -> None: ...

@overload
def setKeyframe(*args, adjustTangent: bool | int = ..., animLayer: str = ..., animated: bool | int = ..., attribute: str | list[str] = ..., breakdown: bool | int = ..., clip: str = ..., controlPoints: bool | int = ..., dirtyDG: bool | int = ..., float: float | list[float] = ..., hierarchy: str = ..., identity: bool | int = ..., inTangentType: str = ..., insert: bool | int = ..., insertBlend: bool | int = ..., minimizeRotation: bool | int = ..., noResolve: bool | int = ..., outTangentType: str = ..., preserveCurveShape: bool | int = ..., query: bool | int = ..., respectKeyable: bool | int = ..., shape: bool | int = ..., time: int | float | list[int | float] = ..., useCurrentLockedWeights: bool | int = ..., value: float = ...) -> None: ...
def setKeyframeBlendshapeTargetWts(*args) -> Any: ...
def setMenuMode(*args) -> Any: ...
def setNClothStartState(*args, **keywords): ...
def setNodeTypeFlag(*args, display: bool | int = ..., query: bool | int = ..., threadSafe: bool | int = ...) -> Any: ...
def setParent(*args, defineTemplate: str = ..., menu: bool | int = ..., query: bool | int = ..., topLevel: bool | int = ..., upLevel: bool | int = ..., useTemplate: str = ...) -> Any: ...
def setParticleAttr(*args, attribute: str = ..., floatValue: float = ..., object: str = ..., randomFloat: float = ..., randomVector: tuple[float, float, float] = ..., relative: bool | int = ..., vectorValue: tuple[float, float, float] = ...) -> Any: ...
def setRenderPassType(*args, defaultDataType: bool | int = ..., numChannels: int = ..., type: str = ...) -> Any: ...
def setStartupMessage(*args) -> Any: ...
def setToolTo(*args) -> Any: ...
def setUITemplate(*args, popTemplate: bool | int = ..., pushTemplate: bool | int = ..., query: bool | int = ...) -> Any: ...
def setXformManip(*args, query: bool | int = ..., showUnits: bool | int = ..., suppress: bool | int = ..., useRotatePivot: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...

@overload
def sets(*args, edit: Literal[True], addElement: str = ..., afterFilters: bool | int = ..., channelSetColor: tuple[float, float, float] = ..., channelSetColorIndex: int = ..., clear: str = ..., color: int = ..., flatten: str = ..., forceElement: str = ..., include: str = ..., remove: str = ..., text: str = ...) -> None: ...

@overload
def sets(*args, addElement: str = ..., afterFilters: bool | int = ..., anyMember: str = ..., channelSetColor: bool | int | tuple[float, float, float] = ..., channelSetColorIndex: int = ..., clear: str = ..., color: int = ..., copy: str = ..., edges: bool | int = ..., editPoints: bool | int = ..., empty: bool | int = ..., facets: bool | int = ..., flatten: str = ..., forceElement: str = ..., include: str = ..., intersection: str = ..., isIntersecting: str = ..., isMember: str = ..., layer: bool | int = ..., name: str = ..., noIntermediate: bool | int = ..., noSurfaceShader: bool | int = ..., noWarnings: bool | int = ..., nodesOnly: bool | int = ..., query: bool | int = ..., remove: str = ..., renderable: bool | int = ..., size: bool | int = ..., split: str = ..., subtract: str = ..., text: bool | int | str = ..., union: str = ..., vertices: bool | int = ...) -> Any: ...

@overload
def shadingConnection(*args, edit: Literal[True], connectionState: bool | int = ...) -> None: ...

@overload
def shadingConnection(*args, connectionState: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def shadingGeometryRelCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., offCommand: str = ..., onCommand: str = ..., shadingCentric: bool | int = ...) -> None: ...

@overload
def shadingGeometryRelCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., offCommand: bool | int | str = ..., onCommand: bool | int | str = ..., query: bool | int = ..., shadingCentric: bool | int = ...) -> Any: ...

@overload
def shadingLightRelCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., offCommand: str = ..., onCommand: str = ..., shadingCentric: bool | int = ...) -> None: ...

@overload
def shadingLightRelCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., offCommand: bool | int | str = ..., onCommand: bool | int | str = ..., query: bool | int = ..., shadingCentric: bool | int = ...) -> Any: ...
def shadingNetworkCompare(*args, byName: bool | int = ..., byValue: bool | int = ..., delete: bool | int = ..., equivalent: bool | int = ..., network1: bool | int = ..., network2: bool | int = ..., query: bool | int = ..., upstreamOnly: bool | int = ...) -> Any: ...
def shadingNode(*args, asLight: bool | int = ..., asPostProcess: bool | int = ..., asRendering: bool | int = ..., asShader: bool | int = ..., asTexture: bool | int = ..., asUtility: bool | int = ..., isColorManaged: bool | int = ..., name: str = ..., parent: str = ..., shared: bool | int = ..., skipSelect: bool | int = ...) -> Any: ...
def shapeCompare(*args) -> Any: ...

@overload
def shapeEditor(*args, edit: Literal[True], clearSelection: bool | int = ..., docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., parent: str = ..., selectionConnection: str = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., verticalSliders: bool | int = ...) -> None: ...

@overload
def shapeEditor(*args, clearSelection: bool | int = ..., control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., lockMainConnection: bool | int = ..., lowestSelection: bool | int = ..., mainListConnection: bool | int | str = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectionConnection: bool | int | str = ..., stateString: bool | int = ..., targetControlList: bool | int = ..., targetList: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., verticalSliders: bool | int = ...) -> Any: ...

@overload
def shapePanel(*args, edit: Literal[True], copy: str = ..., createString: bool | int = ..., docTag: str = ..., editString: bool | int = ..., init: bool | int = ..., label: str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., popupMenuProcedure: str | Callable = ..., replacePanel: str = ..., tearOff: bool | int = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ...) -> None: ...

@overload
def shapePanel(*args, control: bool | int = ..., copy: str = ..., createString: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., editString: bool | int = ..., exists: bool | int = ..., init: bool | int = ..., isUnique: bool | int = ..., label: bool | int | str = ..., menuBarRepeatLast: bool | int = ..., menuBarVisible: bool | int = ..., needsInit: bool | int = ..., parent: str = ..., popupMenuProcedure: bool | int | str | Callable = ..., query: bool | int = ..., replacePanel: str = ..., shapeEditor: bool | int = ..., tearOff: bool | int = ..., tearOffCopy: str = ..., tearOffRestore: bool | int = ..., unParent: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def shelfButton(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., command: str | Callable = ..., commandRepeatable: bool | int = ..., disabledImage: str = ..., docTag: str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableCommandRepeat: bool | int = ..., enableKeyboardFocus: bool | int = ..., flat: bool | int = ..., flexibleWidthType: int = ..., flexibleWidthValue: int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: str = ..., handleNodeDropCallback: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., highlightImage: str = ..., image: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., imageOverlayLabel: str = ..., label: str = ..., labelEditingCallback: str | Callable = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., menuItem: tuple[str, str] | list[tuple[str, str]] = ..., menuItemPython: int | list[int] = ..., menuItemWithOptionBox: tuple[str, str, str] | list[tuple[str, str, str]] = ..., noBackground: bool | int = ..., overlayLabelBackColor: tuple[float, float, float, float] = ..., overlayLabelColor: tuple[float, float, float] = ..., preventOverride: bool | int = ..., rotation: float = ..., scaleIcon: bool | int = ..., selectionImage: str = ..., sourceType: str = ..., statusBarMessage: str = ..., style: str = ..., useAlpha: bool | int = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def shelfButton(*args, actionIsSubstitute: bool | int = ..., align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., command: bool | int | str | Callable = ..., commandRepeatable: bool | int = ..., defineTemplate: str = ..., disabledImage: bool | int | str = ..., docTag: bool | int | str = ..., doubleClickCommand: bool | int | str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableCommandRepeat: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., flat: bool | int = ..., flexibleWidthType: int = ..., flexibleWidthValue: int = ..., flipX: bool | int = ..., flipY: bool | int = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., handleNodeDropCallback: str | Callable = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., highlightImage: bool | int | str = ..., image: bool | int | str = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., imageOverlayLabel: bool | int | str = ..., isObscured: bool | int = ..., label: bool | int | str = ..., labelEditingCallback: str | Callable = ..., labelOffset: int = ..., manage: bool | int = ..., marginHeight: int = ..., marginWidth: int = ..., menuItem: tuple[str, str] | list[tuple[str, str]] = ..., menuItemPython: int | list[int] = ..., menuItemWithOptionBox: tuple[str, str, str] | list[tuple[str, str, str]] = ..., noBackground: bool | int = ..., noDefaultPopup: bool | int = ..., numberOfPopupMenus: bool | int = ..., overlayLabelBackColor: bool | int | tuple[float, float, float, float] = ..., overlayLabelColor: bool | int | tuple[float, float, float] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rotation: bool | int | float = ..., scaleIcon: bool | int = ..., selectionImage: bool | int | str = ..., sourceType: bool | int | str = ..., statusBarMessage: str = ..., style: bool | int | str = ..., useAlpha: bool | int = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def shelfLayout(*args, exists: Literal[True]) -> bool: ...

@overload
def shelfLayout(*args, edit: Literal[True], alignment: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., cellHeight: int = ..., cellWidth: int = ..., cellWidthHeight: tuple[int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., horizontal: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., position: tuple[str, int] | list[tuple[str, int]] = ..., preventOverride: bool | int = ..., spacing: int = ..., statusBarMessage: str = ..., style: str = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def shelfLayout(*args, alignment: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., cellHeight: int = ..., cellWidth: int = ..., cellWidthHeight: bool | int | tuple[int, int] = ..., childArray: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontal: bool | int = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., position: tuple[str, int] | list[tuple[str, int]] = ..., preventOverride: bool | int = ..., query: bool | int = ..., spacing: int = ..., statusBarMessage: str = ..., style: bool | int | str = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def shelfTabLayout(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., borderStyle: str = ..., changeCommand: str | Callable = ..., closeTab: int = ..., closeTabCommand: str | Callable = ..., docTag: str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., horizontalScrollBarThickness: int = ..., image: str = ..., imageVisible: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., moveTab: tuple[int, int] = ..., newTabCommand: str | Callable = ..., noBackground: bool | int = ..., postMenuCommand: str | Callable = ..., preSelectCommand: str | Callable = ..., preventOverride: bool | int = ..., scrollableTabs: bool | int = ..., selectCommand: str | Callable = ..., selectTab: str = ..., selectTabIndex: int = ..., showNewTab: bool | int = ..., statusBarMessage: str = ..., tabIcon: tuple[str, str] | list[tuple[str, str]] = ..., tabIconIndex: tuple[int, str] | list[tuple[int, str]] = ..., tabLabel: tuple[str, str] | list[tuple[str, str]] = ..., tabLabelIndex: tuple[int, str] | list[tuple[int, str]] = ..., tabPosition: str = ..., tabTooltip: tuple[str, str] | list[tuple[str, str]] = ..., tabTooltipIndex: tuple[int, str] | list[tuple[int, str]] = ..., tabsVisible: bool | int = ..., verticalScrollBarThickness: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def shelfTabLayout(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., borderStyle: bool | int | str = ..., changeCommand: str | Callable = ..., childArray: bool | int = ..., childResizable: bool | int = ..., closeTab: int = ..., closeTabCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontalScrollBarThickness: int = ..., image: bool | int | str = ..., imageVisible: bool | int = ..., innerMarginHeight: int = ..., innerMarginWidth: int = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., minChildWidth: int = ..., moveTab: tuple[int, int] = ..., newTabCommand: str | Callable = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., postMenuCommand: str | Callable = ..., preSelectCommand: str | Callable = ..., preventOverride: bool | int = ..., query: bool | int = ..., scrollable: bool | int = ..., scrollableTabs: bool | int = ..., selectCommand: bool | int | str | Callable = ..., selectTab: bool | int | str = ..., selectTabIndex: int = ..., showNewTab: bool | int = ..., statusBarMessage: str = ..., tabIcon: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., tabIconIndex: bool | int | tuple[int, str] | list[tuple[int, str]] = ..., tabLabel: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., tabLabelIndex: bool | int | tuple[int, str] | list[tuple[int, str]] = ..., tabPosition: bool | int | str = ..., tabTooltip: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., tabTooltipIndex: bool | int | tuple[int, str] | list[tuple[int, str]] = ..., tabsClosable: bool | int = ..., tabsVisible: bool | int = ..., useTemplate: str = ..., verticalScrollBarThickness: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def shot(*args, edit: Literal[True], audio: str = ..., clip: str = ..., clipDuration: int | float = ..., clipOpacity: float = ..., clipSyncState: bool | int = ..., clipZeroOffset: int | float = ..., copy: bool | int = ..., createCustomAnim: bool | int = ..., currentCamera: str = ..., deleteCustomAnim: bool | int = ..., determineTrack: bool | int = ..., endTime: int | float = ..., favorite: bool | int = ..., flag1: bool | int = ..., flag10: bool | int = ..., flag11: bool | int = ..., flag12: bool | int = ..., flag2: bool | int = ..., flag3: bool | int = ..., flag4: bool | int = ..., flag5: bool | int = ..., flag6: bool | int = ..., flag7: bool | int = ..., flag8: bool | int = ..., flag9: bool | int = ..., hasCameraSet: bool | int = ..., hasStereoCamera: bool | int = ..., imagePlaneVisibility: bool | int = ..., linkAudio: str = ..., lock: bool | int = ..., mute: bool | int = ..., paste: bool | int = ..., pasteInstance: bool | int = ..., postHoldTime: int | float = ..., preHoldTime: int | float = ..., scale: float = ..., selfmute: bool | int = ..., sequenceDuration: int | float = ..., sequenceEndTime: int | float = ..., sequenceStartTime: int | float = ..., shotName: str = ..., sourceDuration: int | float = ..., startTime: int | float = ..., track: int = ..., transitionInLength: int | float = ..., transitionInType: int = ..., transitionOutLength: int | float = ..., transitionOutType: int = ..., unlinkAudio: bool | int = ...) -> None: ...

@overload
def shot(*args, audio: bool | int | str = ..., clip: bool | int | str = ..., clipDuration: bool | int | int | float = ..., clipOpacity: bool | int | float = ..., clipSyncState: bool | int = ..., clipZeroOffset: bool | int | int | float = ..., copy: bool | int = ..., createCustomAnim: bool | int = ..., currentCamera: bool | int | str = ..., customAnim: bool | int = ..., deleteCustomAnim: bool | int = ..., determineTrack: bool | int = ..., endTime: bool | int | int | float = ..., favorite: bool | int = ..., flag1: bool | int = ..., flag10: bool | int = ..., flag11: bool | int = ..., flag12: bool | int = ..., flag2: bool | int = ..., flag3: bool | int = ..., flag4: bool | int = ..., flag5: bool | int = ..., flag6: bool | int = ..., flag7: bool | int = ..., flag8: bool | int = ..., flag9: bool | int = ..., hasCameraSet: bool | int = ..., hasStereoCamera: bool | int = ..., imagePlaneVisibility: bool | int = ..., linkAudio: bool | int | str = ..., lock: bool | int = ..., mute: bool | int = ..., paste: bool | int = ..., pasteInstance: bool | int = ..., postHoldTime: bool | int | int | float = ..., preHoldTime: bool | int | int | float = ..., query: bool | int = ..., scale: bool | int | float = ..., selfmute: bool | int = ..., sequenceDuration: bool | int | int | float = ..., sequenceEndTime: bool | int | int | float = ..., sequenceStartTime: bool | int | int | float = ..., shotName: bool | int | str = ..., sourceDuration: bool | int | int | float = ..., startTime: bool | int | int | float = ..., track: int = ..., transitionInLength: bool | int | int | float = ..., transitionInType: int = ..., transitionOutLength: bool | int | int | float = ..., transitionOutType: int = ..., unlinkAudio: bool | int = ...) -> Any: ...

@overload
def shotRipple(*args, edit: Literal[True], deleted: bool | int = ..., endDelta: int | float = ..., endTime: int | float = ..., startDelta: int | float = ..., startTime: int | float = ...) -> None: ...

@overload
def shotRipple(*args, deleted: bool | int = ..., endDelta: bool | int | int | float = ..., endTime: bool | int | int | float = ..., query: bool | int = ..., startDelta: bool | int | int | float = ..., startTime: bool | int | int | float = ...) -> Any: ...

@overload
def shotTrack(*args, edit: Literal[True], lock: bool | int = ..., mute: bool | int = ..., selfmute: bool | int = ..., solo: bool | int = ..., title: str = ..., track: int = ...) -> None: ...

@overload
def shotTrack(*args, insertTrack: int = ..., lock: bool | int = ..., mute: bool | int = ..., numTracks: int = ..., query: bool | int = ..., removeEmptyTracks: bool | int = ..., removeTrack: int = ..., selfmute: bool | int = ..., solo: bool | int = ..., swapTracks: tuple[int, int] = ..., title: bool | int | str = ..., track: int = ..., unsolo: bool | int = ...) -> Any: ...
def showHelp(*args, absolute: bool | int = ..., docs: bool | int = ..., helpTable: bool | int = ..., query: bool | int = ..., version: bool | int = ...) -> Any: ...
def showHidden(*args, above: bool | int = ..., allObjects: bool | int = ..., below: bool | int = ..., lastHidden: bool | int = ...) -> Any: ...

@overload
def showManipCtx(*args, edit: Literal[True], addAttr: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., incSnap: tuple[int, bool | int] | list[tuple[int, bool | int]] = ..., incSnapRelative: tuple[int, bool | int] | list[tuple[int, bool | int]] = ..., incSnapValue: tuple[int, float] | list[tuple[int, float]] = ..., iveVisible: bool | int = ..., lockSelection: bool | int = ..., moveActiveAttrDown: bool | int = ..., moveActiveAttrToTop: bool | int = ..., moveActiveAttrUp: bool | int = ..., removeAttr: str = ..., resetActiveAttr: bool | int = ..., setAttrActive: str = ..., setNextAttrActive: bool | int = ..., setPreviousAttrActive: bool | int = ..., toggleIncSnap: bool | int = ..., toolFinish: str | Callable = ..., toolStart: str | Callable = ...) -> None: ...

@overload
def showManipCtx(*args, addAttr: str = ..., currentNodeName: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., incSnap: bool | int | tuple[int, bool | int] | list[tuple[int, bool | int]] = ..., incSnapRelative: bool | int | tuple[int, bool | int] | list[tuple[int, bool | int]] = ..., incSnapUI: bool | int = ..., incSnapValue: bool | int | tuple[int, float] | list[tuple[int, float]] = ..., iveVisible: bool | int = ..., lockSelection: bool | int = ..., moveActiveAttrDown: bool | int = ..., moveActiveAttrToTop: bool | int = ..., moveActiveAttrUp: bool | int = ..., name: str = ..., query: bool | int = ..., removeAttr: str = ..., resetActiveAttr: bool | int = ..., selectedAttributes: bool | int = ..., setAttrActive: str = ..., setNextAttrActive: bool | int = ..., setPreviousAttrActive: bool | int = ..., toggleIncSnap: bool | int = ..., toolFinish: bool | int | str | Callable = ..., toolStart: bool | int | str | Callable = ...) -> Any: ...
def showMetadata(*args, auto: bool | int = ..., dataType: bool | int | str = ..., interpolation: bool | int = ..., isActivated: bool | int = ..., listAllStreams: bool | int = ..., listMembers: bool | int = ..., listValidMethods: bool | int = ..., listVisibleStreams: bool | int = ..., member: bool | int | str = ..., method: bool | int | str = ..., off: bool | int | tuple[Any, Any, Any] = ..., query: bool | int = ..., range: bool | int | tuple[float, float] = ..., rayScale: bool | int | float = ..., stream: bool | int | str = ...) -> Any: ...
def showSelectionInTitle(*args) -> Any: ...
def showShadingGroupAttrEditor(*args, query: bool | int = ...) -> Any: ...
def showWindow(*args) -> Any: ...
def simplify(*args, animation: str = ..., attribute: str | list[str] = ..., controlPoints: bool | int = ..., float: str | int | float | list[str | int | float] = ..., floatTolerance: float = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., shape: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ..., timeTolerance: int | float = ..., valueTolerance: float = ...) -> Any: ...

@overload
def singleProfileBirailSurface(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., tangentContinuityProfile1: bool | int = ..., transformMode: int = ...) -> None: ...

@overload
def singleProfileBirailSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., tangentContinuityProfile1: bool | int = ..., transformMode: int = ...) -> Any: ...
def skeletonEmbed(*args, mergedMesh: bool | int = ..., query: bool | int = ..., segmentationMethod: int = ..., segmentationResolution: int = ...) -> Any: ...

@overload
def skinBindCtx(*args, edit: Literal[True], about: str = ..., axis: str = ..., colorRamp: str = ..., currentInfluence: str = ..., displayInactiveMode: int = ..., displayNormalized: bool | int = ..., falloffCurve: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., symmetry: bool | int = ..., tolerance: float = ...) -> None: ...

@overload
def skinBindCtx(*args, about: bool | int | str = ..., axis: bool | int | str = ..., colorRamp: bool | int | str = ..., currentInfluence: bool | int | str = ..., displayInactiveMode: int = ..., displayNormalized: bool | int = ..., exists: bool | int = ..., falloffCurve: bool | int | str = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., symmetry: bool | int = ..., tolerance: bool | int | float = ...) -> Any: ...

@overload
def skinCluster(*args, edit: Literal[True], addInfluence: str | list[str] = ..., addToSelection: bool | int = ..., after: bool | int = ..., afterReference: bool | int = ..., baseShape: str | list[str] = ..., before: bool | int = ..., dropoffRate: float = ..., forceNormalizeWeights: bool | int = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., ignoreBindPose: bool | int = ..., influence: str = ..., lockWeights: bool | int = ..., maximumInfluences: int = ..., moveJointsMode: bool | int = ..., normalizeWeights: int = ..., nurbsSamples: int = ..., obeyMaxInfluences: bool | int = ..., parallel: bool | int = ..., polySmoothness: float = ..., prune: bool | int = ..., recacheBindMatrices: bool | int = ..., remove: bool | int | list[bool | int] = ..., removeFromSelection: bool | int = ..., removeInfluence: str | list[str] = ..., removeUnusedInfluence: bool | int = ..., selectInfluenceVerts: str = ..., skinMethod: int = ..., smoothWeights: float = ..., smoothWeightsMaxIterations: int = ..., split: bool | int = ..., unbind: bool | int = ..., unbindKeepHistory: bool | int = ..., useGeometry: bool | int = ..., weight: float = ..., weightDistribution: int = ...) -> None: ...

@overload
def skinCluster(*args, addInfluence: str | list[str] = ..., addToSelection: bool | int = ..., after: bool | int = ..., afterReference: bool | int = ..., baseShape: str | list[str] = ..., before: bool | int = ..., bindMethod: int = ..., components: bool | int = ..., deformerTools: bool | int = ..., dropoffRate: bool | int | float = ..., exclusive: bool | int | str = ..., forceNormalizeWeights: bool | int = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., heatmapFalloff: float = ..., ignoreBindPose: bool | int = ..., ignoreHierarchy: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., influence: bool | int | str = ..., lockWeights: bool | int = ..., maximumInfluences: int = ..., moveJointsMode: bool | int = ..., multi: bool | int = ..., name: str = ..., normalizeWeights: int = ..., nurbsSamples: int = ..., obeyMaxInfluences: bool | int = ..., parallel: bool | int = ..., polySmoothness: float = ..., prune: bool | int = ..., query: bool | int = ..., recacheBindMatrices: bool | int = ..., remove: bool | int | list[bool | int] = ..., removeFromSelection: bool | int = ..., removeInfluence: str | list[str] = ..., removeUnusedInfluence: bool | int = ..., selectInfluenceVerts: str = ..., selectedComponents: bool | int = ..., skinMethod: int = ..., smoothWeights: float = ..., smoothWeightsMaxIterations: int = ..., split: bool | int = ..., toSelectedBones: bool | int = ..., toSkeletonAndTransforms: bool | int = ..., unbind: bool | int = ..., unbindKeepHistory: bool | int = ..., useComponentTags: bool | int = ..., useGeometry: bool | int = ..., volumeBind: float = ..., volumeType: int = ..., weight: float = ..., weightDistribution: int = ..., weightedInfluence: bool | int = ...) -> Any: ...
def skinPercent(*args, ignoreBelow: bool | int | float = ..., normalize: bool | int = ..., pruneWeights: float = ..., query: bool | int = ..., relative: bool | int = ..., resetToDefault: bool | int = ..., transform: bool | int | str = ..., transformMoveWeights: str | list[str] = ..., transformValue: tuple[str, float] | list[tuple[str, float]] = ..., value: bool | int = ..., zeroRemainingInfluences: bool | int = ...) -> Any: ...

@overload
def smoothCurve(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., smoothness: float = ...) -> None: ...

@overload
def smoothCurve(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., smoothness: bool | int | float = ...) -> Any: ...

@overload
def smoothTangentSurface(*args, edit: Literal[True], caching: bool | int = ..., direction: int = ..., nodeState: int = ..., parameter: float | list[float] = ..., smoothness: int = ...) -> None: ...

@overload
def smoothTangentSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., direction: int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., parameter: bool | int | float | list[float] = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., smoothness: int = ...) -> Any: ...
def snapKey(*args, animation: str = ..., attribute: str | list[str] = ..., controlPoints: bool | int = ..., float: str | int | float | list[str | int | float] = ..., hierarchy: str = ..., includeUpperBound: bool | int = ..., index: int | list[int] = ..., mergeDuplicate: bool | int = ..., shape: bool | int = ..., time: str | tuple[float, float] | tuple[float] | list[str | tuple[float, float] | tuple[float]] = ..., timeMultiple: float = ..., valueMultiple: float = ...) -> Any: ...
def snapMode(*args, curve: bool | int = ..., distanceIncrement: bool | int | float = ..., edgeMagnet: int = ..., edgeMagnetTolerance: bool | int | float = ..., grid: bool | int = ..., liveFaceCenter: bool | int = ..., livePoint: bool | int = ..., meshCenter: bool | int = ..., pixelCenter: bool | int = ..., pixelSnap: bool | int = ..., point: bool | int = ..., query: bool | int = ..., tolerance: int = ..., useTolerance: bool | int = ..., uvTolerance: int = ..., viewPlane: bool | int = ...) -> Any: ...

@overload
def snapTogetherCtx(*args, edit: Literal[True], clearSelection: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., setOrientation: bool | int = ..., snapPolygonFace: bool | int = ...) -> None: ...

@overload
def snapTogetherCtx(*args, clearSelection: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., setOrientation: bool | int = ..., snapPolygonFace: bool | int = ...) -> Any: ...

@overload
def snapshot(*args, edit: Literal[True], endTime: int | float = ..., increment: int | float = ..., name: str = ..., offsetParentMatrix: bool | int = ..., startTime: int | float = ..., update: str = ...) -> None: ...

@overload
def snapshot(*args, anchorTransform: str = ..., constructionHistory: bool | int = ..., endTime: bool | int | int | float = ..., increment: bool | int | int | float = ..., motionTrail: bool | int = ..., motionTrailName: str = ..., name: bool | int | str = ..., offsetParentMatrix: bool | int = ..., query: bool | int = ..., removeAnchorTransform: str = ..., startTime: bool | int | int | float = ..., update: bool | int | str = ...) -> Any: ...
def snapshotBeadContext(*args) -> Any: ...

@overload
def snapshotBeadCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., inTangent: bool | int = ..., outTangent: bool | int = ...) -> None: ...

@overload
def snapshotBeadCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., inTangent: bool | int = ..., name: str = ..., outTangent: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def snapshotModifyKeyCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def snapshotModifyKeyCtx(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def soft(*args, convert: bool | int = ..., duplicate: bool | int = ..., duplicateHistory: bool | int = ..., goal: float = ..., hideOriginal: bool | int = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def softMod(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., envelope: float = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., resetGeometry: bool | int = ..., split: bool | int = ..., weightedNode: tuple[str, str] = ...) -> None: ...

@overload
def softMod(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., bindState: bool | int = ..., components: bool | int = ..., curveInterpolation: int | list[int] = ..., curvePoint: float | list[float] = ..., curveValue: float | list[float] = ..., deformerTools: bool | int = ..., envelope: bool | int | float = ..., exclusive: bool | int | str = ..., falloffAroundSelection: bool | int = ..., falloffBasedOnX: bool | int = ..., falloffBasedOnY: bool | int = ..., falloffBasedOnZ: bool | int = ..., falloffCenter: tuple[float, float, float] = ..., falloffMasking: bool | int = ..., falloffMode: int = ..., falloffRadius: float = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., relative: bool | int = ..., remove: bool | int | list[bool | int] = ..., resetGeometry: bool | int = ..., selectedComponents: bool | int = ..., split: bool | int = ..., useComponentTags: bool | int = ..., weightedNode: bool | int | tuple[str, str] = ...) -> Any: ...
def softModContext(*args) -> Any: ...

@overload
def softSelect(*args, edit: Literal[True], compressUndo: int = ..., enableFalseColor: int = ..., softSelectColorCurve: str = ..., softSelectCurve: str = ..., softSelectDistance: float = ..., softSelectEnabled: int = ..., softSelectFalloff: int = ..., softSelectReset: bool | int = ..., softSelectUVDistance: float = ...) -> None: ...

@overload
def softSelect(*args, compressUndo: int = ..., enableFalseColor: int = ..., query: bool | int = ..., softSelectColorCurve: bool | int | str = ..., softSelectCurve: bool | int | str = ..., softSelectDistance: bool | int | float = ..., softSelectEnabled: int = ..., softSelectFalloff: int = ..., softSelectReset: bool | int = ..., softSelectUVDistance: bool | int | float = ...) -> Any: ...
def softSelectOptionsCtx(*args, buttonDown: bool | int = ..., buttonUp: bool | int = ..., colorCurve: str = ..., condition: bool | int = ..., edit: bool | int = ..., enableFalseColor: int = ..., enabled: bool | int = ..., exists: bool | int = ..., falloffCurve: str = ..., falloffMode: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., query: bool | int = ..., size: float = ..., uvSize: float = ...) -> Any: ...
def soloMaterial(*args, attr: bool | int | str = ..., last: bool | int = ..., node: bool | int | str = ..., query: bool | int = ..., unsolo: bool | int = ...) -> Any: ...
def sortCaseInsensitive(*args) -> Any: ...

@overload
def sound(*args, edit: Literal[True], endTime: int | float = ..., file: str = ..., mute: bool | int = ..., name: str = ..., offset: int | float = ..., sourceEnd: int | float = ..., sourceStart: int | float = ...) -> None: ...

@overload
def sound(*args, endTime: bool | int | int | float = ..., file: bool | int | str = ..., length: bool | int = ..., mute: bool | int = ..., name: bool | int | str = ..., offset: bool | int | int | float = ..., query: bool | int = ..., sourceEnd: bool | int | int | float = ..., sourceStart: bool | int | int | float = ...) -> Any: ...

@overload
def soundControl(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., beginScrub: bool | int = ..., displaySound: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., endScrub: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., maxTime: int | float = ..., minTime: int | float = ..., noBackground: bool | int = ..., pressCommand: str = ..., preventOverride: bool | int = ..., releaseCommand: str = ..., repeatChunkSize: float = ..., repeatOnHold: bool | int = ..., resample: bool | int = ..., sound: str = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., waveform: str = ..., width: int = ...) -> None: ...

@overload
def soundControl(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., beginScrub: bool | int = ..., defineTemplate: str = ..., displaySound: bool | int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., endScrub: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., maxTime: bool | int | int | float = ..., minTime: bool | int | int | float = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., pressCommand: str = ..., preventOverride: bool | int = ..., query: bool | int = ..., releaseCommand: str = ..., repeatChunkSize: bool | int | float = ..., repeatOnHold: bool | int = ..., resample: bool | int = ..., sound: bool | int | str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., waveform: bool | int | str = ..., width: int = ...) -> Any: ...
def soundPopup(*args, annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., edit: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> Any: ...
def spBirailCtx(*args, activeNodes: bool | int = ..., autoCreate: bool | int = ..., bldProfileFirst: bool | int = ..., bldProfileLast: bool | int = ..., bldProfiles: bool | int = ..., bldRailOne: bool | int = ..., bldRailTwo: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., frozen: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., reset: bool | int = ..., tangentContinuityProfile1: bool | int = ..., toolNode: bool | int = ..., transformMode: int = ...) -> Any: ...

@overload
def spaceLocator(*args, edit: Literal[True], absolute: bool | int = ..., name: str = ..., position: tuple[float, float, float] = ..., relative: bool | int = ...) -> None: ...

@overload
def spaceLocator(*args, absolute: bool | int = ..., name: str = ..., position: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., relative: bool | int = ...) -> Any: ...

@overload
def sphere(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., degree: int = ..., endSweep: float = ..., frozen: bool | int = ..., heightRatio: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., radius: float = ..., sections: int = ..., spans: int = ..., startSweep: float = ..., tolerance: float = ..., useTolerance: bool | int = ...) -> None: ...

@overload
def sphere(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., endSweep: bool | int | float = ..., frozen: bool | int = ..., heightRatio: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., pivot: bool | int | tuple[float, float, float] = ..., polygon: int = ..., query: bool | int = ..., radius: bool | int | float = ..., sections: int = ..., spans: int = ..., startSweep: bool | int | float = ..., tolerance: bool | int | float = ..., useTolerance: bool | int = ...) -> Any: ...

@overload
def spotLight(*args, edit: Literal[True], barnDoors: bool | int = ..., bottomBarnDoorAngle: float = ..., coneAngle: float = ..., dropOff: float = ..., leftBarnDoorAngle: float = ..., penumbra: float = ..., rightBarnDoorAngle: float = ..., topBarnDoorAngle: float = ...) -> None: ...

@overload
def spotLight(*args, barnDoors: bool | int = ..., bottomBarnDoorAngle: bool | int | float = ..., coneAngle: bool | int | float = ..., decayRate: int = ..., discRadius: bool | int | float = ..., dropOff: bool | int | float = ..., exclusive: bool | int = ..., intensity: bool | int | float = ..., leftBarnDoorAngle: bool | int | float = ..., name: bool | int | str = ..., penumbra: bool | int | float = ..., position: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., rgb: bool | int | tuple[float, float, float] = ..., rightBarnDoorAngle: bool | int | float = ..., rotation: bool | int | tuple[float, float, float] = ..., shadowColor: bool | int | tuple[float, float, float] = ..., shadowDither: bool | int | float = ..., shadowSamples: int = ..., softShadow: bool | int = ..., topBarnDoorAngle: bool | int | float = ..., useRayTraceShadows: bool | int = ...) -> Any: ...

@overload
def spotLightPreviewPort(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def spotLightPreviewPort(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., spotLight: str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> Any: ...

@overload
def spreadSheetEditor(*args, edit: Literal[True], attrRegExp: str = ..., docTag: str = ..., execute: str = ..., filter: str = ..., fixedAttrList: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., keyableOnly: bool | int = ..., lockMainConnection: bool | int = ..., longNames: bool | int = ..., mainListConnection: str = ..., niceNames: bool | int = ..., parent: str = ..., precision: int = ..., selectionConnection: str = ..., showShapes: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def spreadSheetEditor(*args, allAttr: bool | int = ..., attrRegExp: bool | int | str = ..., control: bool | int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., execute: str = ..., exists: bool | int = ..., filter: bool | int | str = ..., fixedAttrList: bool | int | str = ..., forceMainConnection: bool | int | str = ..., highlightConnection: bool | int | str = ..., keyableOnly: bool | int = ..., lockMainConnection: bool | int = ..., longNames: bool | int = ..., mainListConnection: bool | int | str = ..., niceNames: bool | int = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., precision: int = ..., query: bool | int = ..., selectedAttr: bool | int = ..., selectionConnection: bool | int | str = ..., showShapes: bool | int = ..., stateString: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ...) -> Any: ...

@overload
def spring(*args, edit: Literal[True], allPoints: bool | int = ..., damping: float = ..., dampingPS: float = ..., endForceWeight: float = ..., length: float = ..., maxDistance: float = ..., restLength: float = ..., restLengthPS: float = ..., startForceWeight: float = ..., stiffness: float = ..., stiffnessPS: float = ..., useDampingPS: bool | int = ..., useRestLengthPS: bool | int = ..., useStiffnessPS: bool | int = ...) -> None: ...

@overload
def spring(*args, addSprings: bool | int = ..., allPoints: bool | int = ..., count: bool | int = ..., damp: float = ..., damping: bool | int | float = ..., dampingPS: bool | int | float = ..., endForceWeight: bool | int | float = ..., exclusive: bool | int = ..., length: bool | int | float = ..., maxDistance: float = ..., minDistance: float = ..., minMax: bool | int = ..., name: bool | int | str = ..., noDuplicate: bool | int = ..., query: bool | int = ..., restLength: bool | int | float = ..., restLengthPS: bool | int | float = ..., startForceWeight: bool | int | float = ..., stiffness: bool | int | float = ..., stiffnessPS: bool | int | float = ..., strength: float = ..., useDampingPS: bool | int = ..., useRestLengthPS: bool | int = ..., useStiffnessPS: bool | int = ..., walkLength: int = ..., wireframe: bool | int = ...) -> Any: ...

@overload
def squareSurface(*args, edit: Literal[True], caching: bool | int = ..., continuityType1: int = ..., continuityType2: int = ..., continuityType3: int = ..., continuityType4: int = ..., curveFitCheckpoints: int = ..., endPointTolerance: float = ..., nodeState: int = ..., rebuildCurve1: bool | int = ..., rebuildCurve2: bool | int = ..., rebuildCurve3: bool | int = ..., rebuildCurve4: bool | int = ...) -> None: ...

@overload
def squareSurface(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., continuityType1: int = ..., continuityType2: int = ..., continuityType3: int = ..., continuityType4: int = ..., curveFitCheckpoints: int = ..., endPointTolerance: bool | int | float = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., polygon: int = ..., query: bool | int = ..., rebuildCurve1: bool | int = ..., rebuildCurve2: bool | int = ..., rebuildCurve3: bool | int = ..., rebuildCurve4: bool | int = ...) -> Any: ...

@overload
def srtContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def srtContext(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def stackTrace(*args, dump: bool | int = ..., parameterCount: int = ..., parameterType: tuple[int, int] = ..., parameterValue: tuple[int, int] = ..., query: bool | int = ..., state: bool | int = ...) -> Any: ...

@overload
def stitchSurface(*args, edit: Literal[True], bias: float = ..., caching: bool | int = ..., cvIthIndex: int | list[int] = ..., cvJthIndex: int | list[int] = ..., fixBoundary: bool | int = ..., nodeState: int = ..., parameterU: float | list[float] = ..., parameterV: float | list[float] = ..., positionalContinuity: bool | int | list[bool | int] = ..., stepCount: int | list[int] = ..., tangentialContinuity: bool | int | list[bool | int] = ..., togglePointNormals: bool | int = ..., togglePointPosition: bool | int = ..., toggleTolerance: bool | int | list[bool | int] = ..., tolerance: float | list[float] = ...) -> None: ...

@overload
def stitchSurface(*args, bias: bool | int | float = ..., caching: bool | int = ..., cascade: bool | int = ..., constructionHistory: bool | int = ..., cvIthIndex: bool | int | int | list[int] = ..., cvJthIndex: bool | int | int | list[int] = ..., fixBoundary: bool | int = ..., frozen: bool | int = ..., keepG0Continuity: bool | int = ..., keepG1Continuity: bool | int = ..., name: str = ..., nodeState: int = ..., numberOfSamples: int = ..., object: bool | int = ..., parameterU: bool | int | float | list[float] = ..., parameterV: bool | int | float | list[float] = ..., positionalContinuity: bool | int | bool | int | list[bool | int] = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., stepCount: bool | int | int | list[int] = ..., tangentialContinuity: bool | int | bool | int | list[bool | int] = ..., togglePointNormals: bool | int = ..., togglePointPosition: bool | int = ..., toggleTolerance: bool | int | bool | int | list[bool | int] = ..., tolerance: bool | int | float | list[float] = ..., weight0: float = ..., weight1: float = ...) -> Any: ...
def stitchSurfaceCtx(*args, activeNodes: bool | int = ..., autoCreate: bool | int = ..., bias: float = ..., caching: bool | int = ..., cascade: bool | int = ..., constructionHistory: bool | int = ..., cvIthIndex: int | list[int] = ..., cvJthIndex: int | list[int] = ..., edit: bool | int = ..., exists: bool | int = ..., fixBoundary: bool | int = ..., frozen: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., keepG0Continuity: bool | int = ..., keepG1Continuity: bool | int = ..., name: str = ..., nodeState: int = ..., numberOfSamples: int = ..., object: bool | int = ..., parameterU: float | list[float] = ..., parameterV: float | list[float] = ..., positionalContinuity: bool | int | list[bool | int] = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., reset: bool | int = ..., stepCount: int | list[int] = ..., tangentialContinuity: bool | int | list[bool | int] = ..., togglePointNormals: bool | int = ..., togglePointPosition: bool | int = ..., toggleTolerance: bool | int | list[bool | int] = ..., tolerance: float | list[float] = ..., toolNode: bool | int = ..., weight0: float = ..., weight1: float = ...) -> Any: ...

@overload
def stitchSurfacePoints(*args, edit: Literal[True], bias: float = ..., caching: bool | int = ..., cvIthIndex: int | list[int] = ..., cvJthIndex: int | list[int] = ..., fixBoundary: bool | int = ..., nodeState: int = ..., parameterU: float | list[float] = ..., parameterV: float | list[float] = ..., positionalContinuity: bool | int | list[bool | int] = ..., stepCount: int | list[int] = ..., tangentialContinuity: bool | int | list[bool | int] = ..., togglePointNormals: bool | int = ..., togglePointPosition: bool | int = ..., toggleTolerance: bool | int | list[bool | int] = ..., tolerance: float | list[float] = ...) -> None: ...

@overload
def stitchSurfacePoints(*args, bias: bool | int | float = ..., caching: bool | int = ..., cascade: bool | int = ..., constructionHistory: bool | int = ..., cvIthIndex: bool | int | int | list[int] = ..., cvJthIndex: bool | int | int | list[int] = ..., equalWeight: bool | int = ..., fixBoundary: bool | int = ..., frozen: bool | int = ..., keepG0Continuity: bool | int = ..., keepG1Continuity: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., parameterU: bool | int | float | list[float] = ..., parameterV: bool | int | float | list[float] = ..., positionalContinuity: bool | int | bool | int | list[bool | int] = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., stepCount: bool | int | int | list[int] = ..., tangentialContinuity: bool | int | bool | int | list[bool | int] = ..., togglePointNormals: bool | int = ..., togglePointPosition: bool | int = ..., toggleTolerance: bool | int | bool | int | list[bool | int] = ..., tolerance: bool | int | float | list[float] = ...) -> Any: ...

@overload
def stringArrayIntersector(*args, edit: Literal[True], intersect: str = ..., reset: bool | int = ...) -> None: ...

@overload
def stringArrayIntersector(*args, allowDuplicates: bool | int = ..., defineTemplate: str = ..., exists: bool | int = ..., intersect: str = ..., query: bool | int = ..., reset: bool | int = ..., useTemplate: str = ...) -> Any: ...
def stroke(*args, name: str = ..., pressure: bool | int = ..., seed: int = ...) -> Any: ...

@overload
def subdAutoProjection(*args, edit: Literal[True], caching: bool | int = ..., layout: int = ..., layoutMethod: int = ..., nodeState: int = ..., optimize: int = ..., percentageSpace: float = ..., planes: int = ..., scale: int = ..., skipIntersect: bool | int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def subdAutoProjection(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., layout: int = ..., layoutMethod: int = ..., name: str = ..., nodeState: int = ..., optimize: int = ..., percentageSpace: bool | int | float = ..., planes: int = ..., query: bool | int = ..., scale: int = ..., skipIntersect: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def subdCleanTopology(*args) -> Any: ...

@overload
def subdCollapse(*args, edit: Literal[True], caching: bool | int = ..., level: int = ..., nodeState: int = ...) -> None: ...

@overload
def subdCollapse(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., level: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ...) -> Any: ...
def subdDisplayMode(*args, hideFaceGadgets: bool | int = ..., query: bool | int = ..., showComponentsAsNumerals: bool | int = ..., showFaceRegions: bool | int = ..., showVisualEdgeVertices: bool | int = ..., showVisualEdges: bool | int = ..., subdivEdgeMask: int = ...) -> Any: ...
def subdDuplicateAndConnect(*args) -> Any: ...
def subdEditUV(*args, angle: bool | int | float = ..., pivotU: bool | int | float = ..., pivotV: bool | int | float = ..., query: bool | int = ..., relative: bool | int = ..., rotateRatio: bool | int | float = ..., rotation: bool | int = ..., scale: bool | int = ..., scaleU: bool | int | float = ..., scaleV: bool | int | float = ..., uValue: bool | int | float = ..., uvSetName: bool | int | str = ..., vValue: bool | int | float = ...) -> Any: ...

@overload
def subdLayoutUV(*args, edit: Literal[True], caching: bool | int = ..., flipReversed: bool | int = ..., layout: int = ..., layoutMethod: int = ..., nodeState: int = ..., percentageSpace: float = ..., rotateForBestFit: int = ..., scale: int = ..., separate: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def subdLayoutUV(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., flipReversed: bool | int = ..., frozen: bool | int = ..., layout: int = ..., layoutMethod: int = ..., name: str = ..., nodeState: int = ..., percentageSpace: bool | int | float = ..., query: bool | int = ..., rotateForBestFit: int = ..., scale: int = ..., separate: int = ..., worldSpace: bool | int = ...) -> Any: ...
def subdListComponentConversion(*args, border: bool | int = ..., fromEdge: bool | int = ..., fromFace: bool | int = ..., fromUV: bool | int = ..., fromVertex: bool | int = ..., internal: bool | int = ..., toEdge: bool | int = ..., toFace: bool | int = ..., toUV: bool | int = ..., toVertex: bool | int = ..., uvShell: bool | int = ..., uvShellBorder: bool | int = ...) -> Any: ...

@overload
def subdMapCut(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ...) -> None: ...

@overload
def subdMapCut(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., query: bool | int = ...) -> Any: ...

@overload
def subdMapSewMove(*args, edit: Literal[True], caching: bool | int = ..., limitPieceSize: bool | int = ..., nodeState: int = ..., numberFaces: int = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def subdMapSewMove(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., limitPieceSize: bool | int = ..., name: str = ..., nodeState: int = ..., numberFaces: int = ..., query: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def subdMatchTopology(*args, frontOfChain: bool | int = ...) -> Any: ...

@overload
def subdMirror(*args, edit: Literal[True], caching: bool | int = ..., nodeState: int = ..., xMirror: bool | int = ..., yMirror: bool | int = ..., zMirror: bool | int = ...) -> None: ...

@overload
def subdMirror(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., xMirror: bool | int = ..., yMirror: bool | int = ..., zMirror: bool | int = ...) -> Any: ...

@overload
def subdPlanarProjection(*args, edit: Literal[True], caching: bool | int = ..., createNewMap: bool | int = ..., imageCenter: tuple[float, float] = ..., imageCenterX: float = ..., imageCenterY: float = ..., imageScale: tuple[float, float] = ..., imageScaleU: float = ..., imageScaleV: float = ..., nodeState: int = ..., projectionCenter: tuple[float, float, float] = ..., projectionCenterX: float = ..., projectionCenterY: float = ..., projectionCenterZ: float = ..., projectionHeight: float = ..., projectionScale: tuple[float, float] = ..., projectionWidth: float = ..., rotate: tuple[float, float, float] = ..., rotateX: float = ..., rotateY: float = ..., rotateZ: float = ..., rotationAngle: float = ..., worldSpace: bool | int = ...) -> None: ...

@overload
def subdPlanarProjection(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., createNewMap: bool | int = ..., frozen: bool | int = ..., imageCenter: bool | int | tuple[float, float] = ..., imageCenterX: bool | int | float = ..., imageCenterY: bool | int | float = ..., imageScale: bool | int | tuple[float, float] = ..., imageScaleU: bool | int | float = ..., imageScaleV: bool | int | float = ..., insertBeforeDeformers: bool | int = ..., keepImageRatio: bool | int = ..., mapDirection: str = ..., name: str = ..., nodeState: int = ..., projectionCenter: bool | int | tuple[float, float, float] = ..., projectionCenterX: bool | int | float = ..., projectionCenterY: bool | int | float = ..., projectionCenterZ: bool | int | float = ..., projectionHeight: bool | int | float = ..., projectionScale: bool | int | tuple[float, float] = ..., projectionWidth: bool | int | float = ..., query: bool | int = ..., rotate: bool | int | tuple[float, float, float] = ..., rotateX: bool | int | float = ..., rotateY: bool | int | float = ..., rotateZ: bool | int | float = ..., rotationAngle: bool | int | float = ..., smartFit: bool | int = ..., worldSpace: bool | int = ...) -> Any: ...
def subdToBlind(*args, absolutePosition: bool | int = ..., includeCreases: bool | int = ..., includeZeroOffsets: bool | int = ...) -> Any: ...
def subdToNurbs(*args, addUnderTransform: bool | int = ..., applyMatrixToResult: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., edit: bool | int = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., outputType: int = ..., query: bool | int = ...) -> Any: ...

@overload
def subdToPoly(*args, edit: Literal[True], applyMatrixToResult: bool | int = ..., caching: bool | int = ..., copyUVTopology: bool | int = ..., depth: int = ..., extractPointPosition: bool | int = ..., format: int = ..., inSubdCVId: tuple[int, int] | list[tuple[int, int]] = ..., inSubdCVIdLeft: int = ..., inSubdCVIdRight: int = ..., maxPolys: int = ..., nodeState: int = ..., outSubdCVId: tuple[int, int] | list[tuple[int, int]] = ..., outSubdCVIdLeft: int = ..., outSubdCVIdRight: int = ..., outv: int | list[int] = ..., preserveVertexOrdering: bool | int = ..., sampleCount: int = ..., shareUVs: bool | int = ..., subdNormals: bool | int = ...) -> None: ...

@overload
def subdToPoly(*args, addUnderTransform: bool | int = ..., applyMatrixToResult: bool | int = ..., caching: bool | int = ..., connectShaders: bool | int = ..., constructionHistory: bool | int = ..., copyUVTopology: bool | int = ..., depth: int = ..., extractPointPosition: bool | int = ..., format: int = ..., frozen: bool | int = ..., inSubdCVId: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., inSubdCVIdLeft: int = ..., inSubdCVIdRight: int = ..., maxPolys: int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., outSubdCVId: bool | int | tuple[int, int] | list[tuple[int, int]] = ..., outSubdCVIdLeft: int = ..., outSubdCVIdRight: int = ..., outv: bool | int | int | list[int] = ..., preserveVertexOrdering: bool | int = ..., query: bool | int = ..., sampleCount: int = ..., shareUVs: bool | int = ..., subdNormals: bool | int = ...) -> Any: ...
def subdTransferUVsToCache(*args) -> Any: ...
def subdiv(*args, currentLevel: bool | int = ..., currentSubdLevel: bool | int = ..., deepestLevel: int = ..., displayLoad: bool | int = ..., edgeStats: bool | int = ..., faceStats: bool | int = ..., maxPossibleLevel: int = ..., proxyMode: int = ..., query: bool | int = ..., smallOffsets: bool | int = ...) -> Any: ...
def subdivCrease(*args, sharpness: bool | int = ...) -> Any: ...
def subdivDisplaySmoothness(*args, all: bool | int | tuple[Any, Any] = ..., query: bool | int = ..., smoothness: int = ...) -> Any: ...
def subgraph(*args) -> Any: ...
def substituteGeometry(*args, disableNonSkinDeformers: bool | int = ..., newGeometryToLayer: bool | int = ..., oldGeometryToLayer: bool | int = ..., reWeightDistTolerance: float = ..., retainOldGeometry: bool | int = ...) -> Any: ...
def suitePrefs(*args, applyToSuite: str = ..., edit: bool | int = ..., installedAsSuite: bool | int = ..., isCompleteSuite: bool | int = ..., query: bool | int = ...) -> Any: ...
def superCtx(*args, attach: str | list[str] = ..., edit: bool | int = ..., exists: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., query: bool | int = ...) -> Any: ...
def surface(*args, degreeU: int = ..., degreeV: int = ..., formU: str = ..., formV: str = ..., knotU: float | list[float] = ..., knotV: float | list[float] = ..., name: str = ..., objectSpace: bool | int = ..., point: tuple[float, float, float] | list[tuple[float, float, float]] = ..., pointWeight: tuple[float, float, float, float] | list[tuple[float, float, float, float]] = ..., worldSpace: bool | int = ...) -> Any: ...
def surfaceSampler(*args, camera: str = ..., fileFormat: str | list[str] = ..., filename: str | list[str] = ..., filterSize: float = ..., filterType: int = ..., flipU: bool | int = ..., flipV: bool | int = ..., ignoreMirroredFaces: bool | int = ..., ignoreTransforms: bool | int = ..., mapHeight: int | list[int] = ..., mapMaterials: bool | int | list[bool | int] = ..., mapOutput: str | list[str] = ..., mapSpace: str | list[str] = ..., mapWidth: int | list[int] = ..., maxSearchDistance: float | list[float] = ..., maximumValue: float | list[float] = ..., overscan: int = ..., searchCage: str | list[str] = ..., searchMethod: int = ..., searchOffset: float | list[float] = ..., shadows: bool | int | list[bool | int] = ..., source: str | list[str] = ..., sourceUVSpace: str | list[str] = ..., superSampling: int = ..., target: str | list[str] = ..., targetUVSpace: str | list[str] = ..., useGeometryNormals: bool | int = ..., uvSet: str | list[str] = ...) -> Any: ...
def surfaceShaderList(*args, add: str = ..., edit: bool | int = ..., query: bool | int = ..., remove: str = ...) -> Any: ...

@overload
def swatchDisplayPort(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., borderColor: tuple[float, float, float] = ..., borderWidth: int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., pressCommand: str | Callable = ..., preventOverride: bool | int = ..., renderPriority: int = ..., renderSize: int = ..., shadingNode: str = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> None: ...

@overload
def swatchDisplayPort(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., borderColor: bool | int | tuple[float, float, float] = ..., borderWidth: int = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., pressCommand: str | Callable = ..., preventOverride: bool | int = ..., query: bool | int = ..., renderPriority: int = ..., renderSize: int = ..., shadingNode: bool | int | str = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> Any: ...
def swatchRefresh(*args) -> Any: ...

@overload
def switchTable(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label1: str = ..., label2: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., switchNode: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def switchTable(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label1: str = ..., label2: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., selectedRow: bool | int = ..., statusBarMessage: str = ..., switchNode: bool | int | str = ..., underPointerRow: bool | int = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def symbolButton(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., command: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def symbolButton(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., command: bool | int | str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def symbolCheckBox(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., disableOffImage: str = ..., disableOnImage: str = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image: str = ..., innerMargin: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., offCommand: str | Callable = ..., offImage: str = ..., onCommand: str | Callable = ..., onImage: str = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., value: bool | int = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def symbolCheckBox(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., disableOffImage: bool | int | str = ..., disableOnImage: bool | int | str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image: bool | int | str = ..., innerMargin: bool | int = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., offCommand: str | Callable = ..., offImage: bool | int | str = ..., onCommand: str | Callable = ..., onImage: bool | int | str = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., value: bool | int = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def symmetricModelling(*args, edit: Literal[True], about: str = ..., allowPartial: bool | int = ..., axis: str = ..., preserveSeam: int = ..., reset: bool | int = ..., seamFalloffCurve: str = ..., seamTolerance: float = ..., symmetry: int = ..., tolerance: float = ..., topoSymmetry: bool | int = ...) -> None: ...

@overload
def symmetricModelling(*args, about: bool | int | str = ..., allowPartial: bool | int = ..., axis: bool | int | str = ..., preserveSeam: int = ..., query: bool | int = ..., reset: bool | int = ..., seamFalloffCurve: bool | int | str = ..., seamTolerance: bool | int | float = ..., symmetry: int = ..., tolerance: bool | int | float = ..., topoSymmetry: bool | int = ...) -> Any: ...
def syncSculptCache(*args) -> Any: ...
def sysFile(*args, copy: str = ..., delete: bool | int = ..., makeDir: bool | int = ..., move: str = ..., removeEmptyDir: bool | int = ..., rename: str = ...) -> Any: ...

@overload
def tabLayout(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., borderStyle: str = ..., changeCommand: str | Callable = ..., closeTab: int = ..., closeTabCommand: str | Callable = ..., docTag: str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., horizontalScrollBarThickness: int = ..., image: str = ..., imageVisible: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., moveTab: tuple[int, int] = ..., newTabCommand: str | Callable = ..., noBackground: bool | int = ..., postMenuCommand: str | Callable = ..., preSelectCommand: str | Callable = ..., preventOverride: bool | int = ..., scrollableTabs: bool | int = ..., selectCommand: str | Callable = ..., selectTab: str = ..., selectTabIndex: int = ..., showNewTab: bool | int = ..., statusBarMessage: str = ..., tabIcon: tuple[str, str] | list[tuple[str, str]] = ..., tabIconIndex: tuple[int, str] | list[tuple[int, str]] = ..., tabLabel: tuple[str, str] | list[tuple[str, str]] = ..., tabLabelIndex: tuple[int, str] | list[tuple[int, str]] = ..., tabPosition: str = ..., tabTooltip: tuple[str, str] | list[tuple[str, str]] = ..., tabTooltipIndex: tuple[int, str] | list[tuple[int, str]] = ..., tabsVisible: bool | int = ..., verticalScrollBarThickness: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def tabLayout(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., borderStyle: bool | int | str = ..., changeCommand: str | Callable = ..., childArray: bool | int = ..., childResizable: bool | int = ..., closeTab: int = ..., closeTabCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., generalSpacing: int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., horizontalScrollBarThickness: int = ..., image: bool | int | str = ..., imageVisible: bool | int = ..., innerMarginHeight: int = ..., innerMarginWidth: int = ..., isObscured: bool | int = ..., manage: bool | int = ..., margins: int = ..., margins4: tuple[int, int, int, int] = ..., minChildWidth: int = ..., moveTab: tuple[int, int] = ..., newTabCommand: str | Callable = ..., noBackground: bool | int = ..., numberOfChildren: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., postMenuCommand: str | Callable = ..., preSelectCommand: str | Callable = ..., preventOverride: bool | int = ..., query: bool | int = ..., scrollable: bool | int = ..., scrollableTabs: bool | int = ..., selectCommand: bool | int | str | Callable = ..., selectTab: bool | int | str = ..., selectTabIndex: int = ..., showNewTab: bool | int = ..., statusBarMessage: str = ..., tabIcon: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., tabIconIndex: bool | int | tuple[int, str] | list[tuple[int, str]] = ..., tabLabel: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., tabLabelIndex: bool | int | tuple[int, str] | list[tuple[int, str]] = ..., tabPosition: bool | int | str = ..., tabTooltip: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., tabTooltipIndex: bool | int | tuple[int, str] | list[tuple[int, str]] = ..., tabsClosable: bool | int = ..., tabsVisible: bool | int = ..., useTemplate: str = ..., verticalScrollBarThickness: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def tangentConstraint(*args, edit: Literal[True], aimVector: tuple[float, float, float] = ..., layer: str = ..., name: str = ..., remove: bool | int = ..., upVector: tuple[float, float, float] = ..., weight: float = ..., worldUpObject: str = ..., worldUpType: str = ..., worldUpVector: tuple[float, float, float] = ...) -> None: ...

@overload
def tangentConstraint(*args, aimVector: bool | int | tuple[float, float, float] = ..., layer: str = ..., name: bool | int | str = ..., query: bool | int = ..., remove: bool | int = ..., targetList: bool | int = ..., upVector: bool | int | tuple[float, float, float] = ..., weight: bool | int | float = ..., weightAliasList: bool | int = ..., worldUpObject: bool | int | str = ..., worldUpType: bool | int | str = ..., worldUpVector: bool | int | tuple[float, float, float] = ...) -> Any: ...

@overload
def targetWeldCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., mergeToCenter: bool | int = ..., preserveUV: bool | int = ...) -> None: ...

@overload
def targetWeldCtx(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., mergeToCenter: bool | int = ..., preserveUV: bool | int = ..., query: bool | int = ...) -> Any: ...

@overload
def tension(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., envelope: float = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., inwardConstraint: float = ..., outwardConstraint: float = ..., parallel: bool | int = ..., pinBorderVertices: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., smoothingIterations: int = ..., smoothingStep: float = ..., split: bool | int = ...) -> None: ...

@overload
def tension(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., components: bool | int = ..., deformerTools: bool | int = ..., envelope: bool | int | float = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., inwardConstraint: bool | int | float = ..., name: str = ..., outwardConstraint: bool | int | float = ..., parallel: bool | int = ..., pinBorderVertices: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., selectedComponents: bool | int = ..., smoothingIterations: int = ..., smoothingStep: bool | int | float = ..., split: bool | int = ..., useComponentTags: bool | int = ...) -> Any: ...
def testPa(*args) -> Any: ...
def testPassContribution(*args, renderLayer: str = ..., renderPass: str = ...) -> Any: ...

@overload
def texCutContext(*args, edit: Literal[True], adjustSize: bool | int = ..., displayShellBorders: bool | int = ..., edgeSelectSensitive: float = ..., image1: str = ..., image2: str = ..., image3: str = ..., mode: str = ..., moveRatio: float = ..., size: float = ..., steadyStroke: bool | int = ..., steadyStrokeDistance: float = ..., touchToSew: bool | int = ...) -> None: ...

@overload
def texCutContext(*args, adjustSize: bool | int = ..., displayShellBorders: bool | int = ..., edgeSelectSensitive: bool | int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., mode: bool | int | str = ..., moveRatio: bool | int | float = ..., name: str = ..., query: bool | int = ..., size: bool | int | float = ..., steadyStroke: bool | int = ..., steadyStrokeDistance: bool | int | float = ..., touchToSew: bool | int = ...) -> Any: ...

@overload
def texLatticeDeformContext(*args, edit: Literal[True], envelope: float = ..., image1: str = ..., image2: str = ..., image3: str = ..., latticeColumns: int = ..., latticeRows: int = ..., showMoveManipulator: bool | int = ..., snapPixelMode: bool | int = ..., useBoundingRect: bool | int = ...) -> None: ...

@overload
def texLatticeDeformContext(*args, envelope: bool | int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., latticeColumns: int = ..., latticeRows: int = ..., name: str = ..., query: bool | int = ..., showMoveManipulator: bool | int = ..., snapPixelMode: bool | int = ..., useBoundingRect: bool | int = ...) -> Any: ...

@overload
def texManipContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def texManipContext(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def texMoveContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., snap: bool | int = ..., snapComponentsRelative: bool | int = ..., snapPixelMode: int = ..., snapValue: float = ..., tweakMode: bool | int = ...) -> None: ...

@overload
def texMoveContext(*args, editPivotMode: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., position: bool | int = ..., query: bool | int = ..., snap: bool | int = ..., snapComponentsRelative: bool | int = ..., snapPixelMode: int = ..., snapValue: bool | int | float = ..., tweakMode: bool | int = ...) -> Any: ...

@overload
def texMoveUVShellContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., iterations: int = ..., mask: bool | int = ..., shellBorder: float = ...) -> None: ...

@overload
def texMoveUVShellContext(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., iterations: int = ..., mask: bool | int = ..., position: bool | int = ..., query: bool | int = ..., shellBorder: bool | int | float = ...) -> Any: ...

@overload
def texRotateContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., snap: bool | int = ..., snapRelative: bool | int = ..., snapValue: float = ..., tweakMode: bool | int = ...) -> None: ...

@overload
def texRotateContext(*args, editPivotMode: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., position: bool | int = ..., query: bool | int = ..., snap: bool | int = ..., snapRelative: bool | int = ..., snapValue: bool | int | float = ..., tweakMode: bool | int = ...) -> Any: ...

@overload
def texScaleContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., preventNegativeScale: bool | int = ..., snap: bool | int = ..., snapRelative: bool | int = ..., snapValue: float = ..., tweakMode: bool | int = ...) -> None: ...

@overload
def texScaleContext(*args, editPivotMode: bool | int = ..., exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., position: bool | int = ..., preventNegativeScale: bool | int = ..., query: bool | int = ..., snap: bool | int = ..., snapRelative: bool | int = ..., snapValue: bool | int | float = ..., tweakMode: bool | int = ...) -> Any: ...

@overload
def texSculptCacheContext(*args, edit: Literal[True], adjustSize: bool | int = ..., adjustStrength: bool | int = ..., direction: int = ..., falloffType: int = ..., floodPin: float = ..., grabTwist: bool | int = ..., inverted: bool | int = ..., mode: str = ..., sculptFalloffCurve: str = ..., showBrushRingDuringStroke: bool | int = ..., size: float = ..., strength: float = ...) -> None: ...

@overload
def texSculptCacheContext(*args, adjustSize: bool | int = ..., adjustStrength: bool | int = ..., direction: int = ..., exists: bool | int = ..., falloffType: int = ..., floodPin: float = ..., grabTwist: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., inverted: bool | int = ..., mode: bool | int | str = ..., name: str = ..., pinsmooth: bool | int = ..., pinsmoothandpaint: bool | int = ..., query: bool | int = ..., sculptFalloffCurve: bool | int | str = ..., showBrushRingDuringStroke: bool | int = ..., size: bool | int | float = ..., strength: bool | int | float = ...) -> Any: ...
def texSculptCacheSync(*args) -> Any: ...

@overload
def texSelectContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def texSelectContext(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...

@overload
def texSelectShortestPathCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def texSelectShortestPathCtx(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., query: bool | int = ...) -> Any: ...
def texSmoothContext(*args, edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., pinBorder: bool | int = ..., query: bool | int = ..., space: int = ...) -> Any: ...

@overload
def texSmudgeUVContext(*args, edit: Literal[True], dragSlider: str = ..., effectType: str = ..., functionType: str = ..., image1: str = ..., image2: str = ..., image3: str = ..., pressure: float = ..., radius: float = ..., smudgeIsMiddle: bool | int = ...) -> None: ...

@overload
def texSmudgeUVContext(*args, dragSlider: bool | int | str = ..., effectType: bool | int | str = ..., exists: bool | int = ..., functionType: bool | int | str = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., pressure: bool | int | float = ..., query: bool | int = ..., radius: bool | int | float = ..., smudgeIsMiddle: bool | int = ...) -> Any: ...

@overload
def texTweakUVContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., tolerance: float = ...) -> None: ...

@overload
def texTweakUVContext(*args, exists: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., position: bool | int = ..., query: bool | int = ..., tolerance: bool | int | float = ...) -> Any: ...

@overload
def texWinToolCtx(*args, edit: Literal[True], boxzoom: bool | int = ..., dolly: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., track: bool | int = ...) -> None: ...

@overload
def texWinToolCtx(*args, alternateContext: bool | int = ..., boxzoom: bool | int = ..., dolly: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., toolName: bool | int | str = ..., track: bool | int = ...) -> Any: ...

@overload
def text(*args, edit: Literal[True], align: str = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., dropRectCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., font: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., hyperlink: bool | int = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., recomputeSize: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def text(*args, align: bool | int | str = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., dropRectCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., hyperlink: bool | int = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., recomputeSize: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ..., wordWrap: bool | int = ...) -> Any: ...
def textCurves(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., deprecatedFontName: bool | int = ..., edit: bool | int = ..., font: str = ..., frozen: bool | int = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., text: str = ...) -> Any: ...

@overload
def textField(*args, edit: Literal[True], alwaysInvokeEnterCommandOnReturn: bool | int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., disableButtons: bool | int = ..., disableClearButton: bool | int = ..., disableHistoryButton: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., drawInactiveFrame: bool | int = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., fileName: str = ..., font: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., insertText: str = ..., insertionPosition: int = ..., manage: bool | int = ..., noBackground: bool | int = ..., placeholderText: str = ..., preventOverride: bool | int = ..., receiveFocusCommand: str | Callable = ..., statusBarMessage: str = ..., text: str = ..., textChangedCommand: str | Callable = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def textField(*args, alwaysInvokeEnterCommandOnReturn: bool | int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., disableButtons: bool | int = ..., disableClearButton: bool | int = ..., disableHistoryButton: bool | int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., drawInactiveFrame: bool | int = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., exists: bool | int = ..., fileName: bool | int | str = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., insertText: str = ..., insertionPosition: int = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., placeholderText: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., receiveFocusCommand: str | Callable = ..., searchField: bool | int = ..., statusBarMessage: str = ..., text: bool | int | str = ..., textChangedCommand: str | Callable = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def textFieldButtonGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., buttonCommand: str | Callable = ..., buttonLabel: str = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableButton: bool | int = ..., enableKeyboardFocus: bool | int = ..., fileName: str = ..., forceChangeCommand: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., insertText: str = ..., insertionPosition: int = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., placeholderText: str = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., text: str = ..., textChangedCommand: str | Callable = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def textFieldButtonGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., buttonCommand: str | Callable = ..., buttonLabel: bool | int | str = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableButton: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fileName: bool | int | str = ..., forceChangeCommand: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., insertText: str = ..., insertionPosition: int = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., placeholderText: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., text: bool | int | str = ..., textChangedCommand: str | Callable = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def textFieldGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., fileName: str = ..., forceChangeCommand: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., insertText: str = ..., insertionPosition: int = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., placeholderText: str = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., text: str = ..., textChangedCommand: str | Callable = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def textFieldGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fileName: bool | int | str = ..., forceChangeCommand: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., insertText: str = ..., insertionPosition: int = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., placeholderText: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., text: bool | int | str = ..., textChangedCommand: str | Callable = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def textManip(*args, query: bool | int = ..., visible: bool | int = ...) -> Any: ...

@overload
def textScrollList(*args, edit: Literal[True], allowAutomaticSelection: bool | int = ..., allowMultiSelection: bool | int = ..., annotation: str = ..., append: str | list[str] = ..., appendPosition: tuple[int, str] | list[tuple[int, str]] = ..., backgroundColor: tuple[float, float, float] = ..., deleteKeyCommand: str | Callable = ..., deselectAll: bool | int = ..., deselectIndexedItem: int | list[int] = ..., deselectItem: str | list[str] = ..., docTag: str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., emptyLabel: str = ..., enable: bool | int = ..., enableAll: bool | int = ..., enableBackground: bool | int = ..., enableIndexedItem: tuple[int, bool | int] | list[tuple[int, bool | int]] = ..., enableItem: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., enableKeyboardFocus: bool | int = ..., enableUniqueTagItem: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., font: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., lineFont: tuple[int, str] | list[tuple[int, str]] = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfRows: int = ..., preventOverride: bool | int = ..., removeAll: bool | int = ..., removeIndexedItem: int | list[int] = ..., removeItem: str | list[str] = ..., selectCommand: str | Callable = ..., selectIndexedItem: int | list[int] = ..., selectItem: str | list[str] = ..., selectUniqueTagItem: str | list[str] = ..., showIndexedItem: int = ..., statusBarMessage: str = ..., uniqueTag: str | list[str] = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def textScrollList(*args, allItems: bool | int = ..., allItemsUniqueTags: bool | int = ..., allowAutomaticSelection: bool | int = ..., allowMultiSelection: bool | int = ..., allowSorting: bool | int | list[bool | int] = ..., annotation: bool | int | str = ..., append: str | list[str] = ..., appendPosition: tuple[int, str] | list[tuple[int, str]] = ..., appendWithToolTip: tuple[str, str] | list[tuple[str, str]] = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., deleteKeyCommand: str | Callable = ..., deselectAll: bool | int = ..., deselectIndexedItem: int | list[int] = ..., deselectItem: str | list[str] = ..., docTag: bool | int | str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., emptyLabel: bool | int | str = ..., enable: bool | int = ..., enableAll: bool | int = ..., enableBackground: bool | int = ..., enableIndexedItem: tuple[int, bool | int] | list[tuple[int, bool | int]] = ..., enableItem: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., enableKeyboardFocus: bool | int = ..., enableUniqueTagItem: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., exists: bool | int = ..., font: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., lineFont: tuple[int, str] | list[tuple[int, str]] = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfItems: bool | int = ..., numberOfPopupMenus: bool | int = ..., numberOfRows: int = ..., numberOfSelectedItems: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., removeAll: bool | int = ..., removeIndexedItem: int | list[int] = ..., removeItem: str | list[str] = ..., selectCommand: str | Callable = ..., selectIndexedItem: bool | int | int | list[int] = ..., selectItem: bool | int | str | list[str] = ..., selectUniqueTagItem: bool | int | str | list[str] = ..., setCheckedState: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., setUniformItemSize: bool | int = ..., showIndexedItem: int = ..., statusBarMessage: str = ..., uniqueTag: str | list[str] = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def textureDeformer(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., split: bool | int = ...) -> None: ...

@overload
def textureDeformer(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., components: bool | int = ..., deformerTools: bool | int = ..., direction: str = ..., envelope: float = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., name: str = ..., offset: float = ..., parallel: bool | int = ..., pointSpace: str = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., selectedComponents: bool | int = ..., split: bool | int = ..., strength: float = ..., useComponentTags: bool | int = ..., vectorOffset: tuple[float, float, float] = ..., vectorSpace: str = ..., vectorStrength: tuple[float, float, float] = ...) -> Any: ...
def textureLassoContext(*args, drawClosed: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def texturePlacementContext(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., labelMapping: bool | int = ...) -> None: ...

@overload
def texturePlacementContext(*args, exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., labelMapping: bool | int = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def textureWindow(*args, edit: Literal[True], activeSelectionOnTop: bool | int = ..., axesColor: tuple[float, float, float] = ..., backFacingColor: tuple[float, float, float, float] = ..., capture: str = ..., captureSequenceNumber: int = ..., changeCommand: tuple[str, str, str, str] = ..., checkerColor1: tuple[float, float, float] = ..., checkerColor2: tuple[float, float, float] = ..., checkerColorMode: int = ..., checkerDensity: int = ..., checkerDrawTileLabels: bool | int = ..., checkerGradient1: tuple[float, float, float] = ..., checkerGradient2: tuple[float, float, float] = ..., checkerGradientOverlay: bool | int = ..., checkerTileLabelColor: tuple[float, float, float] = ..., clearImage: bool | int = ..., cmEnabled: bool | int = ..., displayAxes: bool | int = ..., displayCheckered: bool | int = ..., displayDistortion: bool | int = ..., displayDivisionLines: bool | int = ..., displayGridLines: bool | int = ..., displayImage: int = ..., displayIsolateSelectHUD: bool | int = ..., displayLabels: bool | int = ..., displayOverlappingUVCountHUD: bool | int = ..., displayPreselection: bool | int = ..., displayReversedUVCountHUD: bool | int = ..., displaySolidMap: bool | int = ..., displayStyle: str = ..., displayTextureBorder: bool | int = ..., displayUVPositionHUD: bool | int = ..., displayUVShellCountHUD: bool | int = ..., displayUVStatisticsHUD: bool | int = ..., displayUsedPercentageHUD: bool | int = ..., distortionAlpha: float = ..., distortionPerObject: bool | int = ..., divisions: int = ..., docTag: str = ..., doubleBuffer: bool | int = ..., drawAxis: bool | int = ..., drawSubregions: bool | int = ..., exposure: float = ..., filter: str = ..., forceMainConnection: str = ..., forceRebake: bool | int = ..., frontFacingColor: tuple[float, float, float, float] = ..., gamma: float = ..., gridLinesColor: tuple[float, float, float] = ..., gridNumbersColor: tuple[float, float, float] = ..., highlightConnection: str = ..., imageBaseColor: tuple[float, float, float] = ..., imageDim: bool | int = ..., imageDisplay: bool | int = ..., imageNumber: int = ..., imagePixelSnap: bool | int = ..., imageRatio: bool | int = ..., imageTileRange: tuple[float, float, float, float] = ..., imageUnfiltered: bool | int = ..., internalFaces: bool | int = ..., labelPosition: str = ..., loadImage: str = ..., lockMainConnection: bool | int = ..., mainListConnection: str = ..., maxResolution: int = ..., multiColorAlpha: float = ..., nextView: bool | int = ..., numUvSets: bool | int = ..., parent: str = ..., previousView: bool | int = ..., refresh: bool | int = ..., relatedFaces: bool | int = ..., removeAllImages: bool | int = ..., removeImage: bool | int = ..., rendererString: str = ..., saveImage: bool | int = ..., scaleBlue: float = ..., scaleGreen: float = ..., scaleRed: float = ..., selectInternalFaces: bool | int = ..., selectionConnection: str = ..., setUvSet: int = ..., singleBuffer: bool | int = ..., size: float = ..., solidMap3dView: bool | int = ..., solidMapColorSeed: int = ..., solidMapPerShell: bool | int = ..., style: int = ..., subdivisionLinesColor: tuple[float, float, float] = ..., textureBorder3dView: bool | int = ..., textureBorderColor: tuple[float, float, float] = ..., textureBorderWidth: int = ..., textureNumber: int = ..., tileLabels: bool | int = ..., tileLinesColor: tuple[float, float, float] = ..., toggle: bool | int = ..., toggleExposure: bool | int = ..., toggleGamma: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useFaceGroup: bool | int = ..., usedPercentageHUDRange: tuple[float, float, float, float] = ..., uvSets: bool | int = ..., viewPortImage: bool | int = ..., viewTransformName: str = ..., wireframeComponentColor: tuple[float, float, float, float] = ..., wireframeObjectColor: tuple[float, float, float, float] = ..., writeImage: str = ...) -> None: ...

@overload
def textureWindow(*args, activeSelectionOnTop: bool | int = ..., axesColor: bool | int | tuple[float, float, float] = ..., backFacingColor: bool | int | tuple[float, float, float, float] = ..., capture: str = ..., captureSequenceNumber: int = ..., changeCommand: bool | int | tuple[str, str, str, str] = ..., checkerColor1: bool | int | tuple[float, float, float] = ..., checkerColor2: bool | int | tuple[float, float, float] = ..., checkerColorMode: int = ..., checkerDensity: int = ..., checkerDrawTileLabels: bool | int = ..., checkerGradient1: bool | int | tuple[float, float, float] = ..., checkerGradient2: bool | int | tuple[float, float, float] = ..., checkerGradientOverlay: bool | int = ..., checkerTileLabelColor: bool | int | tuple[float, float, float] = ..., clearImage: bool | int = ..., cmEnabled: bool | int = ..., control: bool | int = ..., defineTemplate: str = ..., displayAxes: bool | int = ..., displayCheckered: bool | int = ..., displayDistortion: bool | int = ..., displayDivisionLines: bool | int = ..., displayGridLines: bool | int = ..., displayImage: int = ..., displayIsolateSelectHUD: bool | int = ..., displayLabels: bool | int = ..., displayOverlappingUVCountHUD: bool | int = ..., displayPreselection: bool | int = ..., displayReversedUVCountHUD: bool | int = ..., displaySolidMap: bool | int = ..., displayStyle: bool | int | str = ..., displayTextureBorder: bool | int = ..., displayUVPositionHUD: bool | int = ..., displayUVShellCountHUD: bool | int = ..., displayUVStatisticsHUD: bool | int = ..., displayUsedPercentageHUD: bool | int = ..., distortionAlpha: bool | int | float = ..., distortionPerObject: bool | int = ..., divisions: int = ..., docTag: bool | int | str = ..., doubleBuffer: bool | int = ..., drawAxis: bool | int = ..., drawSubregions: bool | int = ..., exists: bool | int = ..., exposure: bool | int | float = ..., filter: bool | int | str = ..., forceMainConnection: bool | int | str = ..., forceRebake: bool | int = ..., frameAll: bool | int = ..., frameSelected: bool | int = ..., frontFacingColor: bool | int | tuple[float, float, float, float] = ..., gamma: bool | int | float = ..., gridLinesColor: bool | int | tuple[float, float, float] = ..., gridNumbersColor: bool | int | tuple[float, float, float] = ..., highlightConnection: bool | int | str = ..., imageBaseColor: bool | int | tuple[float, float, float] = ..., imageDim: bool | int = ..., imageDisplay: bool | int = ..., imageNames: bool | int = ..., imageNumber: int = ..., imagePixelSnap: bool | int = ..., imageRatio: bool | int = ..., imageRatioValue: bool | int | float = ..., imageSize: bool | int = ..., imageTileRange: bool | int | tuple[float, float, float, float] = ..., imageToTextureNumber: int = ..., imageUnfiltered: bool | int = ..., internalFaces: bool | int = ..., isolateSelectSetUpdated: bool | int = ..., labelPosition: bool | int | str = ..., loadImage: str = ..., lockMainConnection: bool | int = ..., mainListConnection: bool | int | str = ..., maxResolution: int = ..., multiColorAlpha: bool | int | float = ..., nbImages: bool | int = ..., nextView: bool | int = ..., numUvSets: bool | int = ..., numberOfImages: int = ..., numberOfTextures: int = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., previousView: bool | int = ..., query: bool | int = ..., realSize: bool | int = ..., refresh: bool | int = ..., relatedFaces: bool | int = ..., removeAllImages: bool | int = ..., removeImage: bool | int = ..., rendererString: bool | int | str = ..., reset: bool | int = ..., saveImage: bool | int = ..., scaleBlue: bool | int | float = ..., scaleGreen: bool | int | float = ..., scaleRed: bool | int | float = ..., selectInternalFaces: bool | int = ..., selectRelatedFaces: bool | int = ..., selectionConnection: bool | int | str = ..., setUvSet: int = ..., singleBuffer: bool | int = ..., size: bool | int | float = ..., solidMap3dView: bool | int = ..., solidMapColorSeed: int = ..., solidMapPerShell: bool | int = ..., spacing: float = ..., stateString: bool | int = ..., style: int = ..., subdivisionLinesColor: bool | int | tuple[float, float, float] = ..., textureBorder3dView: bool | int = ..., textureBorderColor: bool | int | tuple[float, float, float] = ..., textureBorderWidth: int = ..., textureNames: bool | int = ..., textureNumber: int = ..., textureToImageNumber: int = ..., tileLabels: bool | int = ..., tileLinesColor: bool | int | tuple[float, float, float] = ..., toggle: bool | int = ..., toggleExposure: bool | int = ..., toggleGamma: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useFaceGroup: bool | int = ..., useTemplate: str = ..., usedPercentageHUDRange: bool | int | tuple[float, float, float, float] = ..., uvSets: bool | int = ..., viewPortImage: bool | int = ..., viewTransformName: bool | int | str = ..., wireframeComponentColor: bool | int | tuple[float, float, float, float] = ..., wireframeObjectColor: bool | int | tuple[float, float, float, float] = ..., writeImage: str = ...) -> Any: ...
def threadCount(*args, numberOfThreads: int = ..., query: bool | int = ...) -> Any: ...

@overload
def threePointArcCtx(*args, edit: Literal[True], degree: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., spans: int = ...) -> None: ...

@overload
def threePointArcCtx(*args, degree: int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., spans: int = ...) -> Any: ...
def thumbnailCaptureComponent(*args, capture: bool | int = ..., capturedFrameCount: bool | int = ..., closeCurrentSession: bool | int = ..., delete: bool | int = ..., endFrame: int = ..., fileDialogCallback: str = ..., fileDialogProcessing: bool | int = ..., isSessionOpened: bool | int = ..., launchedFromOptionsBox: bool | int = ..., previewPath: bool | int = ..., query: bool | int = ..., removeProjectThumbnail: str = ..., save: str = ..., selectedFileName: bool | int = ..., startFrame: int = ...) -> Any: ...

@overload
def timeCode(*args, edit: Literal[True], mayaStartFrame: float = ..., productionStartFrame: float = ..., productionStartHour: float = ..., productionStartMinute: float = ..., productionStartSecond: float = ...) -> None: ...

@overload
def timeCode(*args, mayaStartFrame: bool | int | float = ..., productionStartFrame: bool | int | float = ..., productionStartHour: bool | int | float = ..., productionStartMinute: bool | int | float = ..., productionStartSecond: bool | int | float = ..., query: bool | int = ...) -> Any: ...

@overload
def timeControl(*args, edit: Literal[True], animLayerFilterOptions: str = ..., animLayerShowWeight: bool | int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., beginScrub: bool | int = ..., currentFrameColor: tuple[float, float, float, float] = ..., displaySound: bool | int = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., endScrub: bool | int = ..., forceRedraw: bool | int = ..., forceRefresh: bool | int = ..., foregroundColor: tuple[float, float, float] = ..., globalTime: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., mainListConnection: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., pressCommand: str | Callable = ..., preventOverride: bool | int = ..., releaseCommand: str | Callable = ..., repeatChunkSize: float = ..., repeatOnHold: bool | int = ..., resample: bool | int = ..., showKeys: str = ..., showKeysCombined: bool | int = ..., snap: bool | int = ..., sound: str = ..., statusBarMessage: str = ..., tickSize: int = ..., tickSpan: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., waveform: str = ..., width: int = ...) -> None: ...

@overload
def timeControl(*args, animCurveNames: bool | int = ..., animLayerFilterOptions: bool | int | str = ..., animLayerShowWeight: bool | int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., beginScrub: bool | int = ..., currentFrameColor: tuple[float, float, float, float] = ..., defineTemplate: str = ..., displaySound: bool | int = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., endScrub: bool | int = ..., exists: bool | int = ..., forceRedraw: bool | int = ..., forceRefresh: bool | int = ..., foregroundColor: tuple[float, float, float] = ..., fullPathName: bool | int = ..., globalTime: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., mainListConnection: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., outsideSpacing: int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., pressCommand: str | Callable = ..., preventOverride: bool | int = ..., query: bool | int = ..., range: bool | int = ..., rangeArray: bool | int = ..., rangeVisible: bool | int = ..., releaseCommand: str | Callable = ..., repeatChunkSize: bool | int | float = ..., repeatOnHold: bool | int = ..., resample: bool | int = ..., showKeys: bool | int | str = ..., showKeysCombined: bool | int = ..., snap: bool | int = ..., sound: bool | int | str = ..., statusBarMessage: str = ..., tickSize: int = ..., tickSpan: int = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., waveform: bool | int | str = ..., width: int = ...) -> Any: ...
def timeEditor(*args, allClips: str = ..., clipId: int | list[int] = ..., commonParentTrack: bool | int = ..., composition: str = ..., drivingClipsForAttr: str = ..., drivingClipsForObj: tuple[str, int] = ..., includeParent: bool | int = ..., mute: bool | int = ..., query: bool | int = ..., selectedClips: str = ..., topLevelClips: str = ...) -> Any: ...

@overload
def timeEditorAnimSource(*args, edit: Literal[True], addObjects: str = ..., addRelatedKG: bool | int = ..., addSelectedObjects: bool | int = ..., addSource: str = ..., apply: bool | int = ..., attribute: str | list[str] = ..., bakeToAnimSource: str = ..., calculateTiming: bool | int = ..., copyAnimation: bool | int = ..., exclusive: bool | int = ..., export: str = ..., importOption: str = ..., importPopulateOption: str = ..., includeRoot: bool | int = ..., recursively: bool | int = ..., removeSceneAnimation: bool | int = ..., removeSource: str = ..., type: str | list[str] = ...) -> None: ...

@overload
def timeEditorAnimSource(*args, addObjects: bool | int | str = ..., addRelatedKG: bool | int = ..., addSelectedObjects: bool | int = ..., addSource: str = ..., apply: bool | int = ..., attribute: str | list[str] = ..., bakeToAnimSource: str = ..., calculateTiming: bool | int = ..., copyAnimation: bool | int = ..., drivenClips: bool | int = ..., exclusive: bool | int = ..., export: str = ..., importAllFbxTakes: bool | int = ..., importFbx: str = ..., importFbxTakes: str = ..., importMayaFile: str = ..., importOption: str = ..., importPopulateOption: str = ..., importedContainerNames: str = ..., includeRoot: bool | int = ..., isUnique: bool | int = ..., populateImportedAnimSources: str = ..., poseClip: bool | int = ..., query: bool | int = ..., recursively: bool | int = ..., removeSceneAnimation: bool | int = ..., removeSource: str = ..., showAnimSourceRemapping: bool | int = ..., takeList: str = ..., takesToImport: str = ..., targetIndex: bool | int | str = ..., targets: bool | int = ..., type: bool | int | str | list[str] = ...) -> Any: ...
def timeEditorBakeClips(*args, bakeToAnimSource: str = ..., bakeToClip: str = ..., clipId: int | list[int] = ..., combineLayers: bool | int = ..., edit: bool | int = ..., forceSampling: bool | int = ..., keepOriginalClip: bool | int = ..., path: str | list[str] = ..., query: bool | int = ..., sampleBy: int | float = ..., targetTrackIndex: int = ..., targetTracksNode: str = ...) -> Any: ...

@overload
def timeEditorClip(*args, edit: Literal[True], addAttribute: str | list[str] = ..., addObjects: str = ..., addRelatedKG: bool | int = ..., addSelectedObjects: bool | int = ..., allowShrinking: bool | int = ..., animSource: str = ..., attribute: str | list[str] = ..., blendMode: int = ..., clipId: int | list[int] = ..., copyClip: bool | int = ..., crossfadeMode: int = ..., defaultGhostRoot: bool | int = ..., duplicateClip: bool | int = ..., exclusive: bool | int = ..., existingOnly: bool | int = ..., explode: int = ..., exportAllClips: bool | int = ..., exportFbx: str = ..., extend: bool | int = ..., extendParent: bool | int = ..., ghost: bool | int = ..., ghostRootAdd: str | list[str] = ..., ghostRootRemove: str | list[str] = ..., holdEnd: int | float = ..., holdStart: int | float = ..., importOption: str = ..., importPopulateOption: str = ..., includeRoot: bool | int = ..., loopEnd: int | float = ..., loopStart: int | float = ..., modifyAnimSource: bool | int = ..., moveClip: int | float = ..., mute: bool | int = ..., name: str = ..., parent: int = ..., pasteClip: int | float = ..., path: str | list[str] = ..., razorClip: int | float = ..., recursively: bool | int = ..., remap: tuple[str, str] = ..., remapSource: tuple[str, str] = ..., removeAttribute: str | list[str] = ..., removeClip: bool | int = ..., removeCrossfade: bool | int = ..., removeSceneAnimation: bool | int = ..., removeWeightCurve: bool | int = ..., resetTiming: bool | int = ..., resetTransition: bool | int = ..., ripple: bool | int = ..., rootClipId: int = ..., rootPath: str = ..., scaleEnd: int | float = ..., scalePivot: int | float = ..., scaleStart: int | float = ..., setKeyframe: str | list[str] = ..., speedRamping: int = ..., timeWarpType: int = ..., track: str = ..., transition: bool | int = ..., trimEnd: int | float = ..., trimStart: int | float = ..., type: str | list[str] = ..., uniqueAnimSource: bool | int = ..., userGhostRoot: bool | int = ..., weightCurve: bool | int = ..., zeroKeying: bool | int = ...) -> None: ...

@overload
def timeEditorClip(*args, absolute: bool | int = ..., addAttribute: str | list[str] = ..., addObjects: bool | int | str = ..., addRelatedKG: bool | int = ..., addSelectedObjects: bool | int = ..., allowShrinking: bool | int = ..., animSource: bool | int | str = ..., attribute: str | list[str] = ..., audio: str = ..., blendMode: int = ..., children: int = ..., clipAfter: bool | int = ..., clipBefore: bool | int = ..., clipDataType: bool | int = ..., clipId: int | list[int] = ..., clipIdFromNodeName: int = ..., clipIdFromPath: bool | int = ..., clipNode: bool | int = ..., clipPath: bool | int = ..., copyClip: bool | int = ..., crossfadeMode: int = ..., crossfadePlug: bool | int = ..., curveTime: bool | int | int | float = ..., defaultGhostRoot: bool | int = ..., drivenAttributes: bool | int = ..., drivenClipsBySource: bool | int | str = ..., drivenObjects: bool | int = ..., drivenRootObjects: bool | int = ..., drivingSources: bool | int | str = ..., duplicateClip: bool | int = ..., duration: bool | int | int | float = ..., emptySource: bool | int = ..., endTime: bool | int | int | float = ..., exclusive: bool | int = ..., existingOnly: bool | int = ..., exists: bool | int = ..., explode: int = ..., exportAllClips: bool | int = ..., exportFbx: str = ..., extend: bool | int = ..., extendParent: bool | int = ..., ghost: bool | int = ..., ghostRootAdd: str | list[str] = ..., ghostRootRemove: str | list[str] = ..., group: bool | int = ..., holdEnd: bool | int | int | float = ..., holdStart: bool | int | int | float = ..., importAllFbxTakes: bool | int = ..., importFbx: str = ..., importFbxTakes: str = ..., importMayaFile: str = ..., importOption: str = ..., importPopulateOption: str = ..., importTakeDestination: int = ..., importedContainerNames: str = ..., includeRoot: bool | int = ..., isContainer: bool | int = ..., listUserGhostRoot: bool | int = ..., loopEnd: bool | int | int | float = ..., loopStart: bool | int | int | float = ..., minClipDuration: bool | int = ..., modifyAnimSource: bool | int = ..., moveClip: int | float = ..., mute: bool | int = ..., name: bool | int | str = ..., parent: int = ..., parentClipId: int = ..., parentGroupId: bool | int = ..., pasteClip: int | float = ..., path: str | list[str] = ..., populateImportedAnimSources: str = ..., poseClip: bool | int = ..., preserveAnimationTiming: bool | int = ..., query: bool | int = ..., razorClip: int | float = ..., recursively: bool | int = ..., remap: tuple[str, str] = ..., remapNamespace: tuple[str, str] | list[tuple[str, str]] = ..., remapSource: tuple[str, str] = ..., remappedSourceAttrs: bool | int = ..., remappedTargetAttrs: bool | int = ..., removeAttribute: str | list[str] = ..., removeClip: bool | int = ..., removeCrossfade: bool | int = ..., removeSceneAnimation: bool | int = ..., removeWeightCurve: bool | int = ..., resetTiming: bool | int = ..., resetTransition: bool | int = ..., ripple: bool | int = ..., rootClipId: int = ..., rootPath: str = ..., scaleEnd: int | float = ..., scalePivot: int | float = ..., scaleStart: int | float = ..., setKeyframe: str | list[str] = ..., showAnimSourceRemapping: bool | int = ..., speedRamping: int = ..., startTime: bool | int | int | float = ..., takeList: str = ..., takesToImport: str = ..., timeWarp: bool | int = ..., timeWarpCurve: bool | int = ..., timeWarpType: int = ..., track: bool | int | str = ..., tracksNode: bool | int = ..., transition: bool | int = ..., trimEnd: int | float = ..., trimStart: int | float = ..., truncated: bool | int = ..., type: bool | int | str | list[str] = ..., uniqueAnimSource: bool | int = ..., userGhostRoot: bool | int = ..., weightCurve: bool | int = ..., zeroKeying: bool | int = ...) -> Any: ...

@overload
def timeEditorClipLayer(*args, edit: Literal[True], addAttribute: str = ..., addLayer: str = ..., addObject: str = ..., attribute: str | list[str] = ..., clipId: int = ..., index: int = ..., keySiblings: bool | int = ..., layerId: int = ..., layerName: str = ..., mode: int = ..., mute: bool | int = ..., path: str = ..., removeAttribute: str = ..., removeLayer: bool | int = ..., removeObject: str = ..., resetSolo: bool | int = ..., setKeyframe: bool | int = ..., solo: bool | int = ..., zeroKeying: bool | int = ...) -> None: ...

@overload
def timeEditorClipLayer(*args, addAttribute: str = ..., addLayer: str = ..., addObject: str = ..., allLayers: bool | int = ..., attribute: str | list[str] = ..., attributeKeyable: bool | int | str = ..., clipId: int = ..., index: int = ..., keySiblings: bool | int = ..., layerId: int = ..., layerName: bool | int | str = ..., mode: int = ..., mute: bool | int = ..., name: bool | int = ..., path: str = ..., query: bool | int = ..., removeAttribute: str = ..., removeLayer: bool | int = ..., removeObject: str = ..., resetSolo: bool | int = ..., setKeyframe: bool | int = ..., solo: bool | int = ..., zeroKeying: bool | int = ...) -> Any: ...

@overload
def timeEditorClipOffset(*args, edit: Literal[True], clipId: int | list[int] = ..., path: str | list[str] = ..., rootObj: str | list[str] = ...) -> None: ...

@overload
def timeEditorClipOffset(*args, applyToAllRoots: bool | int = ..., clipId: int | list[int] = ..., matchClipId: int = ..., matchDstTime: int | float = ..., matchObj: str = ..., matchOffsetRot: bool | int = ..., matchOffsetTrans: bool | int = ..., matchPath: str = ..., matchRotOp: int = ..., matchSrcTime: int | float = ..., matchTransOp: int = ..., offsetTransform: bool | int = ..., path: str | list[str] = ..., query: bool | int = ..., resetMatch: int = ..., resetMatchPath: str = ..., rootObj: bool | int | str | list[str] = ..., upVectorX: float = ..., upVectorY: float = ..., upVectorZ: float = ...) -> Any: ...

@overload
def timeEditorComposition(*args, edit: Literal[True], active: bool | int = ..., delete: bool | int = ..., rename: tuple[str, str] = ...) -> None: ...

@overload
def timeEditorComposition(*args, active: bool | int = ..., allCompositions: bool | int = ..., createTrack: bool | int = ..., delete: bool | int = ..., duplicateFrom: str = ..., query: bool | int = ..., rename: tuple[str, str] = ..., tracksNode: bool | int = ...) -> Any: ...

@overload
def timeEditorPanel(*args, edit: Literal[True], activeClipEditMode: int = ..., activeTabView: int = ..., autoFit: str = ..., autoFitTime: str = ..., displayActiveKeyTangents: str = ..., displayActiveKeys: str = ..., displayInfinities: str = ..., displayKeys: str = ..., displayTangents: str = ..., displayValues: str = ..., docTag: str = ..., filter: str = ..., forceMainConnection: str = ..., highlightConnection: str = ..., keyingTarget: int = ..., layerId: int = ..., lockMainConnection: bool | int = ..., lookAt: str = ..., mainListConnection: str = ..., minClipWidth: int = ..., parent: str = ..., selectionConnection: str = ..., setToPrevClipEditMode: bool | int = ..., snapTime: str = ..., snapToClip: bool | int = ..., snapToFrame: bool | int = ..., snapTolerance: int = ..., snapValue: str = ..., tabView: int = ..., timeCursor: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ...) -> None: ...

@overload
def timeEditorPanel(*args, activeClipEditMode: int = ..., activeTabRootClipId: bool | int = ..., activeTabTime: bool | int = ..., activeTabView: int = ..., autoFit: bool | int | str = ..., autoFitTime: bool | int | str = ..., contextMenu: bool | int = ..., control: bool | int = ..., defineTemplate: str = ..., displayActiveKeyTangents: str = ..., displayActiveKeys: str = ..., displayInfinities: str = ..., displayKeys: str = ..., displayTangents: str = ..., displayValues: str = ..., docTag: bool | int | str = ..., exists: bool | int = ..., filter: bool | int | str = ..., focusTrack: str = ..., forceMainConnection: bool | int | str = ..., groupIdForTabView: int = ..., highlightConnection: bool | int | str = ..., keyingTarget: int = ..., layerId: int = ..., lockMainConnection: bool | int = ..., lookAt: str = ..., mainListConnection: bool | int | str = ..., menu: str | Callable = ..., minClipWidth: int = ..., panel: bool | int | str = ..., parent: bool | int | str = ..., query: bool | int = ..., selectionConnection: bool | int | str = ..., setToPrevClipEditMode: bool | int = ..., snapTime: bool | int | str = ..., snapToClip: bool | int = ..., snapToFrame: bool | int = ..., snapTolerance: int = ..., snapValue: bool | int | str = ..., stateString: bool | int = ..., tabView: int = ..., timeCursor: bool | int = ..., togglekeyview: bool | int = ..., unParent: bool | int = ..., unlockMainConnection: bool | int = ..., updateMainConnection: bool | int = ..., useTemplate: str = ..., viewLeft: bool | int = ..., viewRight: bool | int = ...) -> Any: ...

@overload
def timeEditorTracks(*args, edit: Literal[True], addTrack: int = ..., path: str = ..., plugIndex: int = ..., removeTrack: int | list[int] = ..., removeTrackByPath: str | list[str] = ..., reorderTrack: tuple[int, int] = ..., trackGhost: bool | int = ..., trackIndex: int = ..., trackMuted: bool | int = ..., trackName: str = ..., trackSolo: bool | int = ..., trackType: int = ...) -> None: ...

@overload
def timeEditorTracks(*args, activeClipWeight: bool | int | int | float = ..., activeClipWeightId: bool | int | int | float = ..., addTrack: int = ..., allClips: bool | int = ..., allTracks: bool | int = ..., allTracksRecursive: bool | int = ..., composition: bool | int = ..., path: str = ..., plugIndex: int = ..., query: bool | int = ..., removeTrack: int | list[int] = ..., removeTrackByPath: str | list[str] = ..., reorderTrack: tuple[int, int] = ..., resetMute: bool | int = ..., resetSolo: bool | int = ..., selectedTracks: bool | int = ..., trackGhost: bool | int = ..., trackIndex: int = ..., trackMuted: bool | int = ..., trackName: bool | int | str = ..., trackSolo: bool | int = ..., trackType: int = ...) -> Any: ...

@overload
def timeField(*args, edit: Literal[True], annotation: str = ..., autoUnitWidth: int = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., receiveFocusCommand: str | Callable = ..., statusBarMessage: str = ..., step: int | float = ..., value: int | float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def timeField(*args, annotation: bool | int | str = ..., autoUnitWidth: int = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., editable: bool | int = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., enterCommand: str | Callable = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., receiveFocusCommand: str | Callable = ..., statusBarMessage: str = ..., step: bool | int | int | float = ..., useTemplate: str = ..., value: bool | int | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def timeFieldGrp(*args, edit: Literal[True], adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., extraLabel: str = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., step: int | float = ..., value: tuple[int | float, int | float, int | float, int | float] = ..., value1: int | float = ..., value2: int | float = ..., value3: int | float = ..., value4: int | float = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def timeFieldGrp(*args, adjustableColumn: int = ..., adjustableColumn2: int = ..., adjustableColumn3: int = ..., adjustableColumn4: int = ..., adjustableColumn5: int = ..., adjustableColumn6: int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., columnAlign: tuple[int, str] | list[tuple[int, str]] = ..., columnAlign2: tuple[str, str] = ..., columnAlign3: tuple[str, str, str] = ..., columnAlign4: tuple[str, str, str, str] = ..., columnAlign5: tuple[str, str, str, str, str] = ..., columnAlign6: tuple[str, str, str, str, str, str] = ..., columnAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., columnAttach2: tuple[str, str] = ..., columnAttach3: tuple[str, str, str] = ..., columnAttach4: tuple[str, str, str, str] = ..., columnAttach5: tuple[str, str, str, str, str] = ..., columnAttach6: tuple[str, str, str, str, str, str] = ..., columnOffset2: tuple[int, int] = ..., columnOffset3: tuple[int, int, int] = ..., columnOffset4: tuple[int, int, int, int] = ..., columnOffset5: tuple[int, int, int, int, int] = ..., columnOffset6: tuple[int, int, int, int, int, int] = ..., columnWidth: tuple[int, int] | list[tuple[int, int]] = ..., columnWidth1: int = ..., columnWidth2: tuple[int, int] = ..., columnWidth3: tuple[int, int, int] = ..., columnWidth4: tuple[int, int, int, int] = ..., columnWidth5: tuple[int, int, int, int, int] = ..., columnWidth6: tuple[int, int, int, int, int, int] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dragCommand: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enable1: bool | int = ..., enable2: bool | int = ..., enable3: bool | int = ..., enable4: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., extraLabel: bool | int | str = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfFields: int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., precision: int = ..., preventOverride: bool | int = ..., query: bool | int = ..., rowAttach: tuple[int, str, int] | list[tuple[int, str, int]] = ..., statusBarMessage: str = ..., step: bool | int | int | float = ..., useTemplate: str = ..., value: bool | int | tuple[int | float, int | float, int | float, int | float] = ..., value1: bool | int | int | float = ..., value2: bool | int | int | float = ..., value3: bool | int | int | float = ..., value4: bool | int | int | float = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def timePort(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., globalTime: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., snap: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def timePort(*args, annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., globalTime: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., snap: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...
def timeRangeInfo(*args, time: None | list[None] = ...) -> Any: ...
def timeSliderCustomDraw(*args, clearPrimitives: bool | int = ..., color: tuple[float, float, float, float] = ..., deregister: int = ..., edit: bool | int = ..., height: int = ..., layer: int = ..., location: int = ..., priority: int = ..., query: bool | int = ..., registerAbove: str = ..., registerBelow: str = ..., registerOn: tuple[str, int] = ..., setPrimitives: tuple[str, float, float] = ..., visible: bool | int = ...) -> Any: ...

@overload
def timeWarp(*args, edit: Literal[True], deleteFrame: int = ..., frame: float | list[float] = ..., g: bool | int = ..., interpType: tuple[int, str] = ..., moveFrame: tuple[int, float] = ...) -> None: ...

@overload
def timeWarp(*args, deleteFrame: int = ..., frame: bool | int | float | list[float] = ..., g: bool | int = ..., interpType: bool | int | tuple[int, str] = ..., moveFrame: bool | int | tuple[int, float] = ..., query: bool | int = ...) -> Any: ...
def timer(*args, endTimer: bool | int = ..., lapTime: bool | int = ..., name: str = ..., startTimer: bool | int = ...) -> Any: ...
def timerX(*args, startTime: float = ...) -> Any: ...
def toggle(*args, above: bool | int = ..., below: bool | int = ..., boundary: bool | int = ..., boundingBox: bool | int = ..., controlVertex: bool | int = ..., doNotWrite: bool | int = ..., editPoint: bool | int = ..., extent: bool | int = ..., facet: bool | int = ..., geometry: bool | int = ..., gl: bool | int = ..., highPrecisionNurbs: bool | int = ..., hull: bool | int = ..., latticePoint: bool | int = ..., latticeShape: bool | int = ..., localAxis: bool | int = ..., newCurve: bool | int = ..., newPolymesh: bool | int = ..., newSurface: bool | int = ..., normal: bool | int = ..., origin: bool | int = ..., point: bool | int = ..., pointDisplay: bool | int = ..., pointFacet: bool | int = ..., query: bool | int = ..., rotatePivot: bool | int = ..., scalePivot: bool | int = ..., selectHandle: bool | int = ..., state: bool | int = ..., surfaceFace: bool | int = ..., template: bool | int = ..., uvCoords: bool | int = ..., vertex: bool | int = ...) -> Any: ...
def toggleAxis(*args, origin: bool | int = ..., query: bool | int = ..., view: bool | int = ...) -> Any: ...
def toggleDisplacement(*args) -> Any: ...
def toggleWindowVisibility(*args) -> Any: ...
def tolerance(*args, angular: bool | int | float = ..., linear: bool | int | float = ..., query: bool | int = ...) -> Any: ...

@overload
def toolBar(*args, edit: Literal[True], allowedArea: str | list[str] = ..., annotation: str = ..., area: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., label: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def toolBar(*args, allowedArea: bool | int | str | list[str] = ..., annotation: bool | int | str = ..., area: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., content: bool | int | str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., label: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def toolButton(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., changeCommand: str | Callable = ..., collection: str = ..., docTag: str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., image1: str = ..., image2: str = ..., image3: str = ..., imageOverlayLabel: str = ..., manage: bool | int = ..., noBackground: bool | int = ..., offCommand: str | Callable = ..., onCommand: str | Callable = ..., popupIndicatorVisible: bool | int = ..., preventOverride: bool | int = ..., select: bool | int = ..., stateSelfManaged: bool | int = ..., statusBarMessage: str = ..., style: str = ..., tool: str | list[str] = ..., toolImage1: tuple[str, str] | list[tuple[str, str]] = ..., toolImage2: tuple[str, str] | list[tuple[str, str]] = ..., toolImage3: tuple[str, str] | list[tuple[str, str]] = ..., version: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def toolButton(*args, allowMultipleTools: bool | int = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., changeCommand: str | Callable = ..., collection: str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., doubleClickCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., imageOverlayLabel: bool | int | str = ..., isObscured: bool | int = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., offCommand: str | Callable = ..., onCommand: str | Callable = ..., parent: bool | int | str = ..., popupIndicatorVisible: bool | int = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., select: bool | int = ..., stateSelfManaged: bool | int = ..., statusBarMessage: str = ..., style: str = ..., tool: bool | int | str | list[str] = ..., toolArray: bool | int = ..., toolCount: bool | int = ..., toolImage1: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., toolImage2: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., toolImage3: bool | int | tuple[str, str] | list[tuple[str, str]] = ..., useTemplate: str = ..., version: bool | int | str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def toolCollection(*args, edit: Literal[True], clear: bool | int = ..., select: str = ...) -> None: ...

@overload
def toolCollection(*args, clear: bool | int = ..., collectionItemArray: bool | int = ..., defineTemplate: str = ..., exists: bool | int = ..., gl: bool | int = ..., numberOfCollectionItems: bool | int = ..., parent: str = ..., query: bool | int = ..., select: bool | int | str = ..., useTemplate: str = ...) -> Any: ...
def toolDropped(*args) -> Any: ...
def toolHasOptions(*args) -> Any: ...

@overload
def toolPropertyWindow(*args, edit: Literal[True], field: str = ..., helpButton: str = ..., icon: str = ..., location: str = ..., noviceMode: bool | int = ..., resetButton: str = ..., selectCommand: str = ..., showCommand: str = ...) -> None: ...

@overload
def toolPropertyWindow(*args, field: bool | int | str = ..., helpButton: bool | int | str = ..., icon: bool | int | str = ..., inMainWindow: bool | int = ..., location: bool | int | str = ..., noviceMode: bool | int = ..., query: bool | int = ..., refresh: bool | int = ..., resetButton: bool | int | str = ..., restore: bool | int = ..., selectCommand: bool | int | str = ..., showCommand: bool | int | str = ...) -> Any: ...

@overload
def torus(*args, edit: Literal[True], axis: tuple[float, float, float] = ..., caching: bool | int = ..., degree: int = ..., endSweep: float = ..., frozen: bool | int = ..., heightRatio: float = ..., minorSweep: float = ..., nodeState: int = ..., pivot: tuple[float, float, float] = ..., radius: float = ..., sections: int = ..., spans: int = ..., startSweep: float = ..., tolerance: float = ..., useTolerance: bool | int = ...) -> None: ...

@overload
def torus(*args, axis: bool | int | tuple[float, float, float] = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., degree: int = ..., endSweep: bool | int | float = ..., frozen: bool | int = ..., heightRatio: bool | int | float = ..., minorSweep: bool | int | float = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., pivot: bool | int | tuple[float, float, float] = ..., polygon: int = ..., query: bool | int = ..., radius: bool | int | float = ..., sections: int = ..., spans: int = ..., startSweep: bool | int | float = ..., tolerance: bool | int | float = ..., useTolerance: bool | int = ...) -> Any: ...
def track(*args, down: float = ..., left: float = ..., right: float = ..., upDistance01: float = ..., upDistance02: float = ...) -> Any: ...

@overload
def trackCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ..., trackGeometry: bool | int = ..., trackScale: float = ...) -> None: ...

@overload
def trackCtx(*args, alternateContext: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., toolName: bool | int | str = ..., trackGeometry: bool | int = ..., trackScale: bool | int | float = ...) -> Any: ...

@overload
def transferAttributes(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., colorBorders: int = ..., flipUVs: int = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., matchChoice: int = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., sampleSpace: int = ..., searchMethod: int = ..., searchScaleX: float = ..., searchScaleY: float = ..., searchScaleZ: float = ..., split: bool | int = ..., transferColors: int = ..., transferNormals: int = ..., transferPositions: int = ..., transferUVs: int = ...) -> None: ...

@overload
def transferAttributes(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., colorBorders: int = ..., components: bool | int = ..., deformerTools: bool | int = ..., exclusive: bool | int | str = ..., flipUVs: int = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., matchChoice: int = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., sampleSpace: int = ..., searchMethod: int = ..., searchScaleX: float = ..., searchScaleY: float = ..., searchScaleZ: float = ..., selectedComponents: bool | int = ..., sourceColorSet: str = ..., sourceUvSet: str = ..., sourceUvSpace: str = ..., split: bool | int = ..., targetColorSet: str = ..., targetUvSet: str = ..., targetUvSpace: str = ..., transferColors: int = ..., transferNormals: int = ..., transferPositions: int = ..., transferUVs: int = ..., useComponentTags: bool | int = ...) -> Any: ...

@overload
def transferShadingSets(*args, edit: Literal[True], sampleSpace: int = ..., searchMethod: int = ...) -> None: ...

@overload
def transferShadingSets(*args, query: bool | int = ..., sampleSpace: int = ..., searchMethod: int = ...) -> Any: ...
def transformCompare(*args, root: bool | int = ...) -> Any: ...
def transformLimits(*args, edit: bool | int = ..., enableRotationX: bool | int | tuple[bool | int, bool | int] = ..., enableRotationY: bool | int | tuple[bool | int, bool | int] = ..., enableRotationZ: bool | int | tuple[bool | int, bool | int] = ..., enableScaleX: bool | int | tuple[bool | int, bool | int] = ..., enableScaleY: bool | int | tuple[bool | int, bool | int] = ..., enableScaleZ: bool | int | tuple[bool | int, bool | int] = ..., enableTranslationX: bool | int | tuple[bool | int, bool | int] = ..., enableTranslationY: bool | int | tuple[bool | int, bool | int] = ..., enableTranslationZ: bool | int | tuple[bool | int, bool | int] = ..., query: bool | int = ..., remove: bool | int = ..., rotationX: bool | int | tuple[float, float] = ..., rotationY: bool | int | tuple[float, float] = ..., rotationZ: bool | int | tuple[float, float] = ..., scaleX: bool | int | tuple[float, float] = ..., scaleY: bool | int | tuple[float, float] = ..., scaleZ: bool | int | tuple[float, float] = ..., translationX: bool | int | tuple[float, float] = ..., translationY: bool | int | tuple[float, float] = ..., translationZ: bool | int | tuple[float, float] = ...) -> Any: ...
def translator(*args, defaultFileRule: bool | int = ..., defaultOptions: bool | int | str = ..., extension: bool | int = ..., fileCompression: bool | int | str = ..., filter: bool | int = ..., findTranslator: tuple[str, int] = ..., list: bool | int = ..., loaded: bool | int = ..., objectType: bool | int = ..., optionsScript: bool | int = ..., query: bool | int = ..., readSupport: bool | int = ..., writeSupport: bool | int = ...) -> Any: ...

@overload
def treeLister(*args, edit: Literal[True], addFavorite: str | list[str] = ..., addItem: tuple[str, str, str | Callable] | list[tuple[str, str, str | Callable]] = ..., addVnnItem: tuple[str, str, str, str] | list[tuple[str, str, str, str]] = ..., annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., clearContents: bool | int = ..., collapsePath: str | list[str] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., executeItem: str = ..., expandPath: str | list[str] = ..., expandToDepth: int = ..., favoritesCallback: str | Callable = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., preventOverride: bool | int = ..., refreshCommand: str | Callable = ..., removeFavorite: str | list[str] = ..., removeItem: str | list[str] = ..., selectPath: str | list[str] = ..., setDisplayName: tuple[str, str] | list[tuple[str, str]] = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def treeLister(*args, addFavorite: str | list[str] = ..., addItem: tuple[str, str, str | Callable] | list[tuple[str, str, str | Callable]] = ..., addVnnItem: tuple[str, str, str, str] | list[tuple[str, str, str, str]] = ..., annotation: bool | int | str = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., clearContents: bool | int = ..., collapsePath: str | list[str] = ..., defineTemplate: str = ..., displayName: bool | int | str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., executeItem: str = ..., exists: bool | int = ..., expandPath: str | list[str] = ..., expandToDepth: int = ..., favoritesCallback: str | Callable = ..., favoritesList: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., isObscured: bool | int = ..., itemScript: bool | int | str = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., refreshCommand: bool | int | str | Callable = ..., removeFavorite: str | list[str] = ..., removeItem: str | list[str] = ..., resultsPathUnderCursor: bool | int = ..., selectPath: str | list[str] = ..., setDisplayName: tuple[str, str] | list[tuple[str, str]] = ..., statusBarMessage: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., vnnString: bool | int = ..., width: int = ...) -> Any: ...

@overload
def treeView(*args, edit: Literal[True], addItem: tuple[str, str] | list[tuple[str, str]] = ..., allowDragAndDrop: bool | int = ..., allowHiddenParents: bool | int = ..., allowMultiSelection: bool | int = ..., allowReparenting: bool | int = ..., annotation: str = ..., attachButtonRight: int = ..., backgroundColor: tuple[float, float, float] = ..., borderHighlite: tuple[str, bool | int] = ..., borderHighliteColor: tuple[str, float, float, float] = ..., buttonErase: tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., buttonState: tuple[str, int, str] | list[tuple[str, int, str]] = ..., buttonStyle: tuple[str, int, str] | list[tuple[str, int, str]] = ..., buttonTextIcon: tuple[str, int, str] | list[tuple[str, int, str]] = ..., buttonTooltip: tuple[str, int, str] | list[tuple[str, int, str]] = ..., buttonTransparencyColor: tuple[str, int, float, float, float] | list[tuple[str, int, float, float, float]] = ..., buttonTransparencyOverride: tuple[str, int, bool | int] | list[tuple[str, int, bool | int]] = ..., clearSelection: bool | int = ..., contextMenuCommand: str | Callable = ..., displayLabel: tuple[str, str] | list[tuple[str, str]] = ..., displayLabelSuffix: tuple[str, str] | list[tuple[str, str]] = ..., docTag: str = ..., dragAndDropCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editLabelCommand: str | Callable = ..., emptyLabel: str = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableButton: tuple[str, int, int] | list[tuple[str, int, int]] = ..., enableKeyboardFocus: bool | int = ..., enableKeys: bool | int = ..., enableLabel: tuple[str, int] = ..., expandCollapseCommand: str | Callable = ..., expandItem: tuple[str, bool | int] = ..., flatButton: int = ..., font: tuple[str, str] = ..., fontFace: tuple[str, int] = ..., height: int = ..., hideButtons: bool | int = ..., highlightColor: tuple[float, float, float] = ..., highlite: tuple[str, bool | int] = ..., highliteColor: tuple[str, float, float, float] = ..., ignoreButtonClick: tuple[str, int, int] | list[tuple[str, int, int]] = ..., image: tuple[str, int, str] | list[tuple[str, int, str]] = ..., insertItem: tuple[str, str, int] | list[tuple[str, str, int]] = ..., itemAnnotation: tuple[str, str] = ..., itemDblClickCommand: str | Callable = ..., itemDblClickCommand2: str | Callable = ..., itemRenamedCommand: str | Callable = ..., itemVisible: tuple[str, bool | int] = ..., labelBackgroundColor: tuple[str, float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfButtons: int = ..., ornament: tuple[str, int, int, int] = ..., ornamentColor: tuple[str, float, float, float] = ..., pressCommand: tuple[int, str | Callable] | list[tuple[int, str | Callable]] = ..., preventOverride: bool | int = ..., removeAll: bool | int = ..., removeItem: str = ..., reverseTreeOrder: bool | int = ..., rightPressCommand: tuple[int, str | Callable] | list[tuple[int, str | Callable]] = ..., select: tuple[str, int] = ..., selectCommand: str | Callable = ..., selectItem: tuple[str, bool | int] = ..., selectionChangedCommand: str | Callable = ..., selectionColor: tuple[str, float, float, float] = ..., showItem: str = ..., statusBarMessage: str = ..., textColor: tuple[str, float, float, float] = ..., verticalScrollPosition: int = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def treeView(*args, addItem: tuple[str, str] | list[tuple[str, str]] = ..., allowDragAndDrop: bool | int = ..., allowHiddenParents: bool | int = ..., allowMultiSelection: bool | int = ..., allowReparenting: bool | int = ..., annotation: bool | int | str = ..., attachButtonRight: int = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., borderHighlite: tuple[str, bool | int] = ..., borderHighliteColor: tuple[str, float, float, float] = ..., buttonErase: bool | int | tuple[str, bool | int] | list[tuple[str, bool | int]] = ..., buttonState: tuple[str, int, str] | list[tuple[str, int, str]] = ..., buttonStyle: tuple[str, int, str] | list[tuple[str, int, str]] = ..., buttonTextIcon: tuple[str, int, str] | list[tuple[str, int, str]] = ..., buttonTooltip: tuple[str, int, str] | list[tuple[str, int, str]] = ..., buttonTransparencyColor: tuple[str, int, float, float, float] | list[tuple[str, int, float, float, float]] = ..., buttonTransparencyOverride: tuple[str, int, bool | int] | list[tuple[str, int, bool | int]] = ..., buttonVisible: tuple[str, int, bool | int] | list[tuple[str, int, bool | int]] = ..., children: bool | int | str = ..., clearSelection: bool | int = ..., contextMenuCommand: str | Callable = ..., defineTemplate: str = ..., displayLabel: tuple[str, str] | list[tuple[str, str]] = ..., displayLabelSuffix: tuple[str, str] | list[tuple[str, str]] = ..., docTag: bool | int | str = ..., dragAndDropCommand: str | Callable = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., editLabelCommand: str | Callable = ..., emptyLabel: bool | int | str = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableButton: tuple[str, int, int] | list[tuple[str, int, int]] = ..., enableKeyboardFocus: bool | int = ..., enableKeys: bool | int = ..., enableLabel: tuple[str, int] = ..., exists: bool | int = ..., expandCollapseCommand: str | Callable = ..., expandItem: tuple[str, bool | int] = ..., flatButton: int = ..., font: bool | int | tuple[str, str] = ..., fontFace: tuple[str, int] = ..., fullPathName: bool | int = ..., height: int = ..., hideButtons: bool | int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., highlite: tuple[str, bool | int] = ..., highliteColor: tuple[str, float, float, float] = ..., ignoreButtonClick: tuple[str, int, int] | list[tuple[str, int, int]] = ..., image: tuple[str, int, str] | list[tuple[str, int, str]] = ..., insertItem: tuple[str, str, int] | list[tuple[str, str, int]] = ..., isItemExpanded: bool | int | str = ..., isLeaf: bool | int | str = ..., isObscured: bool | int = ..., item: bool | int | str = ..., itemAnnotation: bool | int | tuple[str, str] = ..., itemDblClickCommand: str | Callable = ..., itemDblClickCommand2: str | Callable = ..., itemExists: bool | int | str = ..., itemIndex: bool | int | str = ..., itemParent: bool | int | str = ..., itemRenamedCommand: str | Callable = ..., itemSelected: bool | int | str = ..., itemVisible: bool | int | tuple[str, bool | int] = ..., labelBackgroundColor: tuple[str, float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., numberOfButtons: int = ..., numberOfPopupMenus: bool | int = ..., ornament: tuple[str, int, int, int] = ..., ornamentColor: tuple[str, float, float, float] = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., pressCommand: tuple[int, str | Callable] | list[tuple[int, str | Callable]] = ..., preventOverride: bool | int = ..., query: bool | int = ..., removeAll: bool | int = ..., removeItem: str = ..., reverseTreeOrder: bool | int = ..., rightPressCommand: tuple[int, str | Callable] | list[tuple[int, str | Callable]] = ..., select: tuple[str, int] = ..., selectCommand: str | Callable = ..., selectItem: bool | int | tuple[str, bool | int] = ..., selectionChangedCommand: str | Callable = ..., selectionColor: bool | int | tuple[str, float, float, float] = ..., showItem: str = ..., statusBarMessage: str = ..., textColor: tuple[str, float, float, float] = ..., useTemplate: str = ..., verticalScrollPosition: int = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ...) -> Any: ...

@overload
def trim(*args, edit: Literal[True], caching: bool | int = ..., locatorU: float | list[float] = ..., locatorV: float | list[float] = ..., nodeState: int = ..., selected: int = ..., shrink: bool | int = ..., tolerance: float = ...) -> None: ...

@overload
def trim(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., frozen: bool | int = ..., locatorU: bool | int | float | list[float] = ..., locatorV: bool | int | float | list[float] = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., selected: int = ..., shrink: bool | int = ..., tolerance: bool | int | float = ...) -> Any: ...
def trimCtx(*args, activeNodes: bool | int = ..., autoCreate: bool | int = ..., caching: bool | int = ..., constructionHistory: bool | int = ..., edit: bool | int = ..., exists: bool | int = ..., frozen: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., immediate: bool | int = ..., locatorU: float | list[float] = ..., locatorV: float | list[float] = ..., name: str = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., reset: bool | int = ..., selected: int = ..., shrink: bool | int = ..., tolerance: float = ..., toolNode: bool | int = ...) -> Any: ...
def truncateFluidCache(*args, edit: bool | int = ..., query: bool | int = ...) -> Any: ...
def truncateHairCache(*args, edit: bool | int = ..., query: bool | int = ...) -> Any: ...
def tumble(*args, azimuthAngle: float = ..., elevationAngle: float = ..., localTumble: int = ..., pivotPoint: tuple[float, float, float] = ..., rotationAngles: tuple[float, float] = ...) -> Any: ...

@overload
def tumbleCtx(*args, edit: Literal[True], autoOrthoConstrain: bool | int = ..., autoSetPivot: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., localTumble: int = ..., objectTumble: bool | int = ..., orthoLock: bool | int = ..., orthoStep: float = ..., tumbleScale: float = ...) -> None: ...

@overload
def tumbleCtx(*args, alternateContext: bool | int = ..., autoOrthoConstrain: bool | int = ..., autoSetPivot: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., localTumble: int = ..., name: str = ..., objectTumble: bool | int = ..., orthoLock: bool | int = ..., orthoStep: bool | int | float = ..., query: bool | int = ..., toolName: bool | int | str = ..., tumbleScale: bool | int | float = ...) -> Any: ...

@overload
def turbulence(*args, edit: Literal[True], attenuation: float = ..., frequency: float = ..., magnitude: float = ..., maxDistance: float = ..., name: str = ..., noiseLevel: int = ..., noiseRatio: float = ..., perVertex: bool | int = ..., phase: float = ..., phaseX: float = ..., phaseY: float = ..., phaseZ: float = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., torusSectionRadius: float = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def turbulence(*args, attenuation: bool | int | float = ..., frequency: bool | int | float = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., name: bool | int | str = ..., noiseLevel: int = ..., noiseRatio: bool | int | float = ..., perVertex: bool | int = ..., phase: bool | int | float = ..., phaseX: bool | int | float = ..., phaseY: bool | int | float = ..., phaseZ: bool | int | float = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., torusSectionRadius: bool | int | float = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...

@overload
def twoPointArcCtx(*args, edit: Literal[True], degree: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., spans: int = ...) -> None: ...

@overload
def twoPointArcCtx(*args, degree: int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., spans: int = ...) -> Any: ...
def ubercam(*args) -> Any: ...
def uiTemplate(*args, defineTemplate: str = ..., edit: bool | int = ..., exists: bool | int = ..., query: bool | int = ..., useTemplate: str = ...) -> Any: ...
def unapplyOverride(*args, **keywords): ...
def unassignInputDevice(*args, clutch: str = ..., device: str = ...) -> Any: ...
def undo(*args) -> None: ...
def undoInfo(*args, chunkName: bool | int | str = ..., closeChunk: bool | int = ..., infinity: bool | int = ..., length: int = ..., openChunk: bool | int = ..., printQueue: bool | int = ..., printRedoQueue: bool | int = ..., query: bool | int = ..., redoName: bool | int | str = ..., redoQueueEmpty: bool | int = ..., state: bool | int = ..., stateWithoutFlush: bool | int = ..., undoName: bool | int | str = ..., undoQueueEmpty: bool | int = ...) -> Any: ...
def unfold(*args, applyToShell: bool | int = ..., areaWeight: float = ..., globalBlend: float = ..., globalMethodBlend: float = ..., iterations: int = ..., optimizeAxis: int = ..., pinSelected: bool | int = ..., pinUvBorder: bool | int = ..., scale: float = ..., stoppingThreshold: float = ..., useScale: bool | int = ...) -> Any: ...
def ungroup(*args, absolute: bool | int = ..., parent: str = ..., relative: bool | int = ..., world: bool | int = ...) -> Any: ...

@overload
def uniform(*args, edit: Literal[True], attenuation: float = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., magnitude: float = ..., maxDistance: float = ..., name: str = ..., perVertex: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., torusSectionRadius: float = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def uniform(*args, attenuation: bool | int | float = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., name: bool | int | str = ..., perVertex: bool | int = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., torusSectionRadius: bool | int | float = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...
def unknownNode(*args, plugin: bool | int = ..., query: bool | int = ..., realClassName: bool | int = ..., realClassTag: bool | int = ...) -> Any: ...
def unknownPlugin(*args, dataTypes: bool | int = ..., list: bool | int = ..., nodeTypes: bool | int = ..., query: bool | int = ..., remove: bool | int = ..., version: bool | int = ...) -> Any: ...
def unloadPlugin(*args, addCallback: str | Callable = ..., force: bool | int = ..., removeCallback: str | Callable = ...) -> None: ...
def untangleUV(*args, mapBorder: str = ..., maxRelaxIterations: int = ..., pinBorder: bool | int = ..., pinSelected: bool | int = ..., pinUnselected: bool | int = ..., relax: str = ..., relaxTolerance: float = ..., shapeDetail: float = ...) -> Any: ...

@overload
def untrim(*args, edit: Literal[True], caching: bool | int = ..., noChanges: bool | int = ..., nodeState: int = ..., untrimAll: bool | int = ...) -> None: ...

@overload
def untrim(*args, caching: bool | int = ..., constructionHistory: bool | int = ..., curveOnSurface: bool | int = ..., frozen: bool | int = ..., name: str = ..., noChanges: bool | int = ..., nodeState: int = ..., object: bool | int = ..., query: bool | int = ..., replaceOriginal: bool | int = ..., untrimAll: bool | int = ...) -> Any: ...
def upAxis(*args, axis: bool | int | str = ..., query: bool | int = ..., rotateView: bool | int = ...) -> Any: ...
def userCtx(*args, edit: bool | int = ..., editCommand: callable = ..., editPrompt: str = ..., exists: bool | int = ..., finalCommand: str = ..., history: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., name: str = ..., noSelectionPrompt: tuple[int, str] | list[tuple[int, str]] = ..., query: bool | int = ..., selectionCount: tuple[int, int] | list[tuple[int, int]] = ..., selectionFlag: tuple[int, str] | list[tuple[int, str]] = ..., selectionMask: tuple[int, str] | list[tuple[int, str]] = ..., selectionPrompt: str | list[str] = ...) -> Any: ...  # type: ignore[valid-type]
def uvLink(*args, b: bool | int = ..., isValid: bool | int = ..., make: bool | int = ..., query: bool | int = ..., queryObject: str = ..., texture: str = ..., uvSet: str = ...) -> Any: ...
def uvSnapshot(*args, antiAliased: bool | int = ..., blueColor: int = ..., entireUVRange: bool | int = ..., fileFormat: str = ..., greenColor: int = ..., name: str = ..., overwrite: bool | int = ..., redColor: int = ..., uMax: float = ..., uMin: float = ..., uvSetName: str = ..., vMax: float = ..., vMin: float = ..., xResolution: int = ..., yResolution: int = ...) -> Any: ...

@overload
def view2dToolCtx(*args, edit: Literal[True], image1: str = ..., image2: str = ..., image3: str = ...) -> None: ...

@overload
def view2dToolCtx(*args, alternateContext: bool | int = ..., boxzoom: bool | int = ..., dolly: bool | int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., toolName: bool | int | str = ..., track: bool | int = ...) -> Any: ...
def viewCamera(*args, move: str = ..., sideView: bool | int = ..., topView: bool | int = ...) -> Any: ...
def viewClipPlane(*args, autoClipPlane: bool | int = ..., farClipPlane: bool | int | float = ..., nearClipPlane: bool | int | float = ..., query: bool | int = ..., surfacesOnly: bool | int = ...) -> Any: ...
def viewFit(*args, allObjects: bool | int = ..., animate: bool | int = ..., center: bool | int = ..., fitClipPlanes: bool | int = ..., fitFactor: float = ..., namespace: str = ..., noChildren: bool | int = ..., panel: str = ...) -> Any: ...
def viewHeadOn(*args) -> Any: ...
def viewLookAt(*args, position: tuple[float, float, float] = ...) -> Any: ...
def viewManip(*args, bottomLeft: bool | int = ..., bottomRight: bool | int = ..., compassAngle: bool | int | float = ..., dragSnap: bool | int = ..., drawCompass: bool | int = ..., fitToView: bool | int = ..., frontParameters: bool | int | str = ..., goDefault: bool | int = ..., goHome: bool | int = ..., homeParameters: bool | int | str = ..., levelCamera: bool | int = ..., minOpacity: bool | int | float = ..., namespace: bool | int | str = ..., postCommand: bool | int | str = ..., preCommand: bool | int | str = ..., preserveSceneUp: bool | int = ..., query: bool | int = ..., resetFront: bool | int = ..., resetHome: bool | int = ..., restoreCenter: bool | int = ..., selectionLockParameters: bool | int | str = ..., setFront: bool | int = ..., setHome: bool | int = ..., size: bool | int | str = ..., toggleSelectionLock: bool | int = ..., topLeft: bool | int = ..., topRight: bool | int = ..., visible: bool | int = ..., zoomToFitScene: bool | int = ...) -> Any: ...
def viewPlace(*args, animate: bool | int = ..., eyePoint: tuple[float, float, float] = ..., fieldOfView: float = ..., lookAt: tuple[float, float, float] = ..., ortho: bool | int = ..., perspective: bool | int = ..., upDirection: tuple[float, float, float] = ..., viewDirection: tuple[float, float, float] = ...) -> Any: ...
def viewSet(*args, animate: bool | int = ..., back: bool | int = ..., bottom: bool | int = ..., fit: bool | int = ..., fitFactor: float = ..., front: bool | int = ..., home: bool | int = ..., keepRenderSettings: bool | int = ..., leftSide: bool | int = ..., namespace: str = ..., nextView: bool | int = ..., persp: bool | int = ..., previousView: bool | int = ..., query: bool | int = ..., rightSide: bool | int = ..., side: bool | int = ..., t: bool | int = ..., top: bool | int = ..., viewNegativeX: bool | int = ..., viewNegativeY: bool | int = ..., viewNegativeZ: bool | int = ..., viewX: bool | int = ..., viewY: bool | int = ..., viewZ: bool | int = ...) -> Any: ...
def visor(*args, addFolder: bool | int = ..., addNodes: bool | int | str = ..., allowPanningInX: bool | int = ..., allowPanningInY: bool | int = ..., allowZooming: bool | int = ..., command: bool | int | str = ..., deleteFolder: bool | int | str = ..., editFolder: bool | int | str = ..., folderList: bool | int | str = ..., menu: bool | int | str = ..., name: bool | int | str = ..., nodeType: bool | int | str = ..., openDirectories: bool | int = ..., openFolder: bool | int = ..., parent: bool | int | str = ..., path: bool | int | str = ..., popupMenuScript: bool | int | str = ..., query: bool | int = ..., rebuild: bool | int = ..., refreshAllSwatches: bool | int = ..., refreshSelectedSwatches: bool | int = ..., refreshSwatch: bool | int | str = ..., reset: bool | int = ..., restrictPanAndZoom: bool | int = ..., saveSwatches: bool | int = ..., scrollBar: bool | int | str = ..., scrollPercent: bool | int | float = ..., selectedGadgets: bool | int | str = ..., showDividers: bool | int = ..., showFiles: bool | int = ..., showFolders: bool | int = ..., showNodes: bool | int = ..., stateString: bool | int = ..., style: bool | int | str = ..., transform: bool | int | str = ..., type: bool | int | str = ...) -> Any: ...

@overload
def volumeAxis(*args, edit: Literal[True], alongAxis: float = ..., aroundAxis: float = ..., attenuation: float = ..., awayFromAxis: float = ..., awayFromCenter: float = ..., detailTurbulence: float = ..., directionX: float = ..., directionY: float = ..., directionZ: float = ..., directionalSpeed: float = ..., invertAttenuation: bool | int = ..., magnitude: float = ..., maxDistance: float = ..., name: str = ..., perVertex: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., torusSectionRadius: float = ..., turbulence: float = ..., turbulenceFrequencyX: float = ..., turbulenceFrequencyY: float = ..., turbulenceFrequencyZ: float = ..., turbulenceOffsetX: float = ..., turbulenceOffsetY: float = ..., turbulenceOffsetZ: float = ..., turbulenceSpeed: float = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def volumeAxis(*args, alongAxis: bool | int | float = ..., aroundAxis: bool | int | float = ..., attenuation: bool | int | float = ..., awayFromAxis: bool | int | float = ..., awayFromCenter: bool | int | float = ..., detailTurbulence: bool | int | float = ..., directionX: bool | int | float = ..., directionY: bool | int | float = ..., directionZ: bool | int | float = ..., directionalSpeed: bool | int | float = ..., invertAttenuation: bool | int = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., name: bool | int | str = ..., perVertex: bool | int = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., torusSectionRadius: bool | int | float = ..., turbulence: bool | int | float = ..., turbulenceFrequencyX: bool | int | float = ..., turbulenceFrequencyY: bool | int | float = ..., turbulenceFrequencyZ: bool | int | float = ..., turbulenceOffsetX: bool | int | float = ..., turbulenceOffsetY: bool | int | float = ..., turbulenceOffsetZ: bool | int | float = ..., turbulenceSpeed: bool | int | float = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...

@overload
def volumeBind(*args, edit: Literal[True], influence: str = ...) -> None: ...

@overload
def volumeBind(*args, influence: bool | int | str = ..., name: str = ..., query: bool | int = ...) -> Any: ...

@overload
def vortex(*args, edit: Literal[True], attenuation: float = ..., axisX: float = ..., axisY: float = ..., axisZ: float = ..., magnitude: float = ..., maxDistance: float = ..., name: str = ..., perVertex: bool | int = ..., position: tuple[float, float, float] | list[tuple[float, float, float]] = ..., torusSectionRadius: float = ..., volumeExclusion: bool | int = ..., volumeOffset: tuple[float, float, float] = ..., volumeShape: str = ..., volumeSweep: float = ...) -> None: ...

@overload
def vortex(*args, attenuation: bool | int | float = ..., axisX: bool | int | float = ..., axisY: bool | int | float = ..., axisZ: bool | int | float = ..., magnitude: bool | int | float = ..., maxDistance: bool | int | float = ..., name: bool | int | str = ..., perVertex: bool | int = ..., position: bool | int | tuple[float, float, float] | list[tuple[float, float, float]] = ..., query: bool | int = ..., torusSectionRadius: bool | int | float = ..., volumeExclusion: bool | int = ..., volumeOffset: bool | int | tuple[float, float, float] = ..., volumeShape: bool | int | str = ..., volumeSweep: bool | int | float = ...) -> Any: ...
def waitCursor(*args, query: bool | int = ..., state: bool | int = ...) -> Any: ...

@overload
def walkCtx(*args, edit: Literal[True], crouchCount: float = ..., image1: str = ..., image2: str = ..., image3: str = ..., walkHeight: float = ..., walkSensitivity: float = ..., walkSpeed: float = ..., walkToolHud: bool | int = ...) -> None: ...

@overload
def walkCtx(*args, alternateContext: bool | int = ..., crouchCount: bool | int | float = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., toolName: bool | int | str = ..., walkHeight: bool | int | float = ..., walkSensitivity: bool | int | float = ..., walkSpeed: bool | int | float = ..., walkToolHud: bool | int = ...) -> Any: ...
def warnUserDialog(*args, addInfo: tuple[str, str] = ..., cbl: str = ..., dt: str = ..., ial: int = ..., lk: str = ..., message: str = ..., title: str = ..., w: int = ...) -> Any: ...
def warning(*args, noContext: bool | int = ..., showLineNumber: bool | int = ...) -> Any: ...

@overload
def webBrowser(*args, edit: Literal[True], annotation: str = ..., backgroundColor: tuple[float, float, float] = ..., docTag: str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., height: int = ..., highlightColor: tuple[float, float, float] = ..., manage: bool | int = ..., noBackground: bool | int = ..., openURL: str = ..., preventOverride: bool | int = ..., statusBarMessage: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: int = ...) -> None: ...

@overload
def webBrowser(*args, annotation: bool | int | str = ..., back: bool | int = ..., backgroundColor: bool | int | tuple[float, float, float] = ..., command: str = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dragCallback: str | Callable = ..., dropCallback: str | Callable = ..., enable: bool | int = ..., enableBackground: bool | int = ..., enableKeyboardFocus: bool | int = ..., exists: bool | int = ..., find: str = ..., forward: bool | int = ..., fullPathName: bool | int = ..., height: int = ..., highlightColor: bool | int | tuple[float, float, float] = ..., home: bool | int = ..., isObscured: bool | int = ..., manage: bool | int = ..., matchCase: bool | int = ..., matchWholeWord: bool | int = ..., matchWholeWorld: bool | int = ..., noBackground: bool | int = ..., numberOfPopupMenus: bool | int = ..., openURL: bool | int | str = ..., parent: bool | int | str = ..., popupMenuArray: bool | int = ..., preventOverride: bool | int = ..., query: bool | int = ..., reload: bool | int = ..., searchForward: bool | int = ..., statusBarMessage: str = ..., stop: bool | int = ..., urlChangedCb: str = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: bool | int | str | Callable = ..., width: int = ..., wrap: bool | int = ...) -> Any: ...
def webBrowserPrefs(*args, edit: bool | int = ..., preference: tuple[str, str] = ..., query: bool | int = ...) -> Any: ...
def weightsColor(*args, colorRamp: bool | int | str = ..., deformer: bool | int | str = ..., falseColor: bool | int = ..., outOfRangeColor: bool | int | tuple[float, float, float] = ..., query: bool | int = ..., rampMaxColor: bool | int | tuple[float, float, float] = ..., rampMinColor: bool | int | tuple[float, float, float] = ..., useColorRamp: bool | int = ..., useMaxMinColor: bool | int = ...) -> Any: ...
def whatsNewHighlight(*args, highlightColor: bool | int | tuple[float, float, float] = ..., highlightOn: bool | int = ..., query: bool | int = ..., showStartupDialog: bool | int = ...) -> Any: ...

@overload
def window(*args, exists: Literal[True]) -> bool: ...

@overload
def window(*args, edit: Literal[True], backgroundColor: tuple[float, float, float] = ..., closeCommand: str | Callable = ..., docTag: str = ..., dockingLayout: str = ..., height: int = ..., iconName: str = ..., iconify: bool | int = ..., leftEdge: int = ..., mainMenuBar: bool | int = ..., mainWindow: bool | int = ..., maximizeButton: bool | int = ..., menuBarCornerWidget: tuple[str, str] = ..., menuBarResize: bool | int = ..., menuBarVisible: bool | int = ..., menuIndex: tuple[str, int] = ..., minimizeButton: bool | int = ..., minimizeCommand: str | Callable = ..., resizeToFitChildren: bool | int = ..., restoreCommand: str | Callable = ..., sizeable: bool | int = ..., state: str = ..., title: str = ..., titleBar: bool | int = ..., titleBarMenu: bool | int = ..., toolbox: bool | int = ..., topEdge: int = ..., topLeftCorner: tuple[int, int] = ..., visible: bool | int = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> None: ...

@overload
def window(*args, backgroundColor: tuple[float, float, float] = ..., closeCommand: str | Callable = ..., defineTemplate: str = ..., docTag: bool | int | str = ..., dockCorner: tuple[str, str] | list[tuple[str, str]] = ..., dockStation: bool | int = ..., dockingLayout: bool | int | str = ..., frontWindow: bool | int = ..., height: int = ..., iconName: bool | int | str = ..., iconify: bool | int = ..., interactivePlacement: bool | int = ..., leftEdge: int = ..., mainMenuBar: bool | int = ..., mainWindow: bool | int = ..., maximizeButton: bool | int = ..., menuArray: bool | int = ..., menuBar: bool | int = ..., menuBarCornerWidget: bool | int | tuple[str, str] = ..., menuBarResize: bool | int = ..., menuBarVisible: bool | int = ..., menuIndex: tuple[str, int] = ..., minimizeButton: bool | int = ..., minimizeCommand: str | Callable = ..., nestedDockingEnabled: bool | int = ..., numberOfMenus: bool | int = ..., parent: str = ..., query: bool | int = ..., resizeToFitChildren: bool | int = ..., restoreCommand: str | Callable = ..., retain: bool | int = ..., sizeable: bool | int = ..., state: bool | int | str = ..., title: bool | int | str = ..., titleBar: bool | int = ..., titleBarMenu: bool | int = ..., toolbox: bool | int = ..., topEdge: int = ..., topLeftCorner: bool | int | tuple[int, int] = ..., useTemplate: str = ..., visible: bool | int = ..., width: int = ..., widthHeight: bool | int | tuple[int, int] = ...) -> Any: ...

@overload
def windowPref(*args, edit: Literal[True], height: int = ..., leftEdge: int = ..., maximized: bool | int = ..., topEdge: int = ..., topLeftCorner: tuple[int, int] = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> None: ...

@overload
def windowPref(*args, enableAll: bool | int = ..., exists: bool | int = ..., height: int = ..., leftEdge: int = ..., loadAll: bool | int = ..., maximized: bool | int = ..., parentMain: bool | int = ..., query: bool | int = ..., remove: bool | int = ..., removeAll: bool | int = ..., restoreMainWindowState: str = ..., saveAll: bool | int = ..., saveMainWindowState: str = ..., topEdge: int = ..., topLeftCorner: bool | int | tuple[int, int] = ..., width: int = ..., widthHeight: bool | int | tuple[int, int] = ...) -> Any: ...

@overload
def wire(*args, edit: Literal[True], after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., crossingEffect: float = ..., dropoffDistance: tuple[int, float] | list[tuple[int, float]] = ..., envelope: float = ..., frontOfChain: bool | int = ..., geometry: str | list[str] = ..., holder: tuple[int, str] | list[tuple[int, str]] = ..., localInfluence: float = ..., parallel: bool | int = ..., prune: bool | int = ..., remove: bool | int | list[bool | int] = ..., split: bool | int = ..., wire: str | list[str] = ..., wireCount: int = ...) -> None: ...

@overload
def wire(*args, after: bool | int = ..., afterReference: bool | int = ..., before: bool | int = ..., components: bool | int = ..., crossingEffect: bool | int | float = ..., deformerTools: bool | int = ..., dropoffDistance: bool | int | tuple[int, float] | list[tuple[int, float]] = ..., envelope: bool | int | float = ..., exclusive: bool | int | str = ..., frontOfChain: bool | int = ..., geometry: bool | int | str | list[str] = ..., geometryIndices: bool | int = ..., groupWithBase: bool | int = ..., holder: bool | int | tuple[int, str] | list[tuple[int, str]] = ..., ignoreSelected: bool | int = ..., includeHiddenSelections: bool | int = ..., localInfluence: bool | int | float = ..., name: str = ..., parallel: bool | int = ..., prune: bool | int = ..., query: bool | int = ..., remove: bool | int | list[bool | int] = ..., selectedComponents: bool | int = ..., split: bool | int = ..., useComponentTags: bool | int = ..., wire: bool | int | str | list[str] = ..., wireCount: int = ...) -> Any: ...

@overload
def wireContext(*args, edit: Literal[True], crossingEffect: float = ..., deformationOrder: str = ..., dropoffDistance: float = ..., envelope: float = ..., exclusive: bool | int = ..., exclusivePartition: str = ..., groupWithBase: bool | int = ..., holder: bool | int = ..., image1: str = ..., image2: str = ..., image3: str = ..., localInfluence: float = ...) -> None: ...

@overload
def wireContext(*args, crossingEffect: bool | int | float = ..., deformationOrder: bool | int | str = ..., dropoffDistance: bool | int | float = ..., envelope: bool | int | float = ..., exclusive: bool | int = ..., exclusivePartition: bool | int | str = ..., exists: bool | int = ..., groupWithBase: bool | int = ..., history: bool | int = ..., holder: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., localInfluence: bool | int | float = ..., name: str = ..., query: bool | int = ...) -> Any: ...
def workspace(*args, active: bool | int = ..., baseWorkspace: bool | int | str = ..., create: str = ..., directory: bool | int | str = ..., expandName: bool | int | str = ..., fileRule: bool | int | tuple[str, str] = ..., fileRuleEntry: bool | int | str = ..., fileRuleList: bool | int = ..., filter: bool | int = ..., fullName: bool | int = ..., list: bool | int = ..., listFullWorkspaces: bool | int = ..., listWorkspaces: bool | int = ..., newWorkspace: bool | int = ..., objectType: bool | int | tuple[str, str] = ..., objectTypeEntry: bool | int | str = ..., objectTypeList: bool | int = ..., openWorkspace: bool | int = ..., projectPath: bool | int | str = ..., query: bool | int = ..., removeFileRuleEntry: str = ..., removeVariableEntry: str = ..., renderType: bool | int | tuple[str, str] = ..., renderTypeEntry: bool | int | str = ..., renderTypeList: bool | int = ..., rootDirectory: bool | int = ..., saveWorkspace: bool | int = ..., shortName: bool | int = ..., update: bool | int = ..., updateAll: bool | int = ..., variable: bool | int | tuple[str, str] = ..., variableEntry: bool | int | str = ..., variableList: bool | int = ...) -> Any: ...

@overload
def workspaceControl(*args, edit: Literal[True], actLikeMayaUIElement: bool | int = ..., checksPlugins: bool | int = ..., close: bool | int = ..., closeCommand: str | Callable = ..., collapse: bool | int = ..., dockToControl: tuple[str, str] = ..., dockToMainWindow: tuple[str, bool | int] = ..., dockToPanel: tuple[str, str, bool | int] = ..., duplicatable: bool | int = ..., floating: bool | int = ..., heightProperty: str = ..., horizontal: bool | int = ..., initCallback: str = ..., initialHeight: int = ..., initialWidth: int = ..., label: str = ..., layoutDirectionCallback: str = ..., loadImmediately: bool | int = ..., minimumHeight: int = ..., minimumWidth: int = ..., r: bool | int = ..., requiredControl: str | list[str] = ..., requiredPlugin: str | list[str] = ..., resizeHeight: int = ..., resizeWidth: int = ..., restore: bool | int = ..., stateString: str = ..., tabPosition: tuple[str, bool | int] = ..., tabToControl: tuple[str, int] = ..., uiScript: str | Callable = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., widthProperty: str = ...) -> None: ...

@overload
def workspaceControl(*args, actLikeMayaUIElement: bool | int = ..., checksPlugins: bool | int = ..., close: bool | int = ..., closeCommand: str | Callable = ..., collapse: bool | int = ..., defineTemplate: str = ..., deleteLater: bool | int = ..., dockToControl: tuple[str, str] = ..., dockToMainWindow: tuple[str, bool | int] = ..., dockToPanel: tuple[str, str, bool | int] = ..., duplicatable: bool | int = ..., exists: bool | int = ..., floating: bool | int = ..., height: bool | int = ..., heightProperty: bool | int | str = ..., horizontal: bool | int = ..., initCallback: bool | int | str = ..., initialHeight: int = ..., initialWidth: int = ..., label: bool | int | str = ..., layoutDirectionCallback: bool | int | str = ..., loadImmediately: bool | int = ..., minimumHeight: int = ..., minimumWidth: int = ..., query: bool | int = ..., r: bool | int = ..., requiredControl: str | list[str] = ..., requiredPlugin: str | list[str] = ..., resizeHeight: int = ..., resizeWidth: int = ..., restore: bool | int = ..., retain: bool | int = ..., stateString: bool | int | str = ..., tabPosition: bool | int | tuple[str, bool | int] = ..., tabToControl: tuple[str, int] = ..., uiScript: str | Callable = ..., useTemplate: str = ..., visible: bool | int = ..., visibleChangeCommand: str | Callable = ..., width: bool | int = ..., widthProperty: bool | int | str = ...) -> Any: ...

@overload
def workspaceControlState(*args, edit: Literal[True], defaultTopLeftCorner: tuple[int, int] = ..., defaultWidthHeight: tuple[int, int] = ..., height: int = ..., leftEdge: int = ..., maximized: bool | int = ..., topEdge: int = ..., topLeftCorner: tuple[int, int] = ..., width: int = ..., widthHeight: tuple[int, int] = ...) -> None: ...

@overload
def workspaceControlState(*args, defaultTopLeftCorner: bool | int | tuple[int, int] = ..., defaultWidthHeight: bool | int | tuple[int, int] = ..., exists: bool | int = ..., height: int = ..., leftEdge: int = ..., maximized: bool | int = ..., query: bool | int = ..., remove: bool | int = ..., topEdge: int = ..., topLeftCorner: bool | int | tuple[int, int] = ..., width: int = ..., widthHeight: bool | int | tuple[int, int] = ...) -> Any: ...
def workspaceLayoutManager(*args, collapseMainWindowControls: tuple[str, bool | int] = ..., current: bool | int = ..., delete: str = ..., edit: bool | int = ..., i: str = ..., listLayouts: bool | int = ..., listModuleLayouts: bool | int = ..., listUserLayouts: bool | int = ..., modified: str = ..., parentWorkspaceControl: str = ..., query: bool | int = ..., reset: bool | int = ..., restoreMainWindowControls: bool | int = ..., save: bool | int = ..., saveAs: str = ..., setCurrent: str = ..., setCurrentCallback: str = ..., setModifiedCallback: str = ..., type: str = ...) -> Any: ...
def workspacePanel(*args, defineTemplate: str = ..., edit: bool | int = ..., exists: bool | int = ..., mainWindow: bool | int = ..., query: bool | int = ..., useTemplate: str = ...) -> Any: ...
def wrinkle(*args, axis: tuple[float, float, float] = ..., branchCount: int = ..., branchDepth: int = ..., center: tuple[float, float, float] = ..., crease: str | list[str] = ..., dropoffDistance: float = ..., envelope: float = ..., randomness: float = ..., style: str = ..., thickness: float = ..., uvSpace: tuple[float, float, float, float, float] = ..., wrinkleCount: int = ..., wrinkleIntensity: float = ...) -> Any: ...

@overload
def wrinkleContext(*args, edit: Literal[True], branchCount: int = ..., branchDepth: int = ..., image1: str = ..., image2: str = ..., image3: str = ..., randomness: float = ..., style: str = ..., thickness: float = ..., wrinkleCount: int = ..., wrinkleIntensity: float = ...) -> None: ...

@overload
def wrinkleContext(*args, branchCount: int = ..., branchDepth: int = ..., exists: bool | int = ..., history: bool | int = ..., image1: bool | int | str = ..., image2: bool | int | str = ..., image3: bool | int | str = ..., name: str = ..., query: bool | int = ..., randomness: bool | int | float = ..., style: bool | int | str = ..., thickness: bool | int | float = ..., wrinkleCount: int = ..., wrinkleIntensity: bool | int | float = ...) -> Any: ...
def writeTake(*args, angle: str = ..., device: str = ..., linear: str = ..., noTime: bool | int = ..., precision: int = ..., take: str = ..., virtualDevice: str = ...) -> Any: ...
def xform(*args, absolute: bool | int = ..., boundingBox: bool | int = ..., boundingBoxInvisible: bool | int = ..., centerPivots: bool | int = ..., centerPivotsOnComponents: bool | int = ..., deletePriorHistory: bool | int = ..., euler: bool | int = ..., matrix: bool | int | tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float] = ..., objectSpace: bool | int = ..., pivots: bool | int | tuple[float, float, float] = ..., preserve: bool | int = ..., preserveUV: bool | int = ..., query: bool | int = ..., reflection: bool | int = ..., reflectionAboutBBox: bool | int = ..., reflectionAboutOrigin: bool | int = ..., reflectionAboutX: bool | int = ..., reflectionAboutY: bool | int = ..., reflectionAboutZ: bool | int = ..., reflectionTolerance: float = ..., relative: bool | int = ..., rotateAxis: bool | int | tuple[float, float, float] = ..., rotateOrder: bool | int | str = ..., rotatePivot: bool | int | tuple[float, float, float] = ..., rotateTranslation: bool | int | tuple[float, float, float] = ..., rotation: bool | int | tuple[float, float, float] = ..., scale: bool | int | tuple[float, float, float] = ..., scalePivot: bool | int | tuple[float, float, float] = ..., scaleTranslation: bool | int | tuple[float, float, float] = ..., shear: bool | int | tuple[float, float, float] = ..., translation: bool | int | tuple[float, float, float] = ..., worldSpace: bool | int = ..., worldSpaceDistance: bool | int = ..., zeroTransformPivots: bool | int = ...) -> Any: ...

@overload
def xformConstraint(*args, edit: Literal[True], alongNormal: int = ..., type: str = ...) -> None: ...

@overload
def xformConstraint(*args, alongNormal: int = ..., live: bool | int = ..., query: bool | int = ..., type: bool | int | str = ...) -> Any: ...
def xpmPicker(*args, fileName: str = ..., parent: str = ...) -> Any: ...
