import numpy
from typing import Any, ClassVar, Iterable, Mapping, Self, overload

B44A_COMPRESSION: Compression
B44_COMPRESSION: Compression
DECREASING_Y: LineOrder
DWAA_COMPRESSION: Compression
DWAB_COMPRESSION: Compression
ENVMAP_CUBE: Envmap
ENVMAP_LATLONG: Envmap
FLOAT: PixelType
HALF: PixelType
INCREASING_Y: LineOrder
MIPMAP_LEVELS: LevelMode
NO_COMPRESSION: Compression
NUM_COMPRESSION_METHODS: Compression
NUM_ENVMAPTYPES: Envmap
NUM_LEVEL_MODES: LevelMode
NUM_LINE_ORDERS: LineOrder
NUM_PIXELTYPES: PixelType
NUM_ROUNDING_MODES: LevelRoundingMode
NUM_STORAGE_TYPES: Storage
ONE_LEVEL: LevelMode
OPENEXR_VERSION: str
PIZ_COMPRESSION: Compression
PXR24_COMPRESSION: Compression
RANDOM_Y: LineOrder
RIPMAP_LEVELS: LevelMode
RLE_COMPRESSION: Compression
ROUND_DOWN: LevelRoundingMode
ROUND_UP: LevelRoundingMode
UINT: PixelType
UINT_old: int
ZIPS_COMPRESSION: Compression
ZIP_COMPRESSION: Compression
__version__: str
deepscanline: Storage
deeptile: Storage
scanlineimage: Storage
tiledimage: Storage

class Channel:
    name: str
    pLinear: int
    pixels: numpy.ndarray
    xSampling: int
    ySampling: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, xSampling: int, ySampling: int, pLinear: bool = ...) -> None: ...
    @overload
    def __init__(self, pixels: numpy.ndarray) -> None: ...
    @overload
    def __init__(self, pixels: numpy.ndarray, xSampling: int, ySampling: int, pLinear: bool = ...) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, xSampling: int, ySampling: int, pLinear: bool = ...) -> None: ...
    @overload
    def __init__(self, name: str, pixels: numpy.ndarray) -> None: ...
    @overload
    def __init__(self, name: str, pixels: numpy.ndarray, xSampling: int, ySampling: int, pLinear: bool = ...) -> None: ...
    @overload
    def type(self) -> PixelType: ...
    @overload
    def type(self, UINT, HALF, FLOAT) -> Any: ...
    @property
    def channel_index(self) -> int: ...

class Compression:
    __members__: ClassVar[dict] = ...  # read-only
    B44A_COMPRESSION: ClassVar[Compression] = ...
    B44_COMPRESSION: ClassVar[Compression] = ...
    DWAA_COMPRESSION: ClassVar[Compression] = ...
    DWAB_COMPRESSION: ClassVar[Compression] = ...
    NO_COMPRESSION: ClassVar[Compression] = ...
    NUM_COMPRESSION_METHODS: ClassVar[Compression] = ...
    PIZ_COMPRESSION: ClassVar[Compression] = ...
    PXR24_COMPRESSION: ClassVar[Compression] = ...
    RLE_COMPRESSION: ClassVar[Compression] = ...
    ZIPS_COMPRESSION: ClassVar[Compression] = ...
    ZIP_COMPRESSION: ClassVar[Compression] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Envmap:
    __members__: ClassVar[dict] = ...  # read-only
    ENVMAP_CUBE: ClassVar[Envmap] = ...
    ENVMAP_LATLONG: ClassVar[Envmap] = ...
    NUM_ENVMAPTYPES: ClassVar[Envmap] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class File:
    filename: str
    parts: list[Part]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, filename: str, separate_channels: bool = ..., header_only: bool = ...) -> None: ...
    @overload
    def __init__(self, header: dict[str, Any], channels: Mapping[str, Channel | numpy.ndarray]) -> None: ...
    @overload
    def __init__(self, parts: Iterable[Part]) -> None: ...
    def channels(self, part_index: int = ...) -> dict: ...
    def header(self, part_index: int = ...) -> dict[str, Any]: ...
    def write(self, arg0: str) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *args) -> None: ...

class InputFile:
    def __init__(self, *args, **kwargs) -> None: ...
    def channel(self, *args, **kwargs): ...
    def channels(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def header(self, *args, **kwargs): ...
    def isComplete(self, *args, **kwargs) -> bool: ...

class KeyCode:
    count: int
    filmMfcCode: int
    filmType: int
    perfOffset: int
    perfsPerCount: int
    perfsPerFrame: int
    prefix: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class LevelMode:
    __members__: ClassVar[dict] = ...  # read-only
    MIPMAP_LEVELS: ClassVar[LevelMode] = ...
    NUM_LEVEL_MODES: ClassVar[LevelMode] = ...
    ONE_LEVEL: ClassVar[LevelMode] = ...
    RIPMAP_LEVELS: ClassVar[LevelMode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class LevelRoundingMode:
    __members__: ClassVar[dict] = ...  # read-only
    NUM_ROUNDING_MODES: ClassVar[LevelRoundingMode] = ...
    ROUND_DOWN: ClassVar[LevelRoundingMode] = ...
    ROUND_UP: ClassVar[LevelRoundingMode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class LineOrder:
    __members__: ClassVar[dict] = ...  # read-only
    DECREASING_Y: ClassVar[LineOrder] = ...
    INCREASING_Y: ClassVar[LineOrder] = ...
    NUM_LINE_ORDERS: ClassVar[LineOrder] = ...
    RANDOM_Y: ClassVar[LineOrder] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class OutputFile:
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs): ...
    def currentScanLine(self, *args, **kwargs): ...
    def writePixels(self, *args, **kwargs): ...

class Part:
    channels: dict
    header: dict
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, header: dict[str, Any], channels: Mapping[str, Channel | numpy.ndarray], name: str = ...) -> None: ...
    def compression(self) -> Compression: ...
    def height(self) -> int: ...
    def name(self) -> str: ...
    def type(self) -> Storage: ...
    def width(self) -> int: ...
    @property
    def part_index(self) -> int: ...

class PixelType:
    __members__: ClassVar[dict] = ...  # read-only
    FLOAT: ClassVar[PixelType] = ...
    HALF: ClassVar[PixelType] = ...
    NUM_PIXELTYPES: ClassVar[PixelType] = ...
    UINT: ClassVar[PixelType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PreviewImage:
    pixels: numpy.ndarray[PreviewRgba]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[PreviewRgba]) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class PreviewRgba:
    a: int
    b: int
    g: int
    r: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class Rational:
    d: int
    n: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class Storage:
    __members__: ClassVar[dict] = ...  # read-only
    NUM_STORAGE_TYPES: ClassVar[Storage] = ...
    __entries: ClassVar[dict] = ...
    deepscanline: ClassVar[Storage] = ...
    deeptile: ClassVar[Storage] = ...
    scanlineimage: ClassVar[Storage] = ...
    tiledimage: ClassVar[Storage] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TileDescription:
    mode: LevelMode
    roundingMode: LevelRoundingMode
    xSize: int
    ySize: int
    def __init__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class TimeCode:
    bgf0: bool
    bgf1: bool
    bgf2: bool
    binaryGroup: int
    colorFrame: bool
    dropFrame: bool
    fieldPhase: bool
    frame: int
    hours: int
    minutes: int
    seconds: int
    userData: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: int, arg15: int, arg16: int, arg17: int) -> None: ...
    def setTimeAndFlags(self, arg0: int, arg1) -> None: ...
    def timeAndFlags(self, arg0) -> int: ...
    def __eq__(self, other: object) -> bool: ...

class error(Exception): ...

def Header(*args, **kwargs): ...
def isOpenExrFile(*args, **kwargs) -> bool: ...
